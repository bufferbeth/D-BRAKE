
SPI_QUICK_START_MASTER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014454  00003100  00003100  00003100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00017554  00017554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000474  20000000  0001755c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000034f8  20000474  000179d0  00018474  2**2
                  ALLOC
  4 .stack        00004004  2000396c  0001aec8  00018474  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018474  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001849c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00055a05  00000000  00000000  000184f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000070fa  00000000  00000000  0006defc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007e85  00000000  00000000  00074ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016d8  00000000  00000000  0007ce7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001450  00000000  00000000  0007e553  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f503  00000000  00000000  0007f9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025cba  00000000  00000000  0009eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068c99  00000000  00000000  000c4b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005390  00000000  00000000  0012d7fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003100 <_sfixed>:
    3100:	20007970 	.word	0x20007970
    3104:	00013245 	.word	0x00013245
    3108:	000132c9 	.word	0x000132c9
    310c:	0001321d 	.word	0x0001321d
	...
    312c:	000132d1 	.word	0x000132d1
	...
    3138:	000132d1 	.word	0x000132d1
    313c:	000132d1 	.word	0x000132d1
    3140:	000132d1 	.word	0x000132d1
    3144:	000132d1 	.word	0x000132d1
    3148:	000132d1 	.word	0x000132d1
    314c:	000132d1 	.word	0x000132d1
    3150:	000042dd 	.word	0x000042dd
    3154:	000132d1 	.word	0x000132d1
    3158:	000132d1 	.word	0x000132d1
    315c:	00011991 	.word	0x00011991
    3160:	000119a5 	.word	0x000119a5
    3164:	000119b9 	.word	0x000119b9
    3168:	000119cd 	.word	0x000119cd
    316c:	000119e1 	.word	0x000119e1
    3170:	000119f5 	.word	0x000119f5
    3174:	000057c9 	.word	0x000057c9
    3178:	000057dd 	.word	0x000057dd
    317c:	000057f1 	.word	0x000057f1
    3180:	00005805 	.word	0x00005805
    3184:	00005819 	.word	0x00005819
    3188:	0000582d 	.word	0x0000582d
    318c:	00005841 	.word	0x00005841
    3190:	00005855 	.word	0x00005855
    3194:	00003c5d 	.word	0x00003c5d
    3198:	000132d1 	.word	0x000132d1
    319c:	000132d1 	.word	0x000132d1
    31a0:	000132d1 	.word	0x000132d1

000031a4 <__do_global_dtors_aux>:
    31a4:	b510      	push	{r4, lr}
    31a6:	4c06      	ldr	r4, [pc, #24]	; (31c0 <__do_global_dtors_aux+0x1c>)
    31a8:	7823      	ldrb	r3, [r4, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d107      	bne.n	31be <__do_global_dtors_aux+0x1a>
    31ae:	4b05      	ldr	r3, [pc, #20]	; (31c4 <__do_global_dtors_aux+0x20>)
    31b0:	2b00      	cmp	r3, #0
    31b2:	d002      	beq.n	31ba <__do_global_dtors_aux+0x16>
    31b4:	4804      	ldr	r0, [pc, #16]	; (31c8 <__do_global_dtors_aux+0x24>)
    31b6:	e000      	b.n	31ba <__do_global_dtors_aux+0x16>
    31b8:	bf00      	nop
    31ba:	2301      	movs	r3, #1
    31bc:	7023      	strb	r3, [r4, #0]
    31be:	bd10      	pop	{r4, pc}
    31c0:	20000474 	.word	0x20000474
    31c4:	00000000 	.word	0x00000000
    31c8:	0001755c 	.word	0x0001755c

000031cc <frame_dummy>:
    31cc:	b508      	push	{r3, lr}
    31ce:	4b08      	ldr	r3, [pc, #32]	; (31f0 <frame_dummy+0x24>)
    31d0:	2b00      	cmp	r3, #0
    31d2:	d003      	beq.n	31dc <frame_dummy+0x10>
    31d4:	4807      	ldr	r0, [pc, #28]	; (31f4 <frame_dummy+0x28>)
    31d6:	4908      	ldr	r1, [pc, #32]	; (31f8 <frame_dummy+0x2c>)
    31d8:	e000      	b.n	31dc <frame_dummy+0x10>
    31da:	bf00      	nop
    31dc:	4807      	ldr	r0, [pc, #28]	; (31fc <frame_dummy+0x30>)
    31de:	6803      	ldr	r3, [r0, #0]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d003      	beq.n	31ec <frame_dummy+0x20>
    31e4:	4b06      	ldr	r3, [pc, #24]	; (3200 <frame_dummy+0x34>)
    31e6:	2b00      	cmp	r3, #0
    31e8:	d000      	beq.n	31ec <frame_dummy+0x20>
    31ea:	4798      	blx	r3
    31ec:	bd08      	pop	{r3, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00000000 	.word	0x00000000
    31f4:	0001755c 	.word	0x0001755c
    31f8:	20000478 	.word	0x20000478
    31fc:	0001755c 	.word	0x0001755c
    3200:	00000000 	.word	0x00000000

00003204 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3204:	b580      	push	{r7, lr}
    3206:	b082      	sub	sp, #8
    3208:	af00      	add	r7, sp, #0
    320a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	2200      	movs	r2, #0
    3210:	701a      	strb	r2, [r3, #0]
}
    3212:	46bd      	mov	sp, r7
    3214:	b002      	add	sp, #8
    3216:	bd80      	pop	{r7, pc}

00003218 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	1c02      	adds	r2, r0, #0
    3220:	6039      	str	r1, [r7, #0]
    3222:	1dfb      	adds	r3, r7, #7
    3224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3226:	1dfb      	adds	r3, r7, #7
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b01      	cmp	r3, #1
    322c:	d00a      	beq.n	3244 <system_apb_clock_set_mask+0x2c>
    322e:	2b02      	cmp	r3, #2
    3230:	d00f      	beq.n	3252 <system_apb_clock_set_mask+0x3a>
    3232:	2b00      	cmp	r3, #0
    3234:	d114      	bne.n	3260 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <system_apb_clock_set_mask+0x58>)
    3238:	4a0d      	ldr	r2, [pc, #52]	; (3270 <system_apb_clock_set_mask+0x58>)
    323a:	6991      	ldr	r1, [r2, #24]
    323c:	683a      	ldr	r2, [r7, #0]
    323e:	430a      	orrs	r2, r1
    3240:	619a      	str	r2, [r3, #24]
			break;
    3242:	e00f      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3244:	4b0a      	ldr	r3, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3246:	4a0a      	ldr	r2, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3248:	69d1      	ldr	r1, [r2, #28]
    324a:	683a      	ldr	r2, [r7, #0]
    324c:	430a      	orrs	r2, r1
    324e:	61da      	str	r2, [r3, #28]
			break;
    3250:	e008      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3252:	4b07      	ldr	r3, [pc, #28]	; (3270 <system_apb_clock_set_mask+0x58>)
    3254:	4a06      	ldr	r2, [pc, #24]	; (3270 <system_apb_clock_set_mask+0x58>)
    3256:	6a11      	ldr	r1, [r2, #32]
    3258:	683a      	ldr	r2, [r7, #0]
    325a:	430a      	orrs	r2, r1
    325c:	621a      	str	r2, [r3, #32]
			break;
    325e:	e001      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3260:	2317      	movs	r3, #23
    3262:	e000      	b.n	3266 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3264:	2300      	movs	r3, #0
}
    3266:	1c18      	adds	r0, r3, #0
    3268:	46bd      	mov	sp, r7
    326a:	b002      	add	sp, #8
    326c:	bd80      	pop	{r7, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	40000400 	.word	0x40000400

00003274 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3274:	b580      	push	{r7, lr}
    3276:	b082      	sub	sp, #8
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	2280      	movs	r2, #128	; 0x80
    3280:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2200      	movs	r2, #0
    3286:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	2201      	movs	r2, #1
    328c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2200      	movs	r2, #0
    3292:	70da      	strb	r2, [r3, #3]
}
    3294:	46bd      	mov	sp, r7
    3296:	b002      	add	sp, #8
    3298:	bd80      	pop	{r7, pc}
    329a:	46c0      	nop			; (mov r8, r8)

0000329c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	1c02      	adds	r2, r0, #0
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    32a8:	1dfb      	adds	r3, r7, #7
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <system_voltage_reference_enable+0x1a>
    32b0:	2b01      	cmp	r3, #1
    32b2:	d007      	beq.n	32c4 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    32b4:	e00d      	b.n	32d2 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    32b6:	4b08      	ldr	r3, [pc, #32]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32bc:	2102      	movs	r1, #2
    32be:	430a      	orrs	r2, r1
    32c0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32c2:	e006      	b.n	32d2 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    32c4:	4b04      	ldr	r3, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c6:	4a04      	ldr	r2, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32ca:	2104      	movs	r1, #4
    32cc:	430a      	orrs	r2, r1
    32ce:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32d0:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    32d2:	46bd      	mov	sp, r7
    32d4:	b002      	add	sp, #8
    32d6:	bd80      	pop	{r7, pc}
    32d8:	40000800 	.word	0x40000800

000032dc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32ea:	68fb      	ldr	r3, [r7, #12]
    32ec:	7e5b      	ldrb	r3, [r3, #25]
    32ee:	b2db      	uxtb	r3, r3
    32f0:	b2db      	uxtb	r3, r3
    32f2:	b25b      	sxtb	r3, r3
    32f4:	2b00      	cmp	r3, #0
    32f6:	da01      	bge.n	32fc <adc_is_syncing+0x20>
		return true;
    32f8:	2301      	movs	r3, #1
    32fa:	e000      	b.n	32fe <adc_is_syncing+0x22>
	}

	return false;
    32fc:	2300      	movs	r3, #0
}
    32fe:	1c18      	adds	r0, r3, #0
    3300:	46bd      	mov	sp, r7
    3302:	b004      	add	sp, #16
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)

00003308 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    3308:	b580      	push	{r7, lr}
    330a:	b082      	sub	sp, #8
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	2200      	movs	r2, #0
    3314:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	2200      	movs	r2, #0
    331a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2200      	movs	r2, #0
    3320:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	2200      	movs	r2, #0
    3326:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	2200      	movs	r2, #0
    332c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2200      	movs	r2, #0
    3332:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2200      	movs	r2, #0
    3338:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	2200      	movs	r2, #0
    333e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	2200      	movs	r2, #0
    3344:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	22c0      	movs	r2, #192	; 0xc0
    334a:	0152      	lsls	r2, r2, #5
    334c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	2200      	movs	r2, #0
    3352:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	2200      	movs	r2, #0
    335e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	2200      	movs	r2, #0
    3364:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	2200      	movs	r2, #0
    336a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    336c:	687a      	ldr	r2, [r7, #4]
    336e:	232a      	movs	r3, #42	; 0x2a
    3370:	2100      	movs	r1, #0
    3372:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	2200      	movs	r2, #0
    3378:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	2200      	movs	r2, #0
    337e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    3380:	687a      	ldr	r2, [r7, #4]
    3382:	2324      	movs	r3, #36	; 0x24
    3384:	2100      	movs	r1, #0
    3386:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	2200      	movs	r2, #0
    338c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	2200      	movs	r2, #0
    3392:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	2200      	movs	r2, #0
    3398:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    339a:	687a      	ldr	r2, [r7, #4]
    339c:	232b      	movs	r3, #43	; 0x2b
    339e:	2100      	movs	r1, #0
    33a0:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
    33a2:	687a      	ldr	r2, [r7, #4]
    33a4:	232c      	movs	r3, #44	; 0x2c
    33a6:	2100      	movs	r1, #0
    33a8:	54d1      	strb	r1, [r2, r3]
}
    33aa:	46bd      	mov	sp, r7
    33ac:	b002      	add	sp, #8
    33ae:	bd80      	pop	{r7, pc}

000033b0 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b098      	sub	sp, #96	; 0x60
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    33b8:	1c3a      	adds	r2, r7, #0
    33ba:	320c      	adds	r2, #12
    33bc:	4b15      	ldr	r3, [pc, #84]	; (3414 <_adc_configure_ain_pin+0x64>)
    33be:	1c11      	adds	r1, r2, #0
    33c0:	1c1a      	adds	r2, r3, #0
    33c2:	2350      	movs	r3, #80	; 0x50
    33c4:	1c08      	adds	r0, r1, #0
    33c6:	1c11      	adds	r1, r2, #0
    33c8:	1c1a      	adds	r2, r3, #0
    33ca:	4b13      	ldr	r3, [pc, #76]	; (3418 <_adc_configure_ain_pin+0x68>)
    33cc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    33ce:	4b13      	ldr	r3, [pc, #76]	; (341c <_adc_configure_ain_pin+0x6c>)
    33d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	2b13      	cmp	r3, #19
    33d6:	d81a      	bhi.n	340e <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    33d8:	1c3b      	adds	r3, r7, #0
    33da:	330c      	adds	r3, #12
    33dc:	687a      	ldr	r2, [r7, #4]
    33de:	0092      	lsls	r2, r2, #2
    33e0:	58d3      	ldr	r3, [r2, r3]
    33e2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    33e4:	1c3b      	adds	r3, r7, #0
    33e6:	3308      	adds	r3, #8
    33e8:	1c18      	adds	r0, r3, #0
    33ea:	4b0d      	ldr	r3, [pc, #52]	; (3420 <_adc_configure_ain_pin+0x70>)
    33ec:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    33ee:	1c3b      	adds	r3, r7, #0
    33f0:	3308      	adds	r3, #8
    33f2:	2200      	movs	r2, #0
    33f4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    33f6:	1c3b      	adds	r3, r7, #0
    33f8:	3308      	adds	r3, #8
    33fa:	2201      	movs	r2, #1
    33fc:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    33fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3400:	b2da      	uxtb	r2, r3
    3402:	1c3b      	adds	r3, r7, #0
    3404:	3308      	adds	r3, #8
    3406:	1c10      	adds	r0, r2, #0
    3408:	1c19      	adds	r1, r3, #0
    340a:	4b06      	ldr	r3, [pc, #24]	; (3424 <_adc_configure_ain_pin+0x74>)
    340c:	4798      	blx	r3
	}
}
    340e:	46bd      	mov	sp, r7
    3410:	b018      	add	sp, #96	; 0x60
    3412:	bd80      	pop	{r7, pc}
    3414:	00016f34 	.word	0x00016f34
    3418:	00016cfd 	.word	0x00016cfd
    341c:	0000ffff 	.word	0x0000ffff
    3420:	00003275 	.word	0x00003275
    3424:	000131c5 	.word	0x000131c5

00003428 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    3428:	b5b0      	push	{r4, r5, r7, lr}
    342a:	b088      	sub	sp, #32
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    3432:	1c3b      	adds	r3, r7, #0
    3434:	331f      	adds	r3, #31
    3436:	2200      	movs	r2, #0
    3438:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    343a:	2310      	movs	r3, #16
    343c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    343e:	1c3b      	adds	r3, r7, #0
    3440:	3317      	adds	r3, #23
    3442:	2200      	movs	r2, #0
    3444:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
    3446:	4bcc      	ldr	r3, [pc, #816]	; (3778 <_adc_set_config+0x350>)
    3448:	681a      	ldr	r2, [r3, #0]
    344a:	23f0      	movs	r3, #240	; 0xf0
    344c:	021b      	lsls	r3, r3, #8
    344e:	4013      	ands	r3, r2
    3450:	0b1a      	lsrs	r2, r3, #12
    3452:	1c3b      	adds	r3, r7, #0
    3454:	3313      	adds	r3, #19
    3456:	701a      	strb	r2, [r3, #0]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	60fb      	str	r3, [r7, #12]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    345e:	1c3b      	adds	r3, r7, #0
    3460:	3308      	adds	r3, #8
    3462:	1c18      	adds	r0, r3, #0
    3464:	4bc5      	ldr	r3, [pc, #788]	; (377c <_adc_set_config+0x354>)
    3466:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	781a      	ldrb	r2, [r3, #0]
    346c:	1c3b      	adds	r3, r7, #0
    346e:	3308      	adds	r3, #8
    3470:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    3472:	1c3b      	adds	r3, r7, #0
    3474:	3308      	adds	r3, #8
    3476:	2017      	movs	r0, #23
    3478:	1c19      	adds	r1, r3, #0
    347a:	4bc1      	ldr	r3, [pc, #772]	; (3780 <_adc_set_config+0x358>)
    347c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    347e:	2017      	movs	r0, #23
    3480:	4bc0      	ldr	r3, [pc, #768]	; (3784 <_adc_set_config+0x35c>)
    3482:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    3484:	683a      	ldr	r2, [r7, #0]
    3486:	232c      	movs	r3, #44	; 0x2c
    3488:	5cd3      	ldrb	r3, [r2, r3]
    348a:	2b00      	cmp	r3, #0
    348c:	d040      	beq.n	3510 <_adc_set_config+0xe8>
		uint8_t offset = config->pin_scan.offset_start_scan;
    348e:	1c3b      	adds	r3, r7, #0
    3490:	3316      	adds	r3, #22
    3492:	6839      	ldr	r1, [r7, #0]
    3494:	222b      	movs	r2, #43	; 0x2b
    3496:	5c8a      	ldrb	r2, [r1, r2]
    3498:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    349a:	683b      	ldr	r3, [r7, #0]
    349c:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    349e:	1c3b      	adds	r3, r7, #0
    34a0:	3315      	adds	r3, #21
    34a2:	1c3a      	adds	r2, r7, #0
    34a4:	3216      	adds	r2, #22
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	188a      	adds	r2, r1, r2
    34aa:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    34ac:	683a      	ldr	r2, [r7, #0]
    34ae:	232c      	movs	r3, #44	; 0x2c
    34b0:	5cd1      	ldrb	r1, [r2, r3]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    34b2:	1c3b      	adds	r3, r7, #0
    34b4:	330b      	adds	r3, #11
    34b6:	1c3a      	adds	r2, r7, #0
    34b8:	3215      	adds	r2, #21
    34ba:	7812      	ldrb	r2, [r2, #0]
    34bc:	188a      	adds	r2, r1, r2
    34be:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34c0:	e018      	b.n	34f4 <_adc_set_config+0xcc>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    34c2:	1c3b      	adds	r3, r7, #0
    34c4:	3316      	adds	r3, #22
    34c6:	781a      	ldrb	r2, [r3, #0]
    34c8:	230f      	movs	r3, #15
    34ca:	401a      	ands	r2, r3
    34cc:	683b      	ldr	r3, [r7, #0]
    34ce:	7b1b      	ldrb	r3, [r3, #12]
    34d0:	18d3      	adds	r3, r2, r3
    34d2:	1c18      	adds	r0, r3, #0
    34d4:	4bac      	ldr	r3, [pc, #688]	; (3788 <_adc_set_config+0x360>)
    34d6:	4798      	blx	r3
			start_pin++;
    34d8:	1c3b      	adds	r3, r7, #0
    34da:	3315      	adds	r3, #21
    34dc:	781a      	ldrb	r2, [r3, #0]
    34de:	1c3b      	adds	r3, r7, #0
    34e0:	3315      	adds	r3, #21
    34e2:	3201      	adds	r2, #1
    34e4:	701a      	strb	r2, [r3, #0]
			offset++;
    34e6:	1c3b      	adds	r3, r7, #0
    34e8:	3316      	adds	r3, #22
    34ea:	781a      	ldrb	r2, [r3, #0]
    34ec:	1c3b      	adds	r3, r7, #0
    34ee:	3316      	adds	r3, #22
    34f0:	3201      	adds	r2, #1
    34f2:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34f4:	1c3a      	adds	r2, r7, #0
    34f6:	3215      	adds	r2, #21
    34f8:	1c3b      	adds	r3, r7, #0
    34fa:	330b      	adds	r3, #11
    34fc:	7812      	ldrb	r2, [r2, #0]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	429a      	cmp	r2, r3
    3502:	d3de      	bcc.n	34c2 <_adc_set_config+0x9a>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	89db      	ldrh	r3, [r3, #14]
    3508:	1c18      	adds	r0, r3, #0
    350a:	4b9f      	ldr	r3, [pc, #636]	; (3788 <_adc_set_config+0x360>)
    350c:	4798      	blx	r3
    350e:	e009      	b.n	3524 <_adc_set_config+0xfc>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	7b1b      	ldrb	r3, [r3, #12]
    3514:	1c18      	adds	r0, r3, #0
    3516:	4b9c      	ldr	r3, [pc, #624]	; (3788 <_adc_set_config+0x360>)
    3518:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    351a:	683b      	ldr	r3, [r7, #0]
    351c:	89db      	ldrh	r3, [r3, #14]
    351e:	1c18      	adds	r0, r3, #0
    3520:	4b99      	ldr	r3, [pc, #612]	; (3788 <_adc_set_config+0x360>)
    3522:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    3524:	683b      	ldr	r3, [r7, #0]
    3526:	7d5b      	ldrb	r3, [r3, #21]
    3528:	009b      	lsls	r3, r3, #2
    352a:	b2da      	uxtb	r2, r3
    352c:	68fb      	ldr	r3, [r7, #12]
    352e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    3530:	683b      	ldr	r3, [r7, #0]
    3532:	7d9b      	ldrb	r3, [r3, #22]
    3534:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    3536:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    353c:	b2db      	uxtb	r3, r3
    353e:	4313      	orrs	r3, r2
    3540:	b2db      	uxtb	r3, r3
    3542:	b2da      	uxtb	r2, r3
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    3548:	683b      	ldr	r3, [r7, #0]
    354a:	791b      	ldrb	r3, [r3, #4]
    354c:	2b34      	cmp	r3, #52	; 0x34
    354e:	d85a      	bhi.n	3606 <_adc_set_config+0x1de>
    3550:	009a      	lsls	r2, r3, #2
    3552:	4b8e      	ldr	r3, [pc, #568]	; (378c <_adc_set_config+0x364>)
    3554:	18d3      	adds	r3, r2, r3
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    355a:	1c3b      	adds	r3, r7, #0
    355c:	331f      	adds	r3, #31
    355e:	683a      	ldr	r2, [r7, #0]
    3560:	7c52      	ldrb	r2, [r2, #17]
    3562:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    3564:	1c3b      	adds	r3, r7, #0
    3566:	3317      	adds	r3, #23
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	7c12      	ldrb	r2, [r2, #16]
    356c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    356e:	2310      	movs	r3, #16
    3570:	61bb      	str	r3, [r7, #24]
		break;
    3572:	e04a      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    3574:	1c3b      	adds	r3, r7, #0
    3576:	331f      	adds	r3, #31
    3578:	2201      	movs	r2, #1
    357a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    357c:	1c3b      	adds	r3, r7, #0
    357e:	3317      	adds	r3, #23
    3580:	2202      	movs	r2, #2
    3582:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    3584:	2310      	movs	r3, #16
    3586:	61bb      	str	r3, [r7, #24]
		break;
    3588:	e03f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    358a:	1c3b      	adds	r3, r7, #0
    358c:	331f      	adds	r3, #31
    358e:	2202      	movs	r2, #2
    3590:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    3592:	1c3b      	adds	r3, r7, #0
    3594:	3317      	adds	r3, #23
    3596:	2204      	movs	r2, #4
    3598:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    359a:	2310      	movs	r3, #16
    359c:	61bb      	str	r3, [r7, #24]
		break;
    359e:	e034      	b.n	360a <_adc_set_config+0x1e2>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
    35a0:	1c3b      	adds	r3, r7, #0
    35a2:	3313      	adds	r3, #19
    35a4:	781b      	ldrb	r3, [r3, #0]
    35a6:	2b02      	cmp	r3, #2
    35a8:	d804      	bhi.n	35b4 <_adc_set_config+0x18c>
			adjres = ADC_DIVIDE_RESULT_8;
    35aa:	1c3b      	adds	r3, r7, #0
    35ac:	331f      	adds	r3, #31
    35ae:	2203      	movs	r2, #3
    35b0:	701a      	strb	r2, [r3, #0]
    35b2:	e003      	b.n	35bc <_adc_set_config+0x194>
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
    35b4:	1c3b      	adds	r3, r7, #0
    35b6:	331f      	adds	r3, #31
    35b8:	2201      	movs	r2, #1
    35ba:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    35bc:	1c3b      	adds	r3, r7, #0
    35be:	3317      	adds	r3, #23
    35c0:	2206      	movs	r2, #6
    35c2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35c4:	2310      	movs	r3, #16
    35c6:	61bb      	str	r3, [r7, #24]
		break;
    35c8:	e01f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
    35ca:	1c3b      	adds	r3, r7, #0
    35cc:	3313      	adds	r3, #19
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b02      	cmp	r3, #2
    35d2:	d804      	bhi.n	35de <_adc_set_config+0x1b6>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
    35d4:	1c3b      	adds	r3, r7, #0
    35d6:	331f      	adds	r3, #31
    35d8:	2204      	movs	r2, #4
    35da:	701a      	strb	r2, [r3, #0]
    35dc:	e003      	b.n	35e6 <_adc_set_config+0x1be>
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
    35de:	1c3b      	adds	r3, r7, #0
    35e0:	331f      	adds	r3, #31
    35e2:	2200      	movs	r2, #0
    35e4:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    35e6:	1c3b      	adds	r3, r7, #0
    35e8:	3317      	adds	r3, #23
    35ea:	2208      	movs	r2, #8
    35ec:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35ee:	2310      	movs	r3, #16
    35f0:	61bb      	str	r3, [r7, #24]
		break;
    35f2:	e00a      	b.n	360a <_adc_set_config+0x1e2>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    35f4:	2330      	movs	r3, #48	; 0x30
    35f6:	61bb      	str	r3, [r7, #24]
		break;
    35f8:	e007      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    35fa:	2320      	movs	r3, #32
    35fc:	61bb      	str	r3, [r7, #24]
		break;
    35fe:	e004      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    3600:	2300      	movs	r3, #0
    3602:	61bb      	str	r3, [r7, #24]
		break;
    3604:	e001      	b.n	360a <_adc_set_config+0x1e2>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    3606:	2317      	movs	r3, #23
    3608:	e1a9      	b.n	395e <_adc_set_config+0x536>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    360a:	1c3b      	adds	r3, r7, #0
    360c:	331f      	adds	r3, #31
    360e:	781b      	ldrb	r3, [r3, #0]
    3610:	011b      	lsls	r3, r3, #4
    3612:	b2da      	uxtb	r2, r3
    3614:	2370      	movs	r3, #112	; 0x70
    3616:	4013      	ands	r3, r2
    3618:	b2da      	uxtb	r2, r3
    361a:	1c3b      	adds	r3, r7, #0
    361c:	3317      	adds	r3, #23
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	4313      	orrs	r3, r2
    3622:	b2da      	uxtb	r2, r3
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    3628:	683b      	ldr	r3, [r7, #0]
    362a:	7ddb      	ldrb	r3, [r3, #23]
    362c:	2b3f      	cmp	r3, #63	; 0x3f
    362e:	d901      	bls.n	3634 <_adc_set_config+0x20c>
		return STATUS_ERR_INVALID_ARG;
    3630:	2317      	movs	r3, #23
    3632:	e194      	b.n	395e <_adc_set_config+0x536>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	1c18      	adds	r0, r3, #0
    3642:	4b53      	ldr	r3, [pc, #332]	; (3790 <_adc_set_config+0x368>)
    3644:	4798      	blx	r3
    3646:	1c03      	adds	r3, r0, #0
    3648:	2b00      	cmp	r3, #0
    364a:	d1f8      	bne.n	363e <_adc_set_config+0x216>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    364c:	683b      	ldr	r3, [r7, #0]
    364e:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3650:	69bb      	ldr	r3, [r7, #24]
    3652:	b29b      	uxth	r3, r3
    3654:	4313      	orrs	r3, r2
    3656:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    3658:	6839      	ldr	r1, [r7, #0]
    365a:	2324      	movs	r3, #36	; 0x24
    365c:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    365e:	00db      	lsls	r3, r3, #3
    3660:	b29b      	uxth	r3, r3
    3662:	4313      	orrs	r3, r2
    3664:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    3666:	683b      	ldr	r3, [r7, #0]
    3668:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    366a:	009b      	lsls	r3, r3, #2
    366c:	b29b      	uxth	r3, r3
    366e:	4313      	orrs	r3, r2
    3670:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3676:	18db      	adds	r3, r3, r3
    3678:	b29b      	uxth	r3, r3
    367a:	4313      	orrs	r3, r2
    367c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    367e:	683b      	ldr	r3, [r7, #0]
    3680:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3682:	4313      	orrs	r3, r2
    3684:	b29a      	uxth	r2, r3
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    368a:	683b      	ldr	r3, [r7, #0]
    368c:	7e1b      	ldrb	r3, [r3, #24]
    368e:	2b00      	cmp	r3, #0
    3690:	d100      	bne.n	3694 <_adc_set_config+0x26c>
    3692:	e0bf      	b.n	3814 <_adc_set_config+0x3ec>
		switch (resolution) {
    3694:	69bb      	ldr	r3, [r7, #24]
    3696:	2b10      	cmp	r3, #16
    3698:	d100      	bne.n	369c <_adc_set_config+0x274>
    369a:	e094      	b.n	37c6 <_adc_set_config+0x39e>
    369c:	d802      	bhi.n	36a4 <_adc_set_config+0x27c>
    369e:	2b00      	cmp	r3, #0
    36a0:	d04f      	beq.n	3742 <_adc_set_config+0x31a>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36a2:	e0b7      	b.n	3814 <_adc_set_config+0x3ec>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
    36a4:	2b20      	cmp	r3, #32
    36a6:	d025      	beq.n	36f4 <_adc_set_config+0x2cc>
    36a8:	2b30      	cmp	r3, #48	; 0x30
    36aa:	d000      	beq.n	36ae <_adc_set_config+0x286>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36ac:	e0b2      	b.n	3814 <_adc_set_config+0x3ec>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	7cdb      	ldrb	r3, [r3, #19]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d013      	beq.n	36de <_adc_set_config+0x2b6>
					(config->window.window_lower_value > 127 ||
    36b6:	683b      	ldr	r3, [r7, #0]
    36b8:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ba:	2b7f      	cmp	r3, #127	; 0x7f
    36bc:	dc0d      	bgt.n	36da <_adc_set_config+0x2b2>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    36c2:	1c1a      	adds	r2, r3, #0
    36c4:	3280      	adds	r2, #128	; 0x80
    36c6:	db08      	blt.n	36da <_adc_set_config+0x2b2>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36c8:	683b      	ldr	r3, [r7, #0]
    36ca:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36cc:	2b7f      	cmp	r3, #127	; 0x7f
    36ce:	dc04      	bgt.n	36da <_adc_set_config+0x2b2>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36d4:	1c1a      	adds	r2, r3, #0
    36d6:	3280      	adds	r2, #128	; 0x80
    36d8:	da01      	bge.n	36de <_adc_set_config+0x2b6>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36da:	2317      	movs	r3, #23
    36dc:	e13f      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 255 ||
    36de:	683b      	ldr	r3, [r7, #0]
    36e0:	69db      	ldr	r3, [r3, #28]
    36e2:	2bff      	cmp	r3, #255	; 0xff
    36e4:	dc03      	bgt.n	36ee <_adc_set_config+0x2c6>
					config->window.window_upper_value > 255){
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    36ea:	2bff      	cmp	r3, #255	; 0xff
    36ec:	dd01      	ble.n	36f2 <_adc_set_config+0x2ca>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36ee:	2317      	movs	r3, #23
    36f0:	e135      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    36f2:	e08f      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    36f4:	683b      	ldr	r3, [r7, #0]
    36f6:	7cdb      	ldrb	r3, [r3, #19]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d015      	beq.n	3728 <_adc_set_config+0x300>
					(config->window.window_lower_value > 511 ||
    36fc:	683b      	ldr	r3, [r7, #0]
    36fe:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    3700:	4b24      	ldr	r3, [pc, #144]	; (3794 <_adc_set_config+0x36c>)
    3702:	429a      	cmp	r2, r3
    3704:	dc0e      	bgt.n	3724 <_adc_set_config+0x2fc>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    370a:	4b23      	ldr	r3, [pc, #140]	; (3798 <_adc_set_config+0x370>)
    370c:	429a      	cmp	r2, r3
    370e:	db09      	blt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    3710:	683b      	ldr	r3, [r7, #0]
    3712:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3714:	4b1f      	ldr	r3, [pc, #124]	; (3794 <_adc_set_config+0x36c>)
    3716:	429a      	cmp	r2, r3
    3718:	dc04      	bgt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
    371a:	683b      	ldr	r3, [r7, #0]
    371c:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    371e:	4b1f      	ldr	r3, [pc, #124]	; (379c <_adc_set_config+0x374>)
    3720:	429a      	cmp	r2, r3
    3722:	db01      	blt.n	3728 <_adc_set_config+0x300>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3724:	2317      	movs	r3, #23
    3726:	e11a      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 1023 ||
    3728:	683b      	ldr	r3, [r7, #0]
    372a:	69da      	ldr	r2, [r3, #28]
    372c:	4b1c      	ldr	r3, [pc, #112]	; (37a0 <_adc_set_config+0x378>)
    372e:	429a      	cmp	r2, r3
    3730:	dc04      	bgt.n	373c <_adc_set_config+0x314>
					config->window.window_upper_value > 1023){
    3732:	683b      	ldr	r3, [r7, #0]
    3734:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    3736:	4b1a      	ldr	r3, [pc, #104]	; (37a0 <_adc_set_config+0x378>)
    3738:	429a      	cmp	r2, r3
    373a:	dd01      	ble.n	3740 <_adc_set_config+0x318>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    373c:	2317      	movs	r3, #23
    373e:	e10e      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3740:	e068      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	7cdb      	ldrb	r3, [r3, #19]
    3746:	2b00      	cmp	r3, #0
    3748:	d030      	beq.n	37ac <_adc_set_config+0x384>
					(config->window.window_lower_value > 2047 ||
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    374e:	4b15      	ldr	r3, [pc, #84]	; (37a4 <_adc_set_config+0x37c>)
    3750:	429a      	cmp	r2, r3
    3752:	dc0e      	bgt.n	3772 <_adc_set_config+0x34a>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    3758:	4b13      	ldr	r3, [pc, #76]	; (37a8 <_adc_set_config+0x380>)
    375a:	429a      	cmp	r2, r3
    375c:	db09      	blt.n	3772 <_adc_set_config+0x34a>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3762:	4b10      	ldr	r3, [pc, #64]	; (37a4 <_adc_set_config+0x37c>)
    3764:	429a      	cmp	r2, r3
    3766:	dc04      	bgt.n	3772 <_adc_set_config+0x34a>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    376c:	4b0e      	ldr	r3, [pc, #56]	; (37a8 <_adc_set_config+0x380>)
    376e:	429a      	cmp	r2, r3
    3770:	da1c      	bge.n	37ac <_adc_set_config+0x384>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3772:	2317      	movs	r3, #23
    3774:	e0f3      	b.n	395e <_adc_set_config+0x536>
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	41002018 	.word	0x41002018
    377c:	00003205 	.word	0x00003205
    3780:	00012ea5 	.word	0x00012ea5
    3784:	00012ee5 	.word	0x00012ee5
    3788:	000033b1 	.word	0x000033b1
    378c:	00016f84 	.word	0x00016f84
    3790:	000032dd 	.word	0x000032dd
    3794:	000001ff 	.word	0x000001ff
    3798:	fffffe00 	.word	0xfffffe00
    379c:	fffffe01 	.word	0xfffffe01
    37a0:	000003ff 	.word	0x000003ff
    37a4:	000007ff 	.word	0x000007ff
    37a8:	fffff800 	.word	0xfffff800
			} else if (config->window.window_lower_value > 4095 ||
    37ac:	683b      	ldr	r3, [r7, #0]
    37ae:	69da      	ldr	r2, [r3, #28]
    37b0:	4b6d      	ldr	r3, [pc, #436]	; (3968 <_adc_set_config+0x540>)
    37b2:	429a      	cmp	r2, r3
    37b4:	dc04      	bgt.n	37c0 <_adc_set_config+0x398>
					config->window.window_upper_value > 4095){
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    37ba:	4b6b      	ldr	r3, [pc, #428]	; (3968 <_adc_set_config+0x540>)
    37bc:	429a      	cmp	r2, r3
    37be:	dd01      	ble.n	37c4 <_adc_set_config+0x39c>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37c0:	2317      	movs	r3, #23
    37c2:	e0cc      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    37c4:	e026      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37c6:	683b      	ldr	r3, [r7, #0]
    37c8:	7cdb      	ldrb	r3, [r3, #19]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d015      	beq.n	37fa <_adc_set_config+0x3d2>
					(config->window.window_lower_value > 32767 ||
    37ce:	683b      	ldr	r3, [r7, #0]
    37d0:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37d2:	4b66      	ldr	r3, [pc, #408]	; (396c <_adc_set_config+0x544>)
    37d4:	429a      	cmp	r2, r3
    37d6:	dc0e      	bgt.n	37f6 <_adc_set_config+0x3ce>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    37dc:	4b64      	ldr	r3, [pc, #400]	; (3970 <_adc_set_config+0x548>)
    37de:	429a      	cmp	r2, r3
    37e0:	db09      	blt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37e6:	4b61      	ldr	r3, [pc, #388]	; (396c <_adc_set_config+0x544>)
    37e8:	429a      	cmp	r2, r3
    37ea:	dc04      	bgt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    37ec:	683b      	ldr	r3, [r7, #0]
    37ee:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37f0:	4b5f      	ldr	r3, [pc, #380]	; (3970 <_adc_set_config+0x548>)
    37f2:	429a      	cmp	r2, r3
    37f4:	da01      	bge.n	37fa <_adc_set_config+0x3d2>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37f6:	2317      	movs	r3, #23
    37f8:	e0b1      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 65535 ||
    37fa:	683b      	ldr	r3, [r7, #0]
    37fc:	69da      	ldr	r2, [r3, #28]
    37fe:	4b5d      	ldr	r3, [pc, #372]	; (3974 <_adc_set_config+0x54c>)
    3800:	429a      	cmp	r2, r3
    3802:	dc04      	bgt.n	380e <_adc_set_config+0x3e6>
					config->window.window_upper_value > 65535){
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    3808:	4b5a      	ldr	r3, [pc, #360]	; (3974 <_adc_set_config+0x54c>)
    380a:	429a      	cmp	r2, r3
    380c:	dd01      	ble.n	3812 <_adc_set_config+0x3ea>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    380e:	2317      	movs	r3, #23
    3810:	e0a5      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3812:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    3814:	46c0      	nop			; (mov r8, r8)
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	1c18      	adds	r0, r3, #0
    381a:	4b57      	ldr	r3, [pc, #348]	; (3978 <_adc_set_config+0x550>)
    381c:	4798      	blx	r3
    381e:	1c03      	adds	r3, r0, #0
    3820:	2b00      	cmp	r3, #0
    3822:	d1f8      	bne.n	3816 <_adc_set_config+0x3ee>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	7e1a      	ldrb	r2, [r3, #24]
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    382c:	46c0      	nop			; (mov r8, r8)
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	1c18      	adds	r0, r3, #0
    3832:	4b51      	ldr	r3, [pc, #324]	; (3978 <_adc_set_config+0x550>)
    3834:	4798      	blx	r3
    3836:	1c03      	adds	r3, r0, #0
    3838:	2b00      	cmp	r3, #0
    383a:	d1f8      	bne.n	382e <_adc_set_config+0x406>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    383c:	683b      	ldr	r3, [r7, #0]
    383e:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    3840:	b29a      	uxth	r2, r3
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	1c18      	adds	r0, r3, #0
    384c:	4b4a      	ldr	r3, [pc, #296]	; (3978 <_adc_set_config+0x550>)
    384e:	4798      	blx	r3
    3850:	1c03      	adds	r3, r0, #0
    3852:	2b00      	cmp	r3, #0
    3854:	d1f8      	bne.n	3848 <_adc_set_config+0x420>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    3856:	683b      	ldr	r3, [r7, #0]
    3858:	6a1b      	ldr	r3, [r3, #32]
    385a:	b29a      	uxth	r2, r3
    385c:	68fb      	ldr	r3, [r7, #12]
    385e:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    3860:	1c3b      	adds	r3, r7, #0
    3862:	3314      	adds	r3, #20
    3864:	6839      	ldr	r1, [r7, #0]
    3866:	222c      	movs	r2, #44	; 0x2c
    3868:	5c8a      	ldrb	r2, [r1, r2]
    386a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    386c:	1c3b      	adds	r3, r7, #0
    386e:	3314      	adds	r3, #20
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d006      	beq.n	3884 <_adc_set_config+0x45c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    3876:	1c3b      	adds	r3, r7, #0
    3878:	3314      	adds	r3, #20
    387a:	781a      	ldrb	r2, [r3, #0]
    387c:	1c3b      	adds	r3, r7, #0
    387e:	3314      	adds	r3, #20
    3880:	3a01      	subs	r2, #1
    3882:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3884:	1c3b      	adds	r3, r7, #0
    3886:	3314      	adds	r3, #20
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	2b0f      	cmp	r3, #15
    388c:	d804      	bhi.n	3898 <_adc_set_config+0x470>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    388e:	683a      	ldr	r2, [r7, #0]
    3890:	232b      	movs	r3, #43	; 0x2b
    3892:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3894:	2b0f      	cmp	r3, #15
    3896:	d901      	bls.n	389c <_adc_set_config+0x474>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    3898:	2317      	movs	r3, #23
    389a:	e060      	b.n	395e <_adc_set_config+0x536>
	}

	while (adc_is_syncing(module_inst)) {
    389c:	46c0      	nop			; (mov r8, r8)
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	1c18      	adds	r0, r3, #0
    38a2:	4b35      	ldr	r3, [pc, #212]	; (3978 <_adc_set_config+0x550>)
    38a4:	4798      	blx	r3
    38a6:	1c03      	adds	r3, r0, #0
    38a8:	2b00      	cmp	r3, #0
    38aa:	d1f8      	bne.n	389e <_adc_set_config+0x476>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    38b0:	6839      	ldr	r1, [r7, #0]
    38b2:	232b      	movs	r3, #43	; 0x2b
    38b4:	5ccb      	ldrb	r3, [r1, r3]
    38b6:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38b8:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38ba:	1c3b      	adds	r3, r7, #0
    38bc:	3314      	adds	r3, #20
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    38c2:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38c4:	683b      	ldr	r3, [r7, #0]
    38c6:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38c8:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
    38ca:	683b      	ldr	r3, [r7, #0]
    38cc:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38ce:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    38d0:	68fb      	ldr	r3, [r7, #12]
    38d2:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    38d4:	683a      	ldr	r2, [r7, #0]
    38d6:	232a      	movs	r3, #42	; 0x2a
    38d8:	5cd2      	ldrb	r2, [r2, r3]
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    38de:	68fb      	ldr	r3, [r7, #12]
    38e0:	220f      	movs	r2, #15
    38e2:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    38e4:	683a      	ldr	r2, [r7, #0]
    38e6:	2324      	movs	r3, #36	; 0x24
    38e8:	5cd3      	ldrb	r3, [r2, r3]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d01d      	beq.n	392a <_adc_set_config+0x502>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    38ee:	683b      	ldr	r3, [r7, #0]
    38f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    38f2:	4b1d      	ldr	r3, [pc, #116]	; (3968 <_adc_set_config+0x540>)
    38f4:	429a      	cmp	r2, r3
    38f6:	d901      	bls.n	38fc <_adc_set_config+0x4d4>
			return STATUS_ERR_INVALID_ARG;
    38f8:	2317      	movs	r3, #23
    38fa:	e030      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    3900:	68fb      	ldr	r3, [r7, #12]
    3902:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3904:	683b      	ldr	r3, [r7, #0]
    3906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3908:	b21a      	sxth	r2, r3
    390a:	4b1c      	ldr	r3, [pc, #112]	; (397c <_adc_set_config+0x554>)
    390c:	429a      	cmp	r2, r3
    390e:	dc05      	bgt.n	391c <_adc_set_config+0x4f4>
				config->correction.offset_correction < -2048) {
    3910:	683b      	ldr	r3, [r7, #0]
    3912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3914:	b21a      	sxth	r2, r3
    3916:	4b1a      	ldr	r3, [pc, #104]	; (3980 <_adc_set_config+0x558>)
    3918:	429a      	cmp	r2, r3
    391a:	da01      	bge.n	3920 <_adc_set_config+0x4f8>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    391c:	2317      	movs	r3, #23
    391e:	e01e      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3924:	b29a      	uxth	r2, r3
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    392a:	4b16      	ldr	r3, [pc, #88]	; (3984 <_adc_set_config+0x55c>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    3930:	b29b      	uxth	r3, r3
    3932:	021b      	lsls	r3, r3, #8
    3934:	b29a      	uxth	r2, r3
    3936:	23e0      	movs	r3, #224	; 0xe0
    3938:	00db      	lsls	r3, r3, #3
    393a:	4013      	ands	r3, r2
    393c:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <_adc_set_config+0x560>)
    3940:	681a      	ldr	r2, [r3, #0]
    3942:	685b      	ldr	r3, [r3, #4]
    3944:	0158      	lsls	r0, r3, #5
    3946:	0ed4      	lsrs	r4, r2, #27
    3948:	4304      	orrs	r4, r0
    394a:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    394c:	b2a2      	uxth	r2, r4
    394e:	23ff      	movs	r3, #255	; 0xff
    3950:	4013      	ands	r3, r2
    3952:	b29b      	uxth	r3, r3
    3954:	430b      	orrs	r3, r1
    3956:	b29a      	uxth	r2, r3
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    395c:	2300      	movs	r3, #0
}
    395e:	1c18      	adds	r0, r3, #0
    3960:	46bd      	mov	sp, r7
    3962:	b008      	add	sp, #32
    3964:	bdb0      	pop	{r4, r5, r7, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	00000fff 	.word	0x00000fff
    396c:	00007fff 	.word	0x00007fff
    3970:	ffff8000 	.word	0xffff8000
    3974:	0000ffff 	.word	0x0000ffff
    3978:	000032dd 	.word	0x000032dd
    397c:	000007ff 	.word	0x000007ff
    3980:	fffff800 	.word	0xfffff800
    3984:	00806024 	.word	0x00806024
    3988:	00806020 	.word	0x00806020

0000398c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    398c:	b580      	push	{r7, lr}
    398e:	b086      	sub	sp, #24
    3990:	af00      	add	r7, sp, #0
    3992:	60f8      	str	r0, [r7, #12]
    3994:	60b9      	str	r1, [r7, #8]
    3996:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	68ba      	ldr	r2, [r7, #8]
    399c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    399e:	2380      	movs	r3, #128	; 0x80
    39a0:	025b      	lsls	r3, r3, #9
    39a2:	2002      	movs	r0, #2
    39a4:	1c19      	adds	r1, r3, #0
    39a6:	4b32      	ldr	r3, [pc, #200]	; (3a70 <adc_init+0xe4>)
    39a8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    39aa:	68bb      	ldr	r3, [r7, #8]
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	b2db      	uxtb	r3, r3
    39b0:	1c1a      	adds	r2, r3, #0
    39b2:	2301      	movs	r3, #1
    39b4:	4013      	ands	r3, r2
    39b6:	d001      	beq.n	39bc <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    39b8:	2305      	movs	r3, #5
    39ba:	e055      	b.n	3a68 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    39bc:	68bb      	ldr	r3, [r7, #8]
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	b2db      	uxtb	r3, r3
    39c2:	1c1a      	adds	r2, r3, #0
    39c4:	2302      	movs	r3, #2
    39c6:	4013      	ands	r3, r2
    39c8:	d001      	beq.n	39ce <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    39ca:	231c      	movs	r3, #28
    39cc:	e04c      	b.n	3a68 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	785a      	ldrb	r2, [r3, #1]
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	791b      	ldrb	r3, [r3, #4]
    39da:	2b00      	cmp	r3, #0
    39dc:	d102      	bne.n	39e4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    39de:	2001      	movs	r0, #1
    39e0:	4b24      	ldr	r3, [pc, #144]	; (3a74 <adc_init+0xe8>)
    39e2:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39e4:	1c3b      	adds	r3, r7, #0
    39e6:	3317      	adds	r3, #23
    39e8:	2200      	movs	r2, #0
    39ea:	701a      	strb	r2, [r3, #0]
    39ec:	e00e      	b.n	3a0c <adc_init+0x80>
		module_inst->callback[i] = NULL;
    39ee:	1c3b      	adds	r3, r7, #0
    39f0:	3317      	adds	r3, #23
    39f2:	781a      	ldrb	r2, [r3, #0]
    39f4:	68fb      	ldr	r3, [r7, #12]
    39f6:	3202      	adds	r2, #2
    39f8:	0092      	lsls	r2, r2, #2
    39fa:	2100      	movs	r1, #0
    39fc:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39fe:	1c3b      	adds	r3, r7, #0
    3a00:	3317      	adds	r3, #23
    3a02:	781a      	ldrb	r2, [r3, #0]
    3a04:	1c3b      	adds	r3, r7, #0
    3a06:	3317      	adds	r3, #23
    3a08:	3201      	adds	r2, #1
    3a0a:	701a      	strb	r2, [r3, #0]
    3a0c:	1c3b      	adds	r3, r7, #0
    3a0e:	3317      	adds	r3, #23
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	2b02      	cmp	r3, #2
    3a14:	d9eb      	bls.n	39ee <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	2200      	movs	r2, #0
    3a1a:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    3a1c:	68fb      	ldr	r3, [r7, #12]
    3a1e:	2200      	movs	r2, #0
    3a20:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    3a22:	68fb      	ldr	r3, [r7, #12]
    3a24:	2200      	movs	r2, #0
    3a26:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	2200      	movs	r2, #0
    3a2c:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    3a2e:	4b12      	ldr	r3, [pc, #72]	; (3a78 <adc_init+0xec>)
    3a30:	68fa      	ldr	r2, [r7, #12]
    3a32:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a34:	687a      	ldr	r2, [r7, #4]
    3a36:	232a      	movs	r3, #42	; 0x2a
    3a38:	5cd3      	ldrb	r3, [r2, r3]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d10a      	bne.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	7d1b      	ldrb	r3, [r3, #20]
    3a42:	2201      	movs	r2, #1
    3a44:	4053      	eors	r3, r2
    3a46:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d003      	beq.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	2201      	movs	r2, #1
    3a50:	775a      	strb	r2, [r3, #29]
    3a52:	e002      	b.n	3a5a <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	2200      	movs	r2, #0
    3a58:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    3a5a:	68fa      	ldr	r2, [r7, #12]
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	1c10      	adds	r0, r2, #0
    3a60:	1c19      	adds	r1, r3, #0
    3a62:	4b06      	ldr	r3, [pc, #24]	; (3a7c <adc_init+0xf0>)
    3a64:	4798      	blx	r3
    3a66:	1c03      	adds	r3, r0, #0
}
    3a68:	1c18      	adds	r0, r3, #0
    3a6a:	46bd      	mov	sp, r7
    3a6c:	b006      	add	sp, #24
    3a6e:	bd80      	pop	{r7, pc}
    3a70:	00003219 	.word	0x00003219
    3a74:	0000329d 	.word	0x0000329d
    3a78:	20000530 	.word	0x20000530
    3a7c:	00003429 	.word	0x00003429

00003a80 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	7e5b      	ldrb	r3, [r3, #25]
    3a92:	b2db      	uxtb	r3, r3
    3a94:	b2db      	uxtb	r3, r3
    3a96:	b25b      	sxtb	r3, r3
    3a98:	2b00      	cmp	r3, #0
    3a9a:	da01      	bge.n	3aa0 <adc_is_syncing+0x20>
		return true;
    3a9c:	2301      	movs	r3, #1
    3a9e:	e000      	b.n	3aa2 <adc_is_syncing+0x22>
	}

	return false;
    3aa0:	2300      	movs	r3, #0
}
    3aa2:	1c18      	adds	r0, r3, #0
    3aa4:	46bd      	mov	sp, r7
    3aa6:	b004      	add	sp, #16
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)

00003aac <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b084      	sub	sp, #16
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	1c18      	adds	r0, r3, #0
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <adc_start_conversion+0x44>)
    3ac2:	4798      	blx	r3
    3ac4:	1c03      	adds	r3, r0, #0
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d1f8      	bne.n	3abc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	7b1b      	ldrb	r3, [r3, #12]
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2202      	movs	r2, #2
    3ad2:	4313      	orrs	r3, r2
    3ad4:	b2da      	uxtb	r2, r3
    3ad6:	68fb      	ldr	r3, [r7, #12]
    3ad8:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	1c18      	adds	r0, r3, #0
    3ae0:	4b03      	ldr	r3, [pc, #12]	; (3af0 <adc_start_conversion+0x44>)
    3ae2:	4798      	blx	r3
    3ae4:	1c03      	adds	r3, r0, #0
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d1f8      	bne.n	3adc <adc_start_conversion+0x30>
		/* Wait for synchronization */
	}
}
    3aea:	46bd      	mov	sp, r7
    3aec:	b004      	add	sp, #16
    3aee:	bd80      	pop	{r7, pc}
    3af0:	00003a81 	.word	0x00003a81

00003af4 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b084      	sub	sp, #16
    3af8:	af00      	add	r7, sp, #0
    3afa:	6078      	str	r0, [r7, #4]
    3afc:	1c0a      	adds	r2, r1, #0
    3afe:	1cfb      	adds	r3, r7, #3
    3b00:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    3b08:	68fb      	ldr	r3, [r7, #12]
    3b0a:	1cfa      	adds	r2, r7, #3
    3b0c:	7812      	ldrb	r2, [r2, #0]
    3b0e:	75da      	strb	r2, [r3, #23]
}
    3b10:	46bd      	mov	sp, r7
    3b12:	b004      	add	sp, #16
    3b14:	bd80      	pop	{r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)

00003b18 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b084      	sub	sp, #16
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
    3b20:	1c0a      	adds	r2, r1, #0
    3b22:	1cfb      	adds	r3, r7, #3
    3b24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	1cfa      	adds	r2, r7, #3
    3b30:	7812      	ldrb	r2, [r2, #0]
    3b32:	759a      	strb	r2, [r3, #22]
}
    3b34:	46bd      	mov	sp, r7
    3b36:	b004      	add	sp, #16
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)

00003b3c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    3b3c:	b580      	push	{r7, lr}
    3b3e:	b084      	sub	sp, #16
    3b40:	af00      	add	r7, sp, #0
    3b42:	1c02      	adds	r2, r0, #0
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	781a      	ldrb	r2, [r3, #0]
    3b4c:	4b40      	ldr	r3, [pc, #256]	; (3c50 <_adc_interrupt_handler+0x114>)
    3b4e:	0092      	lsls	r2, r2, #2
    3b50:	58d3      	ldr	r3, [r2, r3]
    3b52:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    3b54:	68fb      	ldr	r3, [r7, #12]
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	7e1b      	ldrb	r3, [r3, #24]
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    3b5e:	68ba      	ldr	r2, [r7, #8]
    3b60:	2301      	movs	r3, #1
    3b62:	4013      	ands	r3, r2
    3b64:	d03e      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	7edb      	ldrb	r3, [r3, #27]
    3b6a:	1c1a      	adds	r2, r3, #0
    3b6c:	2301      	movs	r3, #1
    3b6e:	4013      	ands	r3, r2
    3b70:	d038      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	7e9b      	ldrb	r3, [r3, #26]
    3b76:	1c1a      	adds	r2, r3, #0
    3b78:	2301      	movs	r3, #1
    3b7a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b7c:	d032      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	2201      	movs	r2, #1
    3b84:	761a      	strb	r2, [r3, #24]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3b86:	68fb      	ldr	r3, [r7, #12]
    3b88:	695b      	ldr	r3, [r3, #20]
    3b8a:	1c99      	adds	r1, r3, #2
    3b8c:	68fa      	ldr	r2, [r7, #12]
    3b8e:	6151      	str	r1, [r2, #20]
    3b90:	68fa      	ldr	r2, [r7, #12]
    3b92:	6812      	ldr	r2, [r2, #0]
    3b94:	8b52      	ldrh	r2, [r2, #26]
    3b96:	b292      	uxth	r2, r2
    3b98:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	8b1b      	ldrh	r3, [r3, #24]
    3b9e:	b29b      	uxth	r3, r3
    3ba0:	3b01      	subs	r3, #1
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	68fa      	ldr	r2, [r7, #12]
    3ba6:	1c19      	adds	r1, r3, #0
    3ba8:	8311      	strh	r1, [r2, #24]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d008      	beq.n	3bc0 <_adc_interrupt_handler+0x84>
				if (module->software_trigger == true) {
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	7f5b      	ldrb	r3, [r3, #29]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d016      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
					adc_start_conversion(module);
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	1c18      	adds	r0, r3, #0
    3bba:	4b26      	ldr	r3, [pc, #152]	; (3c54 <_adc_interrupt_handler+0x118>)
    3bbc:	4798      	blx	r3
    3bbe:	e011      	b.n	3be4 <_adc_interrupt_handler+0xa8>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	7f1b      	ldrb	r3, [r3, #28]
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	2b05      	cmp	r3, #5
    3bc8:	d10c      	bne.n	3be4 <_adc_interrupt_handler+0xa8>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	2200      	movs	r2, #0
    3bce:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	1c18      	adds	r0, r3, #0
    3bd4:	2101      	movs	r1, #1
    3bd6:	4b20      	ldr	r3, [pc, #128]	; (3c58 <_adc_interrupt_handler+0x11c>)
    3bd8:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	689b      	ldr	r3, [r3, #8]
    3bde:	68fa      	ldr	r2, [r7, #12]
    3be0:	1c10      	adds	r0, r2, #0
    3be2:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3be4:	68ba      	ldr	r2, [r7, #8]
    3be6:	2304      	movs	r3, #4
    3be8:	4013      	ands	r3, r2
    3bea:	d014      	beq.n	3c16 <_adc_interrupt_handler+0xda>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2204      	movs	r2, #4
    3bf2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	7edb      	ldrb	r3, [r3, #27]
    3bf8:	1c1a      	adds	r2, r3, #0
    3bfa:	2302      	movs	r3, #2
    3bfc:	4013      	ands	r3, r2
    3bfe:	d00a      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	7e9b      	ldrb	r3, [r3, #26]
    3c04:	1c1a      	adds	r2, r3, #0
    3c06:	2302      	movs	r3, #2
    3c08:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3c0a:	d004      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3c0c:	68fb      	ldr	r3, [r7, #12]
    3c0e:	68db      	ldr	r3, [r3, #12]
    3c10:	68fa      	ldr	r2, [r7, #12]
    3c12:	1c10      	adds	r0, r2, #0
    3c14:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3c16:	68ba      	ldr	r2, [r7, #8]
    3c18:	2302      	movs	r3, #2
    3c1a:	4013      	ands	r3, r2
    3c1c:	d014      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3c1e:	68fb      	ldr	r3, [r7, #12]
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	2202      	movs	r2, #2
    3c24:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	7edb      	ldrb	r3, [r3, #27]
    3c2a:	1c1a      	adds	r2, r3, #0
    3c2c:	2304      	movs	r3, #4
    3c2e:	4013      	ands	r3, r2
    3c30:	d00a      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	7e9b      	ldrb	r3, [r3, #26]
    3c36:	1c1a      	adds	r2, r3, #0
    3c38:	2304      	movs	r3, #4
    3c3a:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c3c:	d004      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3c3e:	68fb      	ldr	r3, [r7, #12]
    3c40:	691b      	ldr	r3, [r3, #16]
    3c42:	68fa      	ldr	r2, [r7, #12]
    3c44:	1c10      	adds	r0, r2, #0
    3c46:	4798      	blx	r3
		}
	}
}
    3c48:	46bd      	mov	sp, r7
    3c4a:	b004      	add	sp, #16
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	20000530 	.word	0x20000530
    3c54:	00003aad 	.word	0x00003aad
    3c58:	00003b19 	.word	0x00003b19

00003c5c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3c60:	2000      	movs	r0, #0
    3c62:	4b02      	ldr	r3, [pc, #8]	; (3c6c <ADC_Handler+0x10>)
    3c64:	4798      	blx	r3
}
    3c66:	46bd      	mov	sp, r7
    3c68:	bd80      	pop	{r7, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	00003b3d 	.word	0x00003b3d

00003c70 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b084      	sub	sp, #16
    3c74:	af00      	add	r7, sp, #0
    3c76:	60f8      	str	r0, [r7, #12]
    3c78:	60b9      	str	r1, [r7, #8]
    3c7a:	1dfb      	adds	r3, r7, #7
    3c7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3c7e:	1dfb      	adds	r3, r7, #7
    3c80:	781a      	ldrb	r2, [r3, #0]
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	3202      	adds	r2, #2
    3c86:	0092      	lsls	r2, r2, #2
    3c88:	68b9      	ldr	r1, [r7, #8]
    3c8a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    3c8c:	68fb      	ldr	r3, [r7, #12]
    3c8e:	7e9b      	ldrb	r3, [r3, #26]
    3c90:	b2da      	uxtb	r2, r3
    3c92:	1dfb      	adds	r3, r7, #7
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2101      	movs	r1, #1
    3c98:	1c08      	adds	r0, r1, #0
    3c9a:	4098      	lsls	r0, r3
    3c9c:	1c03      	adds	r3, r0, #0
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	4313      	orrs	r3, r2
    3ca2:	b2db      	uxtb	r3, r3
    3ca4:	b2da      	uxtb	r2, r3
    3ca6:	68fb      	ldr	r3, [r7, #12]
    3ca8:	769a      	strb	r2, [r3, #26]
}
    3caa:	46bd      	mov	sp, r7
    3cac:	b004      	add	sp, #16
    3cae:	bd80      	pop	{r7, pc}

00003cb0 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	1dbb      	adds	r3, r7, #6
    3cbc:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	8b1b      	ldrh	r3, [r3, #24]
    3cc2:	b29b      	uxth	r3, r3
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d104      	bne.n	3cd2 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    3cc8:	68fb      	ldr	r3, [r7, #12]
    3cca:	7f1b      	ldrb	r3, [r3, #28]
    3ccc:	b2db      	uxtb	r3, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cce:	2b05      	cmp	r3, #5
    3cd0:	d101      	bne.n	3cd6 <adc_read_buffer_job+0x26>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    3cd2:	2305      	movs	r3, #5
    3cd4:	e017      	b.n	3d06 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    3cd6:	68fb      	ldr	r3, [r7, #12]
    3cd8:	2205      	movs	r2, #5
    3cda:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	1dba      	adds	r2, r7, #6
    3ce0:	8812      	ldrh	r2, [r2, #0]
    3ce2:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    3ce4:	68fb      	ldr	r3, [r7, #12]
    3ce6:	68ba      	ldr	r2, [r7, #8]
    3ce8:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	1c18      	adds	r0, r3, #0
    3cee:	2101      	movs	r1, #1
    3cf0:	4b07      	ldr	r3, [pc, #28]	; (3d10 <adc_read_buffer_job+0x60>)
    3cf2:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    3cf4:	68fb      	ldr	r3, [r7, #12]
    3cf6:	7f5b      	ldrb	r3, [r3, #29]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d003      	beq.n	3d04 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    3cfc:	68fb      	ldr	r3, [r7, #12]
    3cfe:	1c18      	adds	r0, r3, #0
    3d00:	4b04      	ldr	r3, [pc, #16]	; (3d14 <adc_read_buffer_job+0x64>)
    3d02:	4798      	blx	r3
	}

	return STATUS_OK;
    3d04:	2300      	movs	r3, #0
}
    3d06:	1c18      	adds	r0, r3, #0
    3d08:	46bd      	mov	sp, r7
    3d0a:	b004      	add	sp, #16
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	00003af5 	.word	0x00003af5
    3d14:	00003aad 	.word	0x00003aad

00003d18 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	b084      	sub	sp, #16
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	1c02      	adds	r2, r0, #0
    3d20:	6039      	str	r1, [r7, #0]
    3d22:	1dfb      	adds	r3, r7, #7
    3d24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    3d26:	2300      	movs	r3, #0
    3d28:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    3d2a:	4b2b      	ldr	r3, [pc, #172]	; (3dd8 <bod_set_config+0xc0>)
    3d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3d2e:	2302      	movs	r3, #2
    3d30:	4013      	ands	r3, r2
    3d32:	d005      	beq.n	3d40 <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    3d34:	4b28      	ldr	r3, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d36:	4a28      	ldr	r2, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
    3d3a:	2102      	movs	r1, #2
    3d3c:	438a      	bics	r2, r1
    3d3e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d40:	683b      	ldr	r3, [r7, #0]
    3d42:	881b      	ldrh	r3, [r3, #0]
    3d44:	1c1a      	adds	r2, r3, #0
    3d46:	683b      	ldr	r3, [r7, #0]
    3d48:	791b      	ldrb	r3, [r3, #4]
    3d4a:	431a      	orrs	r2, r3
			(uint32_t)conf->mode;
    3d4c:	683b      	ldr	r3, [r7, #0]
    3d4e:	885b      	ldrh	r3, [r3, #2]
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d50:	4313      	orrs	r3, r2
    3d52:	68fa      	ldr	r2, [r7, #12]
    3d54:	4313      	orrs	r3, r2
    3d56:	60fb      	str	r3, [r7, #12]
			(uint32_t)conf->mode;

	if (conf->mode == BOD_MODE_SAMPLED) {
    3d58:	683b      	ldr	r3, [r7, #0]
    3d5a:	885a      	ldrh	r2, [r3, #2]
    3d5c:	2380      	movs	r3, #128	; 0x80
    3d5e:	005b      	lsls	r3, r3, #1
    3d60:	429a      	cmp	r2, r3
    3d62:	d104      	bne.n	3d6e <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	0092      	lsls	r2, r2, #2
    3d6a:	4313      	orrs	r3, r2
    3d6c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	799b      	ldrb	r3, [r3, #6]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d003      	beq.n	3d7e <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	2204      	movs	r2, #4
    3d7a:	4313      	orrs	r3, r2
    3d7c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    3d7e:	683b      	ldr	r3, [r7, #0]
    3d80:	79db      	ldrb	r3, [r3, #7]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d003      	beq.n	3d8e <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	2240      	movs	r2, #64	; 0x40
    3d8a:	4313      	orrs	r3, r2
    3d8c:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    3d8e:	1dfb      	adds	r3, r7, #7
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d11a      	bne.n	3dcc <bod_set_config+0xb4>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    3d96:	683b      	ldr	r3, [r7, #0]
    3d98:	795b      	ldrb	r3, [r3, #5]
    3d9a:	2b3f      	cmp	r3, #63	; 0x3f
    3d9c:	d901      	bls.n	3da2 <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    3d9e:	2317      	movs	r3, #23
    3da0:	e015      	b.n	3dce <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    3da2:	4b0d      	ldr	r3, [pc, #52]	; (3dd8 <bod_set_config+0xc0>)
    3da4:	683a      	ldr	r2, [r7, #0]
    3da6:	7952      	ldrb	r2, [r2, #5]
    3da8:	0412      	lsls	r2, r2, #16
    3daa:	1c11      	adds	r1, r2, #0
    3dac:	22fc      	movs	r2, #252	; 0xfc
    3dae:	0392      	lsls	r2, r2, #14
    3db0:	4011      	ands	r1, r2
    3db2:	68fa      	ldr	r2, [r7, #12]
    3db4:	430a      	orrs	r2, r1
    3db6:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    3db8:	46c0      	nop			; (mov r8, r8)
    3dba:	4b07      	ldr	r3, [pc, #28]	; (3dd8 <bod_set_config+0xc0>)
    3dbc:	68da      	ldr	r2, [r3, #12]
    3dbe:	2380      	movs	r3, #128	; 0x80
    3dc0:	011b      	lsls	r3, r3, #4
    3dc2:	4013      	ands	r3, r2
    3dc4:	d0f9      	beq.n	3dba <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    3dc6:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3dc8:	2300      	movs	r3, #0
    3dca:	e000      	b.n	3dce <bod_set_config+0xb6>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    3dcc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3dce:	1c18      	adds	r0, r3, #0
    3dd0:	46bd      	mov	sp, r7
    3dd2:	b004      	add	sp, #16
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	40000800 	.word	0x40000800

00003ddc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b082      	sub	sp, #8
    3de0:	af00      	add	r7, sp, #0
    3de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	2280      	movs	r2, #128	; 0x80
    3de8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	2200      	movs	r2, #0
    3dee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	2201      	movs	r2, #1
    3df4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	2200      	movs	r2, #0
    3dfa:	70da      	strb	r2, [r3, #3]
}
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b002      	add	sp, #8
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)

00003e04 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b084      	sub	sp, #16
    3e08:	af00      	add	r7, sp, #0
    3e0a:	1c02      	adds	r2, r0, #0
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3e10:	1c3b      	adds	r3, r7, #0
    3e12:	330f      	adds	r3, #15
    3e14:	1dfa      	adds	r2, r7, #7
    3e16:	7812      	ldrb	r2, [r2, #0]
    3e18:	0952      	lsrs	r2, r2, #5
    3e1a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3e1c:	1c3b      	adds	r3, r7, #0
    3e1e:	330f      	adds	r3, #15
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d10b      	bne.n	3e3e <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e26:	4b08      	ldr	r3, [pc, #32]	; (3e48 <_extint_get_eic_from_channel+0x44>)
    3e28:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3e2a:	1c3b      	adds	r3, r7, #0
    3e2c:	330f      	adds	r3, #15
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	2210      	movs	r2, #16
    3e34:	19d2      	adds	r2, r2, r7
    3e36:	18d3      	adds	r3, r2, r3
    3e38:	3b08      	subs	r3, #8
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	e000      	b.n	3e40 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    3e3e:	2300      	movs	r3, #0
	}
}
    3e40:	1c18      	adds	r0, r3, #0
    3e42:	46bd      	mov	sp, r7
    3e44:	b004      	add	sp, #16
    3e46:	bd80      	pop	{r7, pc}
    3e48:	40001800 	.word	0x40001800

00003e4c <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e52:	4b0f      	ldr	r3, [pc, #60]	; (3e90 <extint_is_syncing+0x44>)
    3e54:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e56:	2300      	movs	r3, #0
    3e58:	607b      	str	r3, [r7, #4]
    3e5a:	e011      	b.n	3e80 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	009b      	lsls	r3, r3, #2
    3e60:	2208      	movs	r2, #8
    3e62:	19d2      	adds	r2, r2, r7
    3e64:	18d3      	adds	r3, r2, r3
    3e66:	3b08      	subs	r3, #8
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	785b      	ldrb	r3, [r3, #1]
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	b25b      	sxtb	r3, r3
    3e72:	2b00      	cmp	r3, #0
    3e74:	da01      	bge.n	3e7a <extint_is_syncing+0x2e>
			return true;
    3e76:	2301      	movs	r3, #1
    3e78:	e006      	b.n	3e88 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	3301      	adds	r3, #1
    3e7e:	607b      	str	r3, [r7, #4]
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d0ea      	beq.n	3e5c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    3e86:	2300      	movs	r3, #0
}
    3e88:	1c18      	adds	r0, r3, #0
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	40001800 	.word	0x40001800

00003e94 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2200      	movs	r2, #0
    3ea0:	701a      	strb	r2, [r3, #0]
}
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b002      	add	sp, #8
    3ea6:	bd80      	pop	{r7, pc}

00003ea8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	1c02      	adds	r2, r0, #0
    3eb0:	6039      	str	r1, [r7, #0]
    3eb2:	1dfb      	adds	r3, r7, #7
    3eb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3eb6:	1dfb      	adds	r3, r7, #7
    3eb8:	781b      	ldrb	r3, [r3, #0]
    3eba:	2b01      	cmp	r3, #1
    3ebc:	d00a      	beq.n	3ed4 <system_apb_clock_set_mask+0x2c>
    3ebe:	2b02      	cmp	r3, #2
    3ec0:	d00f      	beq.n	3ee2 <system_apb_clock_set_mask+0x3a>
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d114      	bne.n	3ef0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ec6:	4b0e      	ldr	r3, [pc, #56]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ec8:	4a0d      	ldr	r2, [pc, #52]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3eca:	6991      	ldr	r1, [r2, #24]
    3ecc:	683a      	ldr	r2, [r7, #0]
    3ece:	430a      	orrs	r2, r1
    3ed0:	619a      	str	r2, [r3, #24]
			break;
    3ed2:	e00f      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3ed4:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed6:	4a0a      	ldr	r2, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed8:	69d1      	ldr	r1, [r2, #28]
    3eda:	683a      	ldr	r2, [r7, #0]
    3edc:	430a      	orrs	r2, r1
    3ede:	61da      	str	r2, [r3, #28]
			break;
    3ee0:	e008      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3ee2:	4b07      	ldr	r3, [pc, #28]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee4:	4a06      	ldr	r2, [pc, #24]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee6:	6a11      	ldr	r1, [r2, #32]
    3ee8:	683a      	ldr	r2, [r7, #0]
    3eea:	430a      	orrs	r2, r1
    3eec:	621a      	str	r2, [r3, #32]
			break;
    3eee:	e001      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3ef0:	2317      	movs	r3, #23
    3ef2:	e000      	b.n	3ef6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3ef4:	2300      	movs	r3, #0
}
    3ef6:	1c18      	adds	r0, r3, #0
    3ef8:	46bd      	mov	sp, r7
    3efa:	b002      	add	sp, #8
    3efc:	bd80      	pop	{r7, pc}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	40000400 	.word	0x40000400

00003f04 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	1c02      	adds	r2, r0, #0
    3f0c:	1dfb      	adds	r3, r7, #7
    3f0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f10:	4b06      	ldr	r3, [pc, #24]	; (3f2c <system_interrupt_enable+0x28>)
    3f12:	1dfa      	adds	r2, r7, #7
    3f14:	7812      	ldrb	r2, [r2, #0]
    3f16:	1c11      	adds	r1, r2, #0
    3f18:	221f      	movs	r2, #31
    3f1a:	400a      	ands	r2, r1
    3f1c:	2101      	movs	r1, #1
    3f1e:	1c08      	adds	r0, r1, #0
    3f20:	4090      	lsls	r0, r2
    3f22:	1c02      	adds	r2, r0, #0
    3f24:	601a      	str	r2, [r3, #0]
}
    3f26:	46bd      	mov	sp, r7
    3f28:	b002      	add	sp, #8
    3f2a:	bd80      	pop	{r7, pc}
    3f2c:	e000e100 	.word	0xe000e100

00003f30 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b084      	sub	sp, #16
    3f34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3f36:	4b2c      	ldr	r3, [pc, #176]	; (3fe8 <_system_extint_init+0xb8>)
    3f38:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3f3a:	2000      	movs	r0, #0
    3f3c:	2140      	movs	r1, #64	; 0x40
    3f3e:	4b2b      	ldr	r3, [pc, #172]	; (3fec <_system_extint_init+0xbc>)
    3f40:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3f42:	1c3b      	adds	r3, r7, #0
    3f44:	1c18      	adds	r0, r3, #0
    3f46:	4b2a      	ldr	r3, [pc, #168]	; (3ff0 <_system_extint_init+0xc0>)
    3f48:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3f4a:	1c3b      	adds	r3, r7, #0
    3f4c:	2200      	movs	r2, #0
    3f4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3f50:	1c3b      	adds	r3, r7, #0
    3f52:	2003      	movs	r0, #3
    3f54:	1c19      	adds	r1, r3, #0
    3f56:	4b27      	ldr	r3, [pc, #156]	; (3ff4 <_system_extint_init+0xc4>)
    3f58:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3f5a:	2003      	movs	r0, #3
    3f5c:	4b26      	ldr	r3, [pc, #152]	; (3ff8 <_system_extint_init+0xc8>)
    3f5e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f60:	2300      	movs	r3, #0
    3f62:	60fb      	str	r3, [r7, #12]
    3f64:	e016      	b.n	3f94 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3f66:	68fb      	ldr	r3, [r7, #12]
    3f68:	009b      	lsls	r3, r3, #2
    3f6a:	2110      	movs	r1, #16
    3f6c:	19c9      	adds	r1, r1, r7
    3f6e:	18cb      	adds	r3, r1, r3
    3f70:	3b0c      	subs	r3, #12
    3f72:	681a      	ldr	r2, [r3, #0]
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	009b      	lsls	r3, r3, #2
    3f78:	2110      	movs	r1, #16
    3f7a:	19c9      	adds	r1, r1, r7
    3f7c:	18cb      	adds	r3, r1, r3
    3f7e:	3b0c      	subs	r3, #12
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	b2db      	uxtb	r3, r3
    3f86:	2101      	movs	r1, #1
    3f88:	430b      	orrs	r3, r1
    3f8a:	b2db      	uxtb	r3, r3
    3f8c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	3301      	adds	r3, #1
    3f92:	60fb      	str	r3, [r7, #12]
    3f94:	68fb      	ldr	r3, [r7, #12]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d0e5      	beq.n	3f66 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	4b17      	ldr	r3, [pc, #92]	; (3ffc <_system_extint_init+0xcc>)
    3f9e:	4798      	blx	r3
    3fa0:	1c03      	adds	r3, r0, #0
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d1fa      	bne.n	3f9c <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fa6:	1c3b      	adds	r3, r7, #0
    3fa8:	330b      	adds	r3, #11
    3faa:	2200      	movs	r2, #0
    3fac:	701a      	strb	r2, [r3, #0]
    3fae:	e00d      	b.n	3fcc <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    3fb0:	1c3b      	adds	r3, r7, #0
    3fb2:	330b      	adds	r3, #11
    3fb4:	781a      	ldrb	r2, [r3, #0]
    3fb6:	4b12      	ldr	r3, [pc, #72]	; (4000 <__stack_size__>)
    3fb8:	0092      	lsls	r2, r2, #2
    3fba:	2100      	movs	r1, #0
    3fbc:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fbe:	1c3b      	adds	r3, r7, #0
    3fc0:	330b      	adds	r3, #11
    3fc2:	781a      	ldrb	r2, [r3, #0]
    3fc4:	1c3b      	adds	r3, r7, #0
    3fc6:	330b      	adds	r3, #11
    3fc8:	3201      	adds	r2, #1
    3fca:	701a      	strb	r2, [r3, #0]
    3fcc:	1c3b      	adds	r3, r7, #0
    3fce:	330b      	adds	r3, #11
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2b0f      	cmp	r3, #15
    3fd4:	d9ec      	bls.n	3fb0 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3fd6:	2004      	movs	r0, #4
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <__stack_size__+0x4>)
    3fda:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3fdc:	4b0a      	ldr	r3, [pc, #40]	; (4008 <__stack_size__+0x8>)
    3fde:	4798      	blx	r3
}
    3fe0:	46bd      	mov	sp, r7
    3fe2:	b004      	add	sp, #16
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	40001800 	.word	0x40001800
    3fec:	00003ea9 	.word	0x00003ea9
    3ff0:	00003e95 	.word	0x00003e95
    3ff4:	00012ea5 	.word	0x00012ea5
    3ff8:	00012ee5 	.word	0x00012ee5
    3ffc:	00003e4d 	.word	0x00003e4d
    4000:	20000534 	.word	0x20000534
    4004:	00003f05 	.word	0x00003f05
    4008:	0000400d 	.word	0x0000400d

0000400c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4012:	4b14      	ldr	r3, [pc, #80]	; (4064 <_extint_enable+0x58>)
    4014:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4016:	2300      	movs	r3, #0
    4018:	607b      	str	r3, [r7, #4]
    401a:	e016      	b.n	404a <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	009b      	lsls	r3, r3, #2
    4020:	2108      	movs	r1, #8
    4022:	19c9      	adds	r1, r1, r7
    4024:	18cb      	adds	r3, r1, r3
    4026:	3b08      	subs	r3, #8
    4028:	681a      	ldr	r2, [r3, #0]
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	009b      	lsls	r3, r3, #2
    402e:	2108      	movs	r1, #8
    4030:	19c9      	adds	r1, r1, r7
    4032:	18cb      	adds	r3, r1, r3
    4034:	3b08      	subs	r3, #8
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	b2db      	uxtb	r3, r3
    403c:	2102      	movs	r1, #2
    403e:	430b      	orrs	r3, r1
    4040:	b2db      	uxtb	r3, r3
    4042:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	3301      	adds	r3, #1
    4048:	607b      	str	r3, [r7, #4]
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	2b00      	cmp	r3, #0
    404e:	d0e5      	beq.n	401c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <_extint_enable+0x5c>)
    4054:	4798      	blx	r3
    4056:	1c03      	adds	r3, r0, #0
    4058:	2b00      	cmp	r3, #0
    405a:	d1fa      	bne.n	4052 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    405c:	46bd      	mov	sp, r7
    405e:	b002      	add	sp, #8
    4060:	bd80      	pop	{r7, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	40001800 	.word	0x40001800
    4068:	00003e4d 	.word	0x00003e4d

0000406c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    406c:	b590      	push	{r4, r7, lr}
    406e:	b087      	sub	sp, #28
    4070:	af00      	add	r7, sp, #0
    4072:	1c02      	adds	r2, r0, #0
    4074:	6039      	str	r1, [r7, #0]
    4076:	1dfb      	adds	r3, r7, #7
    4078:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    407a:	1c3b      	adds	r3, r7, #0
    407c:	3308      	adds	r3, #8
    407e:	1c18      	adds	r0, r3, #0
    4080:	4b37      	ldr	r3, [pc, #220]	; (4160 <extint_chan_set_config+0xf4>)
    4082:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4084:	683b      	ldr	r3, [r7, #0]
    4086:	685b      	ldr	r3, [r3, #4]
    4088:	b2da      	uxtb	r2, r3
    408a:	1c3b      	adds	r3, r7, #0
    408c:	3308      	adds	r3, #8
    408e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4090:	1c3b      	adds	r3, r7, #0
    4092:	3308      	adds	r3, #8
    4094:	2200      	movs	r2, #0
    4096:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	7a1a      	ldrb	r2, [r3, #8]
    409c:	1c3b      	adds	r3, r7, #0
    409e:	3308      	adds	r3, #8
    40a0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	b2da      	uxtb	r2, r3
    40a8:	1c3b      	adds	r3, r7, #0
    40aa:	3308      	adds	r3, #8
    40ac:	1c10      	adds	r0, r2, #0
    40ae:	1c19      	adds	r1, r3, #0
    40b0:	4b2c      	ldr	r3, [pc, #176]	; (4164 <extint_chan_set_config+0xf8>)
    40b2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	1c18      	adds	r0, r3, #0
    40ba:	4b2b      	ldr	r3, [pc, #172]	; (4168 <extint_chan_set_config+0xfc>)
    40bc:	4798      	blx	r3
    40be:	1c03      	adds	r3, r0, #0
    40c0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	781a      	ldrb	r2, [r3, #0]
    40c6:	2307      	movs	r3, #7
    40c8:	4013      	ands	r3, r2
    40ca:	009b      	lsls	r3, r3, #2
    40cc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	7adb      	ldrb	r3, [r3, #11]
    40d2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    40d4:	683b      	ldr	r3, [r7, #0]
    40d6:	7a9b      	ldrb	r3, [r3, #10]
    40d8:	2b00      	cmp	r3, #0
    40da:	d003      	beq.n	40e4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    40dc:	697b      	ldr	r3, [r7, #20]
    40de:	2208      	movs	r2, #8
    40e0:	4313      	orrs	r3, r2
    40e2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    40e4:	1dfb      	adds	r3, r7, #7
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	08db      	lsrs	r3, r3, #3
    40ea:	b2db      	uxtb	r3, r3
    40ec:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    40ee:	1dfb      	adds	r3, r7, #7
    40f0:	781b      	ldrb	r3, [r3, #0]
    40f2:	08db      	lsrs	r3, r3, #3
    40f4:	b2db      	uxtb	r3, r3
    40f6:	1c19      	adds	r1, r3, #0
    40f8:	693b      	ldr	r3, [r7, #16]
    40fa:	3106      	adds	r1, #6
    40fc:	0089      	lsls	r1, r1, #2
    40fe:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4100:	68f9      	ldr	r1, [r7, #12]
    4102:	200f      	movs	r0, #15
    4104:	1c04      	adds	r4, r0, #0
    4106:	408c      	lsls	r4, r1
    4108:	1c21      	adds	r1, r4, #0
    410a:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    410c:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	6978      	ldr	r0, [r7, #20]
    4112:	1c04      	adds	r4, r0, #0
    4114:	409c      	lsls	r4, r3
    4116:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4118:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    411a:	693b      	ldr	r3, [r7, #16]
    411c:	3206      	adds	r2, #6
    411e:	0092      	lsls	r2, r2, #2
    4120:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4122:	683b      	ldr	r3, [r7, #0]
    4124:	7a5b      	ldrb	r3, [r3, #9]
    4126:	2b00      	cmp	r3, #0
    4128:	d00b      	beq.n	4142 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    412a:	693b      	ldr	r3, [r7, #16]
    412c:	695a      	ldr	r2, [r3, #20]
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2101      	movs	r1, #1
    4134:	1c08      	adds	r0, r1, #0
    4136:	4098      	lsls	r0, r3
    4138:	1c03      	adds	r3, r0, #0
    413a:	431a      	orrs	r2, r3
    413c:	693b      	ldr	r3, [r7, #16]
    413e:	615a      	str	r2, [r3, #20]
    4140:	e00b      	b.n	415a <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4142:	693b      	ldr	r3, [r7, #16]
    4144:	695b      	ldr	r3, [r3, #20]
    4146:	1dfa      	adds	r2, r7, #7
    4148:	7812      	ldrb	r2, [r2, #0]
    414a:	2101      	movs	r1, #1
    414c:	1c0c      	adds	r4, r1, #0
    414e:	4094      	lsls	r4, r2
    4150:	1c22      	adds	r2, r4, #0
    4152:	43d2      	mvns	r2, r2
    4154:	401a      	ands	r2, r3
    4156:	693b      	ldr	r3, [r7, #16]
    4158:	615a      	str	r2, [r3, #20]
	}
}
    415a:	46bd      	mov	sp, r7
    415c:	b007      	add	sp, #28
    415e:	bd90      	pop	{r4, r7, pc}
    4160:	00003ddd 	.word	0x00003ddd
    4164:	000131c5 	.word	0x000131c5
    4168:	00003e05 	.word	0x00003e05

0000416c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    416c:	b580      	push	{r7, lr}
    416e:	b084      	sub	sp, #16
    4170:	af00      	add	r7, sp, #0
    4172:	1c02      	adds	r2, r0, #0
    4174:	1dfb      	adds	r3, r7, #7
    4176:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4178:	1c3b      	adds	r3, r7, #0
    417a:	330f      	adds	r3, #15
    417c:	1dfa      	adds	r2, r7, #7
    417e:	7812      	ldrb	r2, [r2, #0]
    4180:	0952      	lsrs	r2, r2, #5
    4182:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4184:	1c3b      	adds	r3, r7, #0
    4186:	330f      	adds	r3, #15
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	d10b      	bne.n	41a6 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    418e:	4b08      	ldr	r3, [pc, #32]	; (41b0 <_extint_get_eic_from_channel+0x44>)
    4190:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4192:	1c3b      	adds	r3, r7, #0
    4194:	330f      	adds	r3, #15
    4196:	781b      	ldrb	r3, [r3, #0]
    4198:	009b      	lsls	r3, r3, #2
    419a:	2210      	movs	r2, #16
    419c:	19d2      	adds	r2, r2, r7
    419e:	18d3      	adds	r3, r2, r3
    41a0:	3b08      	subs	r3, #8
    41a2:	681b      	ldr	r3, [r3, #0]
    41a4:	e000      	b.n	41a8 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    41a6:	2300      	movs	r3, #0
	}
}
    41a8:	1c18      	adds	r0, r3, #0
    41aa:	46bd      	mov	sp, r7
    41ac:	b004      	add	sp, #16
    41ae:	bd80      	pop	{r7, pc}
    41b0:	40001800 	.word	0x40001800

000041b4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b084      	sub	sp, #16
    41b8:	af00      	add	r7, sp, #0
    41ba:	1c02      	adds	r2, r0, #0
    41bc:	1dfb      	adds	r3, r7, #7
    41be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	1c18      	adds	r0, r3, #0
    41c6:	4b0c      	ldr	r3, [pc, #48]	; (41f8 <extint_chan_is_detected+0x44>)
    41c8:	4798      	blx	r3
    41ca:	1c03      	adds	r3, r0, #0
    41cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    41ce:	1dfb      	adds	r3, r7, #7
    41d0:	781a      	ldrb	r2, [r3, #0]
    41d2:	231f      	movs	r3, #31
    41d4:	4013      	ands	r3, r2
    41d6:	2201      	movs	r2, #1
    41d8:	1c11      	adds	r1, r2, #0
    41da:	4099      	lsls	r1, r3
    41dc:	1c0b      	adds	r3, r1, #0
    41de:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	691b      	ldr	r3, [r3, #16]
    41e4:	68ba      	ldr	r2, [r7, #8]
    41e6:	4013      	ands	r3, r2
    41e8:	1e5a      	subs	r2, r3, #1
    41ea:	4193      	sbcs	r3, r2
    41ec:	b2db      	uxtb	r3, r3
}
    41ee:	1c18      	adds	r0, r3, #0
    41f0:	46bd      	mov	sp, r7
    41f2:	b004      	add	sp, #16
    41f4:	bd80      	pop	{r7, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	0000416d 	.word	0x0000416d

000041fc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b084      	sub	sp, #16
    4200:	af00      	add	r7, sp, #0
    4202:	1c02      	adds	r2, r0, #0
    4204:	1dfb      	adds	r3, r7, #7
    4206:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4208:	1dfb      	adds	r3, r7, #7
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	1c18      	adds	r0, r3, #0
    420e:	4b09      	ldr	r3, [pc, #36]	; (4234 <extint_chan_clear_detected+0x38>)
    4210:	4798      	blx	r3
    4212:	1c03      	adds	r3, r0, #0
    4214:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4216:	1dfb      	adds	r3, r7, #7
    4218:	781a      	ldrb	r2, [r3, #0]
    421a:	231f      	movs	r3, #31
    421c:	4013      	ands	r3, r2
    421e:	2201      	movs	r2, #1
    4220:	1c11      	adds	r1, r2, #0
    4222:	4099      	lsls	r1, r3
    4224:	1c0b      	adds	r3, r1, #0
    4226:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	68ba      	ldr	r2, [r7, #8]
    422c:	611a      	str	r2, [r3, #16]
}
    422e:	46bd      	mov	sp, r7
    4230:	b004      	add	sp, #16
    4232:	bd80      	pop	{r7, pc}
    4234:	0000416d 	.word	0x0000416d

00004238 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	1cfb      	adds	r3, r7, #3
    4242:	7019      	strb	r1, [r3, #0]
    4244:	1cbb      	adds	r3, r7, #2
    4246:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4248:	1cbb      	adds	r3, r7, #2
    424a:	781b      	ldrb	r3, [r3, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4250:	2317      	movs	r3, #23
    4252:	e019      	b.n	4288 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4254:	1cfb      	adds	r3, r7, #3
    4256:	781a      	ldrb	r2, [r3, #0]
    4258:	4b0d      	ldr	r3, [pc, #52]	; (4290 <extint_register_callback+0x58>)
    425a:	0092      	lsls	r2, r2, #2
    425c:	58d3      	ldr	r3, [r2, r3]
    425e:	2b00      	cmp	r3, #0
    4260:	d107      	bne.n	4272 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4262:	1cfb      	adds	r3, r7, #3
    4264:	781a      	ldrb	r2, [r3, #0]
    4266:	4b0a      	ldr	r3, [pc, #40]	; (4290 <extint_register_callback+0x58>)
    4268:	0092      	lsls	r2, r2, #2
    426a:	6879      	ldr	r1, [r7, #4]
    426c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    426e:	2300      	movs	r3, #0
    4270:	e00a      	b.n	4288 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4272:	1cfb      	adds	r3, r7, #3
    4274:	781a      	ldrb	r2, [r3, #0]
    4276:	4b06      	ldr	r3, [pc, #24]	; (4290 <extint_register_callback+0x58>)
    4278:	0092      	lsls	r2, r2, #2
    427a:	58d2      	ldr	r2, [r2, r3]
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	429a      	cmp	r2, r3
    4280:	d101      	bne.n	4286 <extint_register_callback+0x4e>
		return STATUS_OK;
    4282:	2300      	movs	r3, #0
    4284:	e000      	b.n	4288 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4286:	231d      	movs	r3, #29
}
    4288:	1c18      	adds	r0, r3, #0
    428a:	46bd      	mov	sp, r7
    428c:	b002      	add	sp, #8
    428e:	bd80      	pop	{r7, pc}
    4290:	20000534 	.word	0x20000534

00004294 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied.
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4294:	b580      	push	{r7, lr}
    4296:	b084      	sub	sp, #16
    4298:	af00      	add	r7, sp, #0
    429a:	1c0a      	adds	r2, r1, #0
    429c:	1dfb      	adds	r3, r7, #7
    429e:	1c01      	adds	r1, r0, #0
    42a0:	7019      	strb	r1, [r3, #0]
    42a2:	1dbb      	adds	r3, r7, #6
    42a4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    42a6:	1dbb      	adds	r3, r7, #6
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d10e      	bne.n	42cc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    42ae:	1dfb      	adds	r3, r7, #7
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	1c18      	adds	r0, r3, #0
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <extint_chan_enable_callback+0x44>)
    42b6:	4798      	blx	r3
    42b8:	1c03      	adds	r3, r0, #0
    42ba:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	2201      	movs	r2, #1
    42c2:	409a      	lsls	r2, r3
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    42c8:	2300      	movs	r3, #0
    42ca:	e000      	b.n	42ce <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    42cc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    42ce:	1c18      	adds	r0, r3, #0
    42d0:	46bd      	mov	sp, r7
    42d2:	b004      	add	sp, #16
    42d4:	bd80      	pop	{r7, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	0000416d 	.word	0x0000416d

000042dc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    42dc:	b580      	push	{r7, lr}
    42de:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    42e0:	4b15      	ldr	r3, [pc, #84]	; (4338 <EIC_Handler+0x5c>)
    42e2:	2200      	movs	r2, #0
    42e4:	701a      	strb	r2, [r3, #0]
    42e6:	e021      	b.n	432c <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    42e8:	4b13      	ldr	r3, [pc, #76]	; (4338 <EIC_Handler+0x5c>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	1c18      	adds	r0, r3, #0
    42ee:	4b13      	ldr	r3, [pc, #76]	; (433c <EIC_Handler+0x60>)
    42f0:	4798      	blx	r3
    42f2:	1c03      	adds	r3, r0, #0
    42f4:	2b00      	cmp	r3, #0
    42f6:	d013      	beq.n	4320 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    42f8:	4b0f      	ldr	r3, [pc, #60]	; (4338 <EIC_Handler+0x5c>)
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	1c18      	adds	r0, r3, #0
    42fe:	4b10      	ldr	r3, [pc, #64]	; (4340 <EIC_Handler+0x64>)
    4300:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4302:	4b0d      	ldr	r3, [pc, #52]	; (4338 <EIC_Handler+0x5c>)
    4304:	781b      	ldrb	r3, [r3, #0]
    4306:	1c1a      	adds	r2, r3, #0
    4308:	4b0e      	ldr	r3, [pc, #56]	; (4344 <EIC_Handler+0x68>)
    430a:	0092      	lsls	r2, r2, #2
    430c:	58d3      	ldr	r3, [r2, r3]
    430e:	2b00      	cmp	r3, #0
    4310:	d006      	beq.n	4320 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4312:	4b09      	ldr	r3, [pc, #36]	; (4338 <EIC_Handler+0x5c>)
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	1c1a      	adds	r2, r3, #0
    4318:	4b0a      	ldr	r3, [pc, #40]	; (4344 <EIC_Handler+0x68>)
    431a:	0092      	lsls	r2, r2, #2
    431c:	58d3      	ldr	r3, [r2, r3]
    431e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4320:	4b05      	ldr	r3, [pc, #20]	; (4338 <EIC_Handler+0x5c>)
    4322:	781b      	ldrb	r3, [r3, #0]
    4324:	3301      	adds	r3, #1
    4326:	b2da      	uxtb	r2, r3
    4328:	4b03      	ldr	r3, [pc, #12]	; (4338 <EIC_Handler+0x5c>)
    432a:	701a      	strb	r2, [r3, #0]
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <EIC_Handler+0x5c>)
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	2b0f      	cmp	r3, #15
    4332:	d9d9      	bls.n	42e8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}
    4338:	20000574 	.word	0x20000574
    433c:	000041b5 	.word	0x000041b5
    4340:	000041fd 	.word	0x000041fd
    4344:	20000534 	.word	0x20000534

00004348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    434e:	4b07      	ldr	r3, [pc, #28]	; (436c <nvm_is_ready+0x24>)
    4350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	7d1b      	ldrb	r3, [r3, #20]
    4356:	b2db      	uxtb	r3, r3
    4358:	1c1a      	adds	r2, r3, #0
    435a:	2301      	movs	r3, #1
    435c:	4013      	ands	r3, r2
    435e:	1e5a      	subs	r2, r3, #1
    4360:	4193      	sbcs	r3, r2
    4362:	b2db      	uxtb	r3, r3
}
    4364:	1c18      	adds	r0, r3, #0
    4366:	46bd      	mov	sp, r7
    4368:	b002      	add	sp, #8
    436a:	bd80      	pop	{r7, pc}
    436c:	41004000 	.word	0x41004000

00004370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4370:	b580      	push	{r7, lr}
    4372:	b082      	sub	sp, #8
    4374:	af00      	add	r7, sp, #0
    4376:	1c02      	adds	r2, r0, #0
    4378:	6039      	str	r1, [r7, #0]
    437a:	1dfb      	adds	r3, r7, #7
    437c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    437e:	1dfb      	adds	r3, r7, #7
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	2b01      	cmp	r3, #1
    4384:	d00a      	beq.n	439c <system_apb_clock_set_mask+0x2c>
    4386:	2b02      	cmp	r3, #2
    4388:	d00f      	beq.n	43aa <system_apb_clock_set_mask+0x3a>
    438a:	2b00      	cmp	r3, #0
    438c:	d114      	bne.n	43b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    438e:	4b0e      	ldr	r3, [pc, #56]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4390:	4a0d      	ldr	r2, [pc, #52]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4392:	6991      	ldr	r1, [r2, #24]
    4394:	683a      	ldr	r2, [r7, #0]
    4396:	430a      	orrs	r2, r1
    4398:	619a      	str	r2, [r3, #24]
			break;
    439a:	e00f      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    439c:	4b0a      	ldr	r3, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    439e:	4a0a      	ldr	r2, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43a0:	69d1      	ldr	r1, [r2, #28]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	430a      	orrs	r2, r1
    43a6:	61da      	str	r2, [r3, #28]
			break;
    43a8:	e008      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    43aa:	4b07      	ldr	r3, [pc, #28]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ac:	4a06      	ldr	r2, [pc, #24]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ae:	6a11      	ldr	r1, [r2, #32]
    43b0:	683a      	ldr	r2, [r7, #0]
    43b2:	430a      	orrs	r2, r1
    43b4:	621a      	str	r2, [r3, #32]
			break;
    43b6:	e001      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    43b8:	2317      	movs	r3, #23
    43ba:	e000      	b.n	43be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    43bc:	2300      	movs	r3, #0
}
    43be:	1c18      	adds	r0, r3, #0
    43c0:	46bd      	mov	sp, r7
    43c2:	b002      	add	sp, #8
    43c4:	bd80      	pop	{r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	40000400 	.word	0x40000400

000043cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    43d4:	4b33      	ldr	r3, [pc, #204]	; (44a4 <nvm_set_config+0xd8>)
    43d6:	60fb      	str	r3, [r7, #12]
#if (SAML21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    43d8:	2001      	movs	r0, #1
    43da:	2104      	movs	r1, #4
    43dc:	4b32      	ldr	r3, [pc, #200]	; (44a8 <nvm_set_config+0xdc>)
    43de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	8b1b      	ldrh	r3, [r3, #24]
    43e4:	b29b      	uxth	r3, r3
    43e6:	2220      	movs	r2, #32
    43e8:	32ff      	adds	r2, #255	; 0xff
    43ea:	4313      	orrs	r3, r2
    43ec:	b29a      	uxth	r2, r3
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    43f2:	4b2e      	ldr	r3, [pc, #184]	; (44ac <nvm_set_config+0xe0>)
    43f4:	4798      	blx	r3
    43f6:	1c03      	adds	r3, r0, #0
    43f8:	2201      	movs	r2, #1
    43fa:	4053      	eors	r3, r2
    43fc:	b2db      	uxtb	r3, r3
    43fe:	2b00      	cmp	r3, #0
    4400:	d001      	beq.n	4406 <nvm_set_config+0x3a>
		return STATUS_BUSY;
    4402:	2305      	movs	r3, #5
    4404:	e049      	b.n	449a <nvm_set_config+0xce>
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	021b      	lsls	r3, r3, #8
    440c:	1c1a      	adds	r2, r3, #0
    440e:	23c0      	movs	r3, #192	; 0xc0
    4410:	009b      	lsls	r3, r3, #2
    4412:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	785b      	ldrb	r3, [r3, #1]
    4418:	01db      	lsls	r3, r3, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    441a:	1c19      	adds	r1, r3, #0
    441c:	23ff      	movs	r3, #255	; 0xff
    441e:	400b      	ands	r3, r1
    4420:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	789b      	ldrb	r3, [r3, #2]
    4426:	005b      	lsls	r3, r3, #1
    4428:	1c19      	adds	r1, r3, #0
    442a:	231e      	movs	r3, #30
    442c:	400b      	ands	r3, r1
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    442e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	78db      	ldrb	r3, [r3, #3]
    4434:	1c19      	adds	r1, r3, #0
    4436:	2301      	movs	r3, #1
    4438:	400b      	ands	r3, r1
    443a:	049b      	lsls	r3, r3, #18

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    443c:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	791b      	ldrb	r3, [r3, #4]
    4442:	041b      	lsls	r3, r3, #16
    4444:	1c19      	adds	r1, r3, #0
    4446:	23c0      	movs	r3, #192	; 0xc0
    4448:	029b      	lsls	r3, r3, #10
    444a:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    444c:	431a      	orrs	r2, r3
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	605a      	str	r2, [r3, #4]
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	689b      	ldr	r3, [r3, #8]
    4456:	0c1b      	lsrs	r3, r3, #16
    4458:	1c1a      	adds	r2, r3, #0
    445a:	2307      	movs	r3, #7
    445c:	4013      	ands	r3, r2
    445e:	b2db      	uxtb	r3, r3
    4460:	2208      	movs	r2, #8
    4462:	1c11      	adds	r1, r2, #0
    4464:	4099      	lsls	r1, r3
    4466:	1c0b      	adds	r3, r1, #0
    4468:	b29a      	uxth	r2, r3
    446a:	4b11      	ldr	r3, [pc, #68]	; (44b0 <nvm_set_config+0xe4>)
    446c:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	689b      	ldr	r3, [r3, #8]
    4472:	2200      	movs	r2, #0
    4474:	4393      	bics	r3, r2
    4476:	b29a      	uxth	r2, r3
    4478:	4b0d      	ldr	r3, [pc, #52]	; (44b0 <nvm_set_config+0xe4>)
    447a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	785a      	ldrb	r2, [r3, #1]
    4480:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <nvm_set_config+0xe4>)
    4482:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	8b1b      	ldrh	r3, [r3, #24]
    4488:	b29b      	uxth	r3, r3
    448a:	1c1a      	adds	r2, r3, #0
    448c:	2380      	movs	r3, #128	; 0x80
    448e:	005b      	lsls	r3, r3, #1
    4490:	4013      	ands	r3, r2
    4492:	d001      	beq.n	4498 <nvm_set_config+0xcc>
		return STATUS_ERR_IO;
    4494:	2310      	movs	r3, #16
    4496:	e000      	b.n	449a <nvm_set_config+0xce>
	}

	return STATUS_OK;
    4498:	2300      	movs	r3, #0
}
    449a:	1c18      	adds	r0, r3, #0
    449c:	46bd      	mov	sp, r7
    449e:	b004      	add	sp, #16
    44a0:	bd80      	pop	{r7, pc}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	41004000 	.word	0x41004000
    44a8:	00004371 	.word	0x00004371
    44ac:	00004349 	.word	0x00004349
    44b0:	20000490 	.word	0x20000490

000044b4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b086      	sub	sp, #24
    44b8:	af00      	add	r7, sp, #0
    44ba:	60b9      	str	r1, [r7, #8]
    44bc:	607a      	str	r2, [r7, #4]
    44be:	1c3b      	adds	r3, r7, #0
    44c0:	330f      	adds	r3, #15
    44c2:	1c02      	adds	r2, r0, #0
    44c4:	701a      	strb	r2, [r3, #0]
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)){
    44c6:	4b32      	ldr	r3, [pc, #200]	; (4590 <nvm_execute_command+0xdc>)
    44c8:	881b      	ldrh	r3, [r3, #0]
    44ca:	4a31      	ldr	r2, [pc, #196]	; (4590 <nvm_execute_command+0xdc>)
    44cc:	8852      	ldrh	r2, [r2, #2]
    44ce:	435a      	muls	r2, r3
    44d0:	68bb      	ldr	r3, [r7, #8]
    44d2:	429a      	cmp	r2, r3
    44d4:	d201      	bcs.n	44da <nvm_execute_command+0x26>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    44d6:	2318      	movs	r3, #24
    44d8:	e056      	b.n	4588 <nvm_execute_command+0xd4>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    44da:	4b2e      	ldr	r3, [pc, #184]	; (4594 <nvm_execute_command+0xe0>)
    44dc:	617b      	str	r3, [r7, #20]

	/* turn off cache before issuing flash commands */
	temp = nvm_module->CTRLB.reg;
    44de:	697b      	ldr	r3, [r7, #20]
    44e0:	685b      	ldr	r3, [r3, #4]
    44e2:	613b      	str	r3, [r7, #16]
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
    44e4:	693b      	ldr	r3, [r7, #16]
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	02d2      	lsls	r2, r2, #11
    44ea:	431a      	orrs	r2, r3
    44ec:	697b      	ldr	r3, [r7, #20]
    44ee:	605a      	str	r2, [r3, #4]

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    44f0:	697b      	ldr	r3, [r7, #20]
    44f2:	8b1b      	ldrh	r3, [r3, #24]
    44f4:	b29b      	uxth	r3, r3
    44f6:	2220      	movs	r2, #32
    44f8:	32ff      	adds	r2, #255	; 0xff
    44fa:	4313      	orrs	r3, r2
    44fc:	b29a      	uxth	r2, r3
    44fe:	697b      	ldr	r3, [r7, #20]
    4500:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4502:	4b25      	ldr	r3, [pc, #148]	; (4598 <nvm_execute_command+0xe4>)
    4504:	4798      	blx	r3
    4506:	1c03      	adds	r3, r0, #0
    4508:	2201      	movs	r2, #1
    450a:	4053      	eors	r3, r2
    450c:	b2db      	uxtb	r3, r3
    450e:	2b00      	cmp	r3, #0
    4510:	d001      	beq.n	4516 <nvm_execute_command+0x62>
		return STATUS_BUSY;
    4512:	2305      	movs	r3, #5
    4514:	e038      	b.n	4588 <nvm_execute_command+0xd4>
	}

	switch (command) {
    4516:	1c3b      	adds	r3, r7, #0
    4518:	330f      	adds	r3, #15
    451a:	781b      	ldrb	r3, [r3, #0]
    451c:	2b45      	cmp	r3, #69	; 0x45
    451e:	d81a      	bhi.n	4556 <nvm_execute_command+0xa2>
    4520:	009a      	lsls	r2, r3, #2
    4522:	4b1e      	ldr	r3, [pc, #120]	; (459c <nvm_execute_command+0xe8>)
    4524:	18d3      	adds	r3, r2, r3
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    452a:	697b      	ldr	r3, [r7, #20]
    452c:	8b1b      	ldrh	r3, [r3, #24]
    452e:	b29b      	uxth	r3, r3
    4530:	1c1a      	adds	r2, r3, #0
    4532:	2380      	movs	r3, #128	; 0x80
    4534:	005b      	lsls	r3, r3, #1
    4536:	4013      	ands	r3, r2
    4538:	d001      	beq.n	453e <nvm_execute_command+0x8a>
				return STATUS_ERR_IO;
    453a:	2310      	movs	r3, #16
    453c:	e024      	b.n	4588 <nvm_execute_command+0xd4>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	089b      	lsrs	r3, r3, #2
    4542:	005a      	lsls	r2, r3, #1
    4544:	697b      	ldr	r3, [r7, #20]
    4546:	61da      	str	r2, [r3, #28]
			break;
    4548:	e008      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    454a:	68bb      	ldr	r3, [r7, #8]
    454c:	089b      	lsrs	r3, r3, #2
    454e:	005a      	lsls	r2, r3, #1
    4550:	697b      	ldr	r3, [r7, #20]
    4552:	61da      	str	r2, [r3, #28]
			break;
    4554:	e002      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
    4556:	2317      	movs	r3, #23
    4558:	e016      	b.n	4588 <nvm_execute_command+0xd4>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
    455a:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    455c:	1c3b      	adds	r3, r7, #0
    455e:	330f      	adds	r3, #15
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	b29b      	uxth	r3, r3
    4564:	4a0e      	ldr	r2, [pc, #56]	; (45a0 <nvm_execute_command+0xec>)
    4566:	4313      	orrs	r3, r2
    4568:	b29a      	uxth	r2, r3
    456a:	697b      	ldr	r3, [r7, #20]
    456c:	801a      	strh	r2, [r3, #0]

	/* Wait for the nvm controller to become ready */
	while (!nvm_is_ready()) {
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	4b09      	ldr	r3, [pc, #36]	; (4598 <nvm_execute_command+0xe4>)
    4572:	4798      	blx	r3
    4574:	1c03      	adds	r3, r0, #0
    4576:	2201      	movs	r2, #1
    4578:	4053      	eors	r3, r2
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d1f7      	bne.n	4570 <nvm_execute_command+0xbc>
	}

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;
    4580:	697b      	ldr	r3, [r7, #20]
    4582:	693a      	ldr	r2, [r7, #16]
    4584:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4586:	2300      	movs	r3, #0
}
    4588:	1c18      	adds	r0, r3, #0
    458a:	46bd      	mov	sp, r7
    458c:	b006      	add	sp, #24
    458e:	bd80      	pop	{r7, pc}
    4590:	20000490 	.word	0x20000490
    4594:	41004000 	.word	0x41004000
    4598:	00004349 	.word	0x00004349
    459c:	00017058 	.word	0x00017058
    45a0:	ffffa500 	.word	0xffffa500

000045a4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b088      	sub	sp, #32
    45a8:	af00      	add	r7, sp, #0
    45aa:	60f8      	str	r0, [r7, #12]
    45ac:	60b9      	str	r1, [r7, #8]
    45ae:	1dbb      	adds	r3, r7, #6
    45b0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    45b2:	4b46      	ldr	r3, [pc, #280]	; (46cc <nvm_write_buffer+0x128>)
    45b4:	881b      	ldrh	r3, [r3, #0]
    45b6:	4a45      	ldr	r2, [pc, #276]	; (46cc <nvm_write_buffer+0x128>)
    45b8:	8852      	ldrh	r2, [r2, #2]
    45ba:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	429a      	cmp	r2, r3
    45c0:	d201      	bcs.n	45c6 <nvm_write_buffer+0x22>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    45c2:	2318      	movs	r3, #24
    45c4:	e07d      	b.n	46c2 <nvm_write_buffer+0x11e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    45c6:	4b41      	ldr	r3, [pc, #260]	; (46cc <nvm_write_buffer+0x128>)
    45c8:	881b      	ldrh	r3, [r3, #0]
    45ca:	3b01      	subs	r3, #1
    45cc:	68fa      	ldr	r2, [r7, #12]
    45ce:	4013      	ands	r3, r2
    45d0:	d001      	beq.n	45d6 <nvm_write_buffer+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    45d2:	2318      	movs	r3, #24
    45d4:	e075      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
    45d6:	4b3d      	ldr	r3, [pc, #244]	; (46cc <nvm_write_buffer+0x128>)
    45d8:	881b      	ldrh	r3, [r3, #0]
    45da:	1dba      	adds	r2, r7, #6
    45dc:	8812      	ldrh	r2, [r2, #0]
    45de:	429a      	cmp	r2, r3
    45e0:	d901      	bls.n	45e6 <nvm_write_buffer+0x42>
		return STATUS_ERR_INVALID_ARG;
    45e2:	2317      	movs	r3, #23
    45e4:	e06d      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    45e6:	4b3a      	ldr	r3, [pc, #232]	; (46d0 <nvm_write_buffer+0x12c>)
    45e8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    45ea:	4b3a      	ldr	r3, [pc, #232]	; (46d4 <nvm_write_buffer+0x130>)
    45ec:	4798      	blx	r3
    45ee:	1c03      	adds	r3, r0, #0
    45f0:	2201      	movs	r2, #1
    45f2:	4053      	eors	r3, r2
    45f4:	b2db      	uxtb	r3, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	d001      	beq.n	45fe <nvm_write_buffer+0x5a>
		return STATUS_BUSY;
    45fa:	2305      	movs	r3, #5
    45fc:	e061      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    45fe:	697b      	ldr	r3, [r7, #20]
    4600:	4a35      	ldr	r2, [pc, #212]	; (46d8 <nvm_write_buffer+0x134>)
    4602:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    4604:	46c0      	nop			; (mov r8, r8)
    4606:	4b33      	ldr	r3, [pc, #204]	; (46d4 <nvm_write_buffer+0x130>)
    4608:	4798      	blx	r3
    460a:	1c03      	adds	r3, r0, #0
    460c:	2201      	movs	r2, #1
    460e:	4053      	eors	r3, r2
    4610:	b2db      	uxtb	r3, r3
    4612:	2b00      	cmp	r3, #0
    4614:	d1f7      	bne.n	4606 <nvm_write_buffer+0x62>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4616:	697b      	ldr	r3, [r7, #20]
    4618:	8b1b      	ldrh	r3, [r3, #24]
    461a:	b29b      	uxth	r3, r3
    461c:	2220      	movs	r2, #32
    461e:	32ff      	adds	r2, #255	; 0xff
    4620:	4313      	orrs	r3, r2
    4622:	b29a      	uxth	r2, r3
    4624:	697b      	ldr	r3, [r7, #20]
    4626:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    4628:	68fb      	ldr	r3, [r7, #12]
    462a:	085b      	lsrs	r3, r3, #1
    462c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    462e:	1c3b      	adds	r3, r7, #0
    4630:	331a      	adds	r3, #26
    4632:	2200      	movs	r2, #0
    4634:	801a      	strh	r2, [r3, #0]
    4636:	e030      	b.n	469a <nvm_write_buffer+0xf6>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    4638:	1c3b      	adds	r3, r7, #0
    463a:	331a      	adds	r3, #26
    463c:	881b      	ldrh	r3, [r3, #0]
    463e:	68ba      	ldr	r2, [r7, #8]
    4640:	18d3      	adds	r3, r2, r3
    4642:	781a      	ldrb	r2, [r3, #0]
    4644:	1c3b      	adds	r3, r7, #0
    4646:	3318      	adds	r3, #24
    4648:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    464a:	1c3b      	adds	r3, r7, #0
    464c:	331a      	adds	r3, #26
    464e:	881a      	ldrh	r2, [r3, #0]
    4650:	1dbb      	adds	r3, r7, #6
    4652:	881b      	ldrh	r3, [r3, #0]
    4654:	3b01      	subs	r3, #1
    4656:	429a      	cmp	r2, r3
    4658:	da10      	bge.n	467c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    465a:	1c3b      	adds	r3, r7, #0
    465c:	331a      	adds	r3, #26
    465e:	881b      	ldrh	r3, [r3, #0]
    4660:	3301      	adds	r3, #1
    4662:	68ba      	ldr	r2, [r7, #8]
    4664:	18d3      	adds	r3, r2, r3
    4666:	781b      	ldrb	r3, [r3, #0]
    4668:	021b      	lsls	r3, r3, #8
    466a:	b29a      	uxth	r2, r3
    466c:	1c3b      	adds	r3, r7, #0
    466e:	3318      	adds	r3, #24
    4670:	881b      	ldrh	r3, [r3, #0]
    4672:	4313      	orrs	r3, r2
    4674:	b29a      	uxth	r2, r3
    4676:	1c3b      	adds	r3, r7, #0
    4678:	3318      	adds	r3, #24
    467a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    467c:	69fb      	ldr	r3, [r7, #28]
    467e:	1c5a      	adds	r2, r3, #1
    4680:	61fa      	str	r2, [r7, #28]
    4682:	005b      	lsls	r3, r3, #1
    4684:	1c3a      	adds	r2, r7, #0
    4686:	3218      	adds	r2, #24
    4688:	8812      	ldrh	r2, [r2, #0]
    468a:	801a      	strh	r2, [r3, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    468c:	1c3b      	adds	r3, r7, #0
    468e:	331a      	adds	r3, #26
    4690:	1c3a      	adds	r2, r7, #0
    4692:	321a      	adds	r2, #26
    4694:	8812      	ldrh	r2, [r2, #0]
    4696:	3202      	adds	r2, #2
    4698:	801a      	strh	r2, [r3, #0]
    469a:	1c3a      	adds	r2, r7, #0
    469c:	321a      	adds	r2, #26
    469e:	1dbb      	adds	r3, r7, #6
    46a0:	8812      	ldrh	r2, [r2, #0]
    46a2:	881b      	ldrh	r3, [r3, #0]
    46a4:	429a      	cmp	r2, r3
    46a6:	d3c7      	bcc.n	4638 <nvm_write_buffer+0x94>
		NVM_MEMORY[nvm_address++] = data;
	}

	/* Perform a manual NVM write when the length of data to be programmed is
	 * less than page size */
	if (length < NVMCTRL_PAGE_SIZE) {
    46a8:	1dbb      	adds	r3, r7, #6
    46aa:	881b      	ldrh	r3, [r3, #0]
    46ac:	2b3f      	cmp	r3, #63	; 0x3f
    46ae:	d807      	bhi.n	46c0 <nvm_write_buffer+0x11c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ? 
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	2004      	movs	r0, #4
    46b4:	1c19      	adds	r1, r3, #0
    46b6:	2200      	movs	r2, #0
    46b8:	4b08      	ldr	r3, [pc, #32]	; (46dc <nvm_write_buffer+0x138>)
    46ba:	4798      	blx	r3
    46bc:	1c03      	adds	r3, r0, #0
    46be:	e000      	b.n	46c2 <nvm_write_buffer+0x11e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    46c0:	2300      	movs	r3, #0
}
    46c2:	1c18      	adds	r0, r3, #0
    46c4:	46bd      	mov	sp, r7
    46c6:	b008      	add	sp, #32
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	20000490 	.word	0x20000490
    46d0:	41004000 	.word	0x41004000
    46d4:	00004349 	.word	0x00004349
    46d8:	ffffa544 	.word	0xffffa544
    46dc:	000044b5 	.word	0x000044b5

000046e0 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    46e0:	b580      	push	{r7, lr}
    46e2:	b084      	sub	sp, #16
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    46e8:	4b1a      	ldr	r3, [pc, #104]	; (4754 <nvm_erase_row+0x74>)
    46ea:	881b      	ldrh	r3, [r3, #0]
    46ec:	4a19      	ldr	r2, [pc, #100]	; (4754 <nvm_erase_row+0x74>)
    46ee:	8852      	ldrh	r2, [r2, #2]
    46f0:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	429a      	cmp	r2, r3
    46f6:	d201      	bcs.n	46fc <nvm_erase_row+0x1c>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    46f8:	2318      	movs	r3, #24
    46fa:	e026      	b.n	474a <nvm_erase_row+0x6a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    46fc:	4b15      	ldr	r3, [pc, #84]	; (4754 <nvm_erase_row+0x74>)
    46fe:	881b      	ldrh	r3, [r3, #0]
    4700:	009b      	lsls	r3, r3, #2
    4702:	3b01      	subs	r3, #1
    4704:	687a      	ldr	r2, [r7, #4]
    4706:	4013      	ands	r3, r2
    4708:	d001      	beq.n	470e <nvm_erase_row+0x2e>
		return STATUS_ERR_BAD_ADDRESS;
    470a:	2318      	movs	r3, #24
    470c:	e01d      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    470e:	4b12      	ldr	r3, [pc, #72]	; (4758 <nvm_erase_row+0x78>)
    4710:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4712:	4b12      	ldr	r3, [pc, #72]	; (475c <nvm_erase_row+0x7c>)
    4714:	4798      	blx	r3
    4716:	1c03      	adds	r3, r0, #0
    4718:	2201      	movs	r2, #1
    471a:	4053      	eors	r3, r2
    471c:	b2db      	uxtb	r3, r3
    471e:	2b00      	cmp	r3, #0
    4720:	d001      	beq.n	4726 <nvm_erase_row+0x46>
		return STATUS_BUSY;
    4722:	2305      	movs	r3, #5
    4724:	e011      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	8b1b      	ldrh	r3, [r3, #24]
    472a:	b29b      	uxth	r3, r3
    472c:	2220      	movs	r2, #32
    472e:	32ff      	adds	r2, #255	; 0xff
    4730:	4313      	orrs	r3, r2
    4732:	b29a      	uxth	r2, r3
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	089b      	lsrs	r3, r3, #2
    473c:	005a      	lsls	r2, r3, #1
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ? 
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4742:	68fb      	ldr	r3, [r7, #12]
    4744:	4a06      	ldr	r2, [pc, #24]	; (4760 <nvm_erase_row+0x80>)
    4746:	801a      	strh	r2, [r3, #0]
#endif
	return STATUS_OK;
    4748:	2300      	movs	r3, #0
}
    474a:	1c18      	adds	r0, r3, #0
    474c:	46bd      	mov	sp, r7
    474e:	b004      	add	sp, #16
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	20000490 	.word	0x20000490
    4758:	41004000 	.word	0x41004000
    475c:	00004349 	.word	0x00004349
    4760:	ffffa502 	.word	0xffffa502

00004764 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4764:	b580      	push	{r7, lr}
    4766:	b082      	sub	sp, #8
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	2200      	movs	r2, #0
    4770:	701a      	strb	r2, [r3, #0]
}
    4772:	46bd      	mov	sp, r7
    4774:	b002      	add	sp, #8
    4776:	bd80      	pop	{r7, pc}

00004778 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4778:	b580      	push	{r7, lr}
    477a:	b082      	sub	sp, #8
    477c:	af00      	add	r7, sp, #0
    477e:	1c02      	adds	r2, r0, #0
    4780:	6039      	str	r1, [r7, #0]
    4782:	1dfb      	adds	r3, r7, #7
    4784:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4786:	1dfb      	adds	r3, r7, #7
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	2b01      	cmp	r3, #1
    478c:	d00a      	beq.n	47a4 <system_apb_clock_set_mask+0x2c>
    478e:	2b02      	cmp	r3, #2
    4790:	d00f      	beq.n	47b2 <system_apb_clock_set_mask+0x3a>
    4792:	2b00      	cmp	r3, #0
    4794:	d114      	bne.n	47c0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4796:	4b0e      	ldr	r3, [pc, #56]	; (47d0 <system_apb_clock_set_mask+0x58>)
    4798:	4a0d      	ldr	r2, [pc, #52]	; (47d0 <system_apb_clock_set_mask+0x58>)
    479a:	6991      	ldr	r1, [r2, #24]
    479c:	683a      	ldr	r2, [r7, #0]
    479e:	430a      	orrs	r2, r1
    47a0:	619a      	str	r2, [r3, #24]
			break;
    47a2:	e00f      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    47a4:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a6:	4a0a      	ldr	r2, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a8:	69d1      	ldr	r1, [r2, #28]
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	430a      	orrs	r2, r1
    47ae:	61da      	str	r2, [r3, #28]
			break;
    47b0:	e008      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    47b2:	4b07      	ldr	r3, [pc, #28]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b4:	4a06      	ldr	r2, [pc, #24]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b6:	6a11      	ldr	r1, [r2, #32]
    47b8:	683a      	ldr	r2, [r7, #0]
    47ba:	430a      	orrs	r2, r1
    47bc:	621a      	str	r2, [r3, #32]
			break;
    47be:	e001      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    47c0:	2317      	movs	r3, #23
    47c2:	e000      	b.n	47c6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    47c4:	2300      	movs	r3, #0
}
    47c6:	1c18      	adds	r0, r3, #0
    47c8:	46bd      	mov	sp, r7
    47ca:	b002      	add	sp, #8
    47cc:	bd80      	pop	{r7, pc}
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	40000400 	.word	0x40000400

000047d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b082      	sub	sp, #8
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	2280      	movs	r2, #128	; 0x80
    47e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	2200      	movs	r2, #0
    47e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	2201      	movs	r2, #1
    47ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	2200      	movs	r2, #0
    47f2:	70da      	strb	r2, [r3, #3]
}
    47f4:	46bd      	mov	sp, r7
    47f6:	b002      	add	sp, #8
    47f8:	bd80      	pop	{r7, pc}
    47fa:	46c0      	nop			; (mov r8, r8)

000047fc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4800:	4b05      	ldr	r3, [pc, #20]	; (4818 <system_is_debugger_present+0x1c>)
    4802:	789b      	ldrb	r3, [r3, #2]
    4804:	b2db      	uxtb	r3, r3
    4806:	1c1a      	adds	r2, r3, #0
    4808:	2302      	movs	r3, #2
    480a:	4013      	ands	r3, r2
    480c:	1e5a      	subs	r2, r3, #1
    480e:	4193      	sbcs	r3, r2
    4810:	b2db      	uxtb	r3, r3
}
    4812:	1c18      	adds	r0, r3, #0
    4814:	46bd      	mov	sp, r7
    4816:	bd80      	pop	{r7, pc}
    4818:	41002000 	.word	0x41002000

0000481c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    481c:	b580      	push	{r7, lr}
    481e:	b084      	sub	sp, #16
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	8a1b      	ldrh	r3, [r3, #16]
    482e:	b29b      	uxth	r3, r3
    4830:	1c1a      	adds	r2, r3, #0
    4832:	2380      	movs	r3, #128	; 0x80
    4834:	021b      	lsls	r3, r3, #8
    4836:	4013      	ands	r3, r2
    4838:	1e5a      	subs	r2, r3, #1
    483a:	4193      	sbcs	r3, r2
    483c:	b2db      	uxtb	r3, r3
#endif
}
    483e:	1c18      	adds	r0, r3, #0
    4840:	46bd      	mov	sp, r7
    4842:	b004      	add	sp, #16
    4844:	bd80      	pop	{r7, pc}
    4846:	46c0      	nop			; (mov r8, r8)

00004848 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4848:	b580      	push	{r7, lr}
    484a:	b082      	sub	sp, #8
    484c:	af00      	add	r7, sp, #0
    484e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4850:	46c0      	nop			; (mov r8, r8)
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	1c18      	adds	r0, r3, #0
    4856:	4b04      	ldr	r3, [pc, #16]	; (4868 <_usart_wait_for_sync+0x20>)
    4858:	4798      	blx	r3
    485a:	1c03      	adds	r3, r0, #0
    485c:	2b00      	cmp	r3, #0
    485e:	d1f8      	bne.n	4852 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4860:	46bd      	mov	sp, r7
    4862:	b002      	add	sp, #8
    4864:	bd80      	pop	{r7, pc}
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	0000481d 	.word	0x0000481d

0000486c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    486c:	b5b0      	push	{r4, r5, r7, lr}
    486e:	b08c      	sub	sp, #48	; 0x30
    4870:	af02      	add	r7, sp, #8
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	681b      	ldr	r3, [r3, #0]
    487a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	1c18      	adds	r0, r3, #0
    4882:	4b6d      	ldr	r3, [pc, #436]	; (4a38 <_usart_set_config+0x1cc>)
    4884:	4798      	blx	r3
    4886:	1c03      	adds	r3, r0, #0
    4888:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    488a:	697b      	ldr	r3, [r7, #20]
    488c:	330d      	adds	r3, #13
    488e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4890:	2300      	movs	r3, #0
    4892:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4894:	2300      	movs	r3, #0
    4896:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    4898:	1c3b      	adds	r3, r7, #0
    489a:	330c      	adds	r3, #12
    489c:	2200      	movs	r2, #0
    489e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48a0:	1c3b      	adds	r3, r7, #0
    48a2:	330f      	adds	r3, #15
    48a4:	2200      	movs	r2, #0
    48a6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48a8:	1c3b      	adds	r3, r7, #0
    48aa:	330e      	adds	r3, #14
    48ac:	2210      	movs	r2, #16
    48ae:	701a      	strb	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b0:	683b      	ldr	r3, [r7, #0]
    48b2:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b8:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	7d9b      	ldrb	r3, [r3, #22]
    48be:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48c0:	4313      	orrs	r3, r2
    48c2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    48c4:	1c3b      	adds	r3, r7, #0
    48c6:	331f      	adds	r3, #31
    48c8:	2200      	movs	r2, #0
    48ca:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	685b      	ldr	r3, [r3, #4]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d01f      	beq.n	4914 <_usart_set_config+0xa8>
    48d4:	2280      	movs	r2, #128	; 0x80
    48d6:	0552      	lsls	r2, r2, #21
    48d8:	4293      	cmp	r3, r2
    48da:	d14c      	bne.n	4976 <_usart_set_config+0x10a>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    48dc:	683b      	ldr	r3, [r7, #0]
    48de:	7ddb      	ldrb	r3, [r3, #23]
    48e0:	2201      	movs	r2, #1
    48e2:	4053      	eors	r3, r2
    48e4:	b2db      	uxtb	r3, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	d013      	beq.n	4912 <_usart_set_config+0xa6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    48ea:	683b      	ldr	r3, [r7, #0]
    48ec:	691d      	ldr	r5, [r3, #16]
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	b2db      	uxtb	r3, r3
    48f2:	1c18      	adds	r0, r3, #0
    48f4:	4b51      	ldr	r3, [pc, #324]	; (4a3c <_usart_set_config+0x1d0>)
    48f6:	4798      	blx	r3
    48f8:	1c02      	adds	r2, r0, #0
    48fa:	1c3c      	adds	r4, r7, #0
    48fc:	341f      	adds	r4, #31
    48fe:	1c3b      	adds	r3, r7, #0
    4900:	330c      	adds	r3, #12
    4902:	1c28      	adds	r0, r5, #0
    4904:	1c11      	adds	r1, r2, #0
    4906:	1c1a      	adds	r2, r3, #0
    4908:	4b4d      	ldr	r3, [pc, #308]	; (4a40 <_usart_set_config+0x1d4>)
    490a:	4798      	blx	r3
    490c:	1c03      	adds	r3, r0, #0
    490e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4910:	e031      	b.n	4976 <_usart_set_config+0x10a>
    4912:	e030      	b.n	4976 <_usart_set_config+0x10a>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4914:	683b      	ldr	r3, [r7, #0]
    4916:	7ddb      	ldrb	r3, [r3, #23]
    4918:	2b00      	cmp	r3, #0
    491a:	d013      	beq.n	4944 <_usart_set_config+0xd8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	6918      	ldr	r0, [r3, #16]
    4920:	683b      	ldr	r3, [r7, #0]
    4922:	6999      	ldr	r1, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    4924:	1c3c      	adds	r4, r7, #0
    4926:	341f      	adds	r4, #31
    4928:	1c3a      	adds	r2, r7, #0
    492a:	320c      	adds	r2, #12
    492c:	1c3b      	adds	r3, r7, #0
    492e:	330f      	adds	r3, #15
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	1c3d      	adds	r5, r7, #0
    4934:	350e      	adds	r5, #14
    4936:	782d      	ldrb	r5, [r5, #0]
    4938:	9500      	str	r5, [sp, #0]
    493a:	4d42      	ldr	r5, [pc, #264]	; (4a44 <_usart_set_config+0x1d8>)
    493c:	47a8      	blx	r5
    493e:	1c03      	adds	r3, r0, #0
    4940:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4942:	e017      	b.n	4974 <_usart_set_config+0x108>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4944:	683b      	ldr	r3, [r7, #0]
    4946:	691d      	ldr	r5, [r3, #16]
    4948:	693b      	ldr	r3, [r7, #16]
    494a:	b2db      	uxtb	r3, r3
    494c:	1c18      	adds	r0, r3, #0
    494e:	4b3b      	ldr	r3, [pc, #236]	; (4a3c <_usart_set_config+0x1d0>)
    4950:	4798      	blx	r3
    4952:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4954:	1c3c      	adds	r4, r7, #0
    4956:	341f      	adds	r4, #31
    4958:	1c3a      	adds	r2, r7, #0
    495a:	320c      	adds	r2, #12
    495c:	1c3b      	adds	r3, r7, #0
    495e:	330f      	adds	r3, #15
    4960:	781b      	ldrb	r3, [r3, #0]
    4962:	1c38      	adds	r0, r7, #0
    4964:	300e      	adds	r0, #14
    4966:	7800      	ldrb	r0, [r0, #0]
    4968:	9000      	str	r0, [sp, #0]
    496a:	1c28      	adds	r0, r5, #0
    496c:	4d35      	ldr	r5, [pc, #212]	; (4a44 <_usart_set_config+0x1d8>)
    496e:	47a8      	blx	r5
    4970:	1c03      	adds	r3, r0, #0
    4972:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4974:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4976:	1c3b      	adds	r3, r7, #0
    4978:	331f      	adds	r3, #31
    497a:	781b      	ldrb	r3, [r3, #0]
    497c:	2b00      	cmp	r3, #0
    497e:	d003      	beq.n	4988 <_usart_set_config+0x11c>
		/* Abort */
		return status_code;
    4980:	1c3b      	adds	r3, r7, #0
    4982:	331f      	adds	r3, #31
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	e052      	b.n	4a2e <_usart_set_config+0x1c2>
		usart_hw->RXPL.reg = config->receive_pulse_length;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	1c18      	adds	r0, r3, #0
    498c:	4b2e      	ldr	r3, [pc, #184]	; (4a48 <_usart_set_config+0x1dc>)
    498e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4990:	1c3b      	adds	r3, r7, #0
    4992:	330c      	adds	r3, #12
    4994:	881a      	ldrh	r2, [r3, #0]
    4996:	69bb      	ldr	r3, [r7, #24]
    4998:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	685b      	ldr	r3, [r3, #4]
    499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    49a0:	4313      	orrs	r3, r2
    49a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	7ddb      	ldrb	r3, [r3, #23]
    49a8:	2201      	movs	r2, #1
    49aa:	4053      	eors	r3, r2
    49ac:	b2db      	uxtb	r3, r3
    49ae:	2b00      	cmp	r3, #0
    49b0:	d003      	beq.n	49ba <_usart_set_config+0x14e>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    49b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b4:	2204      	movs	r2, #4
    49b6:	4313      	orrs	r3, r2
    49b8:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	7a9a      	ldrb	r2, [r3, #10]
    49be:	683b      	ldr	r3, [r7, #0]
    49c0:	7adb      	ldrb	r3, [r3, #11]
    49c2:	4313      	orrs	r3, r2
    49c4:	b2db      	uxtb	r3, r3
    49c6:	1c1a      	adds	r2, r3, #0
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    49c8:	683b      	ldr	r3, [r7, #0]
    49ca:	7d1b      	ldrb	r3, [r3, #20]
    49cc:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ce:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    49d0:	683b      	ldr	r3, [r7, #0]
    49d2:	7d5b      	ldrb	r3, [r3, #21]
    49d4:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49d6:	4313      	orrs	r3, r2
    49d8:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    49da:	683b      	ldr	r3, [r7, #0]
    49dc:	891b      	ldrh	r3, [r3, #8]
    49de:	2bff      	cmp	r3, #255	; 0xff
    49e0:	d009      	beq.n	49f6 <_usart_set_config+0x18a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    49e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49e4:	2280      	movs	r2, #128	; 0x80
    49e6:	0452      	lsls	r2, r2, #17
    49e8:	4313      	orrs	r3, r2
    49ea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
		ctrlb |= config->parity;
    49ec:	683b      	ldr	r3, [r7, #0]
    49ee:	891b      	ldrh	r3, [r3, #8]
    49f0:	6a3a      	ldr	r2, [r7, #32]
    49f2:	4313      	orrs	r3, r2
    49f4:	623b      	str	r3, [r7, #32]
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    49f6:	683b      	ldr	r3, [r7, #0]
    49f8:	7f1b      	ldrb	r3, [r3, #28]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d104      	bne.n	4a08 <_usart_set_config+0x19c>
    49fe:	4b13      	ldr	r3, [pc, #76]	; (4a4c <_usart_set_config+0x1e0>)
    4a00:	4798      	blx	r3
    4a02:	1c03      	adds	r3, r0, #0
    4a04:	2b00      	cmp	r3, #0
    4a06:	d003      	beq.n	4a10 <_usart_set_config+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a0a:	2280      	movs	r2, #128	; 0x80
    4a0c:	4313      	orrs	r3, r2
    4a0e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	1c18      	adds	r0, r3, #0
    4a14:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <_usart_set_config+0x1dc>)
    4a16:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4a18:	69bb      	ldr	r3, [r7, #24]
    4a1a:	6a3a      	ldr	r2, [r7, #32]
    4a1c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	1c18      	adds	r0, r3, #0
    4a22:	4b09      	ldr	r3, [pc, #36]	; (4a48 <_usart_set_config+0x1dc>)
    4a24:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4a26:	69bb      	ldr	r3, [r7, #24]
    4a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a2a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4a2c:	2300      	movs	r3, #0
}
    4a2e:	1c18      	adds	r0, r3, #0
    4a30:	46bd      	mov	sp, r7
    4a32:	b00a      	add	sp, #40	; 0x28
    4a34:	bdb0      	pop	{r4, r5, r7, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	00011885 	.word	0x00011885
    4a3c:	00013005 	.word	0x00013005
    4a40:	00011415 	.word	0x00011415
    4a44:	00011479 	.word	0x00011479
    4a48:	00004849 	.word	0x00004849
    4a4c:	000047fd 	.word	0x000047fd

00004a50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4a50:	b590      	push	{r4, r7, lr}
    4a52:	b093      	sub	sp, #76	; 0x4c
    4a54:	af00      	add	r7, sp, #0
    4a56:	60f8      	str	r0, [r7, #12]
    4a58:	60b9      	str	r1, [r7, #8]
    4a5a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4a5c:	1c3b      	adds	r3, r7, #0
    4a5e:	333b      	adds	r3, #59	; 0x3b
    4a60:	2200      	movs	r2, #0
    4a62:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	68ba      	ldr	r2, [r7, #8]
    4a68:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	1c18      	adds	r0, r3, #0
    4a76:	4b7f      	ldr	r3, [pc, #508]	; (4c74 <usart_init+0x224>)
    4a78:	4798      	blx	r3
    4a7a:	1c03      	adds	r3, r0, #0
    4a7c:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a80:	3302      	adds	r3, #2
    4a82:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a86:	330d      	adds	r3, #13
    4a88:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a8c:	681a      	ldr	r2, [r3, #0]
    4a8e:	2301      	movs	r3, #1
    4a90:	4013      	ands	r3, r2
    4a92:	d001      	beq.n	4a98 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4a94:	2305      	movs	r3, #5
    4a96:	e0e9      	b.n	4c6c <usart_init+0x21c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a9a:	681a      	ldr	r2, [r3, #0]
    4a9c:	2302      	movs	r3, #2
    4a9e:	4013      	ands	r3, r2
    4aa0:	d001      	beq.n	4aa6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4aa2:	231c      	movs	r3, #28
    4aa4:	e0e2      	b.n	4c6c <usart_init+0x21c>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4aa8:	2201      	movs	r2, #1
    4aaa:	1c11      	adds	r1, r2, #0
    4aac:	4099      	lsls	r1, r3
    4aae:	1c0b      	adds	r3, r1, #0
    4ab0:	2002      	movs	r0, #2
    4ab2:	1c19      	adds	r1, r3, #0
    4ab4:	4b70      	ldr	r3, [pc, #448]	; (4c78 <usart_init+0x228>)
    4ab6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4ab8:	1c3b      	adds	r3, r7, #0
    4aba:	3324      	adds	r3, #36	; 0x24
    4abc:	1c18      	adds	r0, r3, #0
    4abe:	4b6f      	ldr	r3, [pc, #444]	; (4c7c <usart_init+0x22c>)
    4ac0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	7f5a      	ldrb	r2, [r3, #29]
    4ac6:	1c3b      	adds	r3, r7, #0
    4ac8:	3324      	adds	r3, #36	; 0x24
    4aca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ace:	b2da      	uxtb	r2, r3
    4ad0:	1c3b      	adds	r3, r7, #0
    4ad2:	3324      	adds	r3, #36	; 0x24
    4ad4:	1c10      	adds	r0, r2, #0
    4ad6:	1c19      	adds	r1, r3, #0
    4ad8:	4b69      	ldr	r3, [pc, #420]	; (4c80 <usart_init+0x230>)
    4ada:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ade:	b2db      	uxtb	r3, r3
    4ae0:	1c18      	adds	r0, r3, #0
    4ae2:	4b68      	ldr	r3, [pc, #416]	; (4c84 <usart_init+0x234>)
    4ae4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	7f5b      	ldrb	r3, [r3, #29]
    4aea:	1c18      	adds	r0, r3, #0
    4aec:	2100      	movs	r1, #0
    4aee:	4b66      	ldr	r3, [pc, #408]	; (4c88 <usart_init+0x238>)
    4af0:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	7ada      	ldrb	r2, [r3, #11]
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	7d1a      	ldrb	r2, [r3, #20]
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	7d5a      	ldrb	r2, [r3, #21]
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	71da      	strb	r2, [r3, #7]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4b0a:	1c3c      	adds	r4, r7, #0
    4b0c:	343b      	adds	r4, #59	; 0x3b
    4b0e:	68fa      	ldr	r2, [r7, #12]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	1c10      	adds	r0, r2, #0
    4b14:	1c19      	adds	r1, r3, #0
    4b16:	4b5d      	ldr	r3, [pc, #372]	; (4c8c <usart_init+0x23c>)
    4b18:	4798      	blx	r3
    4b1a:	1c03      	adds	r3, r0, #0
    4b1c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4b1e:	1c3b      	adds	r3, r7, #0
    4b20:	333b      	adds	r3, #59	; 0x3b
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d003      	beq.n	4b30 <usart_init+0xe0>
		return status_code;
    4b28:	1c3b      	adds	r3, r7, #0
    4b2a:	333b      	adds	r3, #59	; 0x3b
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	e09d      	b.n	4c6c <usart_init+0x21c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4b30:	1c3b      	adds	r3, r7, #0
    4b32:	3320      	adds	r3, #32
    4b34:	1c18      	adds	r0, r3, #0
    4b36:	4b56      	ldr	r3, [pc, #344]	; (4c90 <usart_init+0x240>)
    4b38:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b3a:	1c3b      	adds	r3, r7, #0
    4b3c:	3320      	adds	r3, #32
    4b3e:	2200      	movs	r2, #0
    4b40:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b42:	1c3b      	adds	r3, r7, #0
    4b44:	3320      	adds	r3, #32
    4b46:	2200      	movs	r2, #0
    4b48:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4b4a:	687b      	ldr	r3, [r7, #4]
    4b4c:	6a1a      	ldr	r2, [r3, #32]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b4e:	1c3b      	adds	r3, r7, #0
    4b50:	3310      	adds	r3, #16
    4b52:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b58:	1c3b      	adds	r3, r7, #0
    4b5a:	3310      	adds	r3, #16
    4b5c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b62:	1c3b      	adds	r3, r7, #0
    4b64:	3310      	adds	r3, #16
    4b66:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b6c:	1c3b      	adds	r3, r7, #0
    4b6e:	3310      	adds	r3, #16
    4b70:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4b72:	1c3b      	adds	r3, r7, #0
    4b74:	3347      	adds	r3, #71	; 0x47
    4b76:	2200      	movs	r2, #0
    4b78:	701a      	strb	r2, [r3, #0]
    4b7a:	e02c      	b.n	4bd6 <usart_init+0x186>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b7c:	1c3b      	adds	r3, r7, #0
    4b7e:	3347      	adds	r3, #71	; 0x47
    4b80:	781a      	ldrb	r2, [r3, #0]
    4b82:	1c3b      	adds	r3, r7, #0
    4b84:	3310      	adds	r3, #16
    4b86:	0092      	lsls	r2, r2, #2
    4b88:	58d3      	ldr	r3, [r2, r3]
    4b8a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d109      	bne.n	4ba6 <usart_init+0x156>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4b92:	68ba      	ldr	r2, [r7, #8]
    4b94:	1c3b      	adds	r3, r7, #0
    4b96:	3347      	adds	r3, #71	; 0x47
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	1c10      	adds	r0, r2, #0
    4b9c:	1c19      	adds	r1, r3, #0
    4b9e:	4b3d      	ldr	r3, [pc, #244]	; (4c94 <usart_init+0x244>)
    4ba0:	4798      	blx	r3
    4ba2:	1c03      	adds	r3, r0, #0
    4ba4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ba8:	3301      	adds	r3, #1
    4baa:	d00d      	beq.n	4bc8 <usart_init+0x178>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	1c3b      	adds	r3, r7, #0
    4bb2:	3320      	adds	r3, #32
    4bb4:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bb8:	0c1b      	lsrs	r3, r3, #16
    4bba:	b2da      	uxtb	r2, r3
    4bbc:	1c3b      	adds	r3, r7, #0
    4bbe:	3320      	adds	r3, #32
    4bc0:	1c10      	adds	r0, r2, #0
    4bc2:	1c19      	adds	r1, r3, #0
    4bc4:	4b34      	ldr	r3, [pc, #208]	; (4c98 <usart_init+0x248>)
    4bc6:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4bc8:	1c3b      	adds	r3, r7, #0
    4bca:	3347      	adds	r3, #71	; 0x47
    4bcc:	781a      	ldrb	r2, [r3, #0]
    4bce:	1c3b      	adds	r3, r7, #0
    4bd0:	3347      	adds	r3, #71	; 0x47
    4bd2:	3201      	adds	r2, #1
    4bd4:	701a      	strb	r2, [r3, #0]
    4bd6:	1c3b      	adds	r3, r7, #0
    4bd8:	3347      	adds	r3, #71	; 0x47
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	2b03      	cmp	r3, #3
    4bde:	d9cd      	bls.n	4b7c <usart_init+0x12c>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4be0:	2300      	movs	r3, #0
    4be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    4be4:	e008      	b.n	4bf8 <usart_init+0x1a8>
		module->callback[i]            = NULL;
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4bea:	3202      	adds	r2, #2
    4bec:	0092      	lsls	r2, r2, #2
    4bee:	2100      	movs	r1, #0
    4bf0:	50d1      	str	r1, [r2, r3]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bf4:	3301      	adds	r3, #1
    4bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    4bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d9f3      	bls.n	4be6 <usart_init+0x196>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	2200      	movs	r2, #0
    4c02:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	2200      	movs	r2, #0
    4c08:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	2200      	movs	r2, #0
    4c0e:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	2200      	movs	r2, #0
    4c14:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	2320      	movs	r3, #32
    4c1a:	2100      	movs	r1, #0
    4c1c:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    4c1e:	68fa      	ldr	r2, [r7, #12]
    4c20:	2321      	movs	r3, #33	; 0x21
    4c22:	2100      	movs	r1, #0
    4c24:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    4c26:	68fa      	ldr	r2, [r7, #12]
    4c28:	2322      	movs	r3, #34	; 0x22
    4c2a:	2100      	movs	r1, #0
    4c2c:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    4c2e:	68fa      	ldr	r2, [r7, #12]
    4c30:	2323      	movs	r3, #35	; 0x23
    4c32:	2100      	movs	r1, #0
    4c34:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	1c3c      	adds	r4, r7, #0
    4c3c:	3427      	adds	r4, #39	; 0x27
    4c3e:	1c18      	adds	r0, r3, #0
    4c40:	4b0c      	ldr	r3, [pc, #48]	; (4c74 <usart_init+0x224>)
    4c42:	4798      	blx	r3
    4c44:	1c03      	adds	r3, r0, #0
    4c46:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4c48:	1c3b      	adds	r3, r7, #0
    4c4a:	3327      	adds	r3, #39	; 0x27
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4b13      	ldr	r3, [pc, #76]	; (4c9c <usart_init+0x24c>)
    4c50:	1c10      	adds	r0, r2, #0
    4c52:	1c19      	adds	r1, r3, #0
    4c54:	4b12      	ldr	r3, [pc, #72]	; (4ca0 <usart_init+0x250>)
    4c56:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4c58:	1c3b      	adds	r3, r7, #0
    4c5a:	3327      	adds	r3, #39	; 0x27
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	4b11      	ldr	r3, [pc, #68]	; (4ca4 <usart_init+0x254>)
    4c60:	0092      	lsls	r2, r2, #2
    4c62:	68f9      	ldr	r1, [r7, #12]
    4c64:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4c66:	1c3b      	adds	r3, r7, #0
    4c68:	333b      	adds	r3, #59	; 0x3b
    4c6a:	781b      	ldrb	r3, [r3, #0]
}
    4c6c:	1c18      	adds	r0, r3, #0
    4c6e:	46bd      	mov	sp, r7
    4c70:	b013      	add	sp, #76	; 0x4c
    4c72:	bd90      	pop	{r4, r7, pc}
    4c74:	00011885 	.word	0x00011885
    4c78:	00004779 	.word	0x00004779
    4c7c:	00004765 	.word	0x00004765
    4c80:	00012ea5 	.word	0x00012ea5
    4c84:	00012ee5 	.word	0x00012ee5
    4c88:	00011629 	.word	0x00011629
    4c8c:	0000486d 	.word	0x0000486d
    4c90:	000047d5 	.word	0x000047d5
    4c94:	000116b5 	.word	0x000116b5
    4c98:	000131c5 	.word	0x000131c5
    4c9c:	00004e89 	.word	0x00004e89
    4ca0:	000118d1 	.word	0x000118d1
    4ca4:	20003954 	.word	0x20003954

00004ca8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b084      	sub	sp, #16
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	681b      	ldr	r3, [r3, #0]
    4cb4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	8a1b      	ldrh	r3, [r3, #16]
    4cba:	b29b      	uxth	r3, r3
    4cbc:	1c1a      	adds	r2, r3, #0
    4cbe:	2380      	movs	r3, #128	; 0x80
    4cc0:	021b      	lsls	r3, r3, #8
    4cc2:	4013      	ands	r3, r2
    4cc4:	1e5a      	subs	r2, r3, #1
    4cc6:	4193      	sbcs	r3, r2
    4cc8:	b2db      	uxtb	r3, r3
#endif
}
    4cca:	1c18      	adds	r0, r3, #0
    4ccc:	46bd      	mov	sp, r7
    4cce:	b004      	add	sp, #16
    4cd0:	bd80      	pop	{r7, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4cdc:	46c0      	nop			; (mov r8, r8)
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	1c18      	adds	r0, r3, #0
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <_usart_wait_for_sync+0x20>)
    4ce4:	4798      	blx	r3
    4ce6:	1c03      	adds	r3, r0, #0
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d1f8      	bne.n	4cde <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4cec:	46bd      	mov	sp, r7
    4cee:	b002      	add	sp, #8
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	00004ca9 	.word	0x00004ca9

00004cf8 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b086      	sub	sp, #24
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	60f8      	str	r0, [r7, #12]
    4d00:	60b9      	str	r1, [r7, #8]
    4d02:	1dbb      	adds	r3, r7, #6
    4d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d06:	68fb      	ldr	r3, [r7, #12]
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	617b      	str	r3, [r7, #20]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    4d0c:	68fb      	ldr	r3, [r7, #12]
    4d0e:	1dba      	adds	r2, r7, #6
    4d10:	8812      	ldrh	r2, [r2, #0]
    4d12:	83da      	strh	r2, [r3, #30]
	module->tx_buffer_ptr              = tx_data;
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	68ba      	ldr	r2, [r7, #8]
    4d18:	619a      	str	r2, [r3, #24]
	module->tx_status                  = STATUS_BUSY;
    4d1a:	68fa      	ldr	r2, [r7, #12]
    4d1c:	2323      	movs	r3, #35	; 0x23
    4d1e:	2105      	movs	r1, #5
    4d20:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    4d22:	697b      	ldr	r3, [r7, #20]
    4d24:	2201      	movs	r2, #1
    4d26:	735a      	strb	r2, [r3, #13]
}
    4d28:	46bd      	mov	sp, r7
    4d2a:	b006      	add	sp, #24
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)

00004d30 <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b086      	sub	sp, #24
    4d34:	af00      	add	r7, sp, #0
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	60b9      	str	r1, [r7, #8]
    4d3a:	1dbb      	adds	r3, r7, #6
    4d3c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	1dba      	adds	r2, r7, #6
    4d48:	8812      	ldrh	r2, [r2, #0]
    4d4a:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr              = rx_data;
    4d4c:	68fb      	ldr	r3, [r7, #12]
    4d4e:	68ba      	ldr	r2, [r7, #8]
    4d50:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
    4d52:	68fa      	ldr	r2, [r7, #12]
    4d54:	2322      	movs	r3, #34	; 0x22
    4d56:	2105      	movs	r1, #5
    4d58:	54d1      	strb	r1, [r2, r3]
	//EMH 
	module->rxBufferCount = 0; 
    4d5a:	68fb      	ldr	r3, [r7, #12]
    4d5c:	2200      	movs	r2, #0
    4d5e:	84da      	strh	r2, [r3, #38]	; 0x26
	module->rxBufferPreviousByte = 0; 
    4d60:	68fa      	ldr	r2, [r7, #12]
    4d62:	232e      	movs	r3, #46	; 0x2e
    4d64:	2100      	movs	r1, #0
    4d66:	54d1      	strb	r1, [r2, r3]
	module->rxBufferBase = rx_data;
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	68ba      	ldr	r2, [r7, #8]
    4d6c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rxBufferMaxLength = length; 
    4d6e:	68fb      	ldr	r3, [r7, #12]
    4d70:	1dba      	adds	r2, r7, #6
    4d72:	8812      	ldrh	r2, [r2, #0]
    4d74:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->rxGotStartByte = 0; 
    4d76:	68fa      	ldr	r2, [r7, #12]
    4d78:	2324      	movs	r3, #36	; 0x24
    4d7a:	2100      	movs	r1, #0
    4d7c:	54d1      	strb	r1, [r2, r3]
	
	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4d7e:	697b      	ldr	r3, [r7, #20]
    4d80:	2204      	movs	r2, #4
    4d82:	735a      	strb	r2, [r3, #13]
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif
}
    4d84:	46bd      	mov	sp, r7
    4d86:	b006      	add	sp, #24
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	46c0      	nop			; (mov r8, r8)

00004d8c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b084      	sub	sp, #16
    4d90:	af00      	add	r7, sp, #0
    4d92:	60f8      	str	r0, [r7, #12]
    4d94:	60b9      	str	r1, [r7, #8]
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4d9a:	1dfb      	adds	r3, r7, #7
    4d9c:	781a      	ldrb	r2, [r3, #0]
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	3202      	adds	r2, #2
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	68b9      	ldr	r1, [r7, #8]
    4da6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4da8:	68fa      	ldr	r2, [r7, #12]
    4daa:	2320      	movs	r3, #32
    4dac:	5cd3      	ldrb	r3, [r2, r3]
    4dae:	b2da      	uxtb	r2, r3
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	2101      	movs	r1, #1
    4db6:	1c08      	adds	r0, r1, #0
    4db8:	4098      	lsls	r0, r3
    4dba:	1c03      	adds	r3, r0, #0
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	4313      	orrs	r3, r2
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	b2d9      	uxtb	r1, r3
    4dc4:	68fa      	ldr	r2, [r7, #12]
    4dc6:	2320      	movs	r3, #32
    4dc8:	54d1      	strb	r1, [r2, r3]
}
    4dca:	46bd      	mov	sp, r7
    4dcc:	b004      	add	sp, #16
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b084      	sub	sp, #16
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	60f8      	str	r0, [r7, #12]
    4dd8:	60b9      	str	r1, [r7, #8]
    4dda:	1dbb      	adds	r3, r7, #6
    4ddc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    4dde:	1dbb      	adds	r3, r7, #6
    4de0:	881b      	ldrh	r3, [r3, #0]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d101      	bne.n	4dea <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4de6:	2317      	movs	r3, #23
    4de8:	e019      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    4dea:	68fb      	ldr	r3, [r7, #12]
    4dec:	8bdb      	ldrh	r3, [r3, #30]
    4dee:	b29b      	uxth	r3, r3
    4df0:	2b00      	cmp	r3, #0
    4df2:	d001      	beq.n	4df8 <usart_write_buffer_job+0x28>
		return STATUS_BUSY;
    4df4:	2305      	movs	r3, #5
    4df6:	e012      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	79db      	ldrb	r3, [r3, #7]
    4dfc:	2201      	movs	r2, #1
    4dfe:	4053      	eors	r3, r2
    4e00:	b2db      	uxtb	r3, r3
    4e02:	2b00      	cmp	r3, #0
    4e04:	d001      	beq.n	4e0a <usart_write_buffer_job+0x3a>
		return STATUS_ERR_DENIED;
    4e06:	231c      	movs	r3, #28
    4e08:	e009      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    4e0a:	68f9      	ldr	r1, [r7, #12]
    4e0c:	68ba      	ldr	r2, [r7, #8]
    4e0e:	1dbb      	adds	r3, r7, #6
    4e10:	881b      	ldrh	r3, [r3, #0]
    4e12:	1c08      	adds	r0, r1, #0
    4e14:	1c11      	adds	r1, r2, #0
    4e16:	1c1a      	adds	r2, r3, #0
    4e18:	4b03      	ldr	r3, [pc, #12]	; (4e28 <usart_write_buffer_job+0x58>)
    4e1a:	4798      	blx	r3

	return STATUS_OK;
    4e1c:	2300      	movs	r3, #0
}
    4e1e:	1c18      	adds	r0, r3, #0
    4e20:	46bd      	mov	sp, r7
    4e22:	b004      	add	sp, #16
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	00004cf9 	.word	0x00004cf9

00004e2c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	60f8      	str	r0, [r7, #12]
    4e34:	60b9      	str	r1, [r7, #8]
    4e36:	1dbb      	adds	r3, r7, #6
    4e38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    4e3a:	1dbb      	adds	r3, r7, #6
    4e3c:	881b      	ldrh	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d101      	bne.n	4e46 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4e42:	2317      	movs	r3, #23
    4e44:	e019      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4e46:	68fb      	ldr	r3, [r7, #12]
    4e48:	799b      	ldrb	r3, [r3, #6]
    4e4a:	2201      	movs	r2, #1
    4e4c:	4053      	eors	r3, r2
    4e4e:	b2db      	uxtb	r3, r3
    4e50:	2b00      	cmp	r3, #0
    4e52:	d001      	beq.n	4e58 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    4e54:	231c      	movs	r3, #28
    4e56:	e010      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	8b9b      	ldrh	r3, [r3, #28]
    4e5c:	b29b      	uxth	r3, r3
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d001      	beq.n	4e66 <usart_read_buffer_job+0x3a>
		return STATUS_BUSY;
    4e62:	2305      	movs	r3, #5
    4e64:	e009      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    4e66:	68f9      	ldr	r1, [r7, #12]
    4e68:	68ba      	ldr	r2, [r7, #8]
    4e6a:	1dbb      	adds	r3, r7, #6
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	1c08      	adds	r0, r1, #0
    4e70:	1c11      	adds	r1, r2, #0
    4e72:	1c1a      	adds	r2, r3, #0
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <usart_read_buffer_job+0x58>)
    4e76:	4798      	blx	r3

	return STATUS_OK;
    4e78:	2300      	movs	r3, #0
}
    4e7a:	1c18      	adds	r0, r3, #0
    4e7c:	46bd      	mov	sp, r7
    4e7e:	b004      	add	sp, #16
    4e80:	bd80      	pop	{r7, pc}
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	00004d31 	.word	0x00004d31

00004e88 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b088      	sub	sp, #32
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	1c02      	adds	r2, r0, #0
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    4e94:	1dfb      	adds	r3, r7, #7
    4e96:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4e98:	4bc4      	ldr	r3, [pc, #784]	; (51ac <_usart_interrupt_handler+0x324>)
    4e9a:	0092      	lsls	r2, r2, #2
    4e9c:	58d3      	ldr	r3, [r2, r3]
    4e9e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4ea0:	69bb      	ldr	r3, [r7, #24]
    4ea2:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    4ea4:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4ea6:	69bb      	ldr	r3, [r7, #24]
    4ea8:	1c18      	adds	r0, r3, #0
    4eaa:	4bc1      	ldr	r3, [pc, #772]	; (51b0 <_usart_interrupt_handler+0x328>)
    4eac:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4eae:	697b      	ldr	r3, [r7, #20]
    4eb0:	7b9b      	ldrb	r3, [r3, #14]
    4eb2:	b2da      	uxtb	r2, r3
    4eb4:	1c3b      	adds	r3, r7, #0
    4eb6:	3312      	adds	r3, #18
    4eb8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    4eba:	697b      	ldr	r3, [r7, #20]
    4ebc:	7b5b      	ldrb	r3, [r3, #13]
    4ebe:	b2db      	uxtb	r3, r3
    4ec0:	1c1a      	adds	r2, r3, #0
    4ec2:	1c3b      	adds	r3, r7, #0
    4ec4:	3312      	adds	r3, #18
    4ec6:	1c39      	adds	r1, r7, #0
    4ec8:	3112      	adds	r1, #18
    4eca:	8809      	ldrh	r1, [r1, #0]
    4ecc:	400a      	ands	r2, r1
    4ece:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4ed0:	69ba      	ldr	r2, [r7, #24]
    4ed2:	2320      	movs	r3, #32
    4ed4:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    4ed6:	69b9      	ldr	r1, [r7, #24]
    4ed8:	2221      	movs	r2, #33	; 0x21
    4eda:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4edc:	4013      	ands	r3, r2
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	1c3b      	adds	r3, r7, #0
    4ee2:	3310      	adds	r3, #16
    4ee4:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4ee6:	1c3b      	adds	r3, r7, #0
    4ee8:	3312      	adds	r3, #18
    4eea:	881a      	ldrh	r2, [r3, #0]
    4eec:	2301      	movs	r3, #1
    4eee:	4013      	ands	r3, r2
    4ef0:	d044      	beq.n	4f7c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4ef2:	69bb      	ldr	r3, [r7, #24]
    4ef4:	8bdb      	ldrh	r3, [r3, #30]
    4ef6:	b29b      	uxth	r3, r3
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d03c      	beq.n	4f76 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4efc:	69bb      	ldr	r3, [r7, #24]
    4efe:	699b      	ldr	r3, [r3, #24]
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2da      	uxtb	r2, r3
    4f04:	1c3b      	adds	r3, r7, #0
    4f06:	331e      	adds	r3, #30
    4f08:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4f0a:	69bb      	ldr	r3, [r7, #24]
    4f0c:	699b      	ldr	r3, [r3, #24]
    4f0e:	1c5a      	adds	r2, r3, #1
    4f10:	69bb      	ldr	r3, [r7, #24]
    4f12:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4f14:	69bb      	ldr	r3, [r7, #24]
    4f16:	795b      	ldrb	r3, [r3, #5]
    4f18:	2b01      	cmp	r3, #1
    4f1a:	d112      	bne.n	4f42 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4f1c:	69bb      	ldr	r3, [r7, #24]
    4f1e:	699b      	ldr	r3, [r3, #24]
    4f20:	781b      	ldrb	r3, [r3, #0]
    4f22:	b2db      	uxtb	r3, r3
    4f24:	021b      	lsls	r3, r3, #8
    4f26:	b29a      	uxth	r2, r3
    4f28:	1c3b      	adds	r3, r7, #0
    4f2a:	331e      	adds	r3, #30
    4f2c:	881b      	ldrh	r3, [r3, #0]
    4f2e:	4313      	orrs	r3, r2
    4f30:	b29a      	uxth	r2, r3
    4f32:	1c3b      	adds	r3, r7, #0
    4f34:	331e      	adds	r3, #30
    4f36:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4f38:	69bb      	ldr	r3, [r7, #24]
    4f3a:	699b      	ldr	r3, [r3, #24]
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	69bb      	ldr	r3, [r7, #24]
    4f40:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4f42:	1c3b      	adds	r3, r7, #0
    4f44:	331e      	adds	r3, #30
    4f46:	881b      	ldrh	r3, [r3, #0]
    4f48:	05db      	lsls	r3, r3, #23
    4f4a:	0ddb      	lsrs	r3, r3, #23
    4f4c:	b29a      	uxth	r2, r3
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    4f52:	69bb      	ldr	r3, [r7, #24]
    4f54:	8bdb      	ldrh	r3, [r3, #30]
    4f56:	b29b      	uxth	r3, r3
    4f58:	3b01      	subs	r3, #1
    4f5a:	b29b      	uxth	r3, r3
    4f5c:	69ba      	ldr	r2, [r7, #24]
    4f5e:	1c19      	adds	r1, r3, #0
    4f60:	83d1      	strh	r1, [r2, #30]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d106      	bne.n	4f74 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f66:	697b      	ldr	r3, [r7, #20]
    4f68:	2201      	movs	r2, #1
    4f6a:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4f6c:	697b      	ldr	r3, [r7, #20]
    4f6e:	2202      	movs	r2, #2
    4f70:	735a      	strb	r2, [r3, #13]
    4f72:	e003      	b.n	4f7c <_usart_interrupt_handler+0xf4>
    4f74:	e002      	b.n	4f7c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f76:	697b      	ldr	r3, [r7, #20]
    4f78:	2201      	movs	r2, #1
    4f7a:	731a      	strb	r2, [r3, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4f7c:	1c3b      	adds	r3, r7, #0
    4f7e:	3312      	adds	r3, #18
    4f80:	881a      	ldrh	r2, [r3, #0]
    4f82:	2302      	movs	r3, #2
    4f84:	4013      	ands	r3, r2
    4f86:	d011      	beq.n	4fac <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	2202      	movs	r2, #2
    4f8c:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
    4f8e:	69ba      	ldr	r2, [r7, #24]
    4f90:	2323      	movs	r3, #35	; 0x23
    4f92:	2100      	movs	r1, #0
    4f94:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4f96:	1c3b      	adds	r3, r7, #0
    4f98:	3310      	adds	r3, #16
    4f9a:	881a      	ldrh	r2, [r3, #0]
    4f9c:	2301      	movs	r3, #1
    4f9e:	4013      	ands	r3, r2
    4fa0:	d004      	beq.n	4fac <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4fa2:	69bb      	ldr	r3, [r7, #24]
    4fa4:	689b      	ldr	r3, [r3, #8]
    4fa6:	69ba      	ldr	r2, [r7, #24]
    4fa8:	1c10      	adds	r0, r2, #0
    4faa:	4798      	blx	r3
	 * there's more data to receive */
	}
	//------------------------------------------------------
	// RECEIVE INTERRUPT OF THE USART. 
	//------------------------------------------------------
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) 
    4fac:	1c3b      	adds	r3, r7, #0
    4fae:	3312      	adds	r3, #18
    4fb0:	881a      	ldrh	r2, [r3, #0]
    4fb2:	2304      	movs	r3, #4
    4fb4:	4013      	ands	r3, r2
    4fb6:	d100      	bne.n	4fba <_usart_interrupt_handler+0x132>
    4fb8:	e0ff      	b.n	51ba <_usart_interrupt_handler+0x332>
	{
		if (module->remaining_rx_buffer_length) 
    4fba:	69bb      	ldr	r3, [r7, #24]
    4fbc:	8b9b      	ldrh	r3, [r3, #28]
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d100      	bne.n	4fc6 <_usart_interrupt_handler+0x13e>
    4fc4:	e0f6      	b.n	51b4 <_usart_interrupt_handler+0x32c>
		{
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4fc6:	697b      	ldr	r3, [r7, #20]
    4fc8:	8a1b      	ldrh	r3, [r3, #16]
    4fca:	b29b      	uxth	r3, r3
    4fcc:	b2d9      	uxtb	r1, r3
    4fce:	1c3b      	adds	r3, r7, #0
    4fd0:	330f      	adds	r3, #15
    4fd2:	2207      	movs	r2, #7
    4fd4:	400a      	ands	r2, r1
    4fd6:	701a      	strb	r2, [r3, #0]
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    4fd8:	1c3b      	adds	r3, r7, #0
    4fda:	330f      	adds	r3, #15
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d044      	beq.n	506c <_usart_interrupt_handler+0x1e4>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4fe2:	1c3b      	adds	r3, r7, #0
    4fe4:	330f      	adds	r3, #15
    4fe6:	781a      	ldrb	r2, [r3, #0]
    4fe8:	2302      	movs	r3, #2
    4fea:	4013      	ands	r3, r2
    4fec:	d00c      	beq.n	5008 <_usart_interrupt_handler+0x180>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4fee:	69ba      	ldr	r2, [r7, #24]
    4ff0:	2322      	movs	r3, #34	; 0x22
    4ff2:	211a      	movs	r1, #26
    4ff4:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    4ff6:	697b      	ldr	r3, [r7, #20]
    4ff8:	8a1b      	ldrh	r3, [r3, #16]
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	2202      	movs	r2, #2
    4ffe:	4313      	orrs	r3, r2
    5000:	b29a      	uxth	r2, r3
    5002:	697b      	ldr	r3, [r7, #20]
    5004:	821a      	strh	r2, [r3, #16]
    5006:	e024      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5008:	1c3b      	adds	r3, r7, #0
    500a:	330f      	adds	r3, #15
    500c:	781a      	ldrb	r2, [r3, #0]
    500e:	2304      	movs	r3, #4
    5010:	4013      	ands	r3, r2
    5012:	d00c      	beq.n	502e <_usart_interrupt_handler+0x1a6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5014:	69ba      	ldr	r2, [r7, #24]
    5016:	2322      	movs	r3, #34	; 0x22
    5018:	211e      	movs	r1, #30
    501a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    501c:	697b      	ldr	r3, [r7, #20]
    501e:	8a1b      	ldrh	r3, [r3, #16]
    5020:	b29b      	uxth	r3, r3
    5022:	2204      	movs	r2, #4
    5024:	4313      	orrs	r3, r2
    5026:	b29a      	uxth	r2, r3
    5028:	697b      	ldr	r3, [r7, #20]
    502a:	821a      	strh	r2, [r3, #16]
    502c:	e011      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    502e:	1c3b      	adds	r3, r7, #0
    5030:	330f      	adds	r3, #15
    5032:	781a      	ldrb	r2, [r3, #0]
    5034:	2301      	movs	r3, #1
    5036:	4013      	ands	r3, r2
    5038:	d00b      	beq.n	5052 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    503a:	69ba      	ldr	r2, [r7, #24]
    503c:	2322      	movs	r3, #34	; 0x22
    503e:	2113      	movs	r1, #19
    5040:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5042:	697b      	ldr	r3, [r7, #20]
    5044:	8a1b      	ldrh	r3, [r3, #16]
    5046:	b29b      	uxth	r3, r3
    5048:	2201      	movs	r2, #1
    504a:	4313      	orrs	r3, r2
    504c:	b29a      	uxth	r2, r3
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	821a      	strh	r2, [r3, #16]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5052:	1c3b      	adds	r3, r7, #0
    5054:	3310      	adds	r3, #16
    5056:	881a      	ldrh	r2, [r3, #0]
    5058:	2304      	movs	r3, #4
    505a:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    505c:	d100      	bne.n	5060 <_usart_interrupt_handler+0x1d8>
    505e:	e0ac      	b.n	51ba <_usart_interrupt_handler+0x332>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5060:	69bb      	ldr	r3, [r7, #24]
    5062:	691b      	ldr	r3, [r3, #16]
    5064:	69ba      	ldr	r2, [r7, #24]
    5066:	1c10      	adds	r0, r2, #0
    5068:	4798      	blx	r3
    506a:	e0a6      	b.n	51ba <_usart_interrupt_handler+0x332>
			else 
			{

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    506c:	697b      	ldr	r3, [r7, #20]
    506e:	8b1b      	ldrh	r3, [r3, #24]
    5070:	b29a      	uxth	r2, r3
    5072:	1c3b      	adds	r3, r7, #0
    5074:	330c      	adds	r3, #12
    5076:	05d2      	lsls	r2, r2, #23
    5078:	0dd2      	lsrs	r2, r2, #23
    507a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    507c:	69bb      	ldr	r3, [r7, #24]
    507e:	695b      	ldr	r3, [r3, #20]
    5080:	1c3a      	adds	r2, r7, #0
    5082:	320c      	adds	r2, #12
    5084:	8812      	ldrh	r2, [r2, #0]
    5086:	b2d2      	uxtb	r2, r2
    5088:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    508a:	69bb      	ldr	r3, [r7, #24]
    508c:	695b      	ldr	r3, [r3, #20]
    508e:	1c5a      	adds	r2, r3, #1
    5090:	69bb      	ldr	r3, [r7, #24]
    5092:	615a      	str	r2, [r3, #20]
				module->rxBufferCount++;
    5094:	69bb      	ldr	r3, [r7, #24]
    5096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    5098:	b29b      	uxth	r3, r3
    509a:	3301      	adds	r3, #1
    509c:	b29a      	uxth	r2, r3
    509e:	69bb      	ldr	r3, [r7, #24]
    50a0:	84da      	strh	r2, [r3, #38]	; 0x26

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) 
    50a2:	69bb      	ldr	r3, [r7, #24]
    50a4:	8b9b      	ldrh	r3, [r3, #28]
    50a6:	b29b      	uxth	r3, r3
    50a8:	3b01      	subs	r3, #1
    50aa:	b29b      	uxth	r3, r3
    50ac:	69ba      	ldr	r2, [r7, #24]
    50ae:	1c19      	adds	r1, r3, #0
    50b0:	8391      	strh	r1, [r2, #28]
    50b2:	2b00      	cmp	r3, #0
    50b4:	d113      	bne.n	50de <_usart_interrupt_handler+0x256>
				{
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    50b6:	697b      	ldr	r3, [r7, #20]
    50b8:	2204      	movs	r2, #4
    50ba:	731a      	strb	r2, [r3, #12]
					module->rx_status = STATUS_OK;
    50bc:	69ba      	ldr	r2, [r7, #24]
    50be:	2322      	movs	r3, #34	; 0x22
    50c0:	2100      	movs	r1, #0
    50c2:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
    50c4:	1c3b      	adds	r3, r7, #0
    50c6:	3310      	adds	r3, #16
    50c8:	881a      	ldrh	r2, [r3, #0]
    50ca:	2302      	movs	r3, #2
    50cc:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    50ce:	d100      	bne.n	50d2 <_usart_interrupt_handler+0x24a>
    50d0:	e06b      	b.n	51aa <_usart_interrupt_handler+0x322>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
					{
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    50d2:	69bb      	ldr	r3, [r7, #24]
    50d4:	68db      	ldr	r3, [r3, #12]
    50d6:	69ba      	ldr	r2, [r7, #24]
    50d8:	1c10      	adds	r0, r2, #0
    50da:	4798      	blx	r3
    50dc:	e06d      	b.n	51ba <_usart_interrupt_handler+0x332>
					}
				}
				else
				{
					
					switch (module->rxBufferCount)
    50de:	69bb      	ldr	r3, [r7, #24]
    50e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    50e2:	b29b      	uxth	r3, r3
    50e4:	2b02      	cmp	r3, #2
    50e6:	d00e      	beq.n	5106 <_usart_interrupt_handler+0x27e>
    50e8:	2b03      	cmp	r3, #3
    50ea:	d027      	beq.n	513c <_usart_interrupt_handler+0x2b4>
    50ec:	2b01      	cmp	r3, #1
    50ee:	d154      	bne.n	519a <_usart_interrupt_handler+0x312>
					{
						case 1:
						{
							if (received_data == '#')
    50f0:	1c3b      	adds	r3, r7, #0
    50f2:	330c      	adds	r3, #12
    50f4:	881b      	ldrh	r3, [r3, #0]
    50f6:	2b23      	cmp	r3, #35	; 0x23
    50f8:	d104      	bne.n	5104 <_usart_interrupt_handler+0x27c>
							{
								module->rxGotStartByte = 1; 
    50fa:	69ba      	ldr	r2, [r7, #24]
    50fc:	2324      	movs	r3, #36	; 0x24
    50fe:	2101      	movs	r1, #1
    5100:	54d1      	strb	r1, [r2, r3]
							}
							break;
    5102:	e04a      	b.n	519a <_usart_interrupt_handler+0x312>
    5104:	e049      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 2:
						{	
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    5106:	69ba      	ldr	r2, [r7, #24]
    5108:	2324      	movs	r3, #36	; 0x24
    510a:	5cd3      	ldrb	r3, [r2, r3]
    510c:	b2db      	uxtb	r3, r3
    510e:	2b00      	cmp	r3, #0
    5110:	d009      	beq.n	5126 <_usart_interrupt_handler+0x29e>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
    5112:	1c3b      	adds	r3, r7, #0
    5114:	330c      	adds	r3, #12
    5116:	881b      	ldrh	r3, [r3, #0]
    5118:	021b      	lsls	r3, r3, #8
    511a:	b29b      	uxth	r3, r3
    511c:	3302      	adds	r3, #2
    511e:	b29a      	uxth	r2, r3
    5120:	69bb      	ldr	r3, [r7, #24]
    5122:	839a      	strh	r2, [r3, #28]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5124:	e039      	b.n	519a <_usart_interrupt_handler+0x312>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5126:	69bb      	ldr	r3, [r7, #24]
    5128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    512a:	69bb      	ldr	r3, [r7, #24]
    512c:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    512e:	69bb      	ldr	r3, [r7, #24]
    5130:	2200      	movs	r2, #0
    5132:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5134:	69bb      	ldr	r3, [r7, #24]
    5136:	2203      	movs	r2, #3
    5138:	839a      	strh	r2, [r3, #28]
							}							
							break;
    513a:	e02e      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 3:
						{
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    513c:	69ba      	ldr	r2, [r7, #24]
    513e:	2324      	movs	r3, #36	; 0x24
    5140:	5cd3      	ldrb	r3, [r2, r3]
    5142:	b2db      	uxtb	r3, r3
    5144:	2b00      	cmp	r3, #0
    5146:	d01c      	beq.n	5182 <_usart_interrupt_handler+0x2fa>
							{
								 
								 module->remaining_rx_buffer_length += (received_data);
    5148:	69bb      	ldr	r3, [r7, #24]
    514a:	8b9b      	ldrh	r3, [r3, #28]
    514c:	b29a      	uxth	r2, r3
    514e:	1c3b      	adds	r3, r7, #0
    5150:	330c      	adds	r3, #12
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	18d3      	adds	r3, r2, r3
    5156:	b29a      	uxth	r2, r3
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	839a      	strh	r2, [r3, #28]
								 module->remaining_rx_buffer_length -= 4;
    515c:	69bb      	ldr	r3, [r7, #24]
    515e:	8b9b      	ldrh	r3, [r3, #28]
    5160:	b29b      	uxth	r3, r3
    5162:	3b04      	subs	r3, #4
    5164:	b29a      	uxth	r2, r3
    5166:	69bb      	ldr	r3, [r7, #24]
    5168:	839a      	strh	r2, [r3, #28]
								 if (module->remaining_rx_buffer_length > MAX_GENERAL_BUFFER)
    516a:	69bb      	ldr	r3, [r7, #24]
    516c:	8b9b      	ldrh	r3, [r3, #28]
    516e:	b29a      	uxth	r2, r3
    5170:	2382      	movs	r3, #130	; 0x82
    5172:	00db      	lsls	r3, r3, #3
    5174:	429a      	cmp	r2, r3
    5176:	d90f      	bls.n	5198 <_usart_interrupt_handler+0x310>
								 {
									module->rxGotStartByte = 0;  
    5178:	69ba      	ldr	r2, [r7, #24]
    517a:	2324      	movs	r3, #36	; 0x24
    517c:	2100      	movs	r1, #0
    517e:	54d1      	strb	r1, [r2, r3]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5180:	e00a      	b.n	5198 <_usart_interrupt_handler+0x310>
									module->rxGotStartByte = 0;  
								 }
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5182:	69bb      	ldr	r3, [r7, #24]
    5184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5186:	69bb      	ldr	r3, [r7, #24]
    5188:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    518a:	69bb      	ldr	r3, [r7, #24]
    518c:	2200      	movs	r2, #0
    518e:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5190:	69bb      	ldr	r3, [r7, #24]
    5192:	2203      	movs	r2, #3
    5194:	839a      	strh	r2, [r3, #28]
							}							
							break;
    5196:	e7ff      	b.n	5198 <_usart_interrupt_handler+0x310>
    5198:	46c0      	nop			; (mov r8, r8)
						}
					}
					
					module->rxBufferPreviousByte = received_data;
    519a:	1c3b      	adds	r3, r7, #0
    519c:	330c      	adds	r3, #12
    519e:	881b      	ldrh	r3, [r3, #0]
    51a0:	b2d9      	uxtb	r1, r3
    51a2:	69ba      	ldr	r2, [r7, #24]
    51a4:	232e      	movs	r3, #46	; 0x2e
    51a6:	54d1      	strb	r1, [r2, r3]
    51a8:	e007      	b.n	51ba <_usart_interrupt_handler+0x332>
    51aa:	e006      	b.n	51ba <_usart_interrupt_handler+0x332>
    51ac:	20003954 	.word	0x20003954
    51b0:	00004cd5 	.word	0x00004cd5
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    51b4:	697b      	ldr	r3, [r7, #20]
    51b6:	2204      	movs	r2, #4
    51b8:	731a      	strb	r2, [r3, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    51ba:	46bd      	mov	sp, r7
    51bc:	b008      	add	sp, #32
    51be:	bd80      	pop	{r7, pc}

000051c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	2200      	movs	r2, #0
    51cc:	701a      	strb	r2, [r3, #0]
}
    51ce:	46bd      	mov	sp, r7
    51d0:	b002      	add	sp, #8
    51d2:	bd80      	pop	{r7, pc}

000051d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b082      	sub	sp, #8
    51d8:	af00      	add	r7, sp, #0
    51da:	1c02      	adds	r2, r0, #0
    51dc:	6039      	str	r1, [r7, #0]
    51de:	1dfb      	adds	r3, r7, #7
    51e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51e2:	1dfb      	adds	r3, r7, #7
    51e4:	781b      	ldrb	r3, [r3, #0]
    51e6:	2b01      	cmp	r3, #1
    51e8:	d00a      	beq.n	5200 <system_apb_clock_set_mask+0x2c>
    51ea:	2b02      	cmp	r3, #2
    51ec:	d00f      	beq.n	520e <system_apb_clock_set_mask+0x3a>
    51ee:	2b00      	cmp	r3, #0
    51f0:	d114      	bne.n	521c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    51f2:	4b0e      	ldr	r3, [pc, #56]	; (522c <system_apb_clock_set_mask+0x58>)
    51f4:	4a0d      	ldr	r2, [pc, #52]	; (522c <system_apb_clock_set_mask+0x58>)
    51f6:	6991      	ldr	r1, [r2, #24]
    51f8:	683a      	ldr	r2, [r7, #0]
    51fa:	430a      	orrs	r2, r1
    51fc:	619a      	str	r2, [r3, #24]
			break;
    51fe:	e00f      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5200:	4b0a      	ldr	r3, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5202:	4a0a      	ldr	r2, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5204:	69d1      	ldr	r1, [r2, #28]
    5206:	683a      	ldr	r2, [r7, #0]
    5208:	430a      	orrs	r2, r1
    520a:	61da      	str	r2, [r3, #28]
			break;
    520c:	e008      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <system_apb_clock_set_mask+0x58>)
    5210:	4a06      	ldr	r2, [pc, #24]	; (522c <system_apb_clock_set_mask+0x58>)
    5212:	6a11      	ldr	r1, [r2, #32]
    5214:	683a      	ldr	r2, [r7, #0]
    5216:	430a      	orrs	r2, r1
    5218:	621a      	str	r2, [r3, #32]
			break;
    521a:	e001      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    521c:	2317      	movs	r3, #23
    521e:	e000      	b.n	5222 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5220:	2300      	movs	r3, #0
}
    5222:	1c18      	adds	r0, r3, #0
    5224:	46bd      	mov	sp, r7
    5226:	b002      	add	sp, #8
    5228:	bd80      	pop	{r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	40000400 	.word	0x40000400

00005230 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5230:	b580      	push	{r7, lr}
    5232:	b082      	sub	sp, #8
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	2280      	movs	r2, #128	; 0x80
    523c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	2200      	movs	r2, #0
    5242:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	2201      	movs	r2, #1
    5248:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	2200      	movs	r2, #0
    524e:	70da      	strb	r2, [r3, #3]
}
    5250:	46bd      	mov	sp, r7
    5252:	b002      	add	sp, #8
    5254:	bd80      	pop	{r7, pc}
    5256:	46c0      	nop			; (mov r8, r8)

00005258 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5258:	b580      	push	{r7, lr}
    525a:	b084      	sub	sp, #16
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	7bdb      	ldrb	r3, [r3, #15]
    526a:	b2db      	uxtb	r3, r3
    526c:	1c1a      	adds	r2, r3, #0
    526e:	2380      	movs	r3, #128	; 0x80
    5270:	4013      	ands	r3, r2
    5272:	1e5a      	subs	r2, r3, #1
    5274:	4193      	sbcs	r3, r2
    5276:	b2db      	uxtb	r3, r3
}
    5278:	1c18      	adds	r0, r3, #0
    527a:	46bd      	mov	sp, r7
    527c:	b004      	add	sp, #16
    527e:	bd80      	pop	{r7, pc}

00005280 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5280:	b590      	push	{r4, r7, lr}
    5282:	b08d      	sub	sp, #52	; 0x34
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5288:	1c3b      	adds	r3, r7, #0
    528a:	330c      	adds	r3, #12
    528c:	4a0f      	ldr	r2, [pc, #60]	; (52cc <_tc_get_inst_index+0x4c>)
    528e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5290:	c313      	stmia	r3!, {r0, r1, r4}
    5292:	ca13      	ldmia	r2!, {r0, r1, r4}
    5294:	c313      	stmia	r3!, {r0, r1, r4}
    5296:	ca03      	ldmia	r2!, {r0, r1}
    5298:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    529a:	2300      	movs	r3, #0
    529c:	62fb      	str	r3, [r7, #44]	; 0x2c
    529e:	e00d      	b.n	52bc <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    52a0:	1c3b      	adds	r3, r7, #0
    52a2:	330c      	adds	r3, #12
    52a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    52a6:	0092      	lsls	r2, r2, #2
    52a8:	58d2      	ldr	r2, [r2, r3]
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	429a      	cmp	r2, r3
    52ae:	d102      	bne.n	52b6 <_tc_get_inst_index+0x36>
			return i;
    52b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b2:	b2db      	uxtb	r3, r3
    52b4:	e006      	b.n	52c4 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    52b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b8:	3301      	adds	r3, #1
    52ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    52bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52be:	2b07      	cmp	r3, #7
    52c0:	d9ee      	bls.n	52a0 <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    52c2:	2300      	movs	r3, #0
}
    52c4:	1c18      	adds	r0, r3, #0
    52c6:	46bd      	mov	sp, r7
    52c8:	b00d      	add	sp, #52	; 0x34
    52ca:	bd90      	pop	{r4, r7, pc}
    52cc:	00017170 	.word	0x00017170

000052d0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    52d0:	b590      	push	{r4, r7, lr}
    52d2:	b08f      	sub	sp, #60	; 0x3c
    52d4:	af00      	add	r7, sp, #0
    52d6:	60f8      	str	r0, [r7, #12]
    52d8:	60b9      	str	r1, [r7, #8]
    52da:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    52dc:	1c3b      	adds	r3, r7, #0
    52de:	3336      	adds	r3, #54	; 0x36
    52e0:	2200      	movs	r2, #0
    52e2:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    52e4:	1c3b      	adds	r3, r7, #0
    52e6:	3335      	adds	r3, #53	; 0x35
    52e8:	2200      	movs	r2, #0
    52ea:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    52ec:	1c3b      	adds	r3, r7, #0
    52ee:	3334      	adds	r3, #52	; 0x34
    52f0:	2200      	movs	r2, #0
    52f2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    52f4:	1c3c      	adds	r4, r7, #0
    52f6:	3431      	adds	r4, #49	; 0x31
    52f8:	68bb      	ldr	r3, [r7, #8]
    52fa:	1c18      	adds	r0, r3, #0
    52fc:	4bc4      	ldr	r3, [pc, #784]	; (5610 <tc_init+0x340>)
    52fe:	4798      	blx	r3
    5300:	1c03      	adds	r3, r0, #0
    5302:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5304:	1c3a      	adds	r2, r7, #0
    5306:	3228      	adds	r2, #40	; 0x28
    5308:	4bc2      	ldr	r3, [pc, #776]	; (5614 <tc_init+0x344>)
    530a:	1c11      	adds	r1, r2, #0
    530c:	1c1a      	adds	r2, r3, #0
    530e:	2308      	movs	r3, #8
    5310:	1c08      	adds	r0, r1, #0
    5312:	1c11      	adds	r1, r2, #0
    5314:	1c1a      	adds	r2, r3, #0
    5316:	4bc0      	ldr	r3, [pc, #768]	; (5618 <tc_init+0x348>)
    5318:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    531a:	1c3a      	adds	r2, r7, #0
    531c:	3218      	adds	r2, #24
    531e:	4bbf      	ldr	r3, [pc, #764]	; (561c <tc_init+0x34c>)
    5320:	1c11      	adds	r1, r2, #0
    5322:	1c1a      	adds	r2, r3, #0
    5324:	2310      	movs	r3, #16
    5326:	1c08      	adds	r0, r1, #0
    5328:	1c11      	adds	r1, r2, #0
    532a:	1c1a      	adds	r2, r3, #0
    532c:	4bba      	ldr	r3, [pc, #744]	; (5618 <tc_init+0x348>)
    532e:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5330:	1c3b      	adds	r3, r7, #0
    5332:	3333      	adds	r3, #51	; 0x33
    5334:	2200      	movs	r2, #0
    5336:	701a      	strb	r2, [r3, #0]
    5338:	e00e      	b.n	5358 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    533a:	1c3b      	adds	r3, r7, #0
    533c:	3333      	adds	r3, #51	; 0x33
    533e:	781a      	ldrb	r2, [r3, #0]
    5340:	68fb      	ldr	r3, [r7, #12]
    5342:	3202      	adds	r2, #2
    5344:	0092      	lsls	r2, r2, #2
    5346:	2100      	movs	r1, #0
    5348:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    534a:	1c3b      	adds	r3, r7, #0
    534c:	3333      	adds	r3, #51	; 0x33
    534e:	781a      	ldrb	r2, [r3, #0]
    5350:	1c3b      	adds	r3, r7, #0
    5352:	3333      	adds	r3, #51	; 0x33
    5354:	3201      	adds	r2, #1
    5356:	701a      	strb	r2, [r3, #0]
    5358:	1c3b      	adds	r3, r7, #0
    535a:	3333      	adds	r3, #51	; 0x33
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	2b03      	cmp	r3, #3
    5360:	d9eb      	bls.n	533a <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	2200      	movs	r2, #0
    5366:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	2200      	movs	r2, #0
    536c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    536e:	1c3b      	adds	r3, r7, #0
    5370:	3331      	adds	r3, #49	; 0x31
    5372:	781a      	ldrb	r2, [r3, #0]
    5374:	4baa      	ldr	r3, [pc, #680]	; (5620 <tc_init+0x350>)
    5376:	0092      	lsls	r2, r2, #2
    5378:	68f9      	ldr	r1, [r7, #12]
    537a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    537c:	68fb      	ldr	r3, [r7, #12]
    537e:	68ba      	ldr	r2, [r7, #8]
    5380:	601a      	str	r2, [r3, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	789b      	ldrb	r3, [r3, #2]
    5386:	2b08      	cmp	r3, #8
    5388:	d107      	bne.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    538a:	1c3b      	adds	r3, r7, #0
    538c:	3331      	adds	r3, #49	; 0x31
    538e:	781a      	ldrb	r2, [r3, #0]
    5390:	2301      	movs	r3, #1
    5392:	4013      	ands	r3, r2

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5394:	d001      	beq.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5396:	2317      	movs	r3, #23
    5398:	e1d5      	b.n	5746 <tc_init+0x476>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	789a      	ldrb	r2, [r3, #2]
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    53a2:	68bb      	ldr	r3, [r7, #8]
    53a4:	881b      	ldrh	r3, [r3, #0]
    53a6:	b29b      	uxth	r3, r3
    53a8:	1c1a      	adds	r2, r3, #0
    53aa:	2301      	movs	r3, #1
    53ac:	4013      	ands	r3, r2
    53ae:	d001      	beq.n	53b4 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    53b0:	2305      	movs	r3, #5
    53b2:	e1c8      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    53b4:	68bb      	ldr	r3, [r7, #8]
    53b6:	7bdb      	ldrb	r3, [r3, #15]
    53b8:	b2db      	uxtb	r3, r3
    53ba:	1c1a      	adds	r2, r3, #0
    53bc:	2310      	movs	r3, #16
    53be:	4013      	ands	r3, r2
    53c0:	d001      	beq.n	53c6 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    53c2:	231c      	movs	r3, #28
    53c4:	e1bf      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    53c6:	68bb      	ldr	r3, [r7, #8]
    53c8:	881b      	ldrh	r3, [r3, #0]
    53ca:	b29b      	uxth	r3, r3
    53cc:	1c1a      	adds	r2, r3, #0
    53ce:	2302      	movs	r3, #2
    53d0:	4013      	ands	r3, r2
    53d2:	d001      	beq.n	53d8 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    53d4:	231c      	movs	r3, #28
    53d6:	e1b6      	b.n	5746 <tc_init+0x476>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	7c1b      	ldrb	r3, [r3, #16]
    53dc:	2b00      	cmp	r3, #0
    53de:	d017      	beq.n	5410 <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    53e0:	1c3b      	adds	r3, r7, #0
    53e2:	3314      	adds	r3, #20
    53e4:	1c18      	adds	r0, r3, #0
    53e6:	4b8f      	ldr	r3, [pc, #572]	; (5624 <tc_init+0x354>)
    53e8:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	699b      	ldr	r3, [r3, #24]
    53ee:	b2da      	uxtb	r2, r3
    53f0:	1c3b      	adds	r3, r7, #0
    53f2:	3314      	adds	r3, #20
    53f4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	3314      	adds	r3, #20
    53fa:	2201      	movs	r2, #1
    53fc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    5402:	b2da      	uxtb	r2, r3
    5404:	1c3b      	adds	r3, r7, #0
    5406:	3314      	adds	r3, #20
    5408:	1c10      	adds	r0, r2, #0
    540a:	1c19      	adds	r1, r3, #0
    540c:	4b86      	ldr	r3, [pc, #536]	; (5628 <tc_init+0x358>)
    540e:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	7f1b      	ldrb	r3, [r3, #28]
    5414:	2b00      	cmp	r3, #0
    5416:	d017      	beq.n	5448 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    5418:	1c3b      	adds	r3, r7, #0
    541a:	3314      	adds	r3, #20
    541c:	1c18      	adds	r0, r3, #0
    541e:	4b81      	ldr	r3, [pc, #516]	; (5624 <tc_init+0x354>)
    5420:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5426:	b2da      	uxtb	r2, r3
    5428:	1c3b      	adds	r3, r7, #0
    542a:	3314      	adds	r3, #20
    542c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    542e:	1c3b      	adds	r3, r7, #0
    5430:	3314      	adds	r3, #20
    5432:	2201      	movs	r2, #1
    5434:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    543a:	b2da      	uxtb	r2, r3
    543c:	1c3b      	adds	r3, r7, #0
    543e:	3314      	adds	r3, #20
    5440:	1c10      	adds	r0, r2, #0
    5442:	1c19      	adds	r1, r3, #0
    5444:	4b78      	ldr	r3, [pc, #480]	; (5628 <tc_init+0x358>)
    5446:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    5448:	1c3b      	adds	r3, r7, #0
    544a:	3331      	adds	r3, #49	; 0x31
    544c:	781a      	ldrb	r2, [r3, #0]
    544e:	1c3b      	adds	r3, r7, #0
    5450:	3318      	adds	r3, #24
    5452:	0052      	lsls	r2, r2, #1
    5454:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5456:	2002      	movs	r0, #2
    5458:	1c19      	adds	r1, r3, #0
    545a:	4b74      	ldr	r3, [pc, #464]	; (562c <tc_init+0x35c>)
    545c:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	789b      	ldrb	r3, [r3, #2]
    5462:	2b08      	cmp	r3, #8
    5464:	d10b      	bne.n	547e <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    5466:	1c3b      	adds	r3, r7, #0
    5468:	3331      	adds	r3, #49	; 0x31
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	1c5a      	adds	r2, r3, #1
    546e:	1c3b      	adds	r3, r7, #0
    5470:	3318      	adds	r3, #24
    5472:	0052      	lsls	r2, r2, #1
    5474:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5476:	2002      	movs	r0, #2
    5478:	1c19      	adds	r1, r3, #0
    547a:	4b6c      	ldr	r3, [pc, #432]	; (562c <tc_init+0x35c>)
    547c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    547e:	1c3b      	adds	r3, r7, #0
    5480:	3310      	adds	r3, #16
    5482:	1c18      	adds	r0, r3, #0
    5484:	4b6a      	ldr	r3, [pc, #424]	; (5630 <tc_init+0x360>)
    5486:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	781a      	ldrb	r2, [r3, #0]
    548c:	1c3b      	adds	r3, r7, #0
    548e:	3310      	adds	r3, #16
    5490:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5492:	1c3b      	adds	r3, r7, #0
    5494:	3331      	adds	r3, #49	; 0x31
    5496:	781b      	ldrb	r3, [r3, #0]
    5498:	1c3a      	adds	r2, r7, #0
    549a:	3228      	adds	r2, #40	; 0x28
    549c:	5cd2      	ldrb	r2, [r2, r3]
    549e:	1c3b      	adds	r3, r7, #0
    54a0:	3310      	adds	r3, #16
    54a2:	1c10      	adds	r0, r2, #0
    54a4:	1c19      	adds	r1, r3, #0
    54a6:	4b63      	ldr	r3, [pc, #396]	; (5634 <tc_init+0x364>)
    54a8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    54aa:	1c3b      	adds	r3, r7, #0
    54ac:	3331      	adds	r3, #49	; 0x31
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	1c3a      	adds	r2, r7, #0
    54b2:	3228      	adds	r2, #40	; 0x28
    54b4:	5cd3      	ldrb	r3, [r2, r3]
    54b6:	1c18      	adds	r0, r3, #0
    54b8:	4b5f      	ldr	r3, [pc, #380]	; (5638 <tc_init+0x368>)
    54ba:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54c4:	4313      	orrs	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54ce:	4313      	orrs	r3, r2
    54d0:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54d6:	1c3b      	adds	r3, r7, #0
    54d8:	3336      	adds	r3, #54	; 0x36
    54da:	430a      	orrs	r2, r1
    54dc:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	785b      	ldrb	r3, [r3, #1]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d009      	beq.n	54fa <tc_init+0x22a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    54e6:	1c3b      	adds	r3, r7, #0
    54e8:	3336      	adds	r3, #54	; 0x36
    54ea:	1c3a      	adds	r2, r7, #0
    54ec:	3236      	adds	r2, #54	; 0x36
    54ee:	8812      	ldrh	r2, [r2, #0]
    54f0:	2180      	movs	r1, #128	; 0x80
    54f2:	0109      	lsls	r1, r1, #4
    54f4:	430a      	orrs	r2, r1
    54f6:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    54f8:	e7ff      	b.n	54fa <tc_init+0x22a>
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	68fb      	ldr	r3, [r7, #12]
    54fe:	1c18      	adds	r0, r3, #0
    5500:	4b4e      	ldr	r3, [pc, #312]	; (563c <tc_init+0x36c>)
    5502:	4798      	blx	r3
    5504:	1c03      	adds	r3, r0, #0
    5506:	2b00      	cmp	r3, #0
    5508:	d1f8      	bne.n	54fc <tc_init+0x22c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    550a:	68bb      	ldr	r3, [r7, #8]
    550c:	1c3a      	adds	r2, r7, #0
    550e:	3236      	adds	r2, #54	; 0x36
    5510:	8812      	ldrh	r2, [r2, #0]
    5512:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	7b5b      	ldrb	r3, [r3, #13]
    5518:	2b00      	cmp	r3, #0
    551a:	d003      	beq.n	5524 <tc_init+0x254>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    551c:	1c3b      	adds	r3, r7, #0
    551e:	3335      	adds	r3, #53	; 0x35
    5520:	2204      	movs	r2, #4
    5522:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	7b9b      	ldrb	r3, [r3, #14]
    5528:	2b00      	cmp	r3, #0
    552a:	d008      	beq.n	553e <tc_init+0x26e>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    552c:	1c3b      	adds	r3, r7, #0
    552e:	3335      	adds	r3, #53	; 0x35
    5530:	1c3a      	adds	r2, r7, #0
    5532:	3235      	adds	r2, #53	; 0x35
    5534:	7812      	ldrb	r2, [r2, #0]
    5536:	2101      	movs	r1, #1
    5538:	430a      	orrs	r2, r1
    553a:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    553c:	e7ff      	b.n	553e <tc_init+0x26e>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	1c18      	adds	r0, r3, #0
    5544:	4b3d      	ldr	r3, [pc, #244]	; (563c <tc_init+0x36c>)
    5546:	4798      	blx	r3
    5548:	1c03      	adds	r3, r0, #0
    554a:	2b00      	cmp	r3, #0
    554c:	d1f8      	bne.n	5540 <tc_init+0x270>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	22ff      	movs	r2, #255	; 0xff
    5552:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5554:	1c3b      	adds	r3, r7, #0
    5556:	3335      	adds	r3, #53	; 0x35
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d00c      	beq.n	5578 <tc_init+0x2a8>
		while (tc_is_syncing(module_inst)) {
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	1c18      	adds	r0, r3, #0
    5564:	4b35      	ldr	r3, [pc, #212]	; (563c <tc_init+0x36c>)
    5566:	4798      	blx	r3
    5568:	1c03      	adds	r3, r0, #0
    556a:	2b00      	cmp	r3, #0
    556c:	d1f8      	bne.n	5560 <tc_init+0x290>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	1c3a      	adds	r2, r7, #0
    5572:	3235      	adds	r2, #53	; 0x35
    5574:	7812      	ldrb	r2, [r2, #0]
    5576:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5578:	1c3b      	adds	r3, r7, #0
    557a:	3334      	adds	r3, #52	; 0x34
    557c:	687a      	ldr	r2, [r7, #4]
    557e:	7a92      	ldrb	r2, [r2, #10]
    5580:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5582:	1c3b      	adds	r3, r7, #0
    5584:	3332      	adds	r3, #50	; 0x32
    5586:	2200      	movs	r2, #0
    5588:	701a      	strb	r2, [r3, #0]
    558a:	e01d      	b.n	55c8 <tc_init+0x2f8>
		if (config->enable_capture_on_channel[i] == true) {
    558c:	1c3b      	adds	r3, r7, #0
    558e:	3332      	adds	r3, #50	; 0x32
    5590:	781b      	ldrb	r3, [r3, #0]
    5592:	687a      	ldr	r2, [r7, #4]
    5594:	18d3      	adds	r3, r2, r3
    5596:	7adb      	ldrb	r3, [r3, #11]
    5598:	2b00      	cmp	r3, #0
    559a:	d00e      	beq.n	55ba <tc_init+0x2ea>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    559c:	1c3b      	adds	r3, r7, #0
    559e:	3332      	adds	r3, #50	; 0x32
    55a0:	781b      	ldrb	r3, [r3, #0]
    55a2:	2210      	movs	r2, #16
    55a4:	1c11      	adds	r1, r2, #0
    55a6:	4099      	lsls	r1, r3
    55a8:	1c0b      	adds	r3, r1, #0
    55aa:	b2d9      	uxtb	r1, r3
    55ac:	1c3b      	adds	r3, r7, #0
    55ae:	3334      	adds	r3, #52	; 0x34
    55b0:	1c3a      	adds	r2, r7, #0
    55b2:	3234      	adds	r2, #52	; 0x34
    55b4:	7812      	ldrb	r2, [r2, #0]
    55b6:	430a      	orrs	r2, r1
    55b8:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    55ba:	1c3b      	adds	r3, r7, #0
    55bc:	3332      	adds	r3, #50	; 0x32
    55be:	781a      	ldrb	r2, [r3, #0]
    55c0:	1c3b      	adds	r3, r7, #0
    55c2:	3332      	adds	r3, #50	; 0x32
    55c4:	3201      	adds	r2, #1
    55c6:	701a      	strb	r2, [r3, #0]
    55c8:	1c3b      	adds	r3, r7, #0
    55ca:	3332      	adds	r3, #50	; 0x32
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b01      	cmp	r3, #1
    55d0:	d9dc      	bls.n	558c <tc_init+0x2bc>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	68fb      	ldr	r3, [r7, #12]
    55d6:	1c18      	adds	r0, r3, #0
    55d8:	4b18      	ldr	r3, [pc, #96]	; (563c <tc_init+0x36c>)
    55da:	4798      	blx	r3
    55dc:	1c03      	adds	r3, r0, #0
    55de:	2b00      	cmp	r3, #0
    55e0:	d1f8      	bne.n	55d4 <tc_init+0x304>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    55e2:	68bb      	ldr	r3, [r7, #8]
    55e4:	1c3a      	adds	r2, r7, #0
    55e6:	3234      	adds	r2, #52	; 0x34
    55e8:	7812      	ldrb	r2, [r2, #0]
    55ea:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55ec:	46c0      	nop			; (mov r8, r8)
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	1c18      	adds	r0, r3, #0
    55f2:	4b12      	ldr	r3, [pc, #72]	; (563c <tc_init+0x36c>)
    55f4:	4798      	blx	r3
    55f6:	1c03      	adds	r3, r0, #0
    55f8:	2b00      	cmp	r3, #0
    55fa:	d1f8      	bne.n	55ee <tc_init+0x31e>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	791b      	ldrb	r3, [r3, #4]
    5600:	2b04      	cmp	r3, #4
    5602:	d01d      	beq.n	5640 <tc_init+0x370>
    5604:	2b08      	cmp	r3, #8
    5606:	d100      	bne.n	560a <tc_init+0x33a>
    5608:	e076      	b.n	56f8 <tc_init+0x428>
    560a:	2b00      	cmp	r3, #0
    560c:	d04e      	beq.n	56ac <tc_init+0x3dc>
    560e:	e099      	b.n	5744 <tc_init+0x474>
    5610:	00005281 	.word	0x00005281
    5614:	00017190 	.word	0x00017190
    5618:	00016cfd 	.word	0x00016cfd
    561c:	00017198 	.word	0x00017198
    5620:	20000578 	.word	0x20000578
    5624:	00005231 	.word	0x00005231
    5628:	000131c5 	.word	0x000131c5
    562c:	000051d5 	.word	0x000051d5
    5630:	000051c1 	.word	0x000051c1
    5634:	00012ea5 	.word	0x00012ea5
    5638:	00012ee5 	.word	0x00012ee5
    563c:	00005259 	.word	0x00005259
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5640:	46c0      	nop			; (mov r8, r8)
    5642:	68fb      	ldr	r3, [r7, #12]
    5644:	1c18      	adds	r0, r3, #0
    5646:	4b42      	ldr	r3, [pc, #264]	; (5750 <tc_init+0x480>)
    5648:	4798      	blx	r3
    564a:	1c03      	adds	r3, r0, #0
    564c:	2b00      	cmp	r3, #0
    564e:	d1f8      	bne.n	5642 <tc_init+0x372>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5650:	687a      	ldr	r2, [r7, #4]
    5652:	2328      	movs	r3, #40	; 0x28
    5654:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    5656:	68bb      	ldr	r3, [r7, #8]
    5658:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	1c18      	adds	r0, r3, #0
    5660:	4b3b      	ldr	r3, [pc, #236]	; (5750 <tc_init+0x480>)
    5662:	4798      	blx	r3
    5664:	1c03      	adds	r3, r0, #0
    5666:	2b00      	cmp	r3, #0
    5668:	d1f8      	bne.n	565c <tc_init+0x38c>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    566a:	687a      	ldr	r2, [r7, #4]
    566c:	2329      	movs	r3, #41	; 0x29
    566e:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    5670:	68bb      	ldr	r3, [r7, #8]
    5672:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    5674:	46c0      	nop			; (mov r8, r8)
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	1c18      	adds	r0, r3, #0
    567a:	4b35      	ldr	r3, [pc, #212]	; (5750 <tc_init+0x480>)
    567c:	4798      	blx	r3
    567e:	1c03      	adds	r3, r0, #0
    5680:	2b00      	cmp	r3, #0
    5682:	d1f8      	bne.n	5676 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5684:	687a      	ldr	r2, [r7, #4]
    5686:	232a      	movs	r3, #42	; 0x2a
    5688:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    568a:	68bb      	ldr	r3, [r7, #8]
    568c:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	1c18      	adds	r0, r3, #0
    5694:	4b2e      	ldr	r3, [pc, #184]	; (5750 <tc_init+0x480>)
    5696:	4798      	blx	r3
    5698:	1c03      	adds	r3, r0, #0
    569a:	2b00      	cmp	r3, #0
    569c:	d1f8      	bne.n	5690 <tc_init+0x3c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    569e:	687a      	ldr	r2, [r7, #4]
    56a0:	232b      	movs	r3, #43	; 0x2b
    56a2:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    56a4:	68bb      	ldr	r3, [r7, #8]
    56a6:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    56a8:	2300      	movs	r3, #0
    56aa:	e04c      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    56ac:	46c0      	nop			; (mov r8, r8)
    56ae:	68fb      	ldr	r3, [r7, #12]
    56b0:	1c18      	adds	r0, r3, #0
    56b2:	4b27      	ldr	r3, [pc, #156]	; (5750 <tc_init+0x480>)
    56b4:	4798      	blx	r3
    56b6:	1c03      	adds	r3, r0, #0
    56b8:	2b00      	cmp	r3, #0
    56ba:	d1f8      	bne.n	56ae <tc_init+0x3de>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    56c0:	68bb      	ldr	r3, [r7, #8]
    56c2:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    56c4:	46c0      	nop			; (mov r8, r8)
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	1c18      	adds	r0, r3, #0
    56ca:	4b21      	ldr	r3, [pc, #132]	; (5750 <tc_init+0x480>)
    56cc:	4798      	blx	r3
    56ce:	1c03      	adds	r3, r0, #0
    56d0:	2b00      	cmp	r3, #0
    56d2:	d1f8      	bne.n	56c6 <tc_init+0x3f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    56d8:	68bb      	ldr	r3, [r7, #8]
    56da:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    56dc:	46c0      	nop			; (mov r8, r8)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	1c18      	adds	r0, r3, #0
    56e2:	4b1b      	ldr	r3, [pc, #108]	; (5750 <tc_init+0x480>)
    56e4:	4798      	blx	r3
    56e6:	1c03      	adds	r3, r0, #0
    56e8:	2b00      	cmp	r3, #0
    56ea:	d1f8      	bne.n	56de <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    56f0:	68bb      	ldr	r3, [r7, #8]
    56f2:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    56f4:	2300      	movs	r3, #0
    56f6:	e026      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	1c18      	adds	r0, r3, #0
    56fe:	4b14      	ldr	r3, [pc, #80]	; (5750 <tc_init+0x480>)
    5700:	4798      	blx	r3
    5702:	1c03      	adds	r3, r0, #0
    5704:	2b00      	cmp	r3, #0
    5706:	d1f8      	bne.n	56fa <tc_init+0x42a>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    570c:	68bb      	ldr	r3, [r7, #8]
    570e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5710:	46c0      	nop			; (mov r8, r8)
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	1c18      	adds	r0, r3, #0
    5716:	4b0e      	ldr	r3, [pc, #56]	; (5750 <tc_init+0x480>)
    5718:	4798      	blx	r3
    571a:	1c03      	adds	r3, r0, #0
    571c:	2b00      	cmp	r3, #0
    571e:	d1f8      	bne.n	5712 <tc_init+0x442>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    5724:	68bb      	ldr	r3, [r7, #8]
    5726:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    5728:	46c0      	nop			; (mov r8, r8)
    572a:	68fb      	ldr	r3, [r7, #12]
    572c:	1c18      	adds	r0, r3, #0
    572e:	4b08      	ldr	r3, [pc, #32]	; (5750 <tc_init+0x480>)
    5730:	4798      	blx	r3
    5732:	1c03      	adds	r3, r0, #0
    5734:	2b00      	cmp	r3, #0
    5736:	d1f8      	bne.n	572a <tc_init+0x45a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    5740:	2300      	movs	r3, #0
    5742:	e000      	b.n	5746 <tc_init+0x476>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5744:	2317      	movs	r3, #23
}
    5746:	1c18      	adds	r0, r3, #0
    5748:	46bd      	mov	sp, r7
    574a:	b00f      	add	sp, #60	; 0x3c
    574c:	bd90      	pop	{r4, r7, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	00005259 	.word	0x00005259

00005754 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	60f8      	str	r0, [r7, #12]
    575c:	60b9      	str	r1, [r7, #8]
    575e:	1dfb      	adds	r3, r7, #7
    5760:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5762:	1dfb      	adds	r3, r7, #7
    5764:	781a      	ldrb	r2, [r3, #0]
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	3202      	adds	r2, #2
    576a:	0092      	lsls	r2, r2, #2
    576c:	68b9      	ldr	r1, [r7, #8]
    576e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5770:	1dfb      	adds	r3, r7, #7
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b02      	cmp	r3, #2
    5776:	d107      	bne.n	5788 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5778:	68fb      	ldr	r3, [r7, #12]
    577a:	7e1b      	ldrb	r3, [r3, #24]
    577c:	2210      	movs	r2, #16
    577e:	4313      	orrs	r3, r2
    5780:	b2da      	uxtb	r2, r3
    5782:	68fb      	ldr	r3, [r7, #12]
    5784:	761a      	strb	r2, [r3, #24]
    5786:	e01a      	b.n	57be <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    5788:	1dfb      	adds	r3, r7, #7
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	2b03      	cmp	r3, #3
    578e:	d107      	bne.n	57a0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	7e1b      	ldrb	r3, [r3, #24]
    5794:	2220      	movs	r2, #32
    5796:	4313      	orrs	r3, r2
    5798:	b2da      	uxtb	r2, r3
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	761a      	strb	r2, [r3, #24]
    579e:	e00e      	b.n	57be <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    57a0:	68fb      	ldr	r3, [r7, #12]
    57a2:	7e1b      	ldrb	r3, [r3, #24]
    57a4:	b2da      	uxtb	r2, r3
    57a6:	1dfb      	adds	r3, r7, #7
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	2101      	movs	r1, #1
    57ac:	1c08      	adds	r0, r1, #0
    57ae:	4098      	lsls	r0, r3
    57b0:	1c03      	adds	r3, r0, #0
    57b2:	b2db      	uxtb	r3, r3
    57b4:	4313      	orrs	r3, r2
    57b6:	b2db      	uxtb	r3, r3
    57b8:	b2da      	uxtb	r2, r3
    57ba:	68fb      	ldr	r3, [r7, #12]
    57bc:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    57be:	2300      	movs	r3, #0
}
    57c0:	1c18      	adds	r0, r3, #0
    57c2:	46bd      	mov	sp, r7
    57c4:	b004      	add	sp, #16
    57c6:	bd80      	pop	{r7, pc}

000057c8 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    57c8:	b580      	push	{r7, lr}
    57ca:	af00      	add	r7, sp, #0
    57cc:	2000      	movs	r0, #0
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <TC0_Handler+0x10>)
    57d0:	4798      	blx	r3
    57d2:	46bd      	mov	sp, r7
    57d4:	bd80      	pop	{r7, pc}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	00005869 	.word	0x00005869

000057dc <TC1_Handler>:
    57dc:	b580      	push	{r7, lr}
    57de:	af00      	add	r7, sp, #0
    57e0:	2001      	movs	r0, #1
    57e2:	4b02      	ldr	r3, [pc, #8]	; (57ec <TC1_Handler+0x10>)
    57e4:	4798      	blx	r3
    57e6:	46bd      	mov	sp, r7
    57e8:	bd80      	pop	{r7, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	00005869 	.word	0x00005869

000057f0 <TC2_Handler>:
    57f0:	b580      	push	{r7, lr}
    57f2:	af00      	add	r7, sp, #0
    57f4:	2002      	movs	r0, #2
    57f6:	4b02      	ldr	r3, [pc, #8]	; (5800 <TC2_Handler+0x10>)
    57f8:	4798      	blx	r3
    57fa:	46bd      	mov	sp, r7
    57fc:	bd80      	pop	{r7, pc}
    57fe:	46c0      	nop			; (mov r8, r8)
    5800:	00005869 	.word	0x00005869

00005804 <TC3_Handler>:
    5804:	b580      	push	{r7, lr}
    5806:	af00      	add	r7, sp, #0
    5808:	2003      	movs	r0, #3
    580a:	4b02      	ldr	r3, [pc, #8]	; (5814 <TC3_Handler+0x10>)
    580c:	4798      	blx	r3
    580e:	46bd      	mov	sp, r7
    5810:	bd80      	pop	{r7, pc}
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	00005869 	.word	0x00005869

00005818 <TC4_Handler>:
    5818:	b580      	push	{r7, lr}
    581a:	af00      	add	r7, sp, #0
    581c:	2004      	movs	r0, #4
    581e:	4b02      	ldr	r3, [pc, #8]	; (5828 <TC4_Handler+0x10>)
    5820:	4798      	blx	r3
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	00005869 	.word	0x00005869

0000582c <TC5_Handler>:
    582c:	b580      	push	{r7, lr}
    582e:	af00      	add	r7, sp, #0
    5830:	2005      	movs	r0, #5
    5832:	4b02      	ldr	r3, [pc, #8]	; (583c <TC5_Handler+0x10>)
    5834:	4798      	blx	r3
    5836:	46bd      	mov	sp, r7
    5838:	bd80      	pop	{r7, pc}
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	00005869 	.word	0x00005869

00005840 <TC6_Handler>:
    5840:	b580      	push	{r7, lr}
    5842:	af00      	add	r7, sp, #0
    5844:	2006      	movs	r0, #6
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <TC6_Handler+0x10>)
    5848:	4798      	blx	r3
    584a:	46bd      	mov	sp, r7
    584c:	bd80      	pop	{r7, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	00005869 	.word	0x00005869

00005854 <TC7_Handler>:
    5854:	b580      	push	{r7, lr}
    5856:	af00      	add	r7, sp, #0
    5858:	2007      	movs	r0, #7
    585a:	4b02      	ldr	r3, [pc, #8]	; (5864 <TC7_Handler+0x10>)
    585c:	4798      	blx	r3
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	00005869 	.word	0x00005869

00005868 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5868:	b580      	push	{r7, lr}
    586a:	b084      	sub	sp, #16
    586c:	af00      	add	r7, sp, #0
    586e:	1c02      	adds	r2, r0, #0
    5870:	1dfb      	adds	r3, r7, #7
    5872:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    5874:	1dfb      	adds	r3, r7, #7
    5876:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5878:	4b28      	ldr	r3, [pc, #160]	; (591c <_tc_interrupt_handler+0xb4>)
    587a:	0092      	lsls	r2, r2, #2
    587c:	58d3      	ldr	r3, [r2, r3]
    587e:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	7b9b      	ldrb	r3, [r3, #14]
    5886:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    588c:	4013      	ands	r3, r2
    588e:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5894:	1c3b      	adds	r3, r7, #0
    5896:	330b      	adds	r3, #11
    5898:	400a      	ands	r2, r1
    589a:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    589c:	1c3b      	adds	r3, r7, #0
    589e:	330b      	adds	r3, #11
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	2301      	movs	r3, #1
    58a4:	4013      	ands	r3, r2
    58a6:	d008      	beq.n	58ba <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	689b      	ldr	r3, [r3, #8]
    58ac:	68fa      	ldr	r2, [r7, #12]
    58ae:	1c10      	adds	r0, r2, #0
    58b0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	2201      	movs	r2, #1
    58b8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    58ba:	1c3b      	adds	r3, r7, #0
    58bc:	330b      	adds	r3, #11
    58be:	781a      	ldrb	r2, [r3, #0]
    58c0:	2302      	movs	r3, #2
    58c2:	4013      	ands	r3, r2
    58c4:	d008      	beq.n	58d8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	68db      	ldr	r3, [r3, #12]
    58ca:	68fa      	ldr	r2, [r7, #12]
    58cc:	1c10      	adds	r0, r2, #0
    58ce:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	2202      	movs	r2, #2
    58d6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    58d8:	1c3b      	adds	r3, r7, #0
    58da:	330b      	adds	r3, #11
    58dc:	781a      	ldrb	r2, [r3, #0]
    58de:	2310      	movs	r3, #16
    58e0:	4013      	ands	r3, r2
    58e2:	d008      	beq.n	58f6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	691b      	ldr	r3, [r3, #16]
    58e8:	68fa      	ldr	r2, [r7, #12]
    58ea:	1c10      	adds	r0, r2, #0
    58ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	2210      	movs	r2, #16
    58f4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    58f6:	1c3b      	adds	r3, r7, #0
    58f8:	330b      	adds	r3, #11
    58fa:	781a      	ldrb	r2, [r3, #0]
    58fc:	2320      	movs	r3, #32
    58fe:	4013      	ands	r3, r2
    5900:	d008      	beq.n	5914 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5902:	68fb      	ldr	r3, [r7, #12]
    5904:	695b      	ldr	r3, [r3, #20]
    5906:	68fa      	ldr	r2, [r7, #12]
    5908:	1c10      	adds	r0, r2, #0
    590a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	2220      	movs	r2, #32
    5912:	739a      	strb	r2, [r3, #14]
	}
}
    5914:	46bd      	mov	sp, r7
    5916:	b004      	add	sp, #16
    5918:	bd80      	pop	{r7, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	20000578 	.word	0x20000578

00005920 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5920:	b580      	push	{r7, lr}
    5922:	b082      	sub	sp, #8
    5924:	af00      	add	r7, sp, #0
    5926:	1c02      	adds	r2, r0, #0
    5928:	6039      	str	r1, [r7, #0]
    592a:	1dfb      	adds	r3, r7, #7
    592c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    592e:	1dfb      	adds	r3, r7, #7
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2b01      	cmp	r3, #1
    5934:	d00a      	beq.n	594c <system_apb_clock_set_mask+0x2c>
    5936:	2b02      	cmp	r3, #2
    5938:	d00f      	beq.n	595a <system_apb_clock_set_mask+0x3a>
    593a:	2b00      	cmp	r3, #0
    593c:	d114      	bne.n	5968 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    593e:	4b0e      	ldr	r3, [pc, #56]	; (5978 <system_apb_clock_set_mask+0x58>)
    5940:	4a0d      	ldr	r2, [pc, #52]	; (5978 <system_apb_clock_set_mask+0x58>)
    5942:	6991      	ldr	r1, [r2, #24]
    5944:	683a      	ldr	r2, [r7, #0]
    5946:	430a      	orrs	r2, r1
    5948:	619a      	str	r2, [r3, #24]
			break;
    594a:	e00f      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    594c:	4b0a      	ldr	r3, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    594e:	4a0a      	ldr	r2, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    5950:	69d1      	ldr	r1, [r2, #28]
    5952:	683a      	ldr	r2, [r7, #0]
    5954:	430a      	orrs	r2, r1
    5956:	61da      	str	r2, [r3, #28]
			break;
    5958:	e008      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    595a:	4b07      	ldr	r3, [pc, #28]	; (5978 <system_apb_clock_set_mask+0x58>)
    595c:	4a06      	ldr	r2, [pc, #24]	; (5978 <system_apb_clock_set_mask+0x58>)
    595e:	6a11      	ldr	r1, [r2, #32]
    5960:	683a      	ldr	r2, [r7, #0]
    5962:	430a      	orrs	r2, r1
    5964:	621a      	str	r2, [r3, #32]
			break;
    5966:	e001      	b.n	596c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5968:	2317      	movs	r3, #23
    596a:	e000      	b.n	596e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    596c:	2300      	movs	r3, #0
}
    596e:	1c18      	adds	r0, r3, #0
    5970:	46bd      	mov	sp, r7
    5972:	b002      	add	sp, #8
    5974:	bd80      	pop	{r7, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	40000400 	.word	0x40000400

0000597c <wdt_is_syncing>:
 *
 * \retval true If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    597c:	b580      	push	{r7, lr}
    597e:	b082      	sub	sp, #8
    5980:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5982:	4b08      	ldr	r3, [pc, #32]	; (59a4 <wdt_is_syncing+0x28>)
    5984:	607b      	str	r3, [r7, #4]

#if (SAML21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	79db      	ldrb	r3, [r3, #7]
    598a:	b2db      	uxtb	r3, r3
    598c:	b2db      	uxtb	r3, r3
    598e:	b25b      	sxtb	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	da01      	bge.n	5998 <wdt_is_syncing+0x1c>
#endif
		return true;
    5994:	2301      	movs	r3, #1
    5996:	e000      	b.n	599a <wdt_is_syncing+0x1e>
	}

	return false;
    5998:	2300      	movs	r3, #0
}
    599a:	1c18      	adds	r0, r3, #0
    599c:	46bd      	mov	sp, r7
    599e:	b002      	add	sp, #8
    59a0:	bd80      	pop	{r7, pc}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	40001000 	.word	0x40001000

000059a8 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    59ae:	4b07      	ldr	r3, [pc, #28]	; (59cc <wdt_is_locked+0x24>)
    59b0:	607b      	str	r3, [r7, #4]

#if (SAML21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	781b      	ldrb	r3, [r3, #0]
    59b6:	b2db      	uxtb	r3, r3
    59b8:	1c1a      	adds	r2, r3, #0
    59ba:	2380      	movs	r3, #128	; 0x80
    59bc:	4013      	ands	r3, r2
    59be:	1e5a      	subs	r2, r3, #1
    59c0:	4193      	sbcs	r3, r2
    59c2:	b2db      	uxtb	r3, r3
#endif
}
    59c4:	1c18      	adds	r0, r3, #0
    59c6:	46bd      	mov	sp, r7
    59c8:	b002      	add	sp, #8
    59ca:	bd80      	pop	{r7, pc}
    59cc:	40001000 	.word	0x40001000

000059d0 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b086      	sub	sp, #24
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    59d8:	4b56      	ldr	r3, [pc, #344]	; (5b34 <wdt_set_config+0x164>)
    59da:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    59dc:	2000      	movs	r0, #0
    59de:	2110      	movs	r1, #16
    59e0:	4b55      	ldr	r3, [pc, #340]	; (5b38 <wdt_set_config+0x168>)
    59e2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    59e4:	4b55      	ldr	r3, [pc, #340]	; (5b3c <wdt_set_config+0x16c>)
    59e6:	4798      	blx	r3
    59e8:	1c03      	adds	r3, r0, #0
    59ea:	2b00      	cmp	r3, #0
    59ec:	d001      	beq.n	59f2 <wdt_set_config+0x22>
		return STATUS_ERR_IO;
    59ee:	2310      	movs	r3, #16
    59f0:	e09c      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	78db      	ldrb	r3, [r3, #3]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d101      	bne.n	59fe <wdt_set_config+0x2e>
		return STATUS_ERR_INVALID_ARG;
    59fa:	2317      	movs	r3, #23
    59fc:	e096      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	78da      	ldrb	r2, [r3, #3]
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	791b      	ldrb	r3, [r3, #4]
    5a06:	429a      	cmp	r2, r3
    5a08:	d305      	bcc.n	5a16 <wdt_set_config+0x46>
			(config->timeout_period < config->early_warning_period)) {
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	78da      	ldrb	r2, [r3, #3]
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    5a12:	429a      	cmp	r2, r3
    5a14:	d201      	bcs.n	5a1a <wdt_set_config+0x4a>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
    5a16:	2317      	movs	r3, #23
    5a18:	e088      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    5a1a:	693b      	ldr	r3, [r7, #16]
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	b2db      	uxtb	r3, r3
    5a20:	2202      	movs	r2, #2
    5a22:	4393      	bics	r3, r2
    5a24:	b2da      	uxtb	r2, r3
    5a26:	693b      	ldr	r3, [r7, #16]
    5a28:	701a      	strb	r2, [r3, #0]

	if(config->enable == false) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	785b      	ldrb	r3, [r3, #1]
    5a2e:	2201      	movs	r2, #1
    5a30:	4053      	eors	r3, r2
    5a32:	b2db      	uxtb	r3, r3
    5a34:	2b00      	cmp	r3, #0
    5a36:	d001      	beq.n	5a3c <wdt_set_config+0x6c>
		return STATUS_OK;
    5a38:	2300      	movs	r3, #0
    5a3a:	e077      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	789a      	ldrb	r2, [r3, #2]
    5a40:	1c3b      	adds	r3, r7, #0
    5a42:	330c      	adds	r3, #12
    5a44:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    5a46:	1c3b      	adds	r3, r7, #0
    5a48:	330c      	adds	r3, #12
    5a4a:	2001      	movs	r0, #1
    5a4c:	1c19      	adds	r1, r3, #0
    5a4e:	4b3c      	ldr	r3, [pc, #240]	; (5b40 <wdt_set_config+0x170>)
    5a50:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    5a52:	2001      	movs	r0, #1
    5a54:	4b3b      	ldr	r3, [pc, #236]	; (5b44 <wdt_set_config+0x174>)
    5a56:	4798      	blx	r3
	if (config->always_on) {
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	d003      	beq.n	5a68 <wdt_set_config+0x98>
		system_gclk_chan_lock(WDT_GCLK_ID);
    5a60:	2001      	movs	r0, #1
    5a62:	4b39      	ldr	r3, [pc, #228]	; (5b48 <wdt_set_config+0x178>)
    5a64:	4798      	blx	r3
	}

	while (wdt_is_syncing()) {
    5a66:	e7ff      	b.n	5a68 <wdt_set_config+0x98>
    5a68:	46c0      	nop			; (mov r8, r8)
    5a6a:	4b38      	ldr	r3, [pc, #224]	; (5b4c <wdt_set_config+0x17c>)
    5a6c:	4798      	blx	r3
    5a6e:	1c03      	adds	r3, r0, #0
    5a70:	2b00      	cmp	r3, #0
    5a72:	d1fa      	bne.n	5a6a <wdt_set_config+0x9a>
		/* Wait for all hardware modules to complete synchronization */
	}

	uint32_t new_config = 0;
    5a74:	2300      	movs	r3, #0
    5a76:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	78db      	ldrb	r3, [r3, #3]
    5a7c:	3b01      	subs	r3, #1
    5a7e:	697a      	ldr	r2, [r7, #20]
    5a80:	4313      	orrs	r3, r2
    5a82:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	791b      	ldrb	r3, [r3, #4]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d00f      	beq.n	5aac <wdt_set_config+0xdc>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    5a8c:	693b      	ldr	r3, [r7, #16]
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	b2db      	uxtb	r3, r3
    5a92:	2204      	movs	r2, #4
    5a94:	4313      	orrs	r3, r2
    5a96:	b2da      	uxtb	r2, r3
    5a98:	693b      	ldr	r3, [r7, #16]
    5a9a:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	791b      	ldrb	r3, [r3, #4]
    5aa0:	3b01      	subs	r3, #1
    5aa2:	011b      	lsls	r3, r3, #4
    5aa4:	697a      	ldr	r2, [r7, #20]
    5aa6:	4313      	orrs	r3, r2
    5aa8:	617b      	str	r3, [r7, #20]
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
	}

	while (wdt_is_syncing()) {
    5aaa:	e007      	b.n	5abc <wdt_set_config+0xec>

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    5aac:	693b      	ldr	r3, [r7, #16]
    5aae:	781b      	ldrb	r3, [r3, #0]
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	2204      	movs	r2, #4
    5ab4:	4393      	bics	r3, r2
    5ab6:	b2da      	uxtb	r2, r3
    5ab8:	693b      	ldr	r3, [r7, #16]
    5aba:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    5abc:	46c0      	nop			; (mov r8, r8)
    5abe:	4b23      	ldr	r3, [pc, #140]	; (5b4c <wdt_set_config+0x17c>)
    5ac0:	4798      	blx	r3
    5ac2:	1c03      	adds	r3, r0, #0
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d1fa      	bne.n	5abe <wdt_set_config+0xee>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    5ac8:	697b      	ldr	r3, [r7, #20]
    5aca:	b2da      	uxtb	r2, r3
    5acc:	693b      	ldr	r3, [r7, #16]
    5ace:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	795b      	ldrb	r3, [r3, #5]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d00c      	beq.n	5af2 <wdt_set_config+0x122>
		while (wdt_is_syncing()) {
    5ad8:	46c0      	nop			; (mov r8, r8)
    5ada:	4b1c      	ldr	r3, [pc, #112]	; (5b4c <wdt_set_config+0x17c>)
    5adc:	4798      	blx	r3
    5ade:	1c03      	adds	r3, r0, #0
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d1fa      	bne.n	5ada <wdt_set_config+0x10a>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	795b      	ldrb	r3, [r3, #5]
    5ae8:	3b01      	subs	r3, #1
    5aea:	b2da      	uxtb	r2, r3
    5aec:	693b      	ldr	r3, [r7, #16]
    5aee:	709a      	strb	r2, [r3, #2]
	}

	while (wdt_is_syncing()) {
    5af0:	e7ff      	b.n	5af2 <wdt_set_config+0x122>
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	4b15      	ldr	r3, [pc, #84]	; (5b4c <wdt_set_config+0x17c>)
    5af6:	4798      	blx	r3
    5af8:	1c03      	adds	r3, r0, #0
    5afa:	2b00      	cmp	r3, #0
    5afc:	d1fa      	bne.n	5af4 <wdt_set_config+0x124>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	781b      	ldrb	r3, [r3, #0]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d009      	beq.n	5b1a <wdt_set_config+0x14a>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    5b06:	693b      	ldr	r3, [r7, #16]
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	b2db      	uxtb	r3, r3
    5b0c:	2280      	movs	r2, #128	; 0x80
    5b0e:	4252      	negs	r2, r2
    5b10:	4313      	orrs	r3, r2
    5b12:	b2da      	uxtb	r2, r3
    5b14:	693b      	ldr	r3, [r7, #16]
    5b16:	701a      	strb	r2, [r3, #0]
    5b18:	e007      	b.n	5b2a <wdt_set_config+0x15a>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    5b1a:	693b      	ldr	r3, [r7, #16]
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	b2db      	uxtb	r3, r3
    5b20:	2202      	movs	r2, #2
    5b22:	4313      	orrs	r3, r2
    5b24:	b2da      	uxtb	r2, r3
    5b26:	693b      	ldr	r3, [r7, #16]
    5b28:	701a      	strb	r2, [r3, #0]
	}

	return STATUS_OK;
    5b2a:	2300      	movs	r3, #0
}
    5b2c:	1c18      	adds	r0, r3, #0
    5b2e:	46bd      	mov	sp, r7
    5b30:	b006      	add	sp, #24
    5b32:	bd80      	pop	{r7, pc}
    5b34:	40001000 	.word	0x40001000
    5b38:	00005921 	.word	0x00005921
    5b3c:	000059a9 	.word	0x000059a9
    5b40:	00012ea5 	.word	0x00012ea5
    5b44:	00012ee5 	.word	0x00012ee5
    5b48:	00012fc1 	.word	0x00012fc1
    5b4c:	0000597d 	.word	0x0000597d

00005b50 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    5b50:	b580      	push	{r7, lr}
    5b52:	b082      	sub	sp, #8
    5b54:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5b56:	4b07      	ldr	r3, [pc, #28]	; (5b74 <wdt_reset_count+0x24>)
    5b58:	607b      	str	r3, [r7, #4]

	while (wdt_is_syncing()) {
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	4b06      	ldr	r3, [pc, #24]	; (5b78 <wdt_reset_count+0x28>)
    5b5e:	4798      	blx	r3
    5b60:	1c03      	adds	r3, r0, #0
    5b62:	2b00      	cmp	r3, #0
    5b64:	d1fa      	bne.n	5b5c <wdt_reset_count+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	22a5      	movs	r2, #165	; 0xa5
    5b6a:	721a      	strb	r2, [r3, #8]
}
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b002      	add	sp, #8
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	40001000 	.word	0x40001000
    5b78:	0000597d 	.word	0x0000597d

00005b7c <AccelProvideDecisions>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideDecisions(int16_t value, uint8_t direction,int16_t baseline)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b086      	sub	sp, #24
    5b80:	af00      	add	r7, sp, #0
    5b82:	1dbb      	adds	r3, r7, #6
    5b84:	8018      	strh	r0, [r3, #0]
    5b86:	1d7b      	adds	r3, r7, #5
    5b88:	7019      	strb	r1, [r3, #0]
    5b8a:	1cbb      	adds	r3, r7, #2
    5b8c:	801a      	strh	r2, [r3, #0]
	uint8_t status,i,done; 
	status = 0;
    5b8e:	1c3b      	adds	r3, r7, #0
    5b90:	3317      	adds	r3, #23
    5b92:	2200      	movs	r2, #0
    5b94:	701a      	strb	r2, [r3, #0]
	int32_t temp,temp2;
	uint8_t gainin;

	gainin = table0.Item.MaxForce;
    5b96:	1c3b      	adds	r3, r7, #0
    5b98:	3314      	adds	r3, #20
    5b9a:	4a35      	ldr	r2, [pc, #212]	; (5c70 <AccelProvideDecisions+0xf4>)
    5b9c:	7892      	ldrb	r2, [r2, #2]
    5b9e:	701a      	strb	r2, [r3, #0]
	if (xDecisionBufferFill != 0)
    5ba0:	4b34      	ldr	r3, [pc, #208]	; (5c74 <AccelProvideDecisions+0xf8>)
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d05c      	beq.n	5c62 <AccelProvideDecisions+0xe6>
	{
		done = 0;
    5ba8:	1c3b      	adds	r3, r7, #0
    5baa:	3315      	adds	r3, #21
    5bac:	2200      	movs	r2, #0
    5bae:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5bb0:	1c3b      	adds	r3, r7, #0
    5bb2:	3316      	adds	r3, #22
    5bb4:	2200      	movs	r2, #0
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	e045      	b.n	5c46 <AccelProvideDecisions+0xca>
		{
			temp = xDecisionBuffer[i] - baseline;
    5bba:	1c3b      	adds	r3, r7, #0
    5bbc:	3316      	adds	r3, #22
    5bbe:	781a      	ldrb	r2, [r3, #0]
    5bc0:	4b2d      	ldr	r3, [pc, #180]	; (5c78 <AccelProvideDecisions+0xfc>)
    5bc2:	0052      	lsls	r2, r2, #1
    5bc4:	5ad3      	ldrh	r3, [r2, r3]
    5bc6:	b21a      	sxth	r2, r3
    5bc8:	1cbb      	adds	r3, r7, #2
    5bca:	2100      	movs	r1, #0
    5bcc:	5e5b      	ldrsh	r3, [r3, r1]
    5bce:	1ad3      	subs	r3, r2, r3
    5bd0:	613b      	str	r3, [r7, #16]
			temp2 = gainin*10;
    5bd2:	1c3b      	adds	r3, r7, #0
    5bd4:	3314      	adds	r3, #20
    5bd6:	781a      	ldrb	r2, [r3, #0]
    5bd8:	1c13      	adds	r3, r2, #0
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	189b      	adds	r3, r3, r2
    5bde:	005b      	lsls	r3, r3, #1
    5be0:	60fb      	str	r3, [r7, #12]
			temp2 = temp2/5; 
    5be2:	68fa      	ldr	r2, [r7, #12]
    5be4:	4b25      	ldr	r3, [pc, #148]	; (5c7c <AccelProvideDecisions+0x100>)
    5be6:	1c10      	adds	r0, r2, #0
    5be8:	2105      	movs	r1, #5
    5bea:	4798      	blx	r3
    5bec:	1c03      	adds	r3, r0, #0
    5bee:	60fb      	str	r3, [r7, #12]
			temp = temp * temp2;
    5bf0:	693b      	ldr	r3, [r7, #16]
    5bf2:	68fa      	ldr	r2, [r7, #12]
    5bf4:	4353      	muls	r3, r2
    5bf6:	613b      	str	r3, [r7, #16]
			temp = temp/10; 
    5bf8:	693a      	ldr	r2, [r7, #16]
    5bfa:	4b20      	ldr	r3, [pc, #128]	; (5c7c <AccelProvideDecisions+0x100>)
    5bfc:	1c10      	adds	r0, r2, #0
    5bfe:	210a      	movs	r1, #10
    5c00:	4798      	blx	r3
    5c02:	1c03      	adds	r3, r0, #0
    5c04:	613b      	str	r3, [r7, #16]
			if (direction == DECISION_GREATER)
    5c06:	1d7b      	adds	r3, r7, #5
    5c08:	781b      	ldrb	r3, [r3, #0]
    5c0a:	2b01      	cmp	r3, #1
    5c0c:	d10a      	bne.n	5c24 <AccelProvideDecisions+0xa8>
			{
				if (temp <value)
    5c0e:	1dbb      	adds	r3, r7, #6
    5c10:	2100      	movs	r1, #0
    5c12:	5e5a      	ldrsh	r2, [r3, r1]
    5c14:	693b      	ldr	r3, [r7, #16]
    5c16:	429a      	cmp	r2, r3
    5c18:	dd0e      	ble.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c1a:	1c3b      	adds	r3, r7, #0
    5c1c:	3315      	adds	r3, #21
    5c1e:	2201      	movs	r2, #1
    5c20:	701a      	strb	r2, [r3, #0]
    5c22:	e009      	b.n	5c38 <AccelProvideDecisions+0xbc>
				}
			}
			else
			{
				if (temp >value)
    5c24:	1dbb      	adds	r3, r7, #6
    5c26:	2100      	movs	r1, #0
    5c28:	5e5a      	ldrsh	r2, [r3, r1]
    5c2a:	693b      	ldr	r3, [r7, #16]
    5c2c:	429a      	cmp	r2, r3
    5c2e:	da03      	bge.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c30:	1c3b      	adds	r3, r7, #0
    5c32:	3315      	adds	r3, #21
    5c34:	2201      	movs	r2, #1
    5c36:	701a      	strb	r2, [r3, #0]

	gainin = table0.Item.MaxForce;
	if (xDecisionBufferFill != 0)
	{
		done = 0;
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5c38:	1c3b      	adds	r3, r7, #0
    5c3a:	3316      	adds	r3, #22
    5c3c:	781a      	ldrb	r2, [r3, #0]
    5c3e:	1c3b      	adds	r3, r7, #0
    5c40:	3316      	adds	r3, #22
    5c42:	3201      	adds	r2, #1
    5c44:	701a      	strb	r2, [r3, #0]
    5c46:	1c3b      	adds	r3, r7, #0
    5c48:	3316      	adds	r3, #22
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	2b04      	cmp	r3, #4
    5c4e:	d9b4      	bls.n	5bba <AccelProvideDecisions+0x3e>
				{
					done = 1; 
				}				
			}
		}
		if (done == 0)
    5c50:	1c3b      	adds	r3, r7, #0
    5c52:	3315      	adds	r3, #21
    5c54:	781b      	ldrb	r3, [r3, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d103      	bne.n	5c62 <AccelProvideDecisions+0xe6>
		{
			status = 1;
    5c5a:	1c3b      	adds	r3, r7, #0
    5c5c:	3317      	adds	r3, #23
    5c5e:	2201      	movs	r2, #1
    5c60:	701a      	strb	r2, [r3, #0]
		*y = positionYaverage;
		*z = positionZaverage;
		status = 1; 
	}
*/	
	return status; 
    5c62:	1c3b      	adds	r3, r7, #0
    5c64:	3317      	adds	r3, #23
    5c66:	781b      	ldrb	r3, [r3, #0]
}
    5c68:	1c18      	adds	r0, r3, #0
    5c6a:	46bd      	mov	sp, r7
    5c6c:	b006      	add	sp, #24
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	20002f98 	.word	0x20002f98
    5c74:	20000608 	.word	0x20000608
    5c78:	200005f8 	.word	0x200005f8
    5c7c:	000146d5 	.word	0x000146d5

00005c80 <AccelProvideReadingChange>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReadingChange(uint16_t *x, uint16_t *y, uint16_t *z,uint8_t *change)
{
    5c80:	b580      	push	{r7, lr}
    5c82:	b086      	sub	sp, #24
    5c84:	af00      	add	r7, sp, #0
    5c86:	60f8      	str	r0, [r7, #12]
    5c88:	60b9      	str	r1, [r7, #8]
    5c8a:	607a      	str	r2, [r7, #4]
    5c8c:	603b      	str	r3, [r7, #0]
	uint8_t status; 
	status = 0;
    5c8e:	1c3b      	adds	r3, r7, #0
    5c90:	3317      	adds	r3, #23
    5c92:	2200      	movs	r2, #0
    5c94:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5c96:	4b14      	ldr	r3, [pc, #80]	; (5ce8 <AccelProvideReadingChange+0x68>)
    5c98:	781b      	ldrb	r3, [r3, #0]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d01c      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
	{
		*x = positionXaverage;
    5c9e:	4b13      	ldr	r3, [pc, #76]	; (5cec <AccelProvideReadingChange+0x6c>)
    5ca0:	881b      	ldrh	r3, [r3, #0]
    5ca2:	b29a      	uxth	r2, r3
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5ca8:	4b11      	ldr	r3, [pc, #68]	; (5cf0 <AccelProvideReadingChange+0x70>)
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	b29a      	uxth	r2, r3
    5cae:	68bb      	ldr	r3, [r7, #8]
    5cb0:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5cb2:	4b10      	ldr	r3, [pc, #64]	; (5cf4 <AccelProvideReadingChange+0x74>)
    5cb4:	881b      	ldrh	r3, [r3, #0]
    5cb6:	b29a      	uxth	r2, r3
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5cbc:	1c3b      	adds	r3, r7, #0
    5cbe:	3317      	adds	r3, #23
    5cc0:	2201      	movs	r2, #1
    5cc2:	701a      	strb	r2, [r3, #0]
		if (accelerometerChange!=0)
    5cc4:	4b0c      	ldr	r3, [pc, #48]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cc6:	781b      	ldrb	r3, [r3, #0]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d005      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
		{
			accelerometerChange = 0; 
    5ccc:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cce:	2200      	movs	r2, #0
    5cd0:	701a      	strb	r2, [r3, #0]
			*change = 1; 
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	2201      	movs	r2, #1
    5cd6:	701a      	strb	r2, [r3, #0]
		}
	}
	return status; 
    5cd8:	1c3b      	adds	r3, r7, #0
    5cda:	3317      	adds	r3, #23
    5cdc:	781b      	ldrb	r3, [r3, #0]
} 
    5cde:	1c18      	adds	r0, r3, #0
    5ce0:	46bd      	mov	sp, r7
    5ce2:	b006      	add	sp, #24
    5ce4:	bd80      	pop	{r7, pc}
    5ce6:	46c0      	nop			; (mov r8, r8)
    5ce8:	200005ca 	.word	0x200005ca
    5cec:	2000049e 	.word	0x2000049e
    5cf0:	200004a0 	.word	0x200004a0
    5cf4:	200004a2 	.word	0x200004a2
    5cf8:	20000636 	.word	0x20000636

00005cfc <AccelProvideReading>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReading(uint16_t *x, uint16_t *y, uint16_t *z)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b086      	sub	sp, #24
    5d00:	af00      	add	r7, sp, #0
    5d02:	60f8      	str	r0, [r7, #12]
    5d04:	60b9      	str	r1, [r7, #8]
    5d06:	607a      	str	r2, [r7, #4]
	uint8_t status; 
	status = 0;
    5d08:	1c3b      	adds	r3, r7, #0
    5d0a:	3317      	adds	r3, #23
    5d0c:	2200      	movs	r2, #0
    5d0e:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5d10:	4b0e      	ldr	r3, [pc, #56]	; (5d4c <AccelProvideReading+0x50>)
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d012      	beq.n	5d3e <AccelProvideReading+0x42>
	{
		*x = positionXaverage;
    5d18:	4b0d      	ldr	r3, [pc, #52]	; (5d50 <AccelProvideReading+0x54>)
    5d1a:	881b      	ldrh	r3, [r3, #0]
    5d1c:	b29a      	uxth	r2, r3
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5d22:	4b0c      	ldr	r3, [pc, #48]	; (5d54 <AccelProvideReading+0x58>)
    5d24:	881b      	ldrh	r3, [r3, #0]
    5d26:	b29a      	uxth	r2, r3
    5d28:	68bb      	ldr	r3, [r7, #8]
    5d2a:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5d2c:	4b0a      	ldr	r3, [pc, #40]	; (5d58 <AccelProvideReading+0x5c>)
    5d2e:	881b      	ldrh	r3, [r3, #0]
    5d30:	b29a      	uxth	r2, r3
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5d36:	1c3b      	adds	r3, r7, #0
    5d38:	3317      	adds	r3, #23
    5d3a:	2201      	movs	r2, #1
    5d3c:	701a      	strb	r2, [r3, #0]
	}
	return status; 
    5d3e:	1c3b      	adds	r3, r7, #0
    5d40:	3317      	adds	r3, #23
    5d42:	781b      	ldrb	r3, [r3, #0]
}
    5d44:	1c18      	adds	r0, r3, #0
    5d46:	46bd      	mov	sp, r7
    5d48:	b006      	add	sp, #24
    5d4a:	bd80      	pop	{r7, pc}
    5d4c:	200005ca 	.word	0x200005ca
    5d50:	2000049e 	.word	0x2000049e
    5d54:	200004a0 	.word	0x200004a0
    5d58:	200004a2 	.word	0x200004a2

00005d5c <AccelRead>:
// FUNCTION:   AccelRead
//------------------------------------------------------------------------------
// This function Read a byte from the accelerometer. 
//==============================================================================
uint8_t AccelRead(uint8_t address)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	b084      	sub	sp, #16
    5d60:	af00      	add	r7, sp, #0
    5d62:	1c02      	adds	r2, r0, #0
    5d64:	1dfb      	adds	r3, r7, #7
    5d66:	701a      	strb	r2, [r3, #0]
	{
		value = tempBuffer[0]; 
	}
#endif 
#if BRAKEBOARD
	value = 0;
    5d68:	1c3b      	adds	r3, r7, #0
    5d6a:	330f      	adds	r3, #15
    5d6c:	2200      	movs	r2, #0
    5d6e:	701a      	strb	r2, [r3, #0]
	tempBuffer[0] = 0;
    5d70:	1c3b      	adds	r3, r7, #0
    5d72:	330c      	adds	r3, #12
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
	if (I2CAccelBufferRead(tempBuffer,address,1)!= 0)
    5d78:	1c3a      	adds	r2, r7, #0
    5d7a:	320c      	adds	r2, #12
    5d7c:	1dfb      	adds	r3, r7, #7
    5d7e:	781b      	ldrb	r3, [r3, #0]
    5d80:	1c10      	adds	r0, r2, #0
    5d82:	1c19      	adds	r1, r3, #0
    5d84:	2201      	movs	r2, #1
    5d86:	4b09      	ldr	r3, [pc, #36]	; (5dac <AccelRead+0x50>)
    5d88:	4798      	blx	r3
    5d8a:	1c03      	adds	r3, r0, #0
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d005      	beq.n	5d9c <AccelRead+0x40>
	{
		value = tempBuffer[0];
    5d90:	1c3b      	adds	r3, r7, #0
    5d92:	330f      	adds	r3, #15
    5d94:	1c3a      	adds	r2, r7, #0
    5d96:	320c      	adds	r2, #12
    5d98:	7812      	ldrb	r2, [r2, #0]
    5d9a:	701a      	strb	r2, [r3, #0]
	}
#endif
	return value;
    5d9c:	1c3b      	adds	r3, r7, #0
    5d9e:	330f      	adds	r3, #15
    5da0:	781b      	ldrb	r3, [r3, #0]
} 
    5da2:	1c18      	adds	r0, r3, #0
    5da4:	46bd      	mov	sp, r7
    5da6:	b004      	add	sp, #16
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	0000b311 	.word	0x0000b311

00005db0 <AccelWrite>:
// FUNCTION:   AccelWrite
//------------------------------------------------------------------------------
// This function will write a byte to the accelerometer
//==============================================================================
void AccelWrite(uint8_t address, uint8_t data)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b084      	sub	sp, #16
    5db4:	af00      	add	r7, sp, #0
    5db6:	1c0a      	adds	r2, r1, #0
    5db8:	1dfb      	adds	r3, r7, #7
    5dba:	1c01      	adds	r1, r0, #0
    5dbc:	7019      	strb	r1, [r3, #0]
    5dbe:	1dbb      	adds	r3, r7, #6
    5dc0:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[3];
 	tempBuffer[0] = data;
    5dc2:	1c3b      	adds	r3, r7, #0
    5dc4:	330c      	adds	r3, #12
    5dc6:	1dba      	adds	r2, r7, #6
    5dc8:	7812      	ldrb	r2, [r2, #0]
    5dca:	701a      	strb	r2, [r3, #0]
 	if (SPIAInOut(address,tempBuffer,1)!= 0)
 	{
 	}
#endif
#if BRAKEBOARD
	if (I2CAccelBufferWrite(tempBuffer,address,1)!= 0)
    5dcc:	1c3a      	adds	r2, r7, #0
    5dce:	320c      	adds	r2, #12
    5dd0:	1dfb      	adds	r3, r7, #7
    5dd2:	781b      	ldrb	r3, [r3, #0]
    5dd4:	1c10      	adds	r0, r2, #0
    5dd6:	1c19      	adds	r1, r3, #0
    5dd8:	2201      	movs	r2, #1
    5dda:	4b02      	ldr	r3, [pc, #8]	; (5de4 <AccelWrite+0x34>)
    5ddc:	4798      	blx	r3
	{
		
	}
#endif	 
}
    5dde:	46bd      	mov	sp, r7
    5de0:	b004      	add	sp, #16
    5de2:	bd80      	pop	{r7, pc}
    5de4:	0000b491 	.word	0x0000b491

00005de8 <AccelInit>:
// FUNCTION:   AccelIinit
//------------------------------------------------------------------------------
// This function will Initialize the accelerometer
//==============================================================================
uint8_t AccelInit(void)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
//  GPIO_Init(GPIOC, &GPIO_InitStructure);
 
  //------------------------------------------------
  // Turn on the sensor and Enable X, Y, and Z
  //------------------------------------------------
  AccelWrite(MEMS_CTRL_REG1, ( 0x90 | MEMS_Z_ENABLE
    5dee:	2020      	movs	r0, #32
    5df0:	2197      	movs	r1, #151	; 0x97
    5df2:	4b2c      	ldr	r3, [pc, #176]	; (5ea4 <AccelInit+0xbc>)
    5df4:	4798      	blx	r3
                                       | MEMS_Y_ENABLE | MEMS_X_ENABLE ));
  //-----------------------------------------
  // Set up the Interrupt pin configuration(s)
//  AccelWrite(MEMS_CTRL_REG3, ( MEMS_ICFG_FF_WU ));
	AccelWrite(0x23, ( 0x08 )); 
    5df6:	2023      	movs	r0, #35	; 0x23
    5df8:	2108      	movs	r1, #8
    5dfa:	4b2a      	ldr	r3, [pc, #168]	; (5ea4 <AccelInit+0xbc>)
    5dfc:	4798      	blx	r3
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5dfe:	1dfb      	adds	r3, r7, #7
    5e00:	2200      	movs	r2, #0
    5e02:	701a      	strb	r2, [r3, #0]
    5e04:	e016      	b.n	5e34 <AccelInit+0x4c>
	{
		xPositionBuffer[i]=0;
    5e06:	1dfb      	adds	r3, r7, #7
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	4b27      	ldr	r3, [pc, #156]	; (5ea8 <AccelInit+0xc0>)
    5e0c:	0052      	lsls	r2, r2, #1
    5e0e:	2100      	movs	r1, #0
    5e10:	52d1      	strh	r1, [r2, r3]
		yPositionBuffer[i]=0;
    5e12:	1dfb      	adds	r3, r7, #7
    5e14:	781a      	ldrb	r2, [r3, #0]
    5e16:	4b25      	ldr	r3, [pc, #148]	; (5eac <AccelInit+0xc4>)
    5e18:	0052      	lsls	r2, r2, #1
    5e1a:	2100      	movs	r1, #0
    5e1c:	52d1      	strh	r1, [r2, r3]
		zPositionBuffer[i]=0;
    5e1e:	1dfb      	adds	r3, r7, #7
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	4b23      	ldr	r3, [pc, #140]	; (5eb0 <AccelInit+0xc8>)
    5e24:	0052      	lsls	r2, r2, #1
    5e26:	2100      	movs	r1, #0
    5e28:	52d1      	strh	r1, [r2, r3]
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5e2a:	1dfb      	adds	r3, r7, #7
    5e2c:	781a      	ldrb	r2, [r3, #0]
    5e2e:	1dfb      	adds	r3, r7, #7
    5e30:	3201      	adds	r2, #1
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	1dfb      	adds	r3, r7, #7
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	2b13      	cmp	r3, #19
    5e3a:	d9e4      	bls.n	5e06 <AccelInit+0x1e>
	{
		xPositionBuffer[i]=0;
		yPositionBuffer[i]=0;
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
    5e3c:	4b1d      	ldr	r3, [pc, #116]	; (5eb4 <AccelInit+0xcc>)
    5e3e:	2200      	movs	r2, #0
    5e40:	701a      	strb	r2, [r3, #0]
	acceleromterFirstFill=0;
    5e42:	4b1d      	ldr	r3, [pc, #116]	; (5eb8 <AccelInit+0xd0>)
    5e44:	2200      	movs	r2, #0
    5e46:	701a      	strb	r2, [r3, #0]
	accelerometerChange=0;
    5e48:	4b1c      	ldr	r3, [pc, #112]	; (5ebc <AccelInit+0xd4>)
    5e4a:	2200      	movs	r2, #0
    5e4c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e4e:	1dfb      	adds	r3, r7, #7
    5e50:	2200      	movs	r2, #0
    5e52:	701a      	strb	r2, [r3, #0]
    5e54:	e007      	b.n	5e66 <AccelInit+0x7e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
    5e56:	4b1a      	ldr	r3, [pc, #104]	; (5ec0 <AccelInit+0xd8>)
    5e58:	2200      	movs	r2, #0
    5e5a:	815a      	strh	r2, [r3, #10]
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
	acceleromterFirstFill=0;
	accelerometerChange=0;
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e5c:	1dfb      	adds	r3, r7, #7
    5e5e:	781a      	ldrb	r2, [r3, #0]
    5e60:	1dfb      	adds	r3, r7, #7
    5e62:	3201      	adds	r2, #1
    5e64:	701a      	strb	r2, [r3, #0]
    5e66:	1dfb      	adds	r3, r7, #7
    5e68:	781b      	ldrb	r3, [r3, #0]
    5e6a:	2b04      	cmp	r3, #4
    5e6c:	d9f3      	bls.n	5e56 <AccelInit+0x6e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
	}
	xDecisionBufferOffset=0;
    5e6e:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <AccelInit+0xdc>)
    5e70:	2200      	movs	r2, #0
    5e72:	701a      	strb	r2, [r3, #0]
	xDecisionBufferFill=0; 	
    5e74:	4b14      	ldr	r3, [pc, #80]	; (5ec8 <AccelInit+0xe0>)
    5e76:	2200      	movs	r2, #0
    5e78:	701a      	strb	r2, [r3, #0]
  //---------------------------------
  // Clear the interrupt latch
 // AccelRead(MEMS_FF_WU_SRC);    // Only use if int latched
 	AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,0); 
    5e7a:	2004      	movs	r0, #4
    5e7c:	2101      	movs	r1, #1
    5e7e:	2200      	movs	r2, #0
    5e80:	4b12      	ldr	r3, [pc, #72]	; (5ecc <AccelInit+0xe4>)
    5e82:	4798      	blx	r3
	if (AccelWhoAmI()== 0x33)
    5e84:	4b12      	ldr	r3, [pc, #72]	; (5ed0 <AccelInit+0xe8>)
    5e86:	4798      	blx	r3
    5e88:	1c03      	adds	r3, r0, #0
    5e8a:	2b33      	cmp	r3, #51	; 0x33
    5e8c:	d104      	bne.n	5e98 <AccelInit+0xb0>
	{
		AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,1);		
    5e8e:	2004      	movs	r0, #4
    5e90:	2101      	movs	r1, #1
    5e92:	2201      	movs	r2, #1
    5e94:	4b0d      	ldr	r3, [pc, #52]	; (5ecc <AccelInit+0xe4>)
    5e96:	4798      	blx	r3
	}
   return 1;
    5e98:	2301      	movs	r3, #1
}
    5e9a:	1c18      	adds	r0, r3, #0
    5e9c:	46bd      	mov	sp, r7
    5e9e:	b002      	add	sp, #8
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	00005db1 	.word	0x00005db1
    5ea8:	2000059c 	.word	0x2000059c
    5eac:	200005cc 	.word	0x200005cc
    5eb0:	2000060c 	.word	0x2000060c
    5eb4:	20000602 	.word	0x20000602
    5eb8:	200005ca 	.word	0x200005ca
    5ebc:	20000636 	.word	0x20000636
    5ec0:	200005f8 	.word	0x200005f8
    5ec4:	200005f4 	.word	0x200005f4
    5ec8:	20000608 	.word	0x20000608
    5ecc:	0000e595 	.word	0x0000e595
    5ed0:	0000618d 	.word	0x0000618d

00005ed4 <AccelProcess>:
// FUNCTION:   AccelProcess
//------------------------------------------------------------------------------
// This function will Process accelerometer data
//==============================================================================
void AccelProcess(void)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b084      	sub	sp, #16
    5ed8:	af00      	add	r7, sp, #0
	uint16_t itemp,itemp2; 
	int32_t ltemp; 
	uint8_t i; 
  // Is new 3-axis accelerometer data is available?
  
  if(AccelDataAvailable())
    5eda:	4b96      	ldr	r3, [pc, #600]	; (6134 <AccelProcess+0x260>)
    5edc:	4798      	blx	r3
    5ede:	1c03      	adds	r3, r0, #0
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d100      	bne.n	5ee6 <AccelProcess+0x12>
    5ee4:	e11c      	b.n	6120 <AccelProcess+0x24c>
    //------------------------------
    // Get movement
    //------------------------------
    //----------------------------------------
    // Store instantaneous accelerometer measurements in averaging Array
	itemp = AccelRead(MEMS_OUT_X_H);
    5ee6:	2029      	movs	r0, #41	; 0x29
    5ee8:	4b93      	ldr	r3, [pc, #588]	; (6138 <AccelProcess+0x264>)
    5eea:	4798      	blx	r3
    5eec:	1c03      	adds	r3, r0, #0
    5eee:	1c1a      	adds	r2, r3, #0
    5ef0:	1c3b      	adds	r3, r7, #0
    5ef2:	330c      	adds	r3, #12
    5ef4:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_X_L);
    5ef6:	2028      	movs	r0, #40	; 0x28
    5ef8:	4b8f      	ldr	r3, [pc, #572]	; (6138 <AccelProcess+0x264>)
    5efa:	4798      	blx	r3
    5efc:	1c03      	adds	r3, r0, #0
    5efe:	1c1a      	adds	r2, r3, #0
    5f00:	1c3b      	adds	r3, r7, #0
    5f02:	330a      	adds	r3, #10
    5f04:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f06:	1c3b      	adds	r3, r7, #0
    5f08:	330c      	adds	r3, #12
    5f0a:	1c3a      	adds	r2, r7, #0
    5f0c:	320c      	adds	r2, #12
    5f0e:	8812      	ldrh	r2, [r2, #0]
    5f10:	0212      	lsls	r2, r2, #8
    5f12:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    5f14:	1c3b      	adds	r3, r7, #0
    5f16:	330c      	adds	r3, #12
    5f18:	1c39      	adds	r1, r7, #0
    5f1a:	310c      	adds	r1, #12
    5f1c:	1c3a      	adds	r2, r7, #0
    5f1e:	320a      	adds	r2, #10
    5f20:	8809      	ldrh	r1, [r1, #0]
    5f22:	8812      	ldrh	r2, [r2, #0]
    5f24:	430a      	orrs	r2, r1
    5f26:	801a      	strh	r2, [r3, #0]
	position_x  = itemp;
    5f28:	1c3b      	adds	r3, r7, #0
    5f2a:	330c      	adds	r3, #12
    5f2c:	881a      	ldrh	r2, [r3, #0]
    5f2e:	4b83      	ldr	r3, [pc, #524]	; (613c <AccelProcess+0x268>)
    5f30:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Y_H);
    5f32:	202b      	movs	r0, #43	; 0x2b
    5f34:	4b80      	ldr	r3, [pc, #512]	; (6138 <AccelProcess+0x264>)
    5f36:	4798      	blx	r3
    5f38:	1c03      	adds	r3, r0, #0
    5f3a:	1c1a      	adds	r2, r3, #0
    5f3c:	1c3b      	adds	r3, r7, #0
    5f3e:	330c      	adds	r3, #12
    5f40:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Y_L);
    5f42:	202a      	movs	r0, #42	; 0x2a
    5f44:	4b7c      	ldr	r3, [pc, #496]	; (6138 <AccelProcess+0x264>)
    5f46:	4798      	blx	r3
    5f48:	1c03      	adds	r3, r0, #0
    5f4a:	1c1a      	adds	r2, r3, #0
    5f4c:	1c3b      	adds	r3, r7, #0
    5f4e:	330a      	adds	r3, #10
    5f50:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f52:	1c3b      	adds	r3, r7, #0
    5f54:	330c      	adds	r3, #12
    5f56:	1c3a      	adds	r2, r7, #0
    5f58:	320c      	adds	r2, #12
    5f5a:	8812      	ldrh	r2, [r2, #0]
    5f5c:	0212      	lsls	r2, r2, #8
    5f5e:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	
    5f60:	1c3b      	adds	r3, r7, #0
    5f62:	330c      	adds	r3, #12
    5f64:	1c39      	adds	r1, r7, #0
    5f66:	310c      	adds	r1, #12
    5f68:	1c3a      	adds	r2, r7, #0
    5f6a:	320a      	adds	r2, #10
    5f6c:	8809      	ldrh	r1, [r1, #0]
    5f6e:	8812      	ldrh	r2, [r2, #0]
    5f70:	430a      	orrs	r2, r1
    5f72:	801a      	strh	r2, [r3, #0]
	position_y  = itemp;
    5f74:	1c3b      	adds	r3, r7, #0
    5f76:	330c      	adds	r3, #12
    5f78:	881a      	ldrh	r2, [r3, #0]
    5f7a:	4b71      	ldr	r3, [pc, #452]	; (6140 <AccelProcess+0x26c>)
    5f7c:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Z_H);
    5f7e:	202d      	movs	r0, #45	; 0x2d
    5f80:	4b6d      	ldr	r3, [pc, #436]	; (6138 <AccelProcess+0x264>)
    5f82:	4798      	blx	r3
    5f84:	1c03      	adds	r3, r0, #0
    5f86:	1c1a      	adds	r2, r3, #0
    5f88:	1c3b      	adds	r3, r7, #0
    5f8a:	330c      	adds	r3, #12
    5f8c:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Z_L);
    5f8e:	202c      	movs	r0, #44	; 0x2c
    5f90:	4b69      	ldr	r3, [pc, #420]	; (6138 <AccelProcess+0x264>)
    5f92:	4798      	blx	r3
    5f94:	1c03      	adds	r3, r0, #0
    5f96:	1c1a      	adds	r2, r3, #0
    5f98:	1c3b      	adds	r3, r7, #0
    5f9a:	330a      	adds	r3, #10
    5f9c:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f9e:	1c3b      	adds	r3, r7, #0
    5fa0:	330c      	adds	r3, #12
    5fa2:	1c3a      	adds	r2, r7, #0
    5fa4:	320c      	adds	r2, #12
    5fa6:	8812      	ldrh	r2, [r2, #0]
    5fa8:	0212      	lsls	r2, r2, #8
    5faa:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	 
    5fac:	1c3b      	adds	r3, r7, #0
    5fae:	330c      	adds	r3, #12
    5fb0:	1c39      	adds	r1, r7, #0
    5fb2:	310c      	adds	r1, #12
    5fb4:	1c3a      	adds	r2, r7, #0
    5fb6:	320a      	adds	r2, #10
    5fb8:	8809      	ldrh	r1, [r1, #0]
    5fba:	8812      	ldrh	r2, [r2, #0]
    5fbc:	430a      	orrs	r2, r1
    5fbe:	801a      	strh	r2, [r3, #0]
	position_z  = itemp;
    5fc0:	1c3b      	adds	r3, r7, #0
    5fc2:	330c      	adds	r3, #12
    5fc4:	881a      	ldrh	r2, [r3, #0]
    5fc6:	4b5f      	ldr	r3, [pc, #380]	; (6144 <AccelProcess+0x270>)
    5fc8:	801a      	strh	r2, [r3, #0]
 
	//--------------------------
	// place in buffer 
 	xPositionBuffer[accelerometerOffset]=position_x;
    5fca:	4b5f      	ldr	r3, [pc, #380]	; (6148 <AccelProcess+0x274>)
    5fcc:	781b      	ldrb	r3, [r3, #0]
    5fce:	1c1a      	adds	r2, r3, #0
    5fd0:	4b5a      	ldr	r3, [pc, #360]	; (613c <AccelProcess+0x268>)
    5fd2:	8819      	ldrh	r1, [r3, #0]
    5fd4:	4b5d      	ldr	r3, [pc, #372]	; (614c <AccelProcess+0x278>)
    5fd6:	0052      	lsls	r2, r2, #1
    5fd8:	52d1      	strh	r1, [r2, r3]
	yPositionBuffer[accelerometerOffset]=position_y;
    5fda:	4b5b      	ldr	r3, [pc, #364]	; (6148 <AccelProcess+0x274>)
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	1c1a      	adds	r2, r3, #0
    5fe0:	4b57      	ldr	r3, [pc, #348]	; (6140 <AccelProcess+0x26c>)
    5fe2:	8819      	ldrh	r1, [r3, #0]
    5fe4:	4b5a      	ldr	r3, [pc, #360]	; (6150 <AccelProcess+0x27c>)
    5fe6:	0052      	lsls	r2, r2, #1
    5fe8:	52d1      	strh	r1, [r2, r3]
	zPositionBuffer[accelerometerOffset]=position_z;
    5fea:	4b57      	ldr	r3, [pc, #348]	; (6148 <AccelProcess+0x274>)
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	1c1a      	adds	r2, r3, #0
    5ff0:	4b54      	ldr	r3, [pc, #336]	; (6144 <AccelProcess+0x270>)
    5ff2:	8819      	ldrh	r1, [r3, #0]
    5ff4:	4b57      	ldr	r3, [pc, #348]	; (6154 <AccelProcess+0x280>)
    5ff6:	0052      	lsls	r2, r2, #1
    5ff8:	52d1      	strh	r1, [r2, r3]
	accelerometerOffset++;
    5ffa:	4b53      	ldr	r3, [pc, #332]	; (6148 <AccelProcess+0x274>)
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	3301      	adds	r3, #1
    6000:	b2da      	uxtb	r2, r3
    6002:	4b51      	ldr	r3, [pc, #324]	; (6148 <AccelProcess+0x274>)
    6004:	701a      	strb	r2, [r3, #0]
	if (accelerometerOffset >= MAX_ACCELEROMETER_BUFFER)
    6006:	4b50      	ldr	r3, [pc, #320]	; (6148 <AccelProcess+0x274>)
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	2b13      	cmp	r3, #19
    600c:	d96c      	bls.n	60e8 <AccelProcess+0x214>
	{
	
		accelerometerOffset=0;
    600e:	4b4e      	ldr	r3, [pc, #312]	; (6148 <AccelProcess+0x274>)
    6010:	2200      	movs	r2, #0
    6012:	701a      	strb	r2, [r3, #0]
		acceleromterFirstFill=1; 
    6014:	4b50      	ldr	r3, [pc, #320]	; (6158 <AccelProcess+0x284>)
    6016:	2201      	movs	r2, #1
    6018:	701a      	strb	r2, [r3, #0]
		accelerometerChange = 1; 
    601a:	4b50      	ldr	r3, [pc, #320]	; (615c <AccelProcess+0x288>)
    601c:	2201      	movs	r2, #1
    601e:	701a      	strb	r2, [r3, #0]
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
    6020:	4b4f      	ldr	r3, [pc, #316]	; (6160 <AccelProcess+0x28c>)
    6022:	2200      	movs	r2, #0
    6024:	601a      	str	r2, [r3, #0]
    6026:	4b4e      	ldr	r3, [pc, #312]	; (6160 <AccelProcess+0x28c>)
    6028:	681a      	ldr	r2, [r3, #0]
    602a:	4b4e      	ldr	r3, [pc, #312]	; (6164 <AccelProcess+0x290>)
    602c:	601a      	str	r2, [r3, #0]
    602e:	4b4d      	ldr	r3, [pc, #308]	; (6164 <AccelProcess+0x290>)
    6030:	681a      	ldr	r2, [r3, #0]
    6032:	4b4d      	ldr	r3, [pc, #308]	; (6168 <AccelProcess+0x294>)
    6034:	601a      	str	r2, [r3, #0]
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6036:	1c3b      	adds	r3, r7, #0
    6038:	330f      	adds	r3, #15
    603a:	2200      	movs	r2, #0
    603c:	701a      	strb	r2, [r3, #0]
    603e:	e02a      	b.n	6096 <AccelProcess+0x1c2>
		{
		  sumx += xPositionBuffer[i];
    6040:	1c3b      	adds	r3, r7, #0
    6042:	330f      	adds	r3, #15
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	4b41      	ldr	r3, [pc, #260]	; (614c <AccelProcess+0x278>)
    6048:	0052      	lsls	r2, r2, #1
    604a:	5ad3      	ldrh	r3, [r2, r3]
    604c:	b21a      	sxth	r2, r3
    604e:	4b46      	ldr	r3, [pc, #280]	; (6168 <AccelProcess+0x294>)
    6050:	681b      	ldr	r3, [r3, #0]
    6052:	18d2      	adds	r2, r2, r3
    6054:	4b44      	ldr	r3, [pc, #272]	; (6168 <AccelProcess+0x294>)
    6056:	601a      	str	r2, [r3, #0]
		  sumy += yPositionBuffer[i];
    6058:	1c3b      	adds	r3, r7, #0
    605a:	330f      	adds	r3, #15
    605c:	781a      	ldrb	r2, [r3, #0]
    605e:	4b3c      	ldr	r3, [pc, #240]	; (6150 <AccelProcess+0x27c>)
    6060:	0052      	lsls	r2, r2, #1
    6062:	5ad3      	ldrh	r3, [r2, r3]
    6064:	b21a      	sxth	r2, r3
    6066:	4b3f      	ldr	r3, [pc, #252]	; (6164 <AccelProcess+0x290>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	18d2      	adds	r2, r2, r3
    606c:	4b3d      	ldr	r3, [pc, #244]	; (6164 <AccelProcess+0x290>)
    606e:	601a      	str	r2, [r3, #0]
		  sumz += zPositionBuffer[i];
    6070:	1c3b      	adds	r3, r7, #0
    6072:	330f      	adds	r3, #15
    6074:	781a      	ldrb	r2, [r3, #0]
    6076:	4b37      	ldr	r3, [pc, #220]	; (6154 <AccelProcess+0x280>)
    6078:	0052      	lsls	r2, r2, #1
    607a:	5ad3      	ldrh	r3, [r2, r3]
    607c:	b21a      	sxth	r2, r3
    607e:	4b38      	ldr	r3, [pc, #224]	; (6160 <AccelProcess+0x28c>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	18d2      	adds	r2, r2, r3
    6084:	4b36      	ldr	r3, [pc, #216]	; (6160 <AccelProcess+0x28c>)
    6086:	601a      	str	r2, [r3, #0]
		acceleromterFirstFill=1; 
		accelerometerChange = 1; 
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6088:	1c3b      	adds	r3, r7, #0
    608a:	330f      	adds	r3, #15
    608c:	781a      	ldrb	r2, [r3, #0]
    608e:	1c3b      	adds	r3, r7, #0
    6090:	330f      	adds	r3, #15
    6092:	3201      	adds	r2, #1
    6094:	701a      	strb	r2, [r3, #0]
    6096:	1c3b      	adds	r3, r7, #0
    6098:	330f      	adds	r3, #15
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	2b13      	cmp	r3, #19
    609e:	d9cf      	bls.n	6040 <AccelProcess+0x16c>
		{
		  sumx += xPositionBuffer[i];
		  sumy += yPositionBuffer[i];
		  sumz += zPositionBuffer[i];
		}
		ltemp = sumx/MAX_ACCELEROMETER_BUFFER;
    60a0:	4b31      	ldr	r3, [pc, #196]	; (6168 <AccelProcess+0x294>)
    60a2:	681a      	ldr	r2, [r3, #0]
    60a4:	4b31      	ldr	r3, [pc, #196]	; (616c <AccelProcess+0x298>)
    60a6:	1c10      	adds	r0, r2, #0
    60a8:	2114      	movs	r1, #20
    60aa:	4798      	blx	r3
    60ac:	1c03      	adds	r3, r0, #0
    60ae:	607b      	str	r3, [r7, #4]
		positionXaverage = ltemp;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	b29a      	uxth	r2, r3
    60b4:	4b2e      	ldr	r3, [pc, #184]	; (6170 <AccelProcess+0x29c>)
    60b6:	801a      	strh	r2, [r3, #0]
		ltemp = sumy/MAX_ACCELEROMETER_BUFFER;
    60b8:	4b2a      	ldr	r3, [pc, #168]	; (6164 <AccelProcess+0x290>)
    60ba:	681a      	ldr	r2, [r3, #0]
    60bc:	4b2b      	ldr	r3, [pc, #172]	; (616c <AccelProcess+0x298>)
    60be:	1c10      	adds	r0, r2, #0
    60c0:	2114      	movs	r1, #20
    60c2:	4798      	blx	r3
    60c4:	1c03      	adds	r3, r0, #0
    60c6:	607b      	str	r3, [r7, #4]
		positionYaverage = ltemp;	
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	b29a      	uxth	r2, r3
    60cc:	4b29      	ldr	r3, [pc, #164]	; (6174 <AccelProcess+0x2a0>)
    60ce:	801a      	strh	r2, [r3, #0]
		ltemp = sumz/MAX_ACCELEROMETER_BUFFER;
    60d0:	4b23      	ldr	r3, [pc, #140]	; (6160 <AccelProcess+0x28c>)
    60d2:	681a      	ldr	r2, [r3, #0]
    60d4:	4b25      	ldr	r3, [pc, #148]	; (616c <AccelProcess+0x298>)
    60d6:	1c10      	adds	r0, r2, #0
    60d8:	2114      	movs	r1, #20
    60da:	4798      	blx	r3
    60dc:	1c03      	adds	r3, r0, #0
    60de:	607b      	str	r3, [r7, #4]
		positionZaverage = ltemp;	
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	b29a      	uxth	r2, r3
    60e4:	4b24      	ldr	r3, [pc, #144]	; (6178 <AccelProcess+0x2a4>)
    60e6:	801a      	strh	r2, [r3, #0]
	}
	//-----------------fill decision buffer
	if (accelerometerOffset == 0)
    60e8:	4b17      	ldr	r3, [pc, #92]	; (6148 <AccelProcess+0x274>)
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d117      	bne.n	6120 <AccelProcess+0x24c>
	{
		xDecisionBuffer[xDecisionBufferOffset] = positionXaverage;
    60f0:	4b22      	ldr	r3, [pc, #136]	; (617c <AccelProcess+0x2a8>)
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	1c1a      	adds	r2, r3, #0
    60f6:	4b1e      	ldr	r3, [pc, #120]	; (6170 <AccelProcess+0x29c>)
    60f8:	8819      	ldrh	r1, [r3, #0]
    60fa:	4b21      	ldr	r3, [pc, #132]	; (6180 <AccelProcess+0x2ac>)
    60fc:	0052      	lsls	r2, r2, #1
    60fe:	52d1      	strh	r1, [r2, r3]
		xDecisionBufferOffset++;
    6100:	4b1e      	ldr	r3, [pc, #120]	; (617c <AccelProcess+0x2a8>)
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	3301      	adds	r3, #1
    6106:	b2da      	uxtb	r2, r3
    6108:	4b1c      	ldr	r3, [pc, #112]	; (617c <AccelProcess+0x2a8>)
    610a:	701a      	strb	r2, [r3, #0]
		if (xDecisionBufferOffset >= MAX_DECISION_BUFFER)
    610c:	4b1b      	ldr	r3, [pc, #108]	; (617c <AccelProcess+0x2a8>)
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b04      	cmp	r3, #4
    6112:	d905      	bls.n	6120 <AccelProcess+0x24c>
		{
			xDecisionBufferOffset = 0; 
    6114:	4b19      	ldr	r3, [pc, #100]	; (617c <AccelProcess+0x2a8>)
    6116:	2200      	movs	r2, #0
    6118:	701a      	strb	r2, [r3, #0]
			xDecisionBufferFill=1; 	
    611a:	4b1a      	ldr	r3, [pc, #104]	; (6184 <AccelProcess+0x2b0>)
    611c:	2201      	movs	r2, #1
    611e:	701a      	strb	r2, [r3, #0]
		}
	}
  }
#if BRAKEBOARD  
  if (accelerometerChange != 0)
    6120:	4b0e      	ldr	r3, [pc, #56]	; (615c <AccelProcess+0x288>)
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	d001      	beq.n	612c <AccelProcess+0x258>
  {
	MotorBuildGetAcc();
    6128:	4b17      	ldr	r3, [pc, #92]	; (6188 <AccelProcess+0x2b4>)
    612a:	4798      	blx	r3
  }
#endif  
}
    612c:	46bd      	mov	sp, r7
    612e:	b004      	add	sp, #16
    6130:	bd80      	pop	{r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	000061b1 	.word	0x000061b1
    6138:	00005d5d 	.word	0x00005d5d
    613c:	20000498 	.word	0x20000498
    6140:	2000049a 	.word	0x2000049a
    6144:	2000049c 	.word	0x2000049c
    6148:	20000602 	.word	0x20000602
    614c:	2000059c 	.word	0x2000059c
    6150:	200005cc 	.word	0x200005cc
    6154:	2000060c 	.word	0x2000060c
    6158:	200005ca 	.word	0x200005ca
    615c:	20000636 	.word	0x20000636
    6160:	20000598 	.word	0x20000598
    6164:	200005c4 	.word	0x200005c4
    6168:	20000604 	.word	0x20000604
    616c:	000146d5 	.word	0x000146d5
    6170:	2000049e 	.word	0x2000049e
    6174:	200004a0 	.word	0x200004a0
    6178:	200004a2 	.word	0x200004a2
    617c:	200005f4 	.word	0x200005f4
    6180:	200005f8 	.word	0x200005f8
    6184:	20000608 	.word	0x20000608
    6188:	000084d5 	.word	0x000084d5

0000618c <AccelWhoAmI>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function will get the 
//============================================================================== 
uint8_t AccelWhoAmI(void)
{
    618c:	b590      	push	{r4, r7, lr}
    618e:	b083      	sub	sp, #12
    6190:	af00      	add	r7, sp, #0
  uint8_t x;
  //-------------------------
  // Get the Status Register
  //-------------------------
  x = AccelRead(0x0f);
    6192:	1dfc      	adds	r4, r7, #7
    6194:	200f      	movs	r0, #15
    6196:	4b05      	ldr	r3, [pc, #20]	; (61ac <AccelWhoAmI+0x20>)
    6198:	4798      	blx	r3
    619a:	1c03      	adds	r3, r0, #0
    619c:	7023      	strb	r3, [r4, #0]

  return x;
    619e:	1dfb      	adds	r3, r7, #7
    61a0:	781b      	ldrb	r3, [r3, #0]
}
    61a2:	1c18      	adds	r0, r3, #0
    61a4:	46bd      	mov	sp, r7
    61a6:	b003      	add	sp, #12
    61a8:	bd90      	pop	{r4, r7, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	00005d5d 	.word	0x00005d5d

000061b0 <AccelDataAvailable>:
//------------------------------------------------------------------------------
// This function handles Check for Accelerometer data. Returns TRUE if data is 
// available (for all 3 axis), FALSE otherwise
//============================================================================== 
uint8_t AccelDataAvailable(void)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	af00      	add	r7, sp, #0
  { 
    return 1;
  }
  return 0;
*/
	return 1;   
    61b4:	2301      	movs	r3, #1
}
    61b6:	1c18      	adds	r0, r3, #0
    61b8:	46bd      	mov	sp, r7
    61ba:	bd80      	pop	{r7, pc}

000061bc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b084      	sub	sp, #16
    61c0:	af00      	add	r7, sp, #0
    61c2:	1c02      	adds	r2, r0, #0
    61c4:	1dfb      	adds	r3, r7, #7
    61c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    61c8:	1c3b      	adds	r3, r7, #0
    61ca:	330f      	adds	r3, #15
    61cc:	1dfa      	adds	r2, r7, #7
    61ce:	7812      	ldrb	r2, [r2, #0]
    61d0:	09d2      	lsrs	r2, r2, #7
    61d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    61d4:	1c3b      	adds	r3, r7, #0
    61d6:	330e      	adds	r3, #14
    61d8:	1dfa      	adds	r2, r7, #7
    61da:	7812      	ldrb	r2, [r2, #0]
    61dc:	0952      	lsrs	r2, r2, #5
    61de:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    61e0:	4b0d      	ldr	r3, [pc, #52]	; (6218 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    61e2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    61e4:	1c3b      	adds	r3, r7, #0
    61e6:	330f      	adds	r3, #15
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d10e      	bne.n	620c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    61ee:	1c3b      	adds	r3, r7, #0
    61f0:	330f      	adds	r3, #15
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	009b      	lsls	r3, r3, #2
    61f6:	2210      	movs	r2, #16
    61f8:	19d2      	adds	r2, r2, r7
    61fa:	18d3      	adds	r3, r2, r3
    61fc:	3b08      	subs	r3, #8
    61fe:	681a      	ldr	r2, [r3, #0]
    6200:	1c3b      	adds	r3, r7, #0
    6202:	330e      	adds	r3, #14
    6204:	781b      	ldrb	r3, [r3, #0]
    6206:	01db      	lsls	r3, r3, #7
    6208:	18d3      	adds	r3, r2, r3
    620a:	e000      	b.n	620e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    620c:	2300      	movs	r3, #0
	}
}
    620e:	1c18      	adds	r0, r3, #0
    6210:	46bd      	mov	sp, r7
    6212:	b004      	add	sp, #16
    6214:	bd80      	pop	{r7, pc}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	41004400 	.word	0x41004400

0000621c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	1c02      	adds	r2, r0, #0
    6224:	1dfb      	adds	r3, r7, #7
    6226:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6228:	1dfb      	adds	r3, r7, #7
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	1c18      	adds	r0, r3, #0
    622e:	4b03      	ldr	r3, [pc, #12]	; (623c <port_get_group_from_gpio_pin+0x20>)
    6230:	4798      	blx	r3
    6232:	1c03      	adds	r3, r0, #0
}
    6234:	1c18      	adds	r0, r3, #0
    6236:	46bd      	mov	sp, r7
    6238:	b002      	add	sp, #8
    623a:	bd80      	pop	{r7, pc}
    623c:	000061bd 	.word	0x000061bd

00006240 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6240:	b580      	push	{r7, lr}
    6242:	b082      	sub	sp, #8
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	2200      	movs	r2, #0
    624c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	2201      	movs	r2, #1
    6252:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2200      	movs	r2, #0
    6258:	709a      	strb	r2, [r3, #2]
}
    625a:	46bd      	mov	sp, r7
    625c:	b002      	add	sp, #8
    625e:	bd80      	pop	{r7, pc}

00006260 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6260:	b580      	push	{r7, lr}
    6262:	b084      	sub	sp, #16
    6264:	af00      	add	r7, sp, #0
    6266:	1c0a      	adds	r2, r1, #0
    6268:	1dfb      	adds	r3, r7, #7
    626a:	1c01      	adds	r1, r0, #0
    626c:	7019      	strb	r1, [r3, #0]
    626e:	1dbb      	adds	r3, r7, #6
    6270:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6272:	1dfb      	adds	r3, r7, #7
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	1c18      	adds	r0, r3, #0
    6278:	4b0d      	ldr	r3, [pc, #52]	; (62b0 <port_pin_set_output_level+0x50>)
    627a:	4798      	blx	r3
    627c:	1c03      	adds	r3, r0, #0
    627e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6280:	1dfb      	adds	r3, r7, #7
    6282:	781a      	ldrb	r2, [r3, #0]
    6284:	231f      	movs	r3, #31
    6286:	4013      	ands	r3, r2
    6288:	2201      	movs	r2, #1
    628a:	1c11      	adds	r1, r2, #0
    628c:	4099      	lsls	r1, r3
    628e:	1c0b      	adds	r3, r1, #0
    6290:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6292:	1dbb      	adds	r3, r7, #6
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	2b00      	cmp	r3, #0
    6298:	d003      	beq.n	62a2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	68ba      	ldr	r2, [r7, #8]
    629e:	619a      	str	r2, [r3, #24]
    62a0:	e002      	b.n	62a8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	615a      	str	r2, [r3, #20]
	}
}
    62a8:	46bd      	mov	sp, r7
    62aa:	b004      	add	sp, #16
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	0000621d 	.word	0x0000621d

000062b4 <BlockingTimer>:
// FUNCTION: BlockingTimer
//------------------------------------------------------------------------------
//  
//==============================================================================
void BlockingTimer(uint16_t count)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c02      	adds	r2, r0, #0
    62bc:	1dbb      	adds	r3, r7, #6
    62be:	801a      	strh	r2, [r3, #0]
	blockingTime = count; 
    62c0:	4b05      	ldr	r3, [pc, #20]	; (62d8 <BlockingTimer+0x24>)
    62c2:	1dba      	adds	r2, r7, #6
    62c4:	8812      	ldrh	r2, [r2, #0]
    62c6:	801a      	strh	r2, [r3, #0]
	while (blockingTime >0);
    62c8:	46c0      	nop			; (mov r8, r8)
    62ca:	4b03      	ldr	r3, [pc, #12]	; (62d8 <BlockingTimer+0x24>)
    62cc:	881b      	ldrh	r3, [r3, #0]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d1fb      	bne.n	62ca <BlockingTimer+0x16>
}
    62d2:	46bd      	mov	sp, r7
    62d4:	b002      	add	sp, #8
    62d6:	bd80      	pop	{r7, pc}
    62d8:	200036c2 	.word	0x200036c2

000062dc <BluetoothWakeUp>:
// FUNCTION: BluetoothWakeUp
//------------------------------------------------------------------------------
//  
//==============================================================================
uint8_t BluetoothWakeUp(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b082      	sub	sp, #8
    62e0:	af00      	add	r7, sp, #0
 
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);	
    62e2:	1d3b      	adds	r3, r7, #4
    62e4:	1c18      	adds	r0, r3, #0
    62e6:	4b1b      	ldr	r3, [pc, #108]	; (6354 <BluetoothWakeUp+0x78>)
    62e8:	4798      	blx	r3
 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62ea:	1d3b      	adds	r3, r7, #4
    62ec:	2201      	movs	r2, #1
    62ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    62f0:	1d3b      	adds	r3, r7, #4
    62f2:	2009      	movs	r0, #9
    62f4:	1c19      	adds	r1, r3, #0
    62f6:	4b18      	ldr	r3, [pc, #96]	; (6358 <BluetoothWakeUp+0x7c>)
    62f8:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    62fa:	2009      	movs	r0, #9
    62fc:	2100      	movs	r1, #0
    62fe:	4b17      	ldr	r3, [pc, #92]	; (635c <BluetoothWakeUp+0x80>)
    6300:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    6302:	1d3b      	adds	r3, r7, #4
    6304:	2008      	movs	r0, #8
    6306:	1c19      	adds	r1, r3, #0
    6308:	4b13      	ldr	r3, [pc, #76]	; (6358 <BluetoothWakeUp+0x7c>)
    630a:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);   
    630c:	2008      	movs	r0, #8
    630e:	2101      	movs	r1, #1
    6310:	4b12      	ldr	r3, [pc, #72]	; (635c <BluetoothWakeUp+0x80>)
    6312:	4798      	blx	r3
	BlockingTimer(40);
    6314:	2028      	movs	r0, #40	; 0x28
    6316:	4b12      	ldr	r3, [pc, #72]	; (6360 <BluetoothWakeUp+0x84>)
    6318:	4798      	blx	r3
	 
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    631a:	2009      	movs	r0, #9
    631c:	2101      	movs	r1, #1
    631e:	4b0f      	ldr	r3, [pc, #60]	; (635c <BluetoothWakeUp+0x80>)
    6320:	4798      	blx	r3
	BlockingTimer(40);
    6322:	2028      	movs	r0, #40	; 0x28
    6324:	4b0e      	ldr	r3, [pc, #56]	; (6360 <BluetoothWakeUp+0x84>)
    6326:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    6328:	2008      	movs	r0, #8
    632a:	2101      	movs	r1, #1
    632c:	4b0b      	ldr	r3, [pc, #44]	; (635c <BluetoothWakeUp+0x80>)
    632e:	4798      	blx	r3
	BlockingTimer(20);
    6330:	2014      	movs	r0, #20
    6332:	4b0b      	ldr	r3, [pc, #44]	; (6360 <BluetoothWakeUp+0x84>)
    6334:	4798      	blx	r3
	bluetoothAwake = 1; 
    6336:	4b0b      	ldr	r3, [pc, #44]	; (6364 <BluetoothWakeUp+0x88>)
    6338:	2201      	movs	r2, #1
    633a:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_SOLID;
    633c:	4b0a      	ldr	r3, [pc, #40]	; (6368 <BluetoothWakeUp+0x8c>)
    633e:	2201      	movs	r2, #1
    6340:	701a      	strb	r2, [r3, #0]
	brakeBiLED = BRAKEBILED_GREENSOLID;
    6342:	4b0a      	ldr	r3, [pc, #40]	; (636c <BluetoothWakeUp+0x90>)
    6344:	2200      	movs	r2, #0
    6346:	701a      	strb	r2, [r3, #0]
	
//while(1)
//{	
	BTReceive();
    6348:	4b09      	ldr	r3, [pc, #36]	; (6370 <BluetoothWakeUp+0x94>)
    634a:	4798      	blx	r3
//    receiveIntercharTimeout = FALSE;        
//    while ((response_received == FALSE)&&(rx_timeout == FALSE)&&(receiveIntercharTimeout == FALSE));   
//}
	 
	
}
    634c:	1c18      	adds	r0, r3, #0
    634e:	46bd      	mov	sp, r7
    6350:	b002      	add	sp, #8
    6352:	bd80      	pop	{r7, pc}
    6354:	00006241 	.word	0x00006241
    6358:	00010c95 	.word	0x00010c95
    635c:	00006261 	.word	0x00006261
    6360:	000062b5 	.word	0x000062b5
    6364:	200004a4 	.word	0x200004a4
    6368:	20002ea2 	.word	0x20002ea2
    636c:	20002ec8 	.word	0x20002ec8
    6370:	0000d231 	.word	0x0000d231

00006374 <BluetoothSleep>:
// FUNCTION: BluetoothSleep
//------------------------------------------------------------------------------
//
//==============================================================================
uint8_t BluetoothSleep(void)
{
    6374:	b580      	push	{r7, lr}
    6376:	b082      	sub	sp, #8
    6378:	af00      	add	r7, sp, #0
	
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    637a:	1d3b      	adds	r3, r7, #4
    637c:	1c18      	adds	r0, r3, #0
    637e:	4b13      	ldr	r3, [pc, #76]	; (63cc <BluetoothSleep+0x58>)
    6380:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6382:	1d3b      	adds	r3, r7, #4
    6384:	2201      	movs	r2, #1
    6386:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    6388:	1d3b      	adds	r3, r7, #4
    638a:	2009      	movs	r0, #9
    638c:	1c19      	adds	r1, r3, #0
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <BluetoothSleep+0x5c>)
    6390:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    6392:	2009      	movs	r0, #9
    6394:	2100      	movs	r1, #0
    6396:	4b0f      	ldr	r3, [pc, #60]	; (63d4 <BluetoothSleep+0x60>)
    6398:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    639a:	1d3b      	adds	r3, r7, #4
    639c:	2008      	movs	r0, #8
    639e:	1c19      	adds	r1, r3, #0
    63a0:	4b0b      	ldr	r3, [pc, #44]	; (63d0 <BluetoothSleep+0x5c>)
    63a2:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    63a4:	2008      	movs	r0, #8
    63a6:	2101      	movs	r1, #1
    63a8:	4b0a      	ldr	r3, [pc, #40]	; (63d4 <BluetoothSleep+0x60>)
    63aa:	4798      	blx	r3
	BlockingTimer(40);
    63ac:	2028      	movs	r0, #40	; 0x28
    63ae:	4b0a      	ldr	r3, [pc, #40]	; (63d8 <BluetoothSleep+0x64>)
    63b0:	4798      	blx	r3
	
	bluetoothAwake = 0;
    63b2:	4b0a      	ldr	r3, [pc, #40]	; (63dc <BluetoothSleep+0x68>)
    63b4:	2200      	movs	r2, #0
    63b6:	701a      	strb	r2, [r3, #0]
	 brakeBlueLED = BRAKEBLUELED_OFF;
    63b8:	4b09      	ldr	r3, [pc, #36]	; (63e0 <BluetoothSleep+0x6c>)
    63ba:	2202      	movs	r2, #2
    63bc:	701a      	strb	r2, [r3, #0]
	 brakeBiLED = BRAKEBILED_OFF;
    63be:	4b09      	ldr	r3, [pc, #36]	; (63e4 <BluetoothSleep+0x70>)
    63c0:	2202      	movs	r2, #2
    63c2:	701a      	strb	r2, [r3, #0]
}	
    63c4:	1c18      	adds	r0, r3, #0
    63c6:	46bd      	mov	sp, r7
    63c8:	b002      	add	sp, #8
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00006241 	.word	0x00006241
    63d0:	00010c95 	.word	0x00010c95
    63d4:	00006261 	.word	0x00006261
    63d8:	000062b5 	.word	0x000062b5
    63dc:	200004a4 	.word	0x200004a4
    63e0:	20002ea2 	.word	0x20002ea2
    63e4:	20002ec8 	.word	0x20002ec8

000063e8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b082      	sub	sp, #8
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	2200      	movs	r2, #0
    63f4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	2200      	movs	r2, #0
    63fa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	2201      	movs	r2, #1
    6400:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	2201      	movs	r2, #1
    6406:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	2200      	movs	r2, #0
    640c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2202      	movs	r2, #2
    6412:	72da      	strb	r2, [r3, #11]
}
    6414:	46bd      	mov	sp, r7
    6416:	b002      	add	sp, #8
    6418:	bd80      	pop	{r7, pc}
    641a:	46c0      	nop			; (mov r8, r8)

0000641c <MotorFindEncoderMatch>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t MotorFindEncoderMatch(uint16_t matchCurrent)
{
    641c:	b580      	push	{r7, lr}
    641e:	b084      	sub	sp, #16
    6420:	af00      	add	r7, sp, #0
    6422:	1c02      	adds	r2, r0, #0
    6424:	1dbb      	adds	r3, r7, #6
    6426:	801a      	strh	r2, [r3, #0]
	uint16_t countBack,i,newOffset; 
	uint8_t done; 
	
	countBack = 0; 
    6428:	1c3b      	adds	r3, r7, #0
    642a:	330e      	adds	r3, #14
    642c:	2200      	movs	r2, #0
    642e:	801a      	strh	r2, [r3, #0]
	//----------------------------
	// go back from encoderTableOffset and look for first current 
	// less than matchCurrent. 
	// record the encoder count match. 
	//------------------------------
	done = 0;
    6430:	1c3b      	adds	r3, r7, #0
    6432:	3309      	adds	r3, #9
    6434:	2200      	movs	r2, #0
    6436:	701a      	strb	r2, [r3, #0]
	newOffset = encoderTableOffset; 
    6438:	1c3b      	adds	r3, r7, #0
    643a:	330a      	adds	r3, #10
    643c:	4a42      	ldr	r2, [pc, #264]	; (6548 <MotorFindEncoderMatch+0x12c>)
    643e:	8812      	ldrh	r2, [r2, #0]
    6440:	801a      	strh	r2, [r3, #0]
	if (newOffset >0)
    6442:	1c3b      	adds	r3, r7, #0
    6444:	330a      	adds	r3, #10
    6446:	881b      	ldrh	r3, [r3, #0]
    6448:	2b00      	cmp	r3, #0
    644a:	d007      	beq.n	645c <MotorFindEncoderMatch+0x40>
	{
		newOffset--;
    644c:	1c3b      	adds	r3, r7, #0
    644e:	330a      	adds	r3, #10
    6450:	881a      	ldrh	r2, [r3, #0]
    6452:	1c3b      	adds	r3, r7, #0
    6454:	330a      	adds	r3, #10
    6456:	3a01      	subs	r2, #1
    6458:	801a      	strh	r2, [r3, #0]
    645a:	e004      	b.n	6466 <MotorFindEncoderMatch+0x4a>
	}
	else
	{
		newOffset = MAX_BUILDTABLE; 
    645c:	1c3b      	adds	r3, r7, #0
    645e:	330a      	adds	r3, #10
    6460:	2280      	movs	r2, #128	; 0x80
    6462:	00d2      	lsls	r2, r2, #3
    6464:	801a      	strh	r2, [r3, #0]
	}
	i = 0; 
    6466:	1c3b      	adds	r3, r7, #0
    6468:	330c      	adds	r3, #12
    646a:	2200      	movs	r2, #0
    646c:	801a      	strh	r2, [r3, #0]
	if (encoderFillOffset > MAX_BUILDTABLE)
    646e:	4b37      	ldr	r3, [pc, #220]	; (654c <MotorFindEncoderMatch+0x130>)
    6470:	881a      	ldrh	r2, [r3, #0]
    6472:	2380      	movs	r3, #128	; 0x80
    6474:	00db      	lsls	r3, r3, #3
    6476:	429a      	cmp	r2, r3
    6478:	d904      	bls.n	6484 <MotorFindEncoderMatch+0x68>
	{
		encoderFillOffset = MAX_BUILDTABLE;
    647a:	4b34      	ldr	r3, [pc, #208]	; (654c <MotorFindEncoderMatch+0x130>)
    647c:	2280      	movs	r2, #128	; 0x80
    647e:	00d2      	lsls	r2, r2, #3
    6480:	801a      	strh	r2, [r3, #0]
	}
	while ((done==0) && (i<encoderFillOffset))
    6482:	e04d      	b.n	6520 <MotorFindEncoderMatch+0x104>
    6484:	e04c      	b.n	6520 <MotorFindEncoderMatch+0x104>
	{
		if (encoderTable.Current[newOffset] < matchCurrent)
    6486:	1c3b      	adds	r3, r7, #0
    6488:	330a      	adds	r3, #10
    648a:	881a      	ldrh	r2, [r3, #0]
    648c:	4b30      	ldr	r3, [pc, #192]	; (6550 <MotorFindEncoderMatch+0x134>)
    648e:	0052      	lsls	r2, r2, #1
    6490:	5ad3      	ldrh	r3, [r2, r3]
    6492:	1dba      	adds	r2, r7, #6
    6494:	8812      	ldrh	r2, [r2, #0]
    6496:	429a      	cmp	r2, r3
    6498:	d916      	bls.n	64c8 <MotorFindEncoderMatch+0xac>
		{
			done = 1; 
    649a:	1c3b      	adds	r3, r7, #0
    649c:	3309      	adds	r3, #9
    649e:	2201      	movs	r2, #1
    64a0:	701a      	strb	r2, [r3, #0]
    64a2:	1c3b      	adds	r3, r7, #0
    64a4:	330e      	adds	r3, #14
    64a6:	1c3a      	adds	r2, r7, #0
    64a8:	320e      	adds	r2, #14
    64aa:	8812      	ldrh	r2, [r2, #0]
    64ac:	801a      	strh	r2, [r3, #0]
    64ae:	1c3b      	adds	r3, r7, #0
    64b0:	330c      	adds	r3, #12
    64b2:	1c3a      	adds	r2, r7, #0
    64b4:	320c      	adds	r2, #12
    64b6:	8812      	ldrh	r2, [r2, #0]
    64b8:	801a      	strh	r2, [r3, #0]
    64ba:	1c3b      	adds	r3, r7, #0
    64bc:	330a      	adds	r3, #10
    64be:	1c3a      	adds	r2, r7, #0
    64c0:	320a      	adds	r2, #10
    64c2:	8812      	ldrh	r2, [r2, #0]
    64c4:	801a      	strh	r2, [r3, #0]
    64c6:	e02b      	b.n	6520 <MotorFindEncoderMatch+0x104>
		}
		else
		{
			i++;
    64c8:	1c3b      	adds	r3, r7, #0
    64ca:	330c      	adds	r3, #12
    64cc:	881a      	ldrh	r2, [r3, #0]
    64ce:	1c3b      	adds	r3, r7, #0
    64d0:	330c      	adds	r3, #12
    64d2:	3201      	adds	r2, #1
    64d4:	801a      	strh	r2, [r3, #0]
			countBack++;
    64d6:	1c3b      	adds	r3, r7, #0
    64d8:	330e      	adds	r3, #14
    64da:	881a      	ldrh	r2, [r3, #0]
    64dc:	1c3b      	adds	r3, r7, #0
    64de:	330e      	adds	r3, #14
    64e0:	3201      	adds	r2, #1
    64e2:	801a      	strh	r2, [r3, #0]
			if (newOffset >0)
    64e4:	1c3b      	adds	r3, r7, #0
    64e6:	330a      	adds	r3, #10
    64e8:	881b      	ldrh	r3, [r3, #0]
    64ea:	2b00      	cmp	r3, #0
    64ec:	d00d      	beq.n	650a <MotorFindEncoderMatch+0xee>
			{
				newOffset--;
    64ee:	1c3b      	adds	r3, r7, #0
    64f0:	330a      	adds	r3, #10
    64f2:	881a      	ldrh	r2, [r3, #0]
    64f4:	1c3b      	adds	r3, r7, #0
    64f6:	330a      	adds	r3, #10
    64f8:	3a01      	subs	r2, #1
    64fa:	801a      	strh	r2, [r3, #0]
    64fc:	1c3b      	adds	r3, r7, #0
    64fe:	3309      	adds	r3, #9
    6500:	1c3a      	adds	r2, r7, #0
    6502:	3209      	adds	r2, #9
    6504:	7812      	ldrb	r2, [r2, #0]
    6506:	701a      	strb	r2, [r3, #0]
    6508:	e00a      	b.n	6520 <MotorFindEncoderMatch+0x104>
			}
			else
			{
				newOffset = MAX_BUILDTABLE; 
    650a:	1c3b      	adds	r3, r7, #0
    650c:	330a      	adds	r3, #10
    650e:	2280      	movs	r2, #128	; 0x80
    6510:	00d2      	lsls	r2, r2, #3
    6512:	801a      	strh	r2, [r3, #0]
    6514:	1c3b      	adds	r3, r7, #0
    6516:	3309      	adds	r3, #9
    6518:	1c3a      	adds	r2, r7, #0
    651a:	3209      	adds	r2, #9
    651c:	7812      	ldrb	r2, [r2, #0]
    651e:	701a      	strb	r2, [r3, #0]
	i = 0; 
	if (encoderFillOffset > MAX_BUILDTABLE)
	{
		encoderFillOffset = MAX_BUILDTABLE;
	}
	while ((done==0) && (i<encoderFillOffset))
    6520:	1c3b      	adds	r3, r7, #0
    6522:	3309      	adds	r3, #9
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	2b00      	cmp	r3, #0
    6528:	d106      	bne.n	6538 <MotorFindEncoderMatch+0x11c>
    652a:	4b08      	ldr	r3, [pc, #32]	; (654c <MotorFindEncoderMatch+0x130>)
    652c:	881b      	ldrh	r3, [r3, #0]
    652e:	1c3a      	adds	r2, r7, #0
    6530:	320c      	adds	r2, #12
    6532:	8812      	ldrh	r2, [r2, #0]
    6534:	429a      	cmp	r2, r3
    6536:	d3a6      	bcc.n	6486 <MotorFindEncoderMatch+0x6a>
			{
				newOffset = MAX_BUILDTABLE; 
			}			
		}
	}
	return countBack; 
    6538:	1c3b      	adds	r3, r7, #0
    653a:	330e      	adds	r3, #14
    653c:	881b      	ldrh	r3, [r3, #0]
}
    653e:	1c18      	adds	r0, r3, #0
    6540:	46bd      	mov	sp, r7
    6542:	b004      	add	sp, #16
    6544:	bd80      	pop	{r7, pc}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	20001e8e 	.word	0x20001e8e
    654c:	200004a6 	.word	0x200004a6
    6550:	20001e90 	.word	0x20001e90

00006554 <ConfigureEncoder>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 void ConfigureEncoder(void)
 {
    6554:	b580      	push	{r7, lr}
    6556:	b084      	sub	sp, #16
    6558:	af00      	add	r7, sp, #0
	 struct extint_chan_conf config_extint_chan;
	 extint_chan_get_config_defaults(&config_extint_chan);
    655a:	1d3b      	adds	r3, r7, #4
    655c:	1c18      	adds	r0, r3, #0
    655e:	4b0b      	ldr	r3, [pc, #44]	; (658c <ConfigureEncoder+0x38>)
    6560:	4798      	blx	r3
	 config_extint_chan.gpio_pin = PIN_PB11A_EIC_EXTINT11;
    6562:	1d3b      	adds	r3, r7, #4
    6564:	222b      	movs	r2, #43	; 0x2b
    6566:	601a      	str	r2, [r3, #0]
	 config_extint_chan.gpio_pin_mux = MUX_PB11A_EIC_EXTINT11;
    6568:	1d3b      	adds	r3, r7, #4
    656a:	2200      	movs	r2, #0
    656c:	605a      	str	r2, [r3, #4]
	 config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    656e:	1d3b      	adds	r3, r7, #4
    6570:	2200      	movs	r2, #0
    6572:	721a      	strb	r2, [r3, #8]
	 config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6574:	1d3b      	adds	r3, r7, #4
    6576:	2203      	movs	r2, #3
    6578:	72da      	strb	r2, [r3, #11]
	 extint_chan_set_config(11, &config_extint_chan);
    657a:	1d3b      	adds	r3, r7, #4
    657c:	200b      	movs	r0, #11
    657e:	1c19      	adds	r1, r3, #0
    6580:	4b03      	ldr	r3, [pc, #12]	; (6590 <ConfigureEncoder+0x3c>)
    6582:	4798      	blx	r3
 }
    6584:	46bd      	mov	sp, r7
    6586:	b004      	add	sp, #16
    6588:	bd80      	pop	{r7, pc}
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	000063e9 	.word	0x000063e9
    6590:	0000406d 	.word	0x0000406d

00006594 <ConfigureEncoderCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureEncoderCallbacks(void)
{
    6594:	b580      	push	{r7, lr}
    6596:	af00      	add	r7, sp, #0
	extint_register_callback(EncoderCallback,11,EXTINT_CALLBACK_TYPE_DETECT);
    6598:	4b05      	ldr	r3, [pc, #20]	; (65b0 <ConfigureEncoderCallbacks+0x1c>)
    659a:	1c18      	adds	r0, r3, #0
    659c:	210b      	movs	r1, #11
    659e:	2200      	movs	r2, #0
    65a0:	4b04      	ldr	r3, [pc, #16]	; (65b4 <ConfigureEncoderCallbacks+0x20>)
    65a2:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    65a4:	200b      	movs	r0, #11
    65a6:	2100      	movs	r1, #0
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <ConfigureEncoderCallbacks+0x24>)
    65aa:	4798      	blx	r3
} 
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	000065bd 	.word	0x000065bd
    65b4:	00004239 	.word	0x00004239
    65b8:	00004295 	.word	0x00004295

000065bc <EncoderCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void EncoderCallback(void)
{
    65bc:	b598      	push	{r3, r4, r7, lr}
    65be:	af00      	add	r7, sp, #0
	encoderCount++;
    65c0:	4b22      	ldr	r3, [pc, #136]	; (664c <EncoderCallback+0x90>)
    65c2:	881b      	ldrh	r3, [r3, #0]
    65c4:	3301      	adds	r3, #1
    65c6:	b29a      	uxth	r2, r3
    65c8:	4b20      	ldr	r3, [pc, #128]	; (664c <EncoderCallback+0x90>)
    65ca:	801a      	strh	r2, [r3, #0]
	if (action == EXTENDING)
    65cc:	4b20      	ldr	r3, [pc, #128]	; (6650 <EncoderCallback+0x94>)
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	2b01      	cmp	r3, #1
    65d2:	d124      	bne.n	661e <EncoderCallback+0x62>
	{
		if (encoderTableOffset >= MAX_BUILDTABLE)
    65d4:	4b1f      	ldr	r3, [pc, #124]	; (6654 <EncoderCallback+0x98>)
    65d6:	881a      	ldrh	r2, [r3, #0]
    65d8:	4b1f      	ldr	r3, [pc, #124]	; (6658 <EncoderCallback+0x9c>)
    65da:	429a      	cmp	r2, r3
    65dc:	d905      	bls.n	65ea <EncoderCallback+0x2e>
		{
			encoderTableOffset = 0;
    65de:	4b1d      	ldr	r3, [pc, #116]	; (6654 <EncoderCallback+0x98>)
    65e0:	2200      	movs	r2, #0
    65e2:	801a      	strh	r2, [r3, #0]
			encoderFlip = 1; 
    65e4:	4b1d      	ldr	r3, [pc, #116]	; (665c <EncoderCallback+0xa0>)
    65e6:	2201      	movs	r2, #1
    65e8:	701a      	strb	r2, [r3, #0]
		}
		encoderTable.Current[encoderTableOffset] = ADCGetReading(ADC_INPUT_CURRENT);
    65ea:	4b1a      	ldr	r3, [pc, #104]	; (6654 <EncoderCallback+0x98>)
    65ec:	881b      	ldrh	r3, [r3, #0]
    65ee:	1c1c      	adds	r4, r3, #0
    65f0:	2001      	movs	r0, #1
    65f2:	4b1b      	ldr	r3, [pc, #108]	; (6660 <EncoderCallback+0xa4>)
    65f4:	4798      	blx	r3
    65f6:	1c03      	adds	r3, r0, #0
    65f8:	1c19      	adds	r1, r3, #0
    65fa:	4b1a      	ldr	r3, [pc, #104]	; (6664 <EncoderCallback+0xa8>)
    65fc:	0062      	lsls	r2, r4, #1
    65fe:	52d1      	strh	r1, [r2, r3]
		encoderTable.EncoderCount[encoderTableOffset++] = encoderCount;
    6600:	4b14      	ldr	r3, [pc, #80]	; (6654 <EncoderCallback+0x98>)
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	1c5a      	adds	r2, r3, #1
    6606:	b291      	uxth	r1, r2
    6608:	4a12      	ldr	r2, [pc, #72]	; (6654 <EncoderCallback+0x98>)
    660a:	8011      	strh	r1, [r2, #0]
    660c:	1c1a      	adds	r2, r3, #0
    660e:	4b0f      	ldr	r3, [pc, #60]	; (664c <EncoderCallback+0x90>)
    6610:	8819      	ldrh	r1, [r3, #0]
    6612:	4b14      	ldr	r3, [pc, #80]	; (6664 <EncoderCallback+0xa8>)
    6614:	2080      	movs	r0, #128	; 0x80
    6616:	00c0      	lsls	r0, r0, #3
    6618:	1812      	adds	r2, r2, r0
    661a:	0052      	lsls	r2, r2, #1
    661c:	52d1      	strh	r1, [r2, r3]
	}
	if (action == RETRACTING_BY_ENCODER)
    661e:	4b0c      	ldr	r3, [pc, #48]	; (6650 <EncoderCallback+0x94>)
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	2b03      	cmp	r3, #3
    6624:	d10f      	bne.n	6646 <EncoderCallback+0x8a>
	{
		if (encoderCountBack >0)
    6626:	4b10      	ldr	r3, [pc, #64]	; (6668 <EncoderCallback+0xac>)
    6628:	881b      	ldrh	r3, [r3, #0]
    662a:	2b00      	cmp	r3, #0
    662c:	d00b      	beq.n	6646 <EncoderCallback+0x8a>
		{
			encoderCountBack--;
    662e:	4b0e      	ldr	r3, [pc, #56]	; (6668 <EncoderCallback+0xac>)
    6630:	881b      	ldrh	r3, [r3, #0]
    6632:	3b01      	subs	r3, #1
    6634:	b29a      	uxth	r2, r3
    6636:	4b0c      	ldr	r3, [pc, #48]	; (6668 <EncoderCallback+0xac>)
    6638:	801a      	strh	r2, [r3, #0]
			if (encoderCountBack == 0)
    663a:	4b0b      	ldr	r3, [pc, #44]	; (6668 <EncoderCallback+0xac>)
    663c:	881b      	ldrh	r3, [r3, #0]
    663e:	2b00      	cmp	r3, #0
    6640:	d101      	bne.n	6646 <EncoderCallback+0x8a>
			{
				MotorOff();
    6642:	4b0a      	ldr	r3, [pc, #40]	; (666c <EncoderCallback+0xb0>)
    6644:	4798      	blx	r3
			}
		}
	}	
}
    6646:	46bd      	mov	sp, r7
    6648:	bd98      	pop	{r3, r4, r7, pc}
    664a:	46c0      	nop			; (mov r8, r8)
    664c:	200004a8 	.word	0x200004a8
    6650:	200004ab 	.word	0x200004ab
    6654:	20001e8e 	.word	0x20001e8e
    6658:	000003ff 	.word	0x000003ff
    665c:	200004aa 	.word	0x200004aa
    6660:	0000a5a9 	.word	0x0000a5a9
    6664:	20001e90 	.word	0x20001e90
    6668:	20002ec4 	.word	0x20002ec4
    666c:	00008d51 	.word	0x00008d51

00006670 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	1c02      	adds	r2, r0, #0
    6678:	1dfb      	adds	r3, r7, #7
    667a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    667c:	1c3b      	adds	r3, r7, #0
    667e:	330f      	adds	r3, #15
    6680:	1dfa      	adds	r2, r7, #7
    6682:	7812      	ldrb	r2, [r2, #0]
    6684:	09d2      	lsrs	r2, r2, #7
    6686:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6688:	1c3b      	adds	r3, r7, #0
    668a:	330e      	adds	r3, #14
    668c:	1dfa      	adds	r2, r7, #7
    668e:	7812      	ldrb	r2, [r2, #0]
    6690:	0952      	lsrs	r2, r2, #5
    6692:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6694:	4b0d      	ldr	r3, [pc, #52]	; (66cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6696:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6698:	1c3b      	adds	r3, r7, #0
    669a:	330f      	adds	r3, #15
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	2b00      	cmp	r3, #0
    66a0:	d10e      	bne.n	66c0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    66a2:	1c3b      	adds	r3, r7, #0
    66a4:	330f      	adds	r3, #15
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	2210      	movs	r2, #16
    66ac:	19d2      	adds	r2, r2, r7
    66ae:	18d3      	adds	r3, r2, r3
    66b0:	3b08      	subs	r3, #8
    66b2:	681a      	ldr	r2, [r3, #0]
    66b4:	1c3b      	adds	r3, r7, #0
    66b6:	330e      	adds	r3, #14
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	01db      	lsls	r3, r3, #7
    66bc:	18d3      	adds	r3, r2, r3
    66be:	e000      	b.n	66c2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    66c0:	2300      	movs	r3, #0
	}
}
    66c2:	1c18      	adds	r0, r3, #0
    66c4:	46bd      	mov	sp, r7
    66c6:	b004      	add	sp, #16
    66c8:	bd80      	pop	{r7, pc}
    66ca:	46c0      	nop			; (mov r8, r8)
    66cc:	41004400 	.word	0x41004400

000066d0 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    66d4:	4b03      	ldr	r3, [pc, #12]	; (66e4 <system_interrupt_enable_global+0x14>)
    66d6:	2201      	movs	r2, #1
    66d8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    66da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    66de:	b662      	cpsie	i
}
    66e0:	46bd      	mov	sp, r7
    66e2:	bd80      	pop	{r7, pc}
    66e4:	20000044 	.word	0x20000044

000066e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b082      	sub	sp, #8
    66ec:	af00      	add	r7, sp, #0
    66ee:	1c02      	adds	r2, r0, #0
    66f0:	1dfb      	adds	r3, r7, #7
    66f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    66f4:	1dfb      	adds	r3, r7, #7
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	1c18      	adds	r0, r3, #0
    66fa:	4b03      	ldr	r3, [pc, #12]	; (6708 <port_get_group_from_gpio_pin+0x20>)
    66fc:	4798      	blx	r3
    66fe:	1c03      	adds	r3, r0, #0
}
    6700:	1c18      	adds	r0, r3, #0
    6702:	46bd      	mov	sp, r7
    6704:	b002      	add	sp, #8
    6706:	bd80      	pop	{r7, pc}
    6708:	00006671 	.word	0x00006671

0000670c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    670c:	b580      	push	{r7, lr}
    670e:	b082      	sub	sp, #8
    6710:	af00      	add	r7, sp, #0
    6712:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	2200      	movs	r2, #0
    6718:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	2201      	movs	r2, #1
    671e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	2200      	movs	r2, #0
    6724:	709a      	strb	r2, [r3, #2]
}
    6726:	46bd      	mov	sp, r7
    6728:	b002      	add	sp, #8
    672a:	bd80      	pop	{r7, pc}

0000672c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    672c:	b580      	push	{r7, lr}
    672e:	b084      	sub	sp, #16
    6730:	af00      	add	r7, sp, #0
    6732:	1c02      	adds	r2, r0, #0
    6734:	1dfb      	adds	r3, r7, #7
    6736:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6738:	1dfb      	adds	r3, r7, #7
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	1c18      	adds	r0, r3, #0
    673e:	4b0c      	ldr	r3, [pc, #48]	; (6770 <port_pin_get_input_level+0x44>)
    6740:	4798      	blx	r3
    6742:	1c03      	adds	r3, r0, #0
    6744:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6746:	1dfb      	adds	r3, r7, #7
    6748:	781a      	ldrb	r2, [r3, #0]
    674a:	231f      	movs	r3, #31
    674c:	4013      	ands	r3, r2
    674e:	2201      	movs	r2, #1
    6750:	1c11      	adds	r1, r2, #0
    6752:	4099      	lsls	r1, r3
    6754:	1c0b      	adds	r3, r1, #0
    6756:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    6758:	68fb      	ldr	r3, [r7, #12]
    675a:	6a1b      	ldr	r3, [r3, #32]
    675c:	68ba      	ldr	r2, [r7, #8]
    675e:	4013      	ands	r3, r2
    6760:	1e5a      	subs	r2, r3, #1
    6762:	4193      	sbcs	r3, r2
    6764:	b2db      	uxtb	r3, r3
}
    6766:	1c18      	adds	r0, r3, #0
    6768:	46bd      	mov	sp, r7
    676a:	b004      	add	sp, #16
    676c:	bd80      	pop	{r7, pc}
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	000066e9 	.word	0x000066e9

00006774 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6774:	b580      	push	{r7, lr}
    6776:	b084      	sub	sp, #16
    6778:	af00      	add	r7, sp, #0
    677a:	1c0a      	adds	r2, r1, #0
    677c:	1dfb      	adds	r3, r7, #7
    677e:	1c01      	adds	r1, r0, #0
    6780:	7019      	strb	r1, [r3, #0]
    6782:	1dbb      	adds	r3, r7, #6
    6784:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6786:	1dfb      	adds	r3, r7, #7
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	1c18      	adds	r0, r3, #0
    678c:	4b0d      	ldr	r3, [pc, #52]	; (67c4 <port_pin_set_output_level+0x50>)
    678e:	4798      	blx	r3
    6790:	1c03      	adds	r3, r0, #0
    6792:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6794:	1dfb      	adds	r3, r7, #7
    6796:	781a      	ldrb	r2, [r3, #0]
    6798:	231f      	movs	r3, #31
    679a:	4013      	ands	r3, r2
    679c:	2201      	movs	r2, #1
    679e:	1c11      	adds	r1, r2, #0
    67a0:	4099      	lsls	r1, r3
    67a2:	1c0b      	adds	r3, r1, #0
    67a4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    67a6:	1dbb      	adds	r3, r7, #6
    67a8:	781b      	ldrb	r3, [r3, #0]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d003      	beq.n	67b6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    67ae:	68fb      	ldr	r3, [r7, #12]
    67b0:	68ba      	ldr	r2, [r7, #8]
    67b2:	619a      	str	r2, [r3, #24]
    67b4:	e002      	b.n	67bc <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    67b6:	68fb      	ldr	r3, [r7, #12]
    67b8:	68ba      	ldr	r2, [r7, #8]
    67ba:	615a      	str	r2, [r3, #20]
	}
}
    67bc:	46bd      	mov	sp, r7
    67be:	b004      	add	sp, #16
    67c0:	bd80      	pop	{r7, pc}
    67c2:	46c0      	nop			; (mov r8, r8)
    67c4:	000066e9 	.word	0x000066e9

000067c8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b082      	sub	sp, #8
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	2200      	movs	r2, #0
    67d4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    67d6:	687b      	ldr	r3, [r7, #4]
    67d8:	2200      	movs	r2, #0
    67da:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	2201      	movs	r2, #1
    67e0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	2201      	movs	r2, #1
    67e6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	2200      	movs	r2, #0
    67ec:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	2202      	movs	r2, #2
    67f2:	72da      	strb	r2, [r3, #11]
}
    67f4:	46bd      	mov	sp, r7
    67f6:	b002      	add	sp, #8
    67f8:	bd80      	pop	{r7, pc}
    67fa:	46c0      	nop			; (mov r8, r8)

000067fc <BrakeInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeInit(void)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6800:	4b12      	ldr	r3, [pc, #72]	; (684c <BrakeInit+0x50>)
    6802:	2202      	movs	r2, #2
    6804:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    6806:	4b12      	ldr	r3, [pc, #72]	; (6850 <BrakeInit+0x54>)
    6808:	2202      	movs	r2, #2
    680a:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF; 
    680c:	4b11      	ldr	r3, [pc, #68]	; (6854 <BrakeInit+0x58>)
    680e:	2201      	movs	r2, #1
    6810:	701a      	strb	r2, [r3, #0]
	brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    6812:	4b11      	ldr	r3, [pc, #68]	; (6858 <BrakeInit+0x5c>)
    6814:	791b      	ldrb	r3, [r3, #4]
    6816:	2204      	movs	r2, #4
    6818:	4313      	orrs	r3, r2
    681a:	b2da      	uxtb	r2, r3
    681c:	4b0e      	ldr	r3, [pc, #56]	; (6858 <BrakeInit+0x5c>)
    681e:	711a      	strb	r2, [r3, #4]
	brakeState = BRAKESTATE_POWERINGUP; 
    6820:	4b0e      	ldr	r3, [pc, #56]	; (685c <BrakeInit+0x60>)
    6822:	2202      	movs	r2, #2
    6824:	701a      	strb	r2, [r3, #0]
	table0.Item.MaxForce = 5; 
    6826:	4b0e      	ldr	r3, [pc, #56]	; (6860 <BrakeInit+0x64>)
    6828:	2205      	movs	r2, #5
    682a:	709a      	strb	r2, [r3, #2]
	BrakeBoardStateMachineTask();	
    682c:	4b0d      	ldr	r3, [pc, #52]	; (6864 <BrakeInit+0x68>)
    682e:	4798      	blx	r3
	gPrime = 0; 
    6830:	4b0d      	ldr	r3, [pc, #52]	; (6868 <BrakeInit+0x6c>)
    6832:	2200      	movs	r2, #0
    6834:	801a      	strh	r2, [r3, #0]
	//------------------------
//V01_11	poweredUp = 1;
//V01_11	brakeState = BRAKESTATE_RESET;
	poweredUp = 0;
    6836:	4b0d      	ldr	r3, [pc, #52]	; (686c <BrakeInit+0x70>)
    6838:	2200      	movs	r2, #0
    683a:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_POWERINGUP;	
    683c:	4b07      	ldr	r3, [pc, #28]	; (685c <BrakeInit+0x60>)
    683e:	2202      	movs	r2, #2
    6840:	701a      	strb	r2, [r3, #0]
	
	BrakeBoardStateMachineTask();	
    6842:	4b08      	ldr	r3, [pc, #32]	; (6864 <BrakeInit+0x68>)
    6844:	4798      	blx	r3
}
    6846:	46bd      	mov	sp, r7
    6848:	bd80      	pop	{r7, pc}
    684a:	46c0      	nop			; (mov r8, r8)
    684c:	20002ec8 	.word	0x20002ec8
    6850:	20002ea2 	.word	0x20002ea2
    6854:	20002e9c 	.word	0x20002e9c
    6858:	20003660 	.word	0x20003660
    685c:	20002eaa 	.word	0x20002eaa
    6860:	20002f98 	.word	0x20002f98
    6864:	00006c75 	.word	0x00006c75
    6868:	20002ec6 	.word	0x20002ec6
    686c:	20003681 	.word	0x20003681

00006870 <BrakeEnterIdleSleepMode>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeEnterIdleSleepMode(void)
{
    6870:	b580      	push	{r7, lr}
    6872:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6874:	4b06      	ldr	r3, [pc, #24]	; (6890 <BrakeEnterIdleSleepMode+0x20>)
    6876:	2202      	movs	r2, #2
    6878:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    687a:	4b06      	ldr	r3, [pc, #24]	; (6894 <BrakeEnterIdleSleepMode+0x24>)
    687c:	2202      	movs	r2, #2
    687e:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF;
    6880:	4b05      	ldr	r3, [pc, #20]	; (6898 <BrakeEnterIdleSleepMode+0x28>)
    6882:	2201      	movs	r2, #1
    6884:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_IDLESLEEP;
    6886:	4b05      	ldr	r3, [pc, #20]	; (689c <BrakeEnterIdleSleepMode+0x2c>)
    6888:	2201      	movs	r2, #1
    688a:	701a      	strb	r2, [r3, #0]
 
	
}
    688c:	46bd      	mov	sp, r7
    688e:	bd80      	pop	{r7, pc}
    6890:	20002ec8 	.word	0x20002ec8
    6894:	20002ea2 	.word	0x20002ea2
    6898:	20002e9c 	.word	0x20002e9c
    689c:	20002eaa 	.word	0x20002eaa

000068a0 <BrakeActuatorControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint8_t BrakeActuatorControl(uint8_t which)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b084      	sub	sp, #16
    68a4:	af00      	add	r7, sp, #0
    68a6:	1c02      	adds	r2, r0, #0
    68a8:	1dfb      	adds	r3, r7, #7
    68aa:	701a      	strb	r2, [r3, #0]
	uint8_t status; 
	status = BRAKE_GOOD; 
    68ac:	1c3b      	adds	r3, r7, #0
    68ae:	330f      	adds	r3, #15
    68b0:	2201      	movs	r2, #1
    68b2:	701a      	strb	r2, [r3, #0]
	switch (which)
    68b4:	1dfb      	adds	r3, r7, #7
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	2b01      	cmp	r3, #1
    68ba:	d038      	beq.n	692e <BrakeActuatorControl+0x8e>
    68bc:	dc02      	bgt.n	68c4 <BrakeActuatorControl+0x24>
    68be:	2b00      	cmp	r3, #0
    68c0:	d006      	beq.n	68d0 <BrakeActuatorControl+0x30>
    68c2:	e0aa      	b.n	6a1a <BrakeActuatorControl+0x17a>
    68c4:	2b02      	cmp	r3, #2
    68c6:	d061      	beq.n	698c <BrakeActuatorControl+0xec>
    68c8:	2b03      	cmp	r3, #3
    68ca:	d100      	bne.n	68ce <BrakeActuatorControl+0x2e>
    68cc:	e076      	b.n	69bc <BrakeActuatorControl+0x11c>
    68ce:	e0a4      	b.n	6a1a <BrakeActuatorControl+0x17a>
	{
		case BRAKE_HOME:
		{
			if (hlimitState != 0)
    68d0:	4b63      	ldr	r3, [pc, #396]	; (6a60 <BrakeActuatorControl+0x1c0>)
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	2b00      	cmp	r3, #0
    68d6:	d022      	beq.n	691e <BrakeActuatorControl+0x7e>
			{	 
				if (encoderCount == 0)
    68d8:	4b62      	ldr	r3, [pc, #392]	; (6a64 <BrakeActuatorControl+0x1c4>)
    68da:	881b      	ldrh	r3, [r3, #0]
    68dc:	2b00      	cmp	r3, #0
    68de:	d10b      	bne.n	68f8 <BrakeActuatorControl+0x58>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    68e0:	4b61      	ldr	r3, [pc, #388]	; (6a68 <BrakeActuatorControl+0x1c8>)
    68e2:	789b      	ldrb	r3, [r3, #2]
    68e4:	2240      	movs	r2, #64	; 0x40
    68e6:	4313      	orrs	r3, r2
    68e8:	b2da      	uxtb	r2, r3
    68ea:	4b5f      	ldr	r3, [pc, #380]	; (6a68 <BrakeActuatorControl+0x1c8>)
    68ec:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    68ee:	1c3b      	adds	r3, r7, #0
    68f0:	330f      	adds	r3, #15
    68f2:	2200      	movs	r2, #0
    68f4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEOFFFAIL;
			}
			break;
    68f6:	e090      	b.n	6a1a <BrakeActuatorControl+0x17a>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEOFFFAIL;
    68f8:	4b5b      	ldr	r3, [pc, #364]	; (6a68 <BrakeActuatorControl+0x1c8>)
    68fa:	789b      	ldrb	r3, [r3, #2]
    68fc:	2204      	movs	r2, #4
    68fe:	4313      	orrs	r3, r2
    6900:	b2da      	uxtb	r2, r3
    6902:	4b59      	ldr	r3, [pc, #356]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6904:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6906:	4b58      	ldr	r3, [pc, #352]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6908:	789b      	ldrb	r3, [r3, #2]
    690a:	2240      	movs	r2, #64	; 0x40
    690c:	4393      	bics	r3, r2
    690e:	b2da      	uxtb	r2, r3
    6910:	4b55      	ldr	r3, [pc, #340]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6912:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR; 
    6914:	1c3b      	adds	r3, r7, #0
    6916:	330f      	adds	r3, #15
    6918:	2200      	movs	r2, #0
    691a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEOFFFAIL;
			}
			break;
    691c:	e07d      	b.n	6a1a <BrakeActuatorControl+0x17a>
					status = BRAKE_ERROR; 
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEOFFFAIL;
    691e:	4b52      	ldr	r3, [pc, #328]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6920:	789b      	ldrb	r3, [r3, #2]
    6922:	2204      	movs	r2, #4
    6924:	4393      	bics	r3, r2
    6926:	b2da      	uxtb	r2, r3
    6928:	4b4f      	ldr	r3, [pc, #316]	; (6a68 <BrakeActuatorControl+0x1c8>)
    692a:	709a      	strb	r2, [r3, #2]
			}
			break;
    692c:	e075      	b.n	6a1a <BrakeActuatorControl+0x17a>
		}
		case BRAKE_AWAY:
		{
			if (flimitState != 0)
    692e:	4b4f      	ldr	r3, [pc, #316]	; (6a6c <BrakeActuatorControl+0x1cc>)
    6930:	781b      	ldrb	r3, [r3, #0]
    6932:	2b00      	cmp	r3, #0
    6934:	d022      	beq.n	697c <BrakeActuatorControl+0xdc>
			{
				if (encoderCount == 0)
    6936:	4b4b      	ldr	r3, [pc, #300]	; (6a64 <BrakeActuatorControl+0x1c4>)
    6938:	881b      	ldrh	r3, [r3, #0]
    693a:	2b00      	cmp	r3, #0
    693c:	d10b      	bne.n	6956 <BrakeActuatorControl+0xb6>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    693e:	4b4a      	ldr	r3, [pc, #296]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6940:	789b      	ldrb	r3, [r3, #2]
    6942:	2240      	movs	r2, #64	; 0x40
    6944:	4313      	orrs	r3, r2
    6946:	b2da      	uxtb	r2, r3
    6948:	4b47      	ldr	r3, [pc, #284]	; (6a68 <BrakeActuatorControl+0x1c8>)
    694a:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    694c:	1c3b      	adds	r3, r7, #0
    694e:	330f      	adds	r3, #15
    6950:	2200      	movs	r2, #0
    6952:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    6954:	e061      	b.n	6a1a <BrakeActuatorControl+0x17a>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDOFFFAIL;
    6956:	4b44      	ldr	r3, [pc, #272]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6958:	789b      	ldrb	r3, [r3, #2]
    695a:	2208      	movs	r2, #8
    695c:	4313      	orrs	r3, r2
    695e:	b2da      	uxtb	r2, r3
    6960:	4b41      	ldr	r3, [pc, #260]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6962:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6964:	4b40      	ldr	r3, [pc, #256]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6966:	789b      	ldrb	r3, [r3, #2]
    6968:	2240      	movs	r2, #64	; 0x40
    696a:	4393      	bics	r3, r2
    696c:	b2da      	uxtb	r2, r3
    696e:	4b3e      	ldr	r3, [pc, #248]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6970:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    6972:	1c3b      	adds	r3, r7, #0
    6974:	330f      	adds	r3, #15
    6976:	2200      	movs	r2, #0
    6978:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    697a:	e04e      	b.n	6a1a <BrakeActuatorControl+0x17a>
					status = BRAKE_ERROR;
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
    697c:	4b3a      	ldr	r3, [pc, #232]	; (6a68 <BrakeActuatorControl+0x1c8>)
    697e:	789b      	ldrb	r3, [r3, #2]
    6980:	2208      	movs	r2, #8
    6982:	4393      	bics	r3, r2
    6984:	b2da      	uxtb	r2, r3
    6986:	4b38      	ldr	r3, [pc, #224]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6988:	709a      	strb	r2, [r3, #2]
			}
			break;
    698a:	e046      	b.n	6a1a <BrakeActuatorControl+0x17a>
		}		
		case BRAKE_RUN:
		{
			if (encoderCount == 0)
    698c:	4b35      	ldr	r3, [pc, #212]	; (6a64 <BrakeActuatorControl+0x1c4>)
    698e:	881b      	ldrh	r3, [r3, #0]
    6990:	2b00      	cmp	r3, #0
    6992:	d10b      	bne.n	69ac <BrakeActuatorControl+0x10c>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    6994:	4b34      	ldr	r3, [pc, #208]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6996:	789b      	ldrb	r3, [r3, #2]
    6998:	2240      	movs	r2, #64	; 0x40
    699a:	4313      	orrs	r3, r2
    699c:	b2da      	uxtb	r2, r3
    699e:	4b32      	ldr	r3, [pc, #200]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69a0:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    69a2:	1c3b      	adds	r3, r7, #0
    69a4:	330f      	adds	r3, #15
    69a6:	2200      	movs	r2, #0
    69a8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
			}
			break;
    69aa:	e036      	b.n	6a1a <BrakeActuatorControl+0x17a>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    69ac:	4b2e      	ldr	r3, [pc, #184]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69ae:	789b      	ldrb	r3, [r3, #2]
    69b0:	2240      	movs	r2, #64	; 0x40
    69b2:	4393      	bics	r3, r2
    69b4:	b2da      	uxtb	r2, r3
    69b6:	4b2c      	ldr	r3, [pc, #176]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69b8:	709a      	strb	r2, [r3, #2]
			}
			break;
    69ba:	e02e      	b.n	6a1a <BrakeActuatorControl+0x17a>
		}		
		case BRAKE_MIDDLESTOP:
		{
			if (flimitState == 0)
    69bc:	4b2b      	ldr	r3, [pc, #172]	; (6a6c <BrakeActuatorControl+0x1cc>)
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	2b00      	cmp	r3, #0
    69c2:	d10b      	bne.n	69dc <BrakeActuatorControl+0x13c>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDONFAIL;
    69c4:	4b28      	ldr	r3, [pc, #160]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69c6:	789b      	ldrb	r3, [r3, #2]
    69c8:	2202      	movs	r2, #2
    69ca:	4313      	orrs	r3, r2
    69cc:	b2da      	uxtb	r2, r3
    69ce:	4b26      	ldr	r3, [pc, #152]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69d0:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    69d2:	1c3b      	adds	r3, r7, #0
    69d4:	330f      	adds	r3, #15
    69d6:	2200      	movs	r2, #0
    69d8:	701a      	strb	r2, [r3, #0]
    69da:	e006      	b.n	69ea <BrakeActuatorControl+0x14a>
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDONFAIL;
    69dc:	4b22      	ldr	r3, [pc, #136]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69de:	789b      	ldrb	r3, [r3, #2]
    69e0:	2202      	movs	r2, #2
    69e2:	4393      	bics	r3, r2
    69e4:	b2da      	uxtb	r2, r3
    69e6:	4b20      	ldr	r3, [pc, #128]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69e8:	709a      	strb	r2, [r3, #2]
			}
			if (hlimitState == 0)
    69ea:	4b1d      	ldr	r3, [pc, #116]	; (6a60 <BrakeActuatorControl+0x1c0>)
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d10b      	bne.n	6a0a <BrakeActuatorControl+0x16a>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
    69f2:	4b1d      	ldr	r3, [pc, #116]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69f4:	789b      	ldrb	r3, [r3, #2]
    69f6:	2201      	movs	r2, #1
    69f8:	4313      	orrs	r3, r2
    69fa:	b2da      	uxtb	r2, r3
    69fc:	4b1a      	ldr	r3, [pc, #104]	; (6a68 <BrakeActuatorControl+0x1c8>)
    69fe:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6a00:	1c3b      	adds	r3, r7, #0
    6a02:	330f      	adds	r3, #15
    6a04:	2200      	movs	r2, #0
    6a06:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
			}			
			break;
    6a08:	e006      	b.n	6a18 <BrakeActuatorControl+0x178>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
    6a0a:	4b17      	ldr	r3, [pc, #92]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a0c:	789b      	ldrb	r3, [r3, #2]
    6a0e:	2201      	movs	r2, #1
    6a10:	4393      	bics	r3, r2
    6a12:	b2da      	uxtb	r2, r3
    6a14:	4b14      	ldr	r3, [pc, #80]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a16:	709a      	strb	r2, [r3, #2]
			}			
			break;
    6a18:	46c0      	nop			; (mov r8, r8)
		}		
	}
	if ((flimitState == 0)&&(hlimitState ==0))
    6a1a:	4b14      	ldr	r3, [pc, #80]	; (6a6c <BrakeActuatorControl+0x1cc>)
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d10f      	bne.n	6a42 <BrakeActuatorControl+0x1a2>
    6a22:	4b0f      	ldr	r3, [pc, #60]	; (6a60 <BrakeActuatorControl+0x1c0>)
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	2b00      	cmp	r3, #0
    6a28:	d10b      	bne.n	6a42 <BrakeActuatorControl+0x1a2>
	{
		brakeStatus.ActuatorStatus |= ACTUATORSTATUS_BOTHLIMITSACTIVE;	
    6a2a:	4b0f      	ldr	r3, [pc, #60]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a2c:	789b      	ldrb	r3, [r3, #2]
    6a2e:	2220      	movs	r2, #32
    6a30:	4313      	orrs	r3, r2
    6a32:	b2da      	uxtb	r2, r3
    6a34:	4b0c      	ldr	r3, [pc, #48]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a36:	709a      	strb	r2, [r3, #2]
		status = BRAKE_ERROR;
    6a38:	1c3b      	adds	r3, r7, #0
    6a3a:	330f      	adds	r3, #15
    6a3c:	2200      	movs	r2, #0
    6a3e:	701a      	strb	r2, [r3, #0]
    6a40:	e006      	b.n	6a50 <BrakeActuatorControl+0x1b0>
	}
	else
	{
		brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_BOTHLIMITSACTIVE;
    6a42:	4b09      	ldr	r3, [pc, #36]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a44:	789b      	ldrb	r3, [r3, #2]
    6a46:	2220      	movs	r2, #32
    6a48:	4393      	bics	r3, r2
    6a4a:	b2da      	uxtb	r2, r3
    6a4c:	4b06      	ldr	r3, [pc, #24]	; (6a68 <BrakeActuatorControl+0x1c8>)
    6a4e:	709a      	strb	r2, [r3, #2]
	}
	return status; 
    6a50:	1c3b      	adds	r3, r7, #0
    6a52:	330f      	adds	r3, #15
    6a54:	781b      	ldrb	r3, [r3, #0]
}
    6a56:	1c18      	adds	r0, r3, #0
    6a58:	46bd      	mov	sp, r7
    6a5a:	b004      	add	sp, #16
    6a5c:	bd80      	pop	{r7, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	20003034 	.word	0x20003034
    6a64:	200004a8 	.word	0x200004a8
    6a68:	20003660 	.word	0x20003660
    6a6c:	2000303e 	.word	0x2000303e

00006a70 <BrakeLEDControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeLEDControl(void)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	af00      	add	r7, sp, #0
	//--------------------------------
	// what should the bi color LED be doing?
	// 1. flash red for the following errors: 
	//    a. brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;	
	switch (brakeState)
    6a74:	4b39      	ldr	r3, [pc, #228]	; (6b5c <BrakeLEDControl+0xec>)
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	2b12      	cmp	r3, #18
    6a7a:	d900      	bls.n	6a7e <BrakeLEDControl+0xe>
    6a7c:	e06b      	b.n	6b56 <BrakeLEDControl+0xe6>
    6a7e:	009a      	lsls	r2, r3, #2
    6a80:	4b37      	ldr	r3, [pc, #220]	; (6b60 <BrakeLEDControl+0xf0>)
    6a82:	18d3      	adds	r3, r2, r3
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	469f      	mov	pc, r3
		case BRAKESTATE_POWERINGUP:
		case BRAKESTATE_POWEREDUP:
		case BRAKESTATE_IDLESLEEP:
		{
			//leds are off 
			brakeBiLED = BRAKEBILED_OFF;
    6a88:	4b36      	ldr	r3, [pc, #216]	; (6b64 <BrakeLEDControl+0xf4>)
    6a8a:	2202      	movs	r2, #2
    6a8c:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF; 
    6a8e:	4b36      	ldr	r3, [pc, #216]	; (6b68 <BrakeLEDControl+0xf8>)
    6a90:	2202      	movs	r2, #2
    6a92:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6a94:	4b35      	ldr	r3, [pc, #212]	; (6b6c <BrakeLEDControl+0xfc>)
    6a96:	2201      	movs	r2, #1
    6a98:	701a      	strb	r2, [r3, #0]
			break; 
    6a9a:	e05c      	b.n	6b56 <BrakeLEDControl+0xe6>
		}
		case BRAKESTATE_RESET:
		case BRAKESTATE_PRESETUP:
		{
			brakeBiLED = BRAKEBILED_OFF;
    6a9c:	4b31      	ldr	r3, [pc, #196]	; (6b64 <BrakeLEDControl+0xf4>)
    6a9e:	2202      	movs	r2, #2
    6aa0:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6aa2:	4b31      	ldr	r3, [pc, #196]	; (6b68 <BrakeLEDControl+0xf8>)
    6aa4:	2203      	movs	r2, #3
    6aa6:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6aa8:	4b30      	ldr	r3, [pc, #192]	; (6b6c <BrakeLEDControl+0xfc>)
    6aaa:	2201      	movs	r2, #1
    6aac:	701a      	strb	r2, [r3, #0]
			break;
    6aae:	e052      	b.n	6b56 <BrakeLEDControl+0xe6>
		}		
		case BRAKESTATE_ERROR:
		{
			brakeBiLED = BRAKEBILED_REDFLASH;
    6ab0:	4b2c      	ldr	r3, [pc, #176]	; (6b64 <BrakeLEDControl+0xf4>)
    6ab2:	2203      	movs	r2, #3
    6ab4:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF;
    6ab6:	4b2c      	ldr	r3, [pc, #176]	; (6b68 <BrakeLEDControl+0xf8>)
    6ab8:	2202      	movs	r2, #2
    6aba:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6abc:	4b2b      	ldr	r3, [pc, #172]	; (6b6c <BrakeLEDControl+0xfc>)
    6abe:	2201      	movs	r2, #1
    6ac0:	701a      	strb	r2, [r3, #0]
			break;
    6ac2:	e048      	b.n	6b56 <BrakeLEDControl+0xe6>
		}		
		case BRAKESTATE_SETUP:
		case BRAKESTATE_SETUPACTIVE:
		{
			brakeBiLED = BRAKEBILED_OFF;
    6ac4:	4b27      	ldr	r3, [pc, #156]	; (6b64 <BrakeLEDControl+0xf4>)
    6ac6:	2202      	movs	r2, #2
    6ac8:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6aca:	4b27      	ldr	r3, [pc, #156]	; (6b68 <BrakeLEDControl+0xf8>)
    6acc:	2203      	movs	r2, #3
    6ace:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6ad0:	4b26      	ldr	r3, [pc, #152]	; (6b6c <BrakeLEDControl+0xfc>)
    6ad2:	2201      	movs	r2, #1
    6ad4:	701a      	strb	r2, [r3, #0]
			break;
    6ad6:	e03e      	b.n	6b56 <BrakeLEDControl+0xe6>
		}		
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{
			brakeBiLED = BRAKEBILED_GREENSOLID;
    6ad8:	4b22      	ldr	r3, [pc, #136]	; (6b64 <BrakeLEDControl+0xf4>)
    6ada:	2200      	movs	r2, #0
    6adc:	701a      	strb	r2, [r3, #0]
			if ((brakeStatus.BrakeState & BRAKESTATE_NOINPUTVOLTAGE)!= 0)
    6ade:	4b24      	ldr	r3, [pc, #144]	; (6b70 <BrakeLEDControl+0x100>)
    6ae0:	791b      	ldrb	r3, [r3, #4]
    6ae2:	1c1a      	adds	r2, r3, #0
    6ae4:	2320      	movs	r3, #32
    6ae6:	4013      	ands	r3, r2
    6ae8:	d003      	beq.n	6af2 <BrakeLEDControl+0x82>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6aea:	4b1e      	ldr	r3, [pc, #120]	; (6b64 <BrakeLEDControl+0xf4>)
    6aec:	2204      	movs	r2, #4
    6aee:	701a      	strb	r2, [r3, #0]
    6af0:	e01c      	b.n	6b2c <BrakeLEDControl+0xbc>
			}
			else
			{
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6af2:	4b1f      	ldr	r3, [pc, #124]	; (6b70 <BrakeLEDControl+0x100>)
    6af4:	791b      	ldrb	r3, [r3, #4]
    6af6:	1c1a      	adds	r2, r3, #0
    6af8:	2308      	movs	r3, #8
    6afa:	4013      	ands	r3, r2
    6afc:	d00d      	beq.n	6b1a <BrakeLEDControl+0xaa>
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6afe:	4b1c      	ldr	r3, [pc, #112]	; (6b70 <BrakeLEDControl+0x100>)
    6b00:	791b      	ldrb	r3, [r3, #4]
    6b02:	1c1a      	adds	r2, r3, #0
    6b04:	2301      	movs	r3, #1
    6b06:	4013      	ands	r3, r2
    6b08:	d003      	beq.n	6b12 <BrakeLEDControl+0xa2>
					{
						brakeBiLED = BRAKEBILED_YELLOWFLICKER;
    6b0a:	4b16      	ldr	r3, [pc, #88]	; (6b64 <BrakeLEDControl+0xf4>)
    6b0c:	2207      	movs	r2, #7
    6b0e:	701a      	strb	r2, [r3, #0]
    6b10:	e00c      	b.n	6b2c <BrakeLEDControl+0xbc>
					}
					else	
					{			
						brakeBiLED = BRAKEBILED_YELLOWSOLID;
    6b12:	4b14      	ldr	r3, [pc, #80]	; (6b64 <BrakeLEDControl+0xf4>)
    6b14:	2206      	movs	r2, #6
    6b16:	701a      	strb	r2, [r3, #0]
    6b18:	e008      	b.n	6b2c <BrakeLEDControl+0xbc>
					}
				}
				else
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6b1a:	4b15      	ldr	r3, [pc, #84]	; (6b70 <BrakeLEDControl+0x100>)
    6b1c:	791b      	ldrb	r3, [r3, #4]
    6b1e:	1c1a      	adds	r2, r3, #0
    6b20:	2301      	movs	r3, #1
    6b22:	4013      	ands	r3, r2
    6b24:	d002      	beq.n	6b2c <BrakeLEDControl+0xbc>
					{
//V01_11				brakeBiLED = BRAKEBILED_GREENFLICKER;
						brakeBiLED = BRAKEBILED_GREENSOLID;						
    6b26:	4b0f      	ldr	r3, [pc, #60]	; (6b64 <BrakeLEDControl+0xf4>)
    6b28:	2200      	movs	r2, #0
    6b2a:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			brakeBlueLED = BRAKEBLUELED_OFF;	
    6b2c:	4b0e      	ldr	r3, [pc, #56]	; (6b68 <BrakeLEDControl+0xf8>)
    6b2e:	2202      	movs	r2, #2
    6b30:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 					
    6b32:	4b0e      	ldr	r3, [pc, #56]	; (6b6c <BrakeLEDControl+0xfc>)
    6b34:	2201      	movs	r2, #1
    6b36:	701a      	strb	r2, [r3, #0]
			break;
    6b38:	e00d      	b.n	6b56 <BrakeLEDControl+0xe6>
		case BRAKESTATE_ACTIVE_EXTEND:
		case BRAKESTATE_ACTIVE_RETRACT:
		case BRAKESTATE_ACTIVE_HOLD:
		case BRAKESTATE_END_RETRACT:
		{
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6b3a:	4b0b      	ldr	r3, [pc, #44]	; (6b68 <BrakeLEDControl+0xf8>)
    6b3c:	2201      	movs	r2, #1
    6b3e:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6b40:	4b0a      	ldr	r3, [pc, #40]	; (6b6c <BrakeLEDControl+0xfc>)
    6b42:	2201      	movs	r2, #1
    6b44:	701a      	strb	r2, [r3, #0]
			break;
    6b46:	e006      	b.n	6b56 <BrakeLEDControl+0xe6>
		}		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			brakeRedLED = BRAKEREDLED_SOLID;
    6b48:	4b08      	ldr	r3, [pc, #32]	; (6b6c <BrakeLEDControl+0xfc>)
    6b4a:	2202      	movs	r2, #2
    6b4c:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6b4e:	4b06      	ldr	r3, [pc, #24]	; (6b68 <BrakeLEDControl+0xf8>)
    6b50:	2201      	movs	r2, #1
    6b52:	701a      	strb	r2, [r3, #0]
			break;
    6b54:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
    6b56:	46bd      	mov	sp, r7
    6b58:	bd80      	pop	{r7, pc}
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	20002eaa 	.word	0x20002eaa
    6b60:	000171a8 	.word	0x000171a8
    6b64:	20002ec8 	.word	0x20002ec8
    6b68:	20002ea2 	.word	0x20002ea2
    6b6c:	20002e9c 	.word	0x20002e9c
    6b70:	20003660 	.word	0x20003660

00006b74 <BrakeSupervisorytask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeSupervisorytask(void)
{
    6b74:	b590      	push	{r4, r7, lr}
    6b76:	b083      	sub	sp, #12
    6b78:	af00      	add	r7, sp, #0
	uint16_t currentvalue,itemp; 
	//--------------------------------
	// check voltages
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
    6b7a:	1dbc      	adds	r4, r7, #6
    6b7c:	2000      	movs	r0, #0
    6b7e:	4b34      	ldr	r3, [pc, #208]	; (6c50 <BrakeSupervisorytask+0xdc>)
    6b80:	4798      	blx	r3
    6b82:	1c03      	adds	r3, r0, #0
    6b84:	8023      	strh	r3, [r4, #0]
	if (currentvalue< ADC_INPUTVOLTAGE_8)
    6b86:	1dbb      	adds	r3, r7, #6
    6b88:	881a      	ldrh	r2, [r3, #0]
    6b8a:	4b32      	ldr	r3, [pc, #200]	; (6c54 <BrakeSupervisorytask+0xe0>)
    6b8c:	429a      	cmp	r2, r3
    6b8e:	d81e      	bhi.n	6bce <BrakeSupervisorytask+0x5a>
	{
		if (voltageBadTime >= VOLTAGE_BAD_TIME)
    6b90:	4b31      	ldr	r3, [pc, #196]	; (6c58 <BrakeSupervisorytask+0xe4>)
    6b92:	881b      	ldrh	r3, [r3, #0]
    6b94:	2b1d      	cmp	r3, #29
    6b96:	d90c      	bls.n	6bb2 <BrakeSupervisorytask+0x3e>
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    6b98:	4b30      	ldr	r3, [pc, #192]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6b9a:	791b      	ldrb	r3, [r3, #4]
    6b9c:	1c1a      	adds	r2, r3, #0
    6b9e:	2308      	movs	r3, #8
    6ba0:	4013      	ands	r3, r2
    6ba2:	d106      	bne.n	6bb2 <BrakeSupervisorytask+0x3e>
			{
				brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;
    6ba4:	4b2d      	ldr	r3, [pc, #180]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6ba6:	791b      	ldrb	r3, [r3, #4]
    6ba8:	2208      	movs	r2, #8
    6baa:	4313      	orrs	r3, r2
    6bac:	b2da      	uxtb	r2, r3
    6bae:	4b2b      	ldr	r3, [pc, #172]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bb0:	711a      	strb	r2, [r3, #4]
			}
		}
		if (currentvalue < ADC_INPUTVOLTAGENONE)
    6bb2:	1dbb      	adds	r3, r7, #6
    6bb4:	881a      	ldrh	r2, [r3, #0]
    6bb6:	23f4      	movs	r3, #244	; 0xf4
    6bb8:	33ff      	adds	r3, #255	; 0xff
    6bba:	429a      	cmp	r2, r3
    6bbc:	d824      	bhi.n	6c08 <BrakeSupervisorytask+0x94>
		{
			brakeStatus.BrakeState |= BRAKESTATE_NOINPUTVOLTAGE;
    6bbe:	4b27      	ldr	r3, [pc, #156]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bc0:	791b      	ldrb	r3, [r3, #4]
    6bc2:	2220      	movs	r2, #32
    6bc4:	4313      	orrs	r3, r2
    6bc6:	b2da      	uxtb	r2, r3
    6bc8:	4b24      	ldr	r3, [pc, #144]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bca:	711a      	strb	r2, [r3, #4]
    6bcc:	e01c      	b.n	6c08 <BrakeSupervisorytask+0x94>
		}
	}
	else
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_NOINPUTVOLTAGE;
    6bce:	4b23      	ldr	r3, [pc, #140]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bd0:	791b      	ldrb	r3, [r3, #4]
    6bd2:	2220      	movs	r2, #32
    6bd4:	4393      	bics	r3, r2
    6bd6:	b2da      	uxtb	r2, r3
    6bd8:	4b20      	ldr	r3, [pc, #128]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bda:	711a      	strb	r2, [r3, #4]
		if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6bdc:	4b1f      	ldr	r3, [pc, #124]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bde:	791b      	ldrb	r3, [r3, #4]
    6be0:	1c1a      	adds	r2, r3, #0
    6be2:	2308      	movs	r3, #8
    6be4:	4013      	ands	r3, r2
    6be6:	d00c      	beq.n	6c02 <BrakeSupervisorytask+0x8e>
		{
			if (currentvalue> ADC_INPUTVOLTAGE_8PT5)
    6be8:	1dbb      	adds	r3, r7, #6
    6bea:	881a      	ldrh	r2, [r3, #0]
    6bec:	4b1c      	ldr	r3, [pc, #112]	; (6c60 <BrakeSupervisorytask+0xec>)
    6bee:	429a      	cmp	r2, r3
    6bf0:	d90a      	bls.n	6c08 <BrakeSupervisorytask+0x94>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_INPUTVOLTAGEBAD;	
    6bf2:	4b1a      	ldr	r3, [pc, #104]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bf4:	791b      	ldrb	r3, [r3, #4]
    6bf6:	2208      	movs	r2, #8
    6bf8:	4393      	bics	r3, r2
    6bfa:	b2da      	uxtb	r2, r3
    6bfc:	4b17      	ldr	r3, [pc, #92]	; (6c5c <BrakeSupervisorytask+0xe8>)
    6bfe:	711a      	strb	r2, [r3, #4]
    6c00:	e002      	b.n	6c08 <BrakeSupervisorytask+0x94>
			}
		}
		else
		{
			voltageBadTime = 0; 
    6c02:	4b15      	ldr	r3, [pc, #84]	; (6c58 <BrakeSupervisorytask+0xe4>)
    6c04:	2200      	movs	r2, #0
    6c06:	801a      	strh	r2, [r3, #0]
		}
	}
	//-----------------------------------------
	// if voltage is over 10.5 volts and board is turned on - 
	// enable the super cap. 
	if ((brakeState != BRAKESTATE_IDLESLEEP)&&(brakeState != BRAKESTATE_POWERINGUP))
    6c08:	4b16      	ldr	r3, [pc, #88]	; (6c64 <BrakeSupervisorytask+0xf0>)
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	2b01      	cmp	r3, #1
    6c0e:	d018      	beq.n	6c42 <BrakeSupervisorytask+0xce>
    6c10:	4b14      	ldr	r3, [pc, #80]	; (6c64 <BrakeSupervisorytask+0xf0>)
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	2b02      	cmp	r3, #2
    6c16:	d014      	beq.n	6c42 <BrakeSupervisorytask+0xce>
	{
		if (currentvalue> ADC_INPUTVOLTAGE_10PT5)
    6c18:	1dbb      	adds	r3, r7, #6
    6c1a:	881a      	ldrh	r2, [r3, #0]
    6c1c:	4b12      	ldr	r3, [pc, #72]	; (6c68 <BrakeSupervisorytask+0xf4>)
    6c1e:	429a      	cmp	r2, r3
    6c20:	d904      	bls.n	6c2c <BrakeSupervisorytask+0xb8>
		{		
			port_pin_set_output_level(SUPERCAPEN, true);  
    6c22:	2025      	movs	r0, #37	; 0x25
    6c24:	2101      	movs	r1, #1
    6c26:	4b11      	ldr	r3, [pc, #68]	; (6c6c <BrakeSupervisorytask+0xf8>)
    6c28:	4798      	blx	r3
    6c2a:	e009      	b.n	6c40 <BrakeSupervisorytask+0xcc>
		}
		else
		{
			if (currentvalue< ADC_INPUTVOLTAGE_10PT2)
    6c2c:	1dbb      	adds	r3, r7, #6
    6c2e:	881a      	ldrh	r2, [r3, #0]
    6c30:	4b0f      	ldr	r3, [pc, #60]	; (6c70 <BrakeSupervisorytask+0xfc>)
    6c32:	429a      	cmp	r2, r3
    6c34:	d804      	bhi.n	6c40 <BrakeSupervisorytask+0xcc>
			{
				port_pin_set_output_level(SUPERCAPEN, false);  
    6c36:	2025      	movs	r0, #37	; 0x25
    6c38:	2100      	movs	r1, #0
    6c3a:	4b0c      	ldr	r3, [pc, #48]	; (6c6c <BrakeSupervisorytask+0xf8>)
    6c3c:	4798      	blx	r3
	//-----------------------------------------
	// if voltage is over 10.5 volts and board is turned on - 
	// enable the super cap. 
	if ((brakeState != BRAKESTATE_IDLESLEEP)&&(brakeState != BRAKESTATE_POWERINGUP))
	{
		if (currentvalue> ADC_INPUTVOLTAGE_10PT5)
    6c3e:	e004      	b.n	6c4a <BrakeSupervisorytask+0xd6>
    6c40:	e003      	b.n	6c4a <BrakeSupervisorytask+0xd6>
			}
		}
	}
	else
	{
		port_pin_set_output_level(SUPERCAPEN, false);  
    6c42:	2025      	movs	r0, #37	; 0x25
    6c44:	2100      	movs	r1, #0
    6c46:	4b09      	ldr	r3, [pc, #36]	; (6c6c <BrakeSupervisorytask+0xf8>)
    6c48:	4798      	blx	r3
	}
}
    6c4a:	46bd      	mov	sp, r7
    6c4c:	b003      	add	sp, #12
    6c4e:	bd90      	pop	{r4, r7, pc}
    6c50:	0000a5a9 	.word	0x0000a5a9
    6c54:	000004d7 	.word	0x000004d7
    6c58:	20002eba 	.word	0x20002eba
    6c5c:	20003660 	.word	0x20003660
    6c60:	00000525 	.word	0x00000525
    6c64:	20002eaa 	.word	0x20002eaa
    6c68:	0000065b 	.word	0x0000065b
    6c6c:	00006775 	.word	0x00006775
    6c70:	0000062c 	.word	0x0000062c

00006c74 <BrakeBoardStateMachineTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeBoardStateMachineTask(void)
{
    6c74:	b590      	push	{r4, r7, lr}
    6c76:	b083      	sub	sp, #12
    6c78:	af00      	add	r7, sp, #0
	uint8_t i,done,button,itemp,forceExtend;
	uint16_t itemp2;
	
//	table0.Item.MaxForce = 5;  //hard coded for testing
	done = 0;
    6c7a:	1dbb      	adds	r3, r7, #6
    6c7c:	2200      	movs	r2, #0
    6c7e:	701a      	strb	r2, [r3, #0]
	button = ButtonChanged();
    6c80:	1c7c      	adds	r4, r7, #1
    6c82:	4bc8      	ldr	r3, [pc, #800]	; (6fa4 <BrakeBoardStateMachineTask+0x330>)
    6c84:	4798      	blx	r3
    6c86:	1c03      	adds	r3, r0, #0
    6c88:	7023      	strb	r3, [r4, #0]
	BrakeSupervisorytask();
    6c8a:	4bc7      	ldr	r3, [pc, #796]	; (6fa8 <BrakeBoardStateMachineTask+0x334>)
    6c8c:	4798      	blx	r3
	if (breakawayRing_pressed == 1)
    6c8e:	4bc7      	ldr	r3, [pc, #796]	; (6fac <BrakeBoardStateMachineTask+0x338>)
    6c90:	881b      	ldrh	r3, [r3, #0]
    6c92:	b21b      	sxth	r3, r3
    6c94:	2b01      	cmp	r3, #1
    6c96:	d107      	bne.n	6ca8 <BrakeBoardStateMachineTask+0x34>
	{
		brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYREADY;
    6c98:	4bc5      	ldr	r3, [pc, #788]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6c9a:	791b      	ldrb	r3, [r3, #4]
    6c9c:	2240      	movs	r2, #64	; 0x40
    6c9e:	4313      	orrs	r3, r2
    6ca0:	b2da      	uxtb	r2, r3
    6ca2:	4bc3      	ldr	r3, [pc, #780]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6ca4:	711a      	strb	r2, [r3, #4]
    6ca6:	e006      	b.n	6cb6 <BrakeBoardStateMachineTask+0x42>
	}
	else
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYREADY;
    6ca8:	4bc1      	ldr	r3, [pc, #772]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6caa:	791b      	ldrb	r3, [r3, #4]
    6cac:	2240      	movs	r2, #64	; 0x40
    6cae:	4393      	bics	r3, r2
    6cb0:	b2da      	uxtb	r2, r3
    6cb2:	4bbf      	ldr	r3, [pc, #764]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6cb4:	711a      	strb	r2, [r3, #4]
	}	

	
	switch(brakeState)
    6cb6:	4bbf      	ldr	r3, [pc, #764]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	2b1a      	cmp	r3, #26
    6cbc:	d901      	bls.n	6cc2 <BrakeBoardStateMachineTask+0x4e>
    6cbe:	f001 fbe4 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6cc2:	009a      	lsls	r2, r3, #2
    6cc4:	4bbc      	ldr	r3, [pc, #752]	; (6fb8 <BrakeBoardStateMachineTask+0x344>)
    6cc6:	18d3      	adds	r3, r2, r3
    6cc8:	681b      	ldr	r3, [r3, #0]
    6cca:	469f      	mov	pc, r3
// powered up and power is added. This is REALLY A FIRST TIME board has any 
// power on it and the supercaps are just going to get charged. 
//-------------------------------		
		case BRAKESTATE_POWERINGUP:
		{
			MotorOff();
    6ccc:	4bbb      	ldr	r3, [pc, #748]	; (6fbc <BrakeBoardStateMachineTask+0x348>)
    6cce:	4798      	blx	r3
			brakeState = BRAKESTATE_POWEREDUP;
    6cd0:	4bb8      	ldr	r3, [pc, #736]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6cd2:	2206      	movs	r2, #6
    6cd4:	701a      	strb	r2, [r3, #0]
			if (hlimitState != 0)
    6cd6:	4bba      	ldr	r3, [pc, #744]	; (6fc0 <BrakeBoardStateMachineTask+0x34c>)
    6cd8:	781b      	ldrb	r3, [r3, #0]
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d00b      	beq.n	6cf6 <BrakeBoardStateMachineTask+0x82>
			{
				MotorCCW();
    6cde:	4bb9      	ldr	r3, [pc, #740]	; (6fc4 <BrakeBoardStateMachineTask+0x350>)
    6ce0:	4798      	blx	r3
				brakeSupTime = 15;  //5 seconds to retract
    6ce2:	4bb9      	ldr	r3, [pc, #740]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6ce4:	220f      	movs	r2, #15
    6ce6:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    6ce8:	4bb8      	ldr	r3, [pc, #736]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	2202      	movs	r2, #2
    6cee:	4393      	bics	r3, r2
    6cf0:	b2da      	uxtb	r2, r3
    6cf2:	4bb6      	ldr	r3, [pc, #728]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6cf4:	701a      	strb	r2, [r3, #0]
			}
			brakeStatus.BrakeState = 0; 
    6cf6:	4bae      	ldr	r3, [pc, #696]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6cf8:	2200      	movs	r2, #0
    6cfa:	711a      	strb	r2, [r3, #4]
			break;
    6cfc:	f001 fbc5 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    6d00:	4bb2      	ldr	r3, [pc, #712]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6d02:	781b      	ldrb	r3, [r3, #0]
    6d04:	1c1a      	adds	r2, r3, #0
    6d06:	2302      	movs	r3, #2
    6d08:	4013      	ands	r3, r2
    6d0a:	d103      	bne.n	6d14 <BrakeBoardStateMachineTask+0xa0>
			(hlimitState ==0))
    6d0c:	4bac      	ldr	r3, [pc, #688]	; (6fc0 <BrakeBoardStateMachineTask+0x34c>)
    6d0e:	781b      	ldrb	r3, [r3, #0]
			brakeStatus.BrakeState = 0; 
			break;
		}
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    6d10:	2b00      	cmp	r3, #0
    6d12:	d115      	bne.n	6d40 <BrakeBoardStateMachineTask+0xcc>
			(hlimitState ==0))
			{
				MotorOff();
    6d14:	4ba9      	ldr	r3, [pc, #676]	; (6fbc <BrakeBoardStateMachineTask+0x348>)
    6d16:	4798      	blx	r3
				brakeSupTime = 0;
    6d18:	4bab      	ldr	r3, [pc, #684]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6d1a:	2200      	movs	r2, #0
    6d1c:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    6d1e:	4bab      	ldr	r3, [pc, #684]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6d20:	781b      	ldrb	r3, [r3, #0]
    6d22:	2202      	movs	r2, #2
    6d24:	4393      	bics	r3, r2
    6d26:	b2da      	uxtb	r2, r3
    6d28:	4ba8      	ldr	r3, [pc, #672]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6d2a:	701a      	strb	r2, [r3, #0]
				BrakeActuatorControl(BRAKE_HOME);
    6d2c:	2000      	movs	r0, #0
    6d2e:	4ba8      	ldr	r3, [pc, #672]	; (6fd0 <BrakeBoardStateMachineTask+0x35c>)
    6d30:	4798      	blx	r3
				brakeState = BRAKESTATE_IDLESLEEP;
    6d32:	4ba0      	ldr	r3, [pc, #640]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6d34:	2201      	movs	r2, #1
    6d36:	701a      	strb	r2, [r3, #0]
				BrakeEnterIdleSleepMode();
    6d38:	4ba6      	ldr	r3, [pc, #664]	; (6fd4 <BrakeBoardStateMachineTask+0x360>)
    6d3a:	4798      	blx	r3
			}
			break;
    6d3c:	f001 fba5 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6d40:	f001 fba3 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_IDLESLEEP:
		{
			port_pin_set_output_level(SUPERCAPEN,false); 		
    6d44:	2025      	movs	r0, #37	; 0x25
    6d46:	2100      	movs	r1, #0
    6d48:	4ba3      	ldr	r3, [pc, #652]	; (6fd8 <BrakeBoardStateMachineTask+0x364>)
    6d4a:	4798      	blx	r3
			break;
    6d4c:	f001 fb9d 	bl	848a <BrakeBoardStateMachineTask+0x1816>
// POWER ON KEY HAS BEEN PRESSED. 
//------------------------------------		
		case BRAKESTATE_RESET:
		{
//v01_11			poweredUp = 1;
			motorAccBaseline = 0; 
    6d50:	4ba2      	ldr	r3, [pc, #648]	; (6fdc <BrakeBoardStateMachineTask+0x368>)
    6d52:	2200      	movs	r2, #0
    6d54:	701a      	strb	r2, [r3, #0]
			thresholdmet = 0; 
    6d56:	4ba2      	ldr	r3, [pc, #648]	; (6fe0 <BrakeBoardStateMachineTask+0x36c>)
    6d58:	2200      	movs	r2, #0
    6d5a:	701a      	strb	r2, [r3, #0]
			breakawayHoldTimer = 0; 
    6d5c:	4ba1      	ldr	r3, [pc, #644]	; (6fe4 <BrakeBoardStateMachineTask+0x370>)
    6d5e:	2200      	movs	r2, #0
    6d60:	801a      	strh	r2, [r3, #0]

			brakeStatus.ActuatorStatus = 0; 
    6d62:	4b93      	ldr	r3, [pc, #588]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6d64:	2200      	movs	r2, #0
    6d66:	709a      	strb	r2, [r3, #2]
			brakeState = BRAKESTATE_PRESETUP;
    6d68:	4b92      	ldr	r3, [pc, #584]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6d6a:	2203      	movs	r2, #3
    6d6c:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState = 0; 
    6d6e:	4b90      	ldr	r3, [pc, #576]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6d70:	2200      	movs	r2, #0
    6d72:	711a      	strb	r2, [r3, #4]
#if TESTWITHOUTSETUP
#else		
			brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    6d74:	4b8e      	ldr	r3, [pc, #568]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6d76:	791b      	ldrb	r3, [r3, #4]
    6d78:	2204      	movs	r2, #4
    6d7a:	4313      	orrs	r3, r2
    6d7c:	b2da      	uxtb	r2, r3
    6d7e:	4b8c      	ldr	r3, [pc, #560]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6d80:	711a      	strb	r2, [r3, #4]
#endif			
//			system_interrupt_disable_global();
			wdt_reset_count();
    6d82:	4b99      	ldr	r3, [pc, #612]	; (6fe8 <BrakeBoardStateMachineTask+0x374>)
    6d84:	4798      	blx	r3
			//-----ADC--------------
			ADCInit();
    6d86:	4b99      	ldr	r3, [pc, #612]	; (6fec <BrakeBoardStateMachineTask+0x378>)
    6d88:	4798      	blx	r3
			wdt_reset_count();
    6d8a:	4b97      	ldr	r3, [pc, #604]	; (6fe8 <BrakeBoardStateMachineTask+0x374>)
    6d8c:	4798      	blx	r3
			//---------------LORA/FSK radio
			//---------------------
			// SET FCC stuff up
			setTXContinuous = 0;
    6d8e:	4b98      	ldr	r3, [pc, #608]	; (6ff0 <BrakeBoardStateMachineTask+0x37c>)
    6d90:	2200      	movs	r2, #0
    6d92:	701a      	strb	r2, [r3, #0]
			setCW = 0;
    6d94:	4b97      	ldr	r3, [pc, #604]	; (6ff4 <BrakeBoardStateMachineTask+0x380>)
    6d96:	2200      	movs	r2, #0
    6d98:	701a      	strb	r2, [r3, #0]
			setRXContinuous = 0;
    6d9a:	4b97      	ldr	r3, [pc, #604]	; (6ff8 <BrakeBoardStateMachineTask+0x384>)
    6d9c:	2200      	movs	r2, #0
    6d9e:	701a      	strb	r2, [r3, #0]
			for (i=0;i<10;i++)
    6da0:	1dfb      	adds	r3, r7, #7
    6da2:	2200      	movs	r2, #0
    6da4:	701a      	strb	r2, [r3, #0]
    6da6:	e004      	b.n	6db2 <BrakeBoardStateMachineTask+0x13e>
    6da8:	1dfb      	adds	r3, r7, #7
    6daa:	781a      	ldrb	r2, [r3, #0]
    6dac:	1dfb      	adds	r3, r7, #7
    6dae:	3201      	adds	r2, #1
    6db0:	701a      	strb	r2, [r3, #0]
    6db2:	1dfb      	adds	r3, r7, #7
    6db4:	781b      	ldrb	r3, [r3, #0]
    6db6:	2b09      	cmp	r3, #9
    6db8:	d9f6      	bls.n	6da8 <BrakeBoardStateMachineTask+0x134>
			{
//				FCCSample();
			}
			if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    6dba:	4b90      	ldr	r3, [pc, #576]	; (6ffc <BrakeBoardStateMachineTask+0x388>)
    6dbc:	881b      	ldrh	r3, [r3, #0]
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	d00a      	beq.n	6dd8 <BrakeBoardStateMachineTask+0x164>
    6dc2:	4b8f      	ldr	r3, [pc, #572]	; (7000 <BrakeBoardStateMachineTask+0x38c>)
    6dc4:	881b      	ldrh	r3, [r3, #0]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d106      	bne.n	6dd8 <BrakeBoardStateMachineTask+0x164>
    6dca:	4b8e      	ldr	r3, [pc, #568]	; (7004 <BrakeBoardStateMachineTask+0x390>)
    6dcc:	881b      	ldrh	r3, [r3, #0]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d102      	bne.n	6dd8 <BrakeBoardStateMachineTask+0x164>
			{
				setTXContinuous = 1;
    6dd2:	4b87      	ldr	r3, [pc, #540]	; (6ff0 <BrakeBoardStateMachineTask+0x37c>)
    6dd4:	2201      	movs	r2, #1
    6dd6:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    6dd8:	4b88      	ldr	r3, [pc, #544]	; (6ffc <BrakeBoardStateMachineTask+0x388>)
    6dda:	881b      	ldrh	r3, [r3, #0]
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d10a      	bne.n	6df6 <BrakeBoardStateMachineTask+0x182>
    6de0:	4b87      	ldr	r3, [pc, #540]	; (7000 <BrakeBoardStateMachineTask+0x38c>)
    6de2:	881b      	ldrh	r3, [r3, #0]
    6de4:	2b00      	cmp	r3, #0
    6de6:	d006      	beq.n	6df6 <BrakeBoardStateMachineTask+0x182>
    6de8:	4b86      	ldr	r3, [pc, #536]	; (7004 <BrakeBoardStateMachineTask+0x390>)
    6dea:	881b      	ldrh	r3, [r3, #0]
    6dec:	2b00      	cmp	r3, #0
    6dee:	d102      	bne.n	6df6 <BrakeBoardStateMachineTask+0x182>
			{
				setRXContinuous = 1;
    6df0:	4b81      	ldr	r3, [pc, #516]	; (6ff8 <BrakeBoardStateMachineTask+0x384>)
    6df2:	2201      	movs	r2, #1
    6df4:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    6df6:	4b81      	ldr	r3, [pc, #516]	; (6ffc <BrakeBoardStateMachineTask+0x388>)
    6df8:	881b      	ldrh	r3, [r3, #0]
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d10a      	bne.n	6e14 <BrakeBoardStateMachineTask+0x1a0>
    6dfe:	4b80      	ldr	r3, [pc, #512]	; (7000 <BrakeBoardStateMachineTask+0x38c>)
    6e00:	881b      	ldrh	r3, [r3, #0]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d106      	bne.n	6e14 <BrakeBoardStateMachineTask+0x1a0>
    6e06:	4b7f      	ldr	r3, [pc, #508]	; (7004 <BrakeBoardStateMachineTask+0x390>)
    6e08:	881b      	ldrh	r3, [r3, #0]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d002      	beq.n	6e14 <BrakeBoardStateMachineTask+0x1a0>
			{
				setCW = 1;
    6e0e:	4b79      	ldr	r3, [pc, #484]	; (6ff4 <BrakeBoardStateMachineTask+0x380>)
    6e10:	2201      	movs	r2, #1
    6e12:	701a      	strb	r2, [r3, #0]
			}			
			whichRadio = WHICHRADIO_LORA; 
    6e14:	4b7c      	ldr	r3, [pc, #496]	; (7008 <BrakeBoardStateMachineTask+0x394>)
    6e16:	2299      	movs	r2, #153	; 0x99
    6e18:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE; 
    6e1a:	4b7c      	ldr	r3, [pc, #496]	; (700c <BrakeBoardStateMachineTask+0x398>)
    6e1c:	2200      	movs	r2, #0
    6e1e:	701a      	strb	r2, [r3, #0]
			CommInit();
    6e20:	4b7b      	ldr	r3, [pc, #492]	; (7010 <BrakeBoardStateMachineTask+0x39c>)
    6e22:	4798      	blx	r3
			wdt_reset_count();
    6e24:	4b70      	ldr	r3, [pc, #448]	; (6fe8 <BrakeBoardStateMachineTask+0x374>)
    6e26:	4798      	blx	r3
			//-------RF433--- pressure sensor radio
//disabled for now			RF433Init();			
			
			system_interrupt_enable_global();
    6e28:	4b7a      	ldr	r3, [pc, #488]	; (7014 <BrakeBoardStateMachineTask+0x3a0>)
    6e2a:	4798      	blx	r3
			ADCStart();
    6e2c:	4b7a      	ldr	r3, [pc, #488]	; (7018 <BrakeBoardStateMachineTask+0x3a4>)
    6e2e:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    6e30:	1dfb      	adds	r3, r7, #7
    6e32:	2200      	movs	r2, #0
    6e34:	701a      	strb	r2, [r3, #0]
    6e36:	e006      	b.n	6e46 <BrakeBoardStateMachineTask+0x1d2>
			{
				ButtonSample();
    6e38:	4b78      	ldr	r3, [pc, #480]	; (701c <BrakeBoardStateMachineTask+0x3a8>)
    6e3a:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    6e3c:	1dfb      	adds	r3, r7, #7
    6e3e:	781a      	ldrb	r2, [r3, #0]
    6e40:	1dfb      	adds	r3, r7, #7
    6e42:	3201      	adds	r2, #1
    6e44:	701a      	strb	r2, [r3, #0]
    6e46:	1dfb      	adds	r3, r7, #7
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	2b07      	cmp	r3, #7
    6e4c:	d9f4      	bls.n	6e38 <BrakeBoardStateMachineTask+0x1c4>
			{
				ButtonSample();
			}
 			if (hlimitState != 0)
    6e4e:	4b5c      	ldr	r3, [pc, #368]	; (6fc0 <BrakeBoardStateMachineTask+0x34c>)
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	2b00      	cmp	r3, #0
    6e54:	d00c      	beq.n	6e70 <BrakeBoardStateMachineTask+0x1fc>
			{
				MotorCCW();
    6e56:	4b5b      	ldr	r3, [pc, #364]	; (6fc4 <BrakeBoardStateMachineTask+0x350>)
    6e58:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;   
    6e5a:	4b5b      	ldr	r3, [pc, #364]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6e5c:	220a      	movs	r2, #10
    6e5e:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    6e60:	4b5a      	ldr	r3, [pc, #360]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6e62:	781b      	ldrb	r3, [r3, #0]
    6e64:	2202      	movs	r2, #2
    6e66:	4393      	bics	r3, r2
    6e68:	b2da      	uxtb	r2, r3
    6e6a:	4b58      	ldr	r3, [pc, #352]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6e6c:	701a      	strb	r2, [r3, #0]
    6e6e:	e008      	b.n	6e82 <BrakeBoardStateMachineTask+0x20e>
			}
			else
			{
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    6e70:	2000      	movs	r0, #0
    6e72:	4b57      	ldr	r3, [pc, #348]	; (6fd0 <BrakeBoardStateMachineTask+0x35c>)
    6e74:	4798      	blx	r3
    6e76:	1c03      	adds	r3, r0, #0
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d102      	bne.n	6e82 <BrakeBoardStateMachineTask+0x20e>
				{
					brakeState = BRAKESTATE_ERROR; 
    6e7c:	4b4d      	ldr	r3, [pc, #308]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6e7e:	2208      	movs	r2, #8
    6e80:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6e82:	4b4b      	ldr	r3, [pc, #300]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6e84:	791b      	ldrb	r3, [r3, #4]
    6e86:	1c1a      	adds	r2, r3, #0
    6e88:	2308      	movs	r3, #8
    6e8a:	4013      	ands	r3, r2
    6e8c:	d004      	beq.n	6e98 <BrakeBoardStateMachineTask+0x224>
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_RESET; 
    6e8e:	4b49      	ldr	r3, [pc, #292]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6e90:	221a      	movs	r2, #26
    6e92:	701a      	strb	r2, [r3, #0]
			}
			break;
    6e94:	f001 faf9 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6e98:	f001 faf7 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_PRESETUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    6e9c:	4b4b      	ldr	r3, [pc, #300]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	1c1a      	adds	r2, r3, #0
    6ea2:	2302      	movs	r3, #2
    6ea4:	4013      	ands	r3, r2
    6ea6:	d103      	bne.n	6eb0 <BrakeBoardStateMachineTask+0x23c>
			(hlimitState ==0))
    6ea8:	4b45      	ldr	r3, [pc, #276]	; (6fc0 <BrakeBoardStateMachineTask+0x34c>)
    6eaa:	781b      	ldrb	r3, [r3, #0]
			}
			break;
		}
		case BRAKESTATE_PRESETUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    6eac:	2b00      	cmp	r3, #0
    6eae:	d130      	bne.n	6f12 <BrakeBoardStateMachineTask+0x29e>
			(hlimitState ==0))
			{
				MotorOff();
    6eb0:	4b42      	ldr	r3, [pc, #264]	; (6fbc <BrakeBoardStateMachineTask+0x348>)
    6eb2:	4798      	blx	r3
				brakeSupTime = 0;
    6eb4:	4b44      	ldr	r3, [pc, #272]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6eb6:	2200      	movs	r2, #0
    6eb8:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    6eba:	4b44      	ldr	r3, [pc, #272]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6ebc:	781b      	ldrb	r3, [r3, #0]
    6ebe:	2202      	movs	r2, #2
    6ec0:	4393      	bics	r3, r2
    6ec2:	b2da      	uxtb	r2, r3
    6ec4:	4b41      	ldr	r3, [pc, #260]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6ec6:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    6ec8:	2000      	movs	r0, #0
    6eca:	4b41      	ldr	r3, [pc, #260]	; (6fd0 <BrakeBoardStateMachineTask+0x35c>)
    6ecc:	4798      	blx	r3
    6ece:	1c03      	adds	r3, r0, #0
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d103      	bne.n	6edc <BrakeBoardStateMachineTask+0x268>
				{
					brakeState = BRAKESTATE_ERROR;
    6ed4:	4b37      	ldr	r3, [pc, #220]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6ed6:	2208      	movs	r2, #8
    6ed8:	701a      	strb	r2, [r3, #0]
    6eda:	e01a      	b.n	6f12 <BrakeBoardStateMachineTask+0x29e>
				}
				else
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_NOTSETUP)== 0)
    6edc:	4b34      	ldr	r3, [pc, #208]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6ede:	791b      	ldrb	r3, [r3, #4]
    6ee0:	1c1a      	adds	r2, r3, #0
    6ee2:	2304      	movs	r3, #4
    6ee4:	4013      	ands	r3, r2
    6ee6:	d10f      	bne.n	6f08 <BrakeBoardStateMachineTask+0x294>
					{
						MotorNeedNewBaseline();
    6ee8:	4b4d      	ldr	r3, [pc, #308]	; (7020 <BrakeBoardStateMachineTask+0x3ac>)
    6eea:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;	
    6eec:	4b36      	ldr	r3, [pc, #216]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6eee:	220a      	movs	r2, #10
    6ef0:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    6ef2:	4b30      	ldr	r3, [pc, #192]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6ef4:	220b      	movs	r2, #11
    6ef6:	701a      	strb	r2, [r3, #0]
						brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    6ef8:	4b2d      	ldr	r3, [pc, #180]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6efa:	791b      	ldrb	r3, [r3, #4]
    6efc:	2204      	movs	r2, #4
    6efe:	4393      	bics	r3, r2
    6f00:	b2da      	uxtb	r2, r3
    6f02:	4b2b      	ldr	r3, [pc, #172]	; (6fb0 <BrakeBoardStateMachineTask+0x33c>)
    6f04:	711a      	strb	r2, [r3, #4]
    6f06:	e004      	b.n	6f12 <BrakeBoardStateMachineTask+0x29e>
					}
					else
					{
						brakeState = BRAKESTATE_WAITONSETUP;
    6f08:	4b2a      	ldr	r3, [pc, #168]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6f0a:	2204      	movs	r2, #4
    6f0c:	701a      	strb	r2, [r3, #0]
					}	 		
				}
			}
			break;
    6f0e:	f001 fabc 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6f12:	f001 faba 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_WAITONSETUP:
		{
			if (setup_pressed != 0)
    6f16:	4b43      	ldr	r3, [pc, #268]	; (7024 <BrakeBoardStateMachineTask+0x3b0>)
    6f18:	881b      	ldrh	r3, [r3, #0]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d01d      	beq.n	6f5a <BrakeBoardStateMachineTask+0x2e6>
			{
				brakeState = BRAKESTATE_SETUPACTIVE;
    6f1e:	4b25      	ldr	r3, [pc, #148]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6f20:	2205      	movs	r2, #5
    6f22:	701a      	strb	r2, [r3, #0]
				brakeSetupExtend = 0;
    6f24:	4b40      	ldr	r3, [pc, #256]	; (7028 <BrakeBoardStateMachineTask+0x3b4>)
    6f26:	2200      	movs	r2, #0
    6f28:	801a      	strh	r2, [r3, #0]
				maxCurrentRead = 0;
    6f2a:	4b40      	ldr	r3, [pc, #256]	; (702c <BrakeBoardStateMachineTask+0x3b8>)
    6f2c:	2200      	movs	r2, #0
    6f2e:	801a      	strh	r2, [r3, #0]
				setupExtendTriggered = 0;
    6f30:	4b3f      	ldr	r3, [pc, #252]	; (7030 <BrakeBoardStateMachineTask+0x3bc>)
    6f32:	2200      	movs	r2, #0
    6f34:	701a      	strb	r2, [r3, #0]
				if (flimitState != 0)
    6f36:	4b3f      	ldr	r3, [pc, #252]	; (7034 <BrakeBoardStateMachineTask+0x3c0>)
    6f38:	781b      	ldrb	r3, [r3, #0]
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d00d      	beq.n	6f5a <BrakeBoardStateMachineTask+0x2e6>
				{
					MotorCW();
    6f3e:	4b3e      	ldr	r3, [pc, #248]	; (7038 <BrakeBoardStateMachineTask+0x3c4>)
    6f40:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;   
    6f42:	4b21      	ldr	r3, [pc, #132]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6f44:	220a      	movs	r2, #10
    6f46:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    6f48:	4b20      	ldr	r3, [pc, #128]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	2202      	movs	r2, #2
    6f4e:	4393      	bics	r3, r2
    6f50:	b2da      	uxtb	r2, r3
    6f52:	4b1e      	ldr	r3, [pc, #120]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6f54:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    6f56:	f001 fa98 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6f5a:	f001 fa96 	bl	848a <BrakeBoardStateMachineTask+0x1816>
// ACTIVE SETUP STATES
// - SETUP key has been pressed and now doing the setup. The first EXTEND CW has 
// been started from the WAITONSETUP state. 		
		case BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND:
		{
			if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0) 
    6f5e:	4b1b      	ldr	r3, [pc, #108]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6f60:	781b      	ldrb	r3, [r3, #0]
    6f62:	1c1a      	adds	r2, r3, #0
    6f64:	2302      	movs	r3, #2
    6f66:	4013      	ands	r3, r2
    6f68:	d019      	beq.n	6f9e <BrakeBoardStateMachineTask+0x32a>
			{
				 
				brakeSupTime = 0;
    6f6a:	4b17      	ldr	r3, [pc, #92]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6f6c:	2200      	movs	r2, #0
    6f6e:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;		
    6f70:	4b16      	ldr	r3, [pc, #88]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	2202      	movs	r2, #2
    6f76:	4393      	bics	r3, r2
    6f78:	b2da      	uxtb	r2, r3
    6f7a:	4b14      	ldr	r3, [pc, #80]	; (6fcc <BrakeBoardStateMachineTask+0x358>)
    6f7c:	701a      	strb	r2, [r3, #0]
				brakeSetupExtend++;
    6f7e:	4b2a      	ldr	r3, [pc, #168]	; (7028 <BrakeBoardStateMachineTask+0x3b4>)
    6f80:	881b      	ldrh	r3, [r3, #0]
    6f82:	3301      	adds	r3, #1
    6f84:	b29a      	uxth	r2, r3
    6f86:	4b28      	ldr	r3, [pc, #160]	; (7028 <BrakeBoardStateMachineTask+0x3b4>)
    6f88:	801a      	strh	r2, [r3, #0]
				MotorCCW();
    6f8a:	4b0e      	ldr	r3, [pc, #56]	; (6fc4 <BrakeBoardStateMachineTask+0x350>)
    6f8c:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;  	
    6f8e:	4b0e      	ldr	r3, [pc, #56]	; (6fc8 <BrakeBoardStateMachineTask+0x354>)
    6f90:	220a      	movs	r2, #10
    6f92:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_SETUPACTIVE;
    6f94:	4b07      	ldr	r3, [pc, #28]	; (6fb4 <BrakeBoardStateMachineTask+0x340>)
    6f96:	2205      	movs	r2, #5
    6f98:	701a      	strb	r2, [r3, #0]
			}
			break;
    6f9a:	f001 fa76 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6f9e:	f001 fa74 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    6fa2:	46c0      	nop			; (mov r8, r8)
    6fa4:	0000ac3d 	.word	0x0000ac3d
    6fa8:	00006b75 	.word	0x00006b75
    6fac:	20003036 	.word	0x20003036
    6fb0:	20003660 	.word	0x20003660
    6fb4:	20002eaa 	.word	0x20002eaa
    6fb8:	000171f4 	.word	0x000171f4
    6fbc:	00008d51 	.word	0x00008d51
    6fc0:	20003034 	.word	0x20003034
    6fc4:	00008e41 	.word	0x00008e41
    6fc8:	2000368e 	.word	0x2000368e
    6fcc:	20002ecc 	.word	0x20002ecc
    6fd0:	000068a1 	.word	0x000068a1
    6fd4:	00006871 	.word	0x00006871
    6fd8:	00006775 	.word	0x00006775
    6fdc:	20002eb6 	.word	0x20002eb6
    6fe0:	200004ae 	.word	0x200004ae
    6fe4:	20002ed0 	.word	0x20002ed0
    6fe8:	00005b51 	.word	0x00005b51
    6fec:	0000a98d 	.word	0x0000a98d
    6ff0:	2000365f 	.word	0x2000365f
    6ff4:	2000365c 	.word	0x2000365c
    6ff8:	2000365d 	.word	0x2000365d
    6ffc:	200004bc 	.word	0x200004bc
    7000:	200004be 	.word	0x200004be
    7004:	200004c0 	.word	0x200004c0
    7008:	2000369a 	.word	0x2000369a
    700c:	200004b4 	.word	0x200004b4
    7010:	0000e45d 	.word	0x0000e45d
    7014:	000066d1 	.word	0x000066d1
    7018:	0000aa21 	.word	0x0000aa21
    701c:	0000ac61 	.word	0x0000ac61
    7020:	000084b9 	.word	0x000084b9
    7024:	2000303a 	.word	0x2000303a
    7028:	20002eb4 	.word	0x20002eb4
    702c:	200004b8 	.word	0x200004b8
    7030:	200004ad 	.word	0x200004ad
    7034:	2000303e 	.word	0x2000303e
    7038:	00008ed1 	.word	0x00008ed1
		}
		case BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT:
		{
			if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    703c:	4bd3      	ldr	r3, [pc, #844]	; (738c <BrakeBoardStateMachineTask+0x718>)
    703e:	781b      	ldrb	r3, [r3, #0]
    7040:	1c1a      	adds	r2, r3, #0
    7042:	2302      	movs	r3, #2
    7044:	4013      	ands	r3, r2
    7046:	d019      	beq.n	707c <BrakeBoardStateMachineTask+0x408>
			{
				
				brakeSupTime = 0;
    7048:	4bd1      	ldr	r3, [pc, #836]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    704a:	2200      	movs	r2, #0
    704c:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    704e:	4bcf      	ldr	r3, [pc, #828]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	2202      	movs	r2, #2
    7054:	4393      	bics	r3, r2
    7056:	b2da      	uxtb	r2, r3
    7058:	4bcc      	ldr	r3, [pc, #816]	; (738c <BrakeBoardStateMachineTask+0x718>)
    705a:	701a      	strb	r2, [r3, #0]
				brakeSetupExtend++;
    705c:	4bcd      	ldr	r3, [pc, #820]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    705e:	881b      	ldrh	r3, [r3, #0]
    7060:	3301      	adds	r3, #1
    7062:	b29a      	uxth	r2, r3
    7064:	4bcb      	ldr	r3, [pc, #812]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    7066:	801a      	strh	r2, [r3, #0]
				MotorCW();
    7068:	4bcb      	ldr	r3, [pc, #812]	; (7398 <BrakeBoardStateMachineTask+0x724>)
    706a:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;  
    706c:	4bc8      	ldr	r3, [pc, #800]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    706e:	220a      	movs	r2, #10
    7070:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_SETUPACTIVE;
    7072:	4bca      	ldr	r3, [pc, #808]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7074:	2205      	movs	r2, #5
    7076:	701a      	strb	r2, [r3, #0]
			}
			break;
    7078:	f001 fa07 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    707c:	f001 fa05 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}		
		case BRAKESTATE_SETUPACTIVE:
		{
			done = 0; 
    7080:	1dbb      	adds	r3, r7, #6
    7082:	2200      	movs	r2, #0
    7084:	701a      	strb	r2, [r3, #0]
//			if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
//			{
//				done = 1; 
//				brakeState = BRAKESTATE_POWERINGUP;
//			}
			if (brakeSetupExtend==(MAX_BRAKESETUPEXTEND-1))
    7086:	4bc3      	ldr	r3, [pc, #780]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    7088:	881b      	ldrh	r3, [r3, #0]
    708a:	2b08      	cmp	r3, #8
    708c:	d130      	bne.n	70f0 <BrakeBoardStateMachineTask+0x47c>
			{
				//building table 
				if ((brakeChange & BRAKECHANGE_TABLESAMPLE)!= 0)
    708e:	4bbf      	ldr	r3, [pc, #764]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7090:	781b      	ldrb	r3, [r3, #0]
    7092:	1c1a      	adds	r2, r3, #0
    7094:	2304      	movs	r3, #4
    7096:	4013      	ands	r3, r2
    7098:	d02a      	beq.n	70f0 <BrakeBoardStateMachineTask+0x47c>
				{
					brakeChange &= ~BRAKECHANGE_TABLESAMPLE; 
    709a:	4bbc      	ldr	r3, [pc, #752]	; (738c <BrakeBoardStateMachineTask+0x718>)
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	2204      	movs	r2, #4
    70a0:	4393      	bics	r3, r2
    70a2:	b2da      	uxtb	r2, r3
    70a4:	4bb9      	ldr	r3, [pc, #740]	; (738c <BrakeBoardStateMachineTask+0x718>)
    70a6:	701a      	strb	r2, [r3, #0]
					if (buildTableOffset >= MAX_BUILDTABLE)
    70a8:	4bbd      	ldr	r3, [pc, #756]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70aa:	881a      	ldrh	r2, [r3, #0]
    70ac:	4bbd      	ldr	r3, [pc, #756]	; (73a4 <BrakeBoardStateMachineTask+0x730>)
    70ae:	429a      	cmp	r2, r3
    70b0:	d902      	bls.n	70b8 <BrakeBoardStateMachineTask+0x444>
					{
						buildTableOffset = 0;
    70b2:	4bbb      	ldr	r3, [pc, #748]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70b4:	2200      	movs	r2, #0
    70b6:	801a      	strh	r2, [r3, #0]
					}
					buildTable.Current[buildTableOffset] = ADCGetReading(ADC_INPUT_CURRENT); 
    70b8:	4bb9      	ldr	r3, [pc, #740]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70ba:	881b      	ldrh	r3, [r3, #0]
    70bc:	1c1c      	adds	r4, r3, #0
    70be:	2001      	movs	r0, #1
    70c0:	4bb9      	ldr	r3, [pc, #740]	; (73a8 <BrakeBoardStateMachineTask+0x734>)
    70c2:	4798      	blx	r3
    70c4:	1c03      	adds	r3, r0, #0
    70c6:	1c19      	adds	r1, r3, #0
    70c8:	4bb8      	ldr	r3, [pc, #736]	; (73ac <BrakeBoardStateMachineTask+0x738>)
    70ca:	0062      	lsls	r2, r4, #1
    70cc:	52d1      	strh	r1, [r2, r3]
					buildTable.EncoderCount[buildTableOffset] = encoderCount;
    70ce:	4bb4      	ldr	r3, [pc, #720]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70d0:	881b      	ldrh	r3, [r3, #0]
    70d2:	1c1a      	adds	r2, r3, #0
    70d4:	4bb6      	ldr	r3, [pc, #728]	; (73b0 <BrakeBoardStateMachineTask+0x73c>)
    70d6:	8819      	ldrh	r1, [r3, #0]
    70d8:	4bb4      	ldr	r3, [pc, #720]	; (73ac <BrakeBoardStateMachineTask+0x738>)
    70da:	2080      	movs	r0, #128	; 0x80
    70dc:	00c0      	lsls	r0, r0, #3
    70de:	1812      	adds	r2, r2, r0
    70e0:	0052      	lsls	r2, r2, #1
    70e2:	52d1      	strh	r1, [r2, r3]
					buildTableOffset++;
    70e4:	4bae      	ldr	r3, [pc, #696]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70e6:	881b      	ldrh	r3, [r3, #0]
    70e8:	3301      	adds	r3, #1
    70ea:	b29a      	uxth	r2, r3
    70ec:	4bac      	ldr	r3, [pc, #688]	; (73a0 <BrakeBoardStateMachineTask+0x72c>)
    70ee:	801a      	strh	r2, [r3, #0]
				}
			}
			if (done == 0)
    70f0:	1dbb      	adds	r3, r7, #6
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d000      	beq.n	70fa <BrakeBoardStateMachineTask+0x486>
    70f8:	e187      	b.n	740a <BrakeBoardStateMachineTask+0x796>
			{
			//---------------------------------
			// brakeSetupExtend
			// * counts 0,2,4,6,8 - extend
			// * counts 1,3,5,7,9 - retract
			if ((brakeSetupExtend & 0x01)==0)
    70fa:	4ba6      	ldr	r3, [pc, #664]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    70fc:	881b      	ldrh	r3, [r3, #0]
    70fe:	1c1a      	adds	r2, r3, #0
    7100:	2301      	movs	r3, #1
    7102:	4013      	ands	r3, r2
    7104:	d103      	bne.n	710e <BrakeBoardStateMachineTask+0x49a>
			{
				forceExtend = 0x00; 
    7106:	1d7b      	adds	r3, r7, #5
    7108:	2200      	movs	r2, #0
    710a:	701a      	strb	r2, [r3, #0]
    710c:	e002      	b.n	7114 <BrakeBoardStateMachineTask+0x4a0>
			}
			else
			{
				forceExtend = 0x01;
    710e:	1d7b      	adds	r3, r7, #5
    7110:	2201      	movs	r2, #1
    7112:	701a      	strb	r2, [r3, #0]
			}
			switch (forceExtend)   //brakeSetupExtend)
    7114:	1d7b      	adds	r3, r7, #5
    7116:	781b      	ldrb	r3, [r3, #0]
    7118:	2b09      	cmp	r3, #9
    711a:	d901      	bls.n	7120 <BrakeBoardStateMachineTask+0x4ac>
    711c:	f001 f9b4 	bl	8488 <BrakeBoardStateMachineTask+0x1814>
    7120:	009a      	lsls	r2, r3, #2
    7122:	4ba4      	ldr	r3, [pc, #656]	; (73b4 <BrakeBoardStateMachineTask+0x740>)
    7124:	18d3      	adds	r3, r2, r3
    7126:	681b      	ldr	r3, [r3, #0]
    7128:	469f      	mov	pc, r3
				case 2:
				case 4:
				case 6:
				case 8:
				{
					if (flimitState == 0)
    712a:	4ba3      	ldr	r3, [pc, #652]	; (73b8 <BrakeBoardStateMachineTask+0x744>)
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	2b00      	cmp	r3, #0
    7130:	d125      	bne.n	717e <BrakeBoardStateMachineTask+0x50a>
					{
						if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    7132:	2001      	movs	r0, #1
    7134:	4ba1      	ldr	r3, [pc, #644]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    7136:	4798      	blx	r3
    7138:	1c03      	adds	r3, r0, #0
    713a:	2b00      	cmp	r3, #0
    713c:	d10f      	bne.n	715e <BrakeBoardStateMachineTask+0x4ea>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    713e:	4b97      	ldr	r3, [pc, #604]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7140:	2207      	movs	r2, #7
    7142:	701a      	strb	r2, [r3, #0]
							MotorCCW();
    7144:	4b9e      	ldr	r3, [pc, #632]	; (73c0 <BrakeBoardStateMachineTask+0x74c>)
    7146:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;							
    7148:	4b91      	ldr	r3, [pc, #580]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    714a:	220a      	movs	r2, #10
    714c:	701a      	strb	r2, [r3, #0]
							brakeChange &= ~BRAKECHANGE_SUPTIME;
    714e:	4b8f      	ldr	r3, [pc, #572]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	2202      	movs	r2, #2
    7154:	4393      	bics	r3, r2
    7156:	b2da      	uxtb	r2, r3
    7158:	4b8c      	ldr	r3, [pc, #560]	; (738c <BrakeBoardStateMachineTask+0x718>)
    715a:	701a      	strb	r2, [r3, #0]
    715c:	e007      	b.n	716e <BrakeBoardStateMachineTask+0x4fa>
						else
						{	
							
//-01_14limit-------------------
// added below to go to pause after hit the limit		
							MotorOff();
    715e:	4b99      	ldr	r3, [pc, #612]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    7160:	4798      	blx	r3
							brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND; 
    7162:	4b8e      	ldr	r3, [pc, #568]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7164:	220e      	movs	r2, #14
    7166:	701a      	strb	r2, [r3, #0]
							brakeSupTime = BRAKESUPTIME_SETUPPAUSE;
    7168:	4b89      	ldr	r3, [pc, #548]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    716a:	2202      	movs	r2, #2
    716c:	701a      	strb	r2, [r3, #0]
							MotorCCW();
							brakeSupTime = BRAKESUPTIME;
							brakeChange &= ~BRAKECHANGE_SUPTIME;					
*/							
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    716e:	4b87      	ldr	r3, [pc, #540]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7170:	781b      	ldrb	r3, [r3, #0]
    7172:	2202      	movs	r2, #2
    7174:	4393      	bics	r3, r2
    7176:	b2da      	uxtb	r2, r3
    7178:	4b84      	ldr	r3, [pc, #528]	; (738c <BrakeBoardStateMachineTask+0x718>)
    717a:	701a      	strb	r2, [r3, #0]
    717c:	e05a      	b.n	7234 <BrakeBoardStateMachineTask+0x5c0>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    717e:	2002      	movs	r0, #2
    7180:	4b8e      	ldr	r3, [pc, #568]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    7182:	4798      	blx	r3
    7184:	1c03      	adds	r3, r0, #0
    7186:	2b00      	cmp	r3, #0
    7188:	d118      	bne.n	71bc <BrakeBoardStateMachineTask+0x548>
    718a:	4b8f      	ldr	r3, [pc, #572]	; (73c8 <BrakeBoardStateMachineTask+0x754>)
    718c:	881b      	ldrh	r3, [r3, #0]
    718e:	2b00      	cmp	r3, #0
    7190:	d114      	bne.n	71bc <BrakeBoardStateMachineTask+0x548>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    7192:	4b82      	ldr	r3, [pc, #520]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7194:	2207      	movs	r2, #7
    7196:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    7198:	4b7d      	ldr	r3, [pc, #500]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    719a:	2200      	movs	r2, #0
    719c:	701a      	strb	r2, [r3, #0]
							MotorOff();
    719e:	4b89      	ldr	r3, [pc, #548]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    71a0:	4798      	blx	r3
							MotorCCW();
    71a2:	4b87      	ldr	r3, [pc, #540]	; (73c0 <BrakeBoardStateMachineTask+0x74c>)
    71a4:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;
    71a6:	4b7a      	ldr	r3, [pc, #488]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    71a8:	220a      	movs	r2, #10
    71aa:	701a      	strb	r2, [r3, #0]
							brakeChange &= ~BRAKECHANGE_SUPTIME;							
    71ac:	4b77      	ldr	r3, [pc, #476]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2202      	movs	r2, #2
    71b2:	4393      	bics	r3, r2
    71b4:	b2da      	uxtb	r2, r3
    71b6:	4b75      	ldr	r3, [pc, #468]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71b8:	701a      	strb	r2, [r3, #0]
    71ba:	e03b      	b.n	7234 <BrakeBoardStateMachineTask+0x5c0>
						}	
						else
						{
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    71bc:	4b73      	ldr	r3, [pc, #460]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	1c1a      	adds	r2, r3, #0
    71c2:	2302      	movs	r3, #2
    71c4:	4013      	ands	r3, r2
    71c6:	d035      	beq.n	7234 <BrakeBoardStateMachineTask+0x5c0>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    71c8:	4b70      	ldr	r3, [pc, #448]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	2202      	movs	r2, #2
    71ce:	4393      	bics	r3, r2
    71d0:	b2da      	uxtb	r2, r3
    71d2:	4b6e      	ldr	r3, [pc, #440]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71d4:	701a      	strb	r2, [r3, #0]
								MotorOff();
    71d6:	4b7b      	ldr	r3, [pc, #492]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    71d8:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    71da:	2002      	movs	r0, #2
    71dc:	4b77      	ldr	r3, [pc, #476]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    71de:	4798      	blx	r3
    71e0:	1c03      	adds	r3, r0, #0
    71e2:	2b00      	cmp	r3, #0
    71e4:	d10f      	bne.n	7206 <BrakeBoardStateMachineTask+0x592>
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    71e6:	4b6d      	ldr	r3, [pc, #436]	; (739c <BrakeBoardStateMachineTask+0x728>)
    71e8:	2207      	movs	r2, #7
    71ea:	701a      	strb	r2, [r3, #0]
									MotorCCW();
    71ec:	4b74      	ldr	r3, [pc, #464]	; (73c0 <BrakeBoardStateMachineTask+0x74c>)
    71ee:	4798      	blx	r3
									brakeSupTime = BRAKESUPTIME;
    71f0:	4b67      	ldr	r3, [pc, #412]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    71f2:	220a      	movs	r2, #10
    71f4:	701a      	strb	r2, [r3, #0]
									brakeChange &= ~BRAKECHANGE_SUPTIME;
    71f6:	4b65      	ldr	r3, [pc, #404]	; (738c <BrakeBoardStateMachineTask+0x718>)
    71f8:	781b      	ldrb	r3, [r3, #0]
    71fa:	2202      	movs	r2, #2
    71fc:	4393      	bics	r3, r2
    71fe:	b2da      	uxtb	r2, r3
    7200:	4b62      	ldr	r3, [pc, #392]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7202:	701a      	strb	r2, [r3, #0]
    7204:	e00e      	b.n	7224 <BrakeBoardStateMachineTask+0x5b0>
								}
								else
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    7206:	4b65      	ldr	r3, [pc, #404]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7208:	2207      	movs	r2, #7
    720a:	701a      	strb	r2, [r3, #0]
									MotorCCW();
    720c:	4b6c      	ldr	r3, [pc, #432]	; (73c0 <BrakeBoardStateMachineTask+0x74c>)
    720e:	4798      	blx	r3
									brakeSupTime = BRAKESUPTIME;
    7210:	4b5f      	ldr	r3, [pc, #380]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    7212:	220a      	movs	r2, #10
    7214:	701a      	strb	r2, [r3, #0]
									brakeChange &= ~BRAKECHANGE_SUPTIME;
    7216:	4b5d      	ldr	r3, [pc, #372]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	2202      	movs	r2, #2
    721c:	4393      	bics	r3, r2
    721e:	b2da      	uxtb	r2, r3
    7220:	4b5a      	ldr	r3, [pc, #360]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7222:	701a      	strb	r2, [r3, #0]
								}
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    7224:	4b59      	ldr	r3, [pc, #356]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	2202      	movs	r2, #2
    722a:	4393      	bics	r3, r2
    722c:	b2da      	uxtb	r2, r3
    722e:	4b57      	ldr	r3, [pc, #348]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7230:	701a      	strb	r2, [r3, #0]
								}
*/								
							}
						}
					}
					break;
    7232:	e0ea      	b.n	740a <BrakeBoardStateMachineTask+0x796>
    7234:	e0e9      	b.n	740a <BrakeBoardStateMachineTask+0x796>
				case 3:
				case 5:
				case 7:
				case 9:
				{
					if (hlimitState == 0)
    7236:	4b65      	ldr	r3, [pc, #404]	; (73cc <BrakeBoardStateMachineTask+0x758>)
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	2b00      	cmp	r3, #0
    723c:	d148      	bne.n	72d0 <BrakeBoardStateMachineTask+0x65c>
					{
						if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    723e:	2000      	movs	r0, #0
    7240:	4b5e      	ldr	r3, [pc, #376]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    7242:	4798      	blx	r3
    7244:	1c03      	adds	r3, r0, #0
    7246:	2b00      	cmp	r3, #0
    7248:	d106      	bne.n	7258 <BrakeBoardStateMachineTask+0x5e4>
						{
							brakeState = BRAKESTATE_ERROR;
    724a:	4b54      	ldr	r3, [pc, #336]	; (739c <BrakeBoardStateMachineTask+0x728>)
    724c:	2208      	movs	r2, #8
    724e:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    7250:	4b4f      	ldr	r3, [pc, #316]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    7252:	2200      	movs	r2, #0
    7254:	701a      	strb	r2, [r3, #0]
    7256:	e033      	b.n	72c0 <BrakeBoardStateMachineTask+0x64c>
						}
						else
						{		
							if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    7258:	4b4e      	ldr	r3, [pc, #312]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    725a:	881a      	ldrh	r2, [r3, #0]
    725c:	4b5c      	ldr	r3, [pc, #368]	; (73d0 <BrakeBoardStateMachineTask+0x75c>)
    725e:	429a      	cmp	r2, r3
    7260:	d128      	bne.n	72b4 <BrakeBoardStateMachineTask+0x640>
//V1.05									if (brakeSetupExtend == 9)												
							{
								if (setupExtendTriggered != 0)
    7262:	4b5c      	ldr	r3, [pc, #368]	; (73d4 <BrakeBoardStateMachineTask+0x760>)
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	2b00      	cmp	r3, #0
    7268:	d005      	beq.n	7276 <BrakeBoardStateMachineTask+0x602>
								{
									brakeState = BRAKESTATE_ERROR;
    726a:	4b4c      	ldr	r3, [pc, #304]	; (739c <BrakeBoardStateMachineTask+0x728>)
    726c:	2208      	movs	r2, #8
    726e:	701a      	strb	r2, [r3, #0]
									MotorOff();									
    7270:	4b54      	ldr	r3, [pc, #336]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    7272:	4798      	blx	r3
    7274:	e024      	b.n	72c0 <BrakeBoardStateMachineTask+0x64c>
								}
								else
								{
									MotorNeedNewBaseline();
    7276:	4b58      	ldr	r3, [pc, #352]	; (73d8 <BrakeBoardStateMachineTask+0x764>)
    7278:	4798      	blx	r3
									brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    727a:	4b58      	ldr	r3, [pc, #352]	; (73dc <BrakeBoardStateMachineTask+0x768>)
    727c:	791b      	ldrb	r3, [r3, #4]
    727e:	2204      	movs	r2, #4
    7280:	4393      	bics	r3, r2
    7282:	b2da      	uxtb	r2, r3
    7284:	4b55      	ldr	r3, [pc, #340]	; (73dc <BrakeBoardStateMachineTask+0x768>)
    7286:	711a      	strb	r2, [r3, #4]
									brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7288:	4b44      	ldr	r3, [pc, #272]	; (739c <BrakeBoardStateMachineTask+0x728>)
    728a:	220b      	movs	r2, #11
    728c:	701a      	strb	r2, [r3, #0]
									MotorOff();
    728e:	4b4d      	ldr	r3, [pc, #308]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    7290:	4798      	blx	r3
									brakeSupTime = BRAKESUPTIME;	
    7292:	4b3f      	ldr	r3, [pc, #252]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    7294:	220a      	movs	r2, #10
    7296:	701a      	strb	r2, [r3, #0]
									//------------v1.05 boc
									brakeInitiationCount = 0;
    7298:	4b51      	ldr	r3, [pc, #324]	; (73e0 <BrakeBoardStateMachineTask+0x76c>)
    729a:	2200      	movs	r2, #0
    729c:	701a      	strb	r2, [r3, #0]
									brakeCycleCount = 0;
    729e:	4b51      	ldr	r3, [pc, #324]	; (73e4 <BrakeBoardStateMachineTask+0x770>)
    72a0:	2200      	movs	r2, #0
    72a2:	701a      	strb	r2, [r3, #0]
									if (table0.Item.Hybrid == TRUE)
    72a4:	4b50      	ldr	r3, [pc, #320]	; (73e8 <BrakeBoardStateMachineTask+0x774>)
    72a6:	7e5b      	ldrb	r3, [r3, #25]
    72a8:	2b01      	cmp	r3, #1
    72aa:	d109      	bne.n	72c0 <BrakeBoardStateMachineTask+0x64c>
									{
										brakeInitiationCount = 10;
    72ac:	4b4c      	ldr	r3, [pc, #304]	; (73e0 <BrakeBoardStateMachineTask+0x76c>)
    72ae:	220a      	movs	r2, #10
    72b0:	701a      	strb	r2, [r3, #0]
    72b2:	e005      	b.n	72c0 <BrakeBoardStateMachineTask+0x64c>
									//--------------v1.05 eoc																				
								}					
							}	
							else
							{
								brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 								
    72b4:	4b39      	ldr	r3, [pc, #228]	; (739c <BrakeBoardStateMachineTask+0x728>)
    72b6:	220f      	movs	r2, #15
    72b8:	701a      	strb	r2, [r3, #0]
 								brakeSupTime = BRAKESUPTIME_SETUPPAUSE;  
    72ba:	4b35      	ldr	r3, [pc, #212]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    72bc:	2202      	movs	r2, #2
    72be:	701a      	strb	r2, [r3, #0]
							}
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    72c0:	4b32      	ldr	r3, [pc, #200]	; (738c <BrakeBoardStateMachineTask+0x718>)
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	2202      	movs	r2, #2
    72c6:	4393      	bics	r3, r2
    72c8:	b2da      	uxtb	r2, r3
    72ca:	4b30      	ldr	r3, [pc, #192]	; (738c <BrakeBoardStateMachineTask+0x718>)
    72cc:	701a      	strb	r2, [r3, #0]
    72ce:	e09b      	b.n	7408 <BrakeBoardStateMachineTask+0x794>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    72d0:	2002      	movs	r0, #2
    72d2:	4b3a      	ldr	r3, [pc, #232]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    72d4:	4798      	blx	r3
    72d6:	1c03      	adds	r3, r0, #0
    72d8:	2b00      	cmp	r3, #0
    72da:	d10c      	bne.n	72f6 <BrakeBoardStateMachineTask+0x682>
    72dc:	4b3a      	ldr	r3, [pc, #232]	; (73c8 <BrakeBoardStateMachineTask+0x754>)
    72de:	881b      	ldrh	r3, [r3, #0]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d108      	bne.n	72f6 <BrakeBoardStateMachineTask+0x682>
						{
							brakeState = BRAKESTATE_ERROR;
    72e4:	4b2d      	ldr	r3, [pc, #180]	; (739c <BrakeBoardStateMachineTask+0x728>)
    72e6:	2208      	movs	r2, #8
    72e8:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    72ea:	4b29      	ldr	r3, [pc, #164]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    72ec:	2200      	movs	r2, #0
    72ee:	701a      	strb	r2, [r3, #0]
							MotorOff();
    72f0:	4b34      	ldr	r3, [pc, #208]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    72f2:	4798      	blx	r3
    72f4:	e088      	b.n	7408 <BrakeBoardStateMachineTask+0x794>
						}
						else
						{						
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    72f6:	4b25      	ldr	r3, [pc, #148]	; (738c <BrakeBoardStateMachineTask+0x718>)
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	1c1a      	adds	r2, r3, #0
    72fc:	2302      	movs	r3, #2
    72fe:	4013      	ands	r3, r2
    7300:	d100      	bne.n	7304 <BrakeBoardStateMachineTask+0x690>
    7302:	e081      	b.n	7408 <BrakeBoardStateMachineTask+0x794>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    7304:	4b21      	ldr	r3, [pc, #132]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	2202      	movs	r2, #2
    730a:	4393      	bics	r3, r2
    730c:	b2da      	uxtb	r2, r3
    730e:	4b1f      	ldr	r3, [pc, #124]	; (738c <BrakeBoardStateMachineTask+0x718>)
    7310:	701a      	strb	r2, [r3, #0]
								//						brakeState = BRAKESTATE_IDLE;
								//						brakeBiLED = BRAKEBILED_SOLIDGREEN;
								//----------------ERROR here????
								MotorOff();
    7312:	4b2c      	ldr	r3, [pc, #176]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    7314:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7316:	2002      	movs	r0, #2
    7318:	4b28      	ldr	r3, [pc, #160]	; (73bc <BrakeBoardStateMachineTask+0x748>)
    731a:	4798      	blx	r3
    731c:	1c03      	adds	r3, r0, #0
    731e:	2b00      	cmp	r3, #0
    7320:	d106      	bne.n	7330 <BrakeBoardStateMachineTask+0x6bc>
								{
									brakeState = BRAKESTATE_ERROR;
    7322:	4b1e      	ldr	r3, [pc, #120]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7324:	2208      	movs	r2, #8
    7326:	701a      	strb	r2, [r3, #0]
									brakeSupTime = 0;
    7328:	4b19      	ldr	r3, [pc, #100]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    732a:	2200      	movs	r2, #0
    732c:	701a      	strb	r2, [r3, #0]
    732e:	e063      	b.n	73f8 <BrakeBoardStateMachineTask+0x784>
								}
								else
								{
									if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    7330:	4b18      	ldr	r3, [pc, #96]	; (7394 <BrakeBoardStateMachineTask+0x720>)
    7332:	881a      	ldrh	r2, [r3, #0]
    7334:	4b26      	ldr	r3, [pc, #152]	; (73d0 <BrakeBoardStateMachineTask+0x75c>)
    7336:	429a      	cmp	r2, r3
    7338:	d158      	bne.n	73ec <BrakeBoardStateMachineTask+0x778>
//V1.05									if (brakeSetupExtend == 9)									
									{
										if (setupExtendTriggered != 0)
    733a:	4b26      	ldr	r3, [pc, #152]	; (73d4 <BrakeBoardStateMachineTask+0x760>)
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	2b00      	cmp	r3, #0
    7340:	d005      	beq.n	734e <BrakeBoardStateMachineTask+0x6da>
										{
											brakeState = BRAKESTATE_ERROR;
    7342:	4b16      	ldr	r3, [pc, #88]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7344:	2208      	movs	r2, #8
    7346:	701a      	strb	r2, [r3, #0]
											MotorOff();									
    7348:	4b1e      	ldr	r3, [pc, #120]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    734a:	4798      	blx	r3
    734c:	e054      	b.n	73f8 <BrakeBoardStateMachineTask+0x784>
										}
										else
										{		
											MotorNeedNewBaseline();					
    734e:	4b22      	ldr	r3, [pc, #136]	; (73d8 <BrakeBoardStateMachineTask+0x764>)
    7350:	4798      	blx	r3
											brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    7352:	4b22      	ldr	r3, [pc, #136]	; (73dc <BrakeBoardStateMachineTask+0x768>)
    7354:	791b      	ldrb	r3, [r3, #4]
    7356:	2204      	movs	r2, #4
    7358:	4393      	bics	r3, r2
    735a:	b2da      	uxtb	r2, r3
    735c:	4b1f      	ldr	r3, [pc, #124]	; (73dc <BrakeBoardStateMachineTask+0x768>)
    735e:	711a      	strb	r2, [r3, #4]
											brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7360:	4b0e      	ldr	r3, [pc, #56]	; (739c <BrakeBoardStateMachineTask+0x728>)
    7362:	220b      	movs	r2, #11
    7364:	701a      	strb	r2, [r3, #0]
											MotorOff();
    7366:	4b17      	ldr	r3, [pc, #92]	; (73c4 <BrakeBoardStateMachineTask+0x750>)
    7368:	4798      	blx	r3
											brakeSupTime = BRAKESUPTIME;	
    736a:	4b09      	ldr	r3, [pc, #36]	; (7390 <BrakeBoardStateMachineTask+0x71c>)
    736c:	220a      	movs	r2, #10
    736e:	701a      	strb	r2, [r3, #0]
											//------------v1.05 boc
											brakeInitiationCount = 0;
    7370:	4b1b      	ldr	r3, [pc, #108]	; (73e0 <BrakeBoardStateMachineTask+0x76c>)
    7372:	2200      	movs	r2, #0
    7374:	701a      	strb	r2, [r3, #0]
											brakeCycleCount = 0;
    7376:	4b1b      	ldr	r3, [pc, #108]	; (73e4 <BrakeBoardStateMachineTask+0x770>)
    7378:	2200      	movs	r2, #0
    737a:	701a      	strb	r2, [r3, #0]
											if (table0.Item.Hybrid == TRUE)
    737c:	4b1a      	ldr	r3, [pc, #104]	; (73e8 <BrakeBoardStateMachineTask+0x774>)
    737e:	7e5b      	ldrb	r3, [r3, #25]
    7380:	2b01      	cmp	r3, #1
    7382:	d139      	bne.n	73f8 <BrakeBoardStateMachineTask+0x784>
											{
												brakeInitiationCount = 10;
    7384:	4b16      	ldr	r3, [pc, #88]	; (73e0 <BrakeBoardStateMachineTask+0x76c>)
    7386:	220a      	movs	r2, #10
    7388:	701a      	strb	r2, [r3, #0]
    738a:	e035      	b.n	73f8 <BrakeBoardStateMachineTask+0x784>
    738c:	20002ecc 	.word	0x20002ecc
    7390:	2000368e 	.word	0x2000368e
    7394:	20002eb4 	.word	0x20002eb4
    7398:	00008ed1 	.word	0x00008ed1
    739c:	20002eaa 	.word	0x20002eaa
    73a0:	20001e8c 	.word	0x20001e8c
    73a4:	000003ff 	.word	0x000003ff
    73a8:	0000a5a9 	.word	0x0000a5a9
    73ac:	20000e8c 	.word	0x20000e8c
    73b0:	200004a8 	.word	0x200004a8
    73b4:	00017260 	.word	0x00017260
    73b8:	2000303e 	.word	0x2000303e
    73bc:	000068a1 	.word	0x000068a1
    73c0:	00008e41 	.word	0x00008e41
    73c4:	00008d51 	.word	0x00008d51
    73c8:	20002e9e 	.word	0x20002e9e
    73cc:	20003034 	.word	0x20003034
    73d0:	00004e20 	.word	0x00004e20
    73d4:	200004ad 	.word	0x200004ad
    73d8:	000084b9 	.word	0x000084b9
    73dc:	20003660 	.word	0x20003660
    73e0:	200004af 	.word	0x200004af
    73e4:	200004b0 	.word	0x200004b0
    73e8:	20002f98 	.word	0x20002f98
											//--------------v1.05 eoc													
										}
									}
									else
									{						
										brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 
    73ec:	4b8e      	ldr	r3, [pc, #568]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    73ee:	220f      	movs	r2, #15
    73f0:	701a      	strb	r2, [r3, #0]
										brakeSupTime = BRAKESUPTIME_SETUPPAUSE;
    73f2:	4b8e      	ldr	r3, [pc, #568]	; (762c <BrakeBoardStateMachineTask+0x9b8>)
    73f4:	2202      	movs	r2, #2
    73f6:	701a      	strb	r2, [r3, #0]
									}
								}
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    73f8:	4b8d      	ldr	r3, [pc, #564]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	2202      	movs	r2, #2
    73fe:	4393      	bics	r3, r2
    7400:	b2da      	uxtb	r2, r3
    7402:	4b8b      	ldr	r3, [pc, #556]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7404:	701a      	strb	r2, [r3, #0]
							}			
						}
					}
					break;
    7406:	e7ff      	b.n	7408 <BrakeBoardStateMachineTask+0x794>
    7408:	46c0      	nop			; (mov r8, r8)
				}
			}
			}
			break;
    740a:	f001 f83d 	bl	8488 <BrakeBoardStateMachineTask+0x1814>
		}
//----------------------------------
// error handling states
		case BRAKESTATE_ERROR_RETRACT:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    740e:	4b88      	ldr	r3, [pc, #544]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	1c1a      	adds	r2, r3, #0
    7414:	2302      	movs	r3, #2
    7416:	4013      	ands	r3, r2
    7418:	d103      	bne.n	7422 <BrakeBoardStateMachineTask+0x7ae>
			(hlimitState ==0))
    741a:	4b86      	ldr	r3, [pc, #536]	; (7634 <BrakeBoardStateMachineTask+0x9c0>)
    741c:	781b      	ldrb	r3, [r3, #0]
		}
//----------------------------------
// error handling states
		case BRAKESTATE_ERROR_RETRACT:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    741e:	2b00      	cmp	r3, #0
    7420:	d113      	bne.n	744a <BrakeBoardStateMachineTask+0x7d6>
			(hlimitState ==0))
			{
				MotorOff();
    7422:	4b85      	ldr	r3, [pc, #532]	; (7638 <BrakeBoardStateMachineTask+0x9c4>)
    7424:	4798      	blx	r3
				brakeSupTime = 0;
    7426:	4b81      	ldr	r3, [pc, #516]	; (762c <BrakeBoardStateMachineTask+0x9b8>)
    7428:	2200      	movs	r2, #0
    742a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    742c:	4b80      	ldr	r3, [pc, #512]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    742e:	781b      	ldrb	r3, [r3, #0]
    7430:	2202      	movs	r2, #2
    7432:	4393      	bics	r3, r2
    7434:	b2da      	uxtb	r2, r3
    7436:	4b7e      	ldr	r3, [pc, #504]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7438:	701a      	strb	r2, [r3, #0]
				BrakeActuatorControl(BRAKE_HOME);
    743a:	2000      	movs	r0, #0
    743c:	4b7f      	ldr	r3, [pc, #508]	; (763c <BrakeBoardStateMachineTask+0x9c8>)
    743e:	4798      	blx	r3
				brakeState = BRAKESTATE_ERROR;
    7440:	4b79      	ldr	r3, [pc, #484]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    7442:	2208      	movs	r2, #8
    7444:	701a      	strb	r2, [r3, #0]
			}

			break;
    7446:	f001 f820 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    744a:	f001 f81e 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_ERROR:
		{
			//---------------------
			// make sure at home 
			if ((hlimitState!=0)&&(brakeSupTime ==0))
    744e:	4b79      	ldr	r3, [pc, #484]	; (7634 <BrakeBoardStateMachineTask+0x9c0>)
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	2b00      	cmp	r3, #0
    7454:	d012      	beq.n	747c <BrakeBoardStateMachineTask+0x808>
    7456:	4b75      	ldr	r3, [pc, #468]	; (762c <BrakeBoardStateMachineTask+0x9b8>)
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	2b00      	cmp	r3, #0
    745c:	d10e      	bne.n	747c <BrakeBoardStateMachineTask+0x808>
			{
 					MotorCCW();
    745e:	4b78      	ldr	r3, [pc, #480]	; (7640 <BrakeBoardStateMachineTask+0x9cc>)
    7460:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7462:	4b72      	ldr	r3, [pc, #456]	; (762c <BrakeBoardStateMachineTask+0x9b8>)
    7464:	220a      	movs	r2, #10
    7466:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ERROR_FINAL; 
    7468:	4b6f      	ldr	r3, [pc, #444]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    746a:	2218      	movs	r2, #24
    746c:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;			
    746e:	4b70      	ldr	r3, [pc, #448]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	2202      	movs	r2, #2
    7474:	4393      	bics	r3, r2
    7476:	b2da      	uxtb	r2, r3
    7478:	4b6d      	ldr	r3, [pc, #436]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    747a:	701a      	strb	r2, [r3, #0]
			}
			if (setupExtendTriggered != 0)	
    747c:	4b71      	ldr	r3, [pc, #452]	; (7644 <BrakeBoardStateMachineTask+0x9d0>)
    747e:	781b      	ldrb	r3, [r3, #0]
    7480:	2b00      	cmp	r3, #0
    7482:	d007      	beq.n	7494 <BrakeBoardStateMachineTask+0x820>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDTRIGGEREDINSETUP;
    7484:	4b70      	ldr	r3, [pc, #448]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7486:	789b      	ldrb	r3, [r3, #2]
    7488:	2280      	movs	r2, #128	; 0x80
    748a:	4252      	negs	r2, r2
    748c:	4313      	orrs	r3, r2
    748e:	b2da      	uxtb	r2, r3
    7490:	4b6d      	ldr	r3, [pc, #436]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7492:	709a      	strb	r2, [r3, #2]
			}
			brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7494:	4b6c      	ldr	r3, [pc, #432]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7496:	791b      	ldrb	r3, [r3, #4]
    7498:	2210      	movs	r2, #16
    749a:	4393      	bics	r3, r2
    749c:	b2da      	uxtb	r2, r3
    749e:	4b6a      	ldr	r3, [pc, #424]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    74a0:	711a      	strb	r2, [r3, #4]
			break;
    74a2:	f000 fff2 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}	
		case BRAKESTATE_ERROR_FINAL:
		{
			if ((brakeChange & BRAKECHANGE_SUPTIME)!=0)
    74a6:	4b62      	ldr	r3, [pc, #392]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	1c1a      	adds	r2, r3, #0
    74ac:	2302      	movs	r3, #2
    74ae:	4013      	ands	r3, r2
    74b0:	d00a      	beq.n	74c8 <BrakeBoardStateMachineTask+0x854>
			{
				MotorOff();
    74b2:	4b61      	ldr	r3, [pc, #388]	; (7638 <BrakeBoardStateMachineTask+0x9c4>)
    74b4:	4798      	blx	r3
				brakeChange &= ~BRAKECHANGE_SUPTIME; 
    74b6:	4b5e      	ldr	r3, [pc, #376]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	2202      	movs	r2, #2
    74bc:	4393      	bics	r3, r2
    74be:	b2da      	uxtb	r2, r3
    74c0:	4b5b      	ldr	r3, [pc, #364]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    74c2:	701a      	strb	r2, [r3, #0]
			}
			break;
    74c4:	f000 ffe1 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    74c8:	f000 ffdf 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}	
		case BRAKESTATE_ERROR_VOLTAGE_RESET:
		{
			//V00_60 - recover after voltage comes back 
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    74cc:	4b5e      	ldr	r3, [pc, #376]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    74ce:	791b      	ldrb	r3, [r3, #4]
    74d0:	1c1a      	adds	r2, r3, #0
    74d2:	2308      	movs	r3, #8
    74d4:	4013      	ands	r3, r2
    74d6:	d107      	bne.n	74e8 <BrakeBoardStateMachineTask+0x874>
			{
				brakeState = BRAKESTATE_RESET;
    74d8:	4b53      	ldr	r3, [pc, #332]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    74da:	2200      	movs	r2, #0
    74dc:	701a      	strb	r2, [r3, #0]
				done = 1;
    74de:	1dbb      	adds	r3, r7, #6
    74e0:	2201      	movs	r2, #1
    74e2:	701a      	strb	r2, [r3, #0]
			}
			break;
    74e4:	f000 ffd1 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    74e8:	f000 ffcf 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}		
		case BRAKESTATE_ERROR_VOLTAGE_ACTIVE:
		{
			done = 0;
    74ec:	1dbb      	adds	r3, r7, #6
    74ee:	2200      	movs	r2, #0
    74f0:	701a      	strb	r2, [r3, #0]
			//V00_60 - recover after voltage comes back
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    74f2:	4b55      	ldr	r3, [pc, #340]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    74f4:	791b      	ldrb	r3, [r3, #4]
    74f6:	1c1a      	adds	r2, r3, #0
    74f8:	2308      	movs	r3, #8
    74fa:	4013      	ands	r3, r2
    74fc:	d105      	bne.n	750a <BrakeBoardStateMachineTask+0x896>
			{
				brakeState = BRAKESTATE_ACTIVE;
    74fe:	4b4a      	ldr	r3, [pc, #296]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    7500:	2209      	movs	r2, #9
    7502:	701a      	strb	r2, [r3, #0]
				done = 1;
    7504:	1dbb      	adds	r3, r7, #6
    7506:	2201      	movs	r2, #1
    7508:	701a      	strb	r2, [r3, #0]
			}
			if (done == 0)
    750a:	1dbb      	adds	r3, r7, #6
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	2b00      	cmp	r3, #0
    7510:	d152      	bne.n	75b8 <BrakeBoardStateMachineTask+0x944>
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    7512:	4b4e      	ldr	r3, [pc, #312]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    7514:	881b      	ldrh	r3, [r3, #0]
    7516:	2b00      	cmp	r3, #0
    7518:	d008      	beq.n	752c <BrakeBoardStateMachineTask+0x8b8>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    751a:	4b4c      	ldr	r3, [pc, #304]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    751c:	881b      	ldrh	r3, [r3, #0]
				done = 1;
			}
			if (done == 0)
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    751e:	b21b      	sxth	r3, r3
    7520:	2b01      	cmp	r3, #1
    7522:	d10a      	bne.n	753a <BrakeBoardStateMachineTask+0x8c6>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7524:	4b4a      	ldr	r3, [pc, #296]	; (7650 <BrakeBoardStateMachineTask+0x9dc>)
    7526:	881b      	ldrh	r3, [r3, #0]
    7528:	2b00      	cmp	r3, #0
    752a:	d106      	bne.n	753a <BrakeBoardStateMachineTask+0x8c6>
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    752c:	4b46      	ldr	r3, [pc, #280]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    752e:	791b      	ldrb	r3, [r3, #4]
    7530:	2202      	movs	r2, #2
    7532:	4393      	bics	r3, r2
    7534:	b2da      	uxtb	r2, r3
    7536:	4b44      	ldr	r3, [pc, #272]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7538:	711a      	strb	r2, [r3, #4]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    753a:	4b45      	ldr	r3, [pc, #276]	; (7650 <BrakeBoardStateMachineTask+0x9dc>)
    753c:	881b      	ldrh	r3, [r3, #0]
    753e:	2b00      	cmp	r3, #0
    7540:	d00a      	beq.n	7558 <BrakeBoardStateMachineTask+0x8e4>
    7542:	4b42      	ldr	r3, [pc, #264]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    7544:	881b      	ldrh	r3, [r3, #0]
    7546:	2b00      	cmp	r3, #0
    7548:	d006      	beq.n	7558 <BrakeBoardStateMachineTask+0x8e4>
				(breakawayHoldTimer ==0))
    754a:	4b42      	ldr	r3, [pc, #264]	; (7654 <BrakeBoardStateMachineTask+0x9e0>)
    754c:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayRing_pressed == 0) ||
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    754e:	2b00      	cmp	r3, #0
    7550:	d102      	bne.n	7558 <BrakeBoardStateMachineTask+0x8e4>
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
    7552:	4b40      	ldr	r3, [pc, #256]	; (7654 <BrakeBoardStateMachineTask+0x9e0>)
    7554:	2201      	movs	r2, #1
    7556:	801a      	strh	r2, [r3, #0]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7558:	4b3d      	ldr	r3, [pc, #244]	; (7650 <BrakeBoardStateMachineTask+0x9dc>)
    755a:	881b      	ldrh	r3, [r3, #0]
    755c:	2b00      	cmp	r3, #0
    755e:	d02b      	beq.n	75b8 <BrakeBoardStateMachineTask+0x944>
    7560:	4b3a      	ldr	r3, [pc, #232]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    7562:	881b      	ldrh	r3, [r3, #0]
    7564:	2b00      	cmp	r3, #0
    7566:	d027      	beq.n	75b8 <BrakeBoardStateMachineTask+0x944>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7568:	4b3a      	ldr	r3, [pc, #232]	; (7654 <BrakeBoardStateMachineTask+0x9e0>)
    756a:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    756c:	2b13      	cmp	r3, #19
    756e:	d923      	bls.n	75b8 <BrakeBoardStateMachineTask+0x944>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7570:	4b35      	ldr	r3, [pc, #212]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7572:	791b      	ldrb	r3, [r3, #4]
    7574:	1c1a      	adds	r2, r3, #0
    7576:	2302      	movs	r3, #2
    7578:	4013      	ands	r3, r2
    757a:	d11d      	bne.n	75b8 <BrakeBoardStateMachineTask+0x944>
				{
					done = 1;
    757c:	1dbb      	adds	r3, r7, #6
    757e:	2201      	movs	r2, #1
    7580:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    7582:	4b31      	ldr	r3, [pc, #196]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    7584:	791b      	ldrb	r3, [r3, #4]
    7586:	2202      	movs	r2, #2
    7588:	4313      	orrs	r3, r2
    758a:	b2da      	uxtb	r2, r3
    758c:	4b2e      	ldr	r3, [pc, #184]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    758e:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    7590:	4b25      	ldr	r3, [pc, #148]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    7592:	2211      	movs	r2, #17
    7594:	701a      	strb	r2, [r3, #0]
					MotorCW();
    7596:	4b30      	ldr	r3, [pc, #192]	; (7658 <BrakeBoardStateMachineTask+0x9e4>)
    7598:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    759a:	4b24      	ldr	r3, [pc, #144]	; (762c <BrakeBoardStateMachineTask+0x9b8>)
    759c:	220a      	movs	r2, #10
    759e:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    75a0:	4b23      	ldr	r3, [pc, #140]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    75a2:	781b      	ldrb	r3, [r3, #0]
    75a4:	2202      	movs	r2, #2
    75a6:	4393      	bics	r3, r2
    75a8:	b2da      	uxtb	r2, r3
    75aa:	4b21      	ldr	r3, [pc, #132]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    75ac:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    75ae:	4b2b      	ldr	r3, [pc, #172]	; (765c <BrakeBoardStateMachineTask+0x9e8>)
    75b0:	2200      	movs	r2, #0
    75b2:	701a      	strb	r2, [r3, #0]
				}			
			}
			break;
    75b4:	f000 ff69 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    75b8:	f000 ff67 	bl	848a <BrakeBoardStateMachineTask+0x1816>
//-----------------------------------------		
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{

			
			gPrime = 0; 
    75bc:	4b28      	ldr	r3, [pc, #160]	; (7660 <BrakeBoardStateMachineTask+0x9ec>)
    75be:	2200      	movs	r2, #0
    75c0:	801a      	strh	r2, [r3, #0]
			if ((breakawayRing_pressed == 0) || 
    75c2:	4b22      	ldr	r3, [pc, #136]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    75c4:	881b      	ldrh	r3, [r3, #0]
    75c6:	2b00      	cmp	r3, #0
    75c8:	d008      	beq.n	75dc <BrakeBoardStateMachineTask+0x968>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    75ca:	4b20      	ldr	r3, [pc, #128]	; (764c <BrakeBoardStateMachineTask+0x9d8>)
    75cc:	881b      	ldrh	r3, [r3, #0]
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{

			
			gPrime = 0; 
			if ((breakawayRing_pressed == 0) || 
    75ce:	b21b      	sxth	r3, r3
    75d0:	2b01      	cmp	r3, #1
    75d2:	d10a      	bne.n	75ea <BrakeBoardStateMachineTask+0x976>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    75d4:	4b1e      	ldr	r3, [pc, #120]	; (7650 <BrakeBoardStateMachineTask+0x9dc>)
    75d6:	881b      	ldrh	r3, [r3, #0]
    75d8:	2b00      	cmp	r3, #0
    75da:	d106      	bne.n	75ea <BrakeBoardStateMachineTask+0x976>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    75dc:	4b1a      	ldr	r3, [pc, #104]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    75de:	791b      	ldrb	r3, [r3, #4]
    75e0:	2202      	movs	r2, #2
    75e2:	4393      	bics	r3, r2
    75e4:	b2da      	uxtb	r2, r3
    75e6:	4b18      	ldr	r3, [pc, #96]	; (7648 <BrakeBoardStateMachineTask+0x9d4>)
    75e8:	711a      	strb	r2, [r3, #4]
			}						
			thresholdmet = 0; 	
    75ea:	4b1c      	ldr	r3, [pc, #112]	; (765c <BrakeBoardStateMachineTask+0x9e8>)
    75ec:	2200      	movs	r2, #0
    75ee:	701a      	strb	r2, [r3, #0]
			tempdiffx = MotorGetAcc(FALSE);
    75f0:	2000      	movs	r0, #0
    75f2:	4b1c      	ldr	r3, [pc, #112]	; (7664 <BrakeBoardStateMachineTask+0x9f0>)
    75f4:	4798      	blx	r3
    75f6:	1c03      	adds	r3, r0, #0
    75f8:	1c1a      	adds	r2, r3, #0
    75fa:	4b1b      	ldr	r3, [pc, #108]	; (7668 <BrakeBoardStateMachineTask+0x9f4>)
    75fc:	801a      	strh	r2, [r3, #0]
			if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    75fe:	4b0c      	ldr	r3, [pc, #48]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7600:	781b      	ldrb	r3, [r3, #0]
    7602:	1c1a      	adds	r2, r3, #0
    7604:	2302      	movs	r3, #2
    7606:	4013      	ands	r3, r2
    7608:	d009      	beq.n	761e <BrakeBoardStateMachineTask+0x9aa>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    760a:	4b09      	ldr	r3, [pc, #36]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	2202      	movs	r2, #2
    7610:	4393      	bics	r3, r2
    7612:	b2da      	uxtb	r2, r3
    7614:	4b06      	ldr	r3, [pc, #24]	; (7630 <BrakeBoardStateMachineTask+0x9bc>)
    7616:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_ACTIVE; 
    7618:	4b03      	ldr	r3, [pc, #12]	; (7628 <BrakeBoardStateMachineTask+0x9b4>)
    761a:	2209      	movs	r2, #9
    761c:	701a      	strb	r2, [r3, #0]
			}
			encoderCountBackTotal = 0;
    761e:	4b13      	ldr	r3, [pc, #76]	; (766c <BrakeBoardStateMachineTask+0x9f8>)
    7620:	2200      	movs	r2, #0
    7622:	801a      	strh	r2, [r3, #0]
			break;
    7624:	f000 ff31 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    7628:	20002eaa 	.word	0x20002eaa
    762c:	2000368e 	.word	0x2000368e
    7630:	20002ecc 	.word	0x20002ecc
    7634:	20003034 	.word	0x20003034
    7638:	00008d51 	.word	0x00008d51
    763c:	000068a1 	.word	0x000068a1
    7640:	00008e41 	.word	0x00008e41
    7644:	200004ad 	.word	0x200004ad
    7648:	20003660 	.word	0x20003660
    764c:	20003036 	.word	0x20003036
    7650:	2000303c 	.word	0x2000303c
    7654:	20002ed0 	.word	0x20002ed0
    7658:	00008ed1 	.word	0x00008ed1
    765c:	200004ae 	.word	0x200004ae
    7660:	20002ec6 	.word	0x20002ec6
    7664:	000086b9 	.word	0x000086b9
    7668:	20002eb0 	.word	0x20002eb0
    766c:	20002ec0 	.word	0x20002ec0
		}

		case BRAKESTATE_ACTIVE:
		{
			done = 0; 
    7670:	1dbb      	adds	r3, r7, #6
    7672:	2200      	movs	r2, #0
    7674:	701a      	strb	r2, [r3, #0]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7676:	4bb4      	ldr	r3, [pc, #720]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    7678:	791b      	ldrb	r3, [r3, #4]
    767a:	1c1a      	adds	r2, r3, #0
    767c:	2308      	movs	r3, #8
    767e:	4013      	ands	r3, r2
    7680:	d005      	beq.n	768e <BrakeBoardStateMachineTask+0xa1a>
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7682:	4bb2      	ldr	r3, [pc, #712]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    7684:	2219      	movs	r2, #25
    7686:	701a      	strb	r2, [r3, #0]
				done = 1; 
    7688:	1dbb      	adds	r3, r7, #6
    768a:	2201      	movs	r2, #1
    768c:	701a      	strb	r2, [r3, #0]
			}					
			//---------------------check for breakaway
			if ((breakawayRing_pressed == 0) || 
    768e:	4bb0      	ldr	r3, [pc, #704]	; (7950 <BrakeBoardStateMachineTask+0xcdc>)
    7690:	881b      	ldrh	r3, [r3, #0]
    7692:	2b00      	cmp	r3, #0
    7694:	d008      	beq.n	76a8 <BrakeBoardStateMachineTask+0xa34>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7696:	4bae      	ldr	r3, [pc, #696]	; (7950 <BrakeBoardStateMachineTask+0xcdc>)
    7698:	881b      	ldrh	r3, [r3, #0]
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
				done = 1; 
			}					
			//---------------------check for breakaway
			if ((breakawayRing_pressed == 0) || 
    769a:	b21b      	sxth	r3, r3
    769c:	2b01      	cmp	r3, #1
    769e:	d10a      	bne.n	76b6 <BrakeBoardStateMachineTask+0xa42>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    76a0:	4bac      	ldr	r3, [pc, #688]	; (7954 <BrakeBoardStateMachineTask+0xce0>)
    76a2:	881b      	ldrh	r3, [r3, #0]
    76a4:	2b00      	cmp	r3, #0
    76a6:	d106      	bne.n	76b6 <BrakeBoardStateMachineTask+0xa42>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    76a8:	4ba7      	ldr	r3, [pc, #668]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    76aa:	791b      	ldrb	r3, [r3, #4]
    76ac:	2202      	movs	r2, #2
    76ae:	4393      	bics	r3, r2
    76b0:	b2da      	uxtb	r2, r3
    76b2:	4ba5      	ldr	r3, [pc, #660]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    76b4:	711a      	strb	r2, [r3, #4]
			}								
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    76b6:	4ba7      	ldr	r3, [pc, #668]	; (7954 <BrakeBoardStateMachineTask+0xce0>)
    76b8:	881b      	ldrh	r3, [r3, #0]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d00a      	beq.n	76d4 <BrakeBoardStateMachineTask+0xa60>
    76be:	4ba4      	ldr	r3, [pc, #656]	; (7950 <BrakeBoardStateMachineTask+0xcdc>)
    76c0:	881b      	ldrh	r3, [r3, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d006      	beq.n	76d4 <BrakeBoardStateMachineTask+0xa60>
			        (breakawayHoldTimer ==0))
    76c6:	4ba4      	ldr	r3, [pc, #656]	; (7958 <BrakeBoardStateMachineTask+0xce4>)
    76c8:	881b      	ldrh	r3, [r3, #0]
			if ((breakawayRing_pressed == 0) || 
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
			}								
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    76ca:	2b00      	cmp	r3, #0
    76cc:	d102      	bne.n	76d4 <BrakeBoardStateMachineTask+0xa60>
			        (breakawayHoldTimer ==0))
			{
				breakawayHoldTimer = 1; 
    76ce:	4ba2      	ldr	r3, [pc, #648]	; (7958 <BrakeBoardStateMachineTask+0xce4>)
    76d0:	2201      	movs	r2, #1
    76d2:	801a      	strh	r2, [r3, #0]
			}
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    76d4:	4b9f      	ldr	r3, [pc, #636]	; (7954 <BrakeBoardStateMachineTask+0xce0>)
    76d6:	881b      	ldrh	r3, [r3, #0]
    76d8:	2b00      	cmp	r3, #0
    76da:	d029      	beq.n	7730 <BrakeBoardStateMachineTask+0xabc>
    76dc:	4b9c      	ldr	r3, [pc, #624]	; (7950 <BrakeBoardStateMachineTask+0xcdc>)
    76de:	881b      	ldrh	r3, [r3, #0]
    76e0:	2b00      	cmp	r3, #0
    76e2:	d025      	beq.n	7730 <BrakeBoardStateMachineTask+0xabc>
			        (breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    76e4:	4b9c      	ldr	r3, [pc, #624]	; (7958 <BrakeBoardStateMachineTask+0xce4>)
    76e6:	881b      	ldrh	r3, [r3, #0]
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
			        (breakawayHoldTimer ==0))
			{
				breakawayHoldTimer = 1; 
			}
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    76e8:	2b13      	cmp	r3, #19
    76ea:	d921      	bls.n	7730 <BrakeBoardStateMachineTask+0xabc>
			        (breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    76ec:	4b96      	ldr	r3, [pc, #600]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    76ee:	791b      	ldrb	r3, [r3, #4]
    76f0:	1c1a      	adds	r2, r3, #0
    76f2:	2302      	movs	r3, #2
    76f4:	4013      	ands	r3, r2
    76f6:	d11b      	bne.n	7730 <BrakeBoardStateMachineTask+0xabc>
			{
				done = 1;
    76f8:	1dbb      	adds	r3, r7, #6
    76fa:	2201      	movs	r2, #1
    76fc:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    76fe:	4b92      	ldr	r3, [pc, #584]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    7700:	791b      	ldrb	r3, [r3, #4]
    7702:	2202      	movs	r2, #2
    7704:	4313      	orrs	r3, r2
    7706:	b2da      	uxtb	r2, r3
    7708:	4b8f      	ldr	r3, [pc, #572]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    770a:	711a      	strb	r2, [r3, #4]
				brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    770c:	4b8f      	ldr	r3, [pc, #572]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    770e:	2211      	movs	r2, #17
    7710:	701a      	strb	r2, [r3, #0]
				MotorCW();
    7712:	4b92      	ldr	r3, [pc, #584]	; (795c <BrakeBoardStateMachineTask+0xce8>)
    7714:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;
    7716:	4b92      	ldr	r3, [pc, #584]	; (7960 <BrakeBoardStateMachineTask+0xcec>)
    7718:	220a      	movs	r2, #10
    771a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    771c:	4b91      	ldr	r3, [pc, #580]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2202      	movs	r2, #2
    7722:	4393      	bics	r3, r2
    7724:	b2da      	uxtb	r2, r3
    7726:	4b8f      	ldr	r3, [pc, #572]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    7728:	701a      	strb	r2, [r3, #0]
				thresholdmet = 0;
    772a:	4b8f      	ldr	r3, [pc, #572]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    772c:	2200      	movs	r2, #0
    772e:	701a      	strb	r2, [r3, #0]
			}			
			//---------------------check for manual
			if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    7730:	4b8e      	ldr	r3, [pc, #568]	; (796c <BrakeBoardStateMachineTask+0xcf8>)
    7732:	781b      	ldrb	r3, [r3, #0]
    7734:	1c1a      	adds	r2, r3, #0
    7736:	2301      	movs	r3, #1
    7738:	4013      	ands	r3, r2
    773a:	d106      	bne.n	774a <BrakeBoardStateMachineTask+0xad6>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    773c:	4b82      	ldr	r3, [pc, #520]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    773e:	791b      	ldrb	r3, [r3, #4]
    7740:	2210      	movs	r2, #16
    7742:	4393      	bics	r3, r2
    7744:	b2da      	uxtb	r2, r3
    7746:	4b80      	ldr	r3, [pc, #512]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    7748:	711a      	strb	r2, [r3, #4]
			}			
			if (done == 0)
    774a:	1dbb      	adds	r3, r7, #6
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	2b00      	cmp	r3, #0
    7750:	d12e      	bne.n	77b0 <BrakeBoardStateMachineTask+0xb3c>
			{
				if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    7752:	4b86      	ldr	r3, [pc, #536]	; (796c <BrakeBoardStateMachineTask+0xcf8>)
    7754:	781b      	ldrb	r3, [r3, #0]
    7756:	1c1a      	adds	r2, r3, #0
    7758:	2301      	movs	r3, #1
    775a:	4013      	ands	r3, r2
    775c:	d028      	beq.n	77b0 <BrakeBoardStateMachineTask+0xb3c>
				       ((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
    775e:	4b7a      	ldr	r3, [pc, #488]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    7760:	791b      	ldrb	r3, [r3, #4]
    7762:	1c1a      	adds	r2, r3, #0
    7764:	2310      	movs	r3, #16
    7766:	4013      	ands	r3, r2
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
			}			
			if (done == 0)
			{
				if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    7768:	d122      	bne.n	77b0 <BrakeBoardStateMachineTask+0xb3c>
				       ((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
				{
 					done = 1;
    776a:	1dbb      	adds	r3, r7, #6
    776c:	2201      	movs	r2, #1
    776e:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    7770:	4b75      	ldr	r3, [pc, #468]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    7772:	791b      	ldrb	r3, [r3, #4]
    7774:	2210      	movs	r2, #16
    7776:	4313      	orrs	r3, r2
    7778:	b2da      	uxtb	r2, r3
    777a:	4b73      	ldr	r3, [pc, #460]	; (7948 <BrakeBoardStateMachineTask+0xcd4>)
    777c:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ACTIVE_EXTEND_MANUAL;
    777e:	4b73      	ldr	r3, [pc, #460]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    7780:	2214      	movs	r2, #20
    7782:	701a      	strb	r2, [r3, #0]
					//------------v1.05 boc
					if (brakeInitiationCount <10)
    7784:	4b7a      	ldr	r3, [pc, #488]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	2b09      	cmp	r3, #9
    778a:	d805      	bhi.n	7798 <BrakeBoardStateMachineTask+0xb24>
					{
						brakeInitiationCount++;
    778c:	4b78      	ldr	r3, [pc, #480]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	3301      	adds	r3, #1
    7792:	b2da      	uxtb	r2, r3
    7794:	4b76      	ldr	r3, [pc, #472]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    7796:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc
					MotorCW();
    7798:	4b70      	ldr	r3, [pc, #448]	; (795c <BrakeBoardStateMachineTask+0xce8>)
    779a:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    779c:	4b70      	ldr	r3, [pc, #448]	; (7960 <BrakeBoardStateMachineTask+0xcec>)
    779e:	220a      	movs	r2, #10
    77a0:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    77a2:	4b70      	ldr	r3, [pc, #448]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	2202      	movs	r2, #2
    77a8:	4393      	bics	r3, r2
    77aa:	b2da      	uxtb	r2, r3
    77ac:	4b6d      	ldr	r3, [pc, #436]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    77ae:	701a      	strb	r2, [r3, #0]
				}
			}					
			//------------------------
			// check accelerometer. 
			if (done==0)
    77b0:	1dbb      	adds	r3, r7, #6
    77b2:	781b      	ldrb	r3, [r3, #0]
    77b4:	2b00      	cmp	r3, #0
    77b6:	d15e      	bne.n	7876 <BrakeBoardStateMachineTask+0xc02>
			{
				tempdiffx = MotorGetAcc(FALSE);
    77b8:	2000      	movs	r0, #0
    77ba:	4b6e      	ldr	r3, [pc, #440]	; (7974 <BrakeBoardStateMachineTask+0xd00>)
    77bc:	4798      	blx	r3
    77be:	1c03      	adds	r3, r0, #0
    77c0:	1c1a      	adds	r2, r3, #0
    77c2:	4b6d      	ldr	r3, [pc, #436]	; (7978 <BrakeBoardStateMachineTask+0xd04>)
    77c4:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    77c6:	4b6d      	ldr	r3, [pc, #436]	; (797c <BrakeBoardStateMachineTask+0xd08>)
    77c8:	7eda      	ldrb	r2, [r3, #27]
    77ca:	1cbb      	adds	r3, r7, #2
    77cc:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    77ce:	1cbb      	adds	r3, r7, #2
    77d0:	881b      	ldrh	r3, [r3, #0]
    77d2:	2b09      	cmp	r3, #9
    77d4:	d902      	bls.n	77dc <BrakeBoardStateMachineTask+0xb68>
				{
					itemp2 = 0;
    77d6:	1cbb      	adds	r3, r7, #2
    77d8:	2200      	movs	r2, #0
    77da:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    77dc:	1cba      	adds	r2, r7, #2
    77de:	1cbb      	adds	r3, r7, #2
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	1c19      	adds	r1, r3, #0
    77e4:	00c9      	lsls	r1, r1, #3
    77e6:	18cb      	adds	r3, r1, r3
    77e8:	1c19      	adds	r1, r3, #0
    77ea:	00c8      	lsls	r0, r1, #3
    77ec:	1c19      	adds	r1, r3, #0
    77ee:	1c03      	adds	r3, r0, #0
    77f0:	18cb      	adds	r3, r1, r3
    77f2:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_SIXTEENTHS_G;
    77f4:	1cbb      	adds	r3, r7, #2
    77f6:	1cba      	adds	r2, r7, #2
    77f8:	8812      	ldrh	r2, [r2, #0]
    77fa:	2180      	movs	r1, #128	; 0x80
    77fc:	00c9      	lsls	r1, r1, #3
    77fe:	1852      	adds	r2, r2, r1
    7800:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_GREATER,motorAccXBaseline)!=0) //V062 was ACC_SIXTEENTHS_G
    7802:	1cbb      	adds	r3, r7, #2
    7804:	881a      	ldrh	r2, [r3, #0]
    7806:	4b5e      	ldr	r3, [pc, #376]	; (7980 <BrakeBoardStateMachineTask+0xd0c>)
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	b212      	sxth	r2, r2
    780c:	b21b      	sxth	r3, r3
    780e:	1c10      	adds	r0, r2, #0
    7810:	2101      	movs	r1, #1
    7812:	1c1a      	adds	r2, r3, #0
    7814:	4b5b      	ldr	r3, [pc, #364]	; (7984 <BrakeBoardStateMachineTask+0xd10>)
    7816:	4798      	blx	r3
    7818:	1c03      	adds	r3, r0, #0
    781a:	2b00      	cmp	r3, #0
    781c:	d026      	beq.n	786c <BrakeBoardStateMachineTask+0xbf8>
				{
					thresholdmet++; 
    781e:	4b52      	ldr	r3, [pc, #328]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	3301      	adds	r3, #1
    7824:	b2da      	uxtb	r2, r3
    7826:	4b50      	ldr	r3, [pc, #320]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    7828:	701a      	strb	r2, [r3, #0]
//					if (thresholdmet >= MAX_THRESHOLD_NEEDED)
//					{
						done = 1; 
    782a:	1dbb      	adds	r3, r7, #6
    782c:	2201      	movs	r2, #1
    782e:	701a      	strb	r2, [r3, #0]
						thresholdmet = MAX_THRESHOLD_NEEDED;
    7830:	4b4d      	ldr	r3, [pc, #308]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    7832:	2203      	movs	r2, #3
    7834:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_EXTEND;
    7836:	4b45      	ldr	r3, [pc, #276]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    7838:	220a      	movs	r2, #10
    783a:	701a      	strb	r2, [r3, #0]
						//------------v1.05 boc
						if (brakeInitiationCount <10)
    783c:	4b4c      	ldr	r3, [pc, #304]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	2b09      	cmp	r3, #9
    7842:	d805      	bhi.n	7850 <BrakeBoardStateMachineTask+0xbdc>
						{
							brakeInitiationCount++;
    7844:	4b4a      	ldr	r3, [pc, #296]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	3301      	adds	r3, #1
    784a:	b2da      	uxtb	r2, r3
    784c:	4b48      	ldr	r3, [pc, #288]	; (7970 <BrakeBoardStateMachineTask+0xcfc>)
    784e:	701a      	strb	r2, [r3, #0]
						//--------------v1.05 eoc						
						//----------------------------------
						// EXTEND - 
						// 1. set max time to 5 seconds
						// 2. set hold max time to 15 seconds 						
						MotorCW();
    7850:	4b42      	ldr	r3, [pc, #264]	; (795c <BrakeBoardStateMachineTask+0xce8>)
    7852:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    7854:	4b42      	ldr	r3, [pc, #264]	; (7960 <BrakeBoardStateMachineTask+0xcec>)
    7856:	220a      	movs	r2, #10
    7858:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;											
    785a:	4b42      	ldr	r3, [pc, #264]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	2202      	movs	r2, #2
    7860:	4393      	bics	r3, r2
    7862:	b2da      	uxtb	r2, r3
    7864:	4b3f      	ldr	r3, [pc, #252]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    7866:	701a      	strb	r2, [r3, #0]
			else
			{
				thresholdmet = 0;				
			}

			break;
    7868:	f000 fe0f 	bl	848a <BrakeBoardStateMachineTask+0x1816>
						brakeChange &= ~BRAKECHANGE_SUPTIME;											
//					}
				}
				else
				{
					thresholdmet = 0; 
    786c:	4b3e      	ldr	r3, [pc, #248]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    786e:	2200      	movs	r2, #0
    7870:	701a      	strb	r2, [r3, #0]
			else
			{
				thresholdmet = 0;				
			}

			break;
    7872:	f000 fe0a 	bl	848a <BrakeBoardStateMachineTask+0x1816>
					thresholdmet = 0; 
				}
			} 			
			else
			{
				thresholdmet = 0;				
    7876:	4b3c      	ldr	r3, [pc, #240]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    7878:	2200      	movs	r2, #0
    787a:	701a      	strb	r2, [r3, #0]
			}

			break;
    787c:	f000 fe05 	bl	848a <BrakeBoardStateMachineTask+0x1816>
//------------------------- 
// ACTIVE EXTEND STATE 
//-------------------------		
		case BRAKESTATE_ACTIVE_EXTEND:
		{
			done = 0; 
    7880:	1dbb      	adds	r3, r7, #6
    7882:	2200      	movs	r2, #0
    7884:	701a      	strb	r2, [r3, #0]
			// you are braking .... so 
			// 1. look for 500 counts on current to stop braking. 
			// 2. when at 1/10 g then retract 
			// 3. also maximum time of braking is 15 second. 
			// 
 			if ((flimitState == 0)&&(done == 0))
    7886:	4b40      	ldr	r3, [pc, #256]	; (7988 <BrakeBoardStateMachineTask+0xd14>)
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	2b00      	cmp	r3, #0
    788c:	d139      	bne.n	7902 <BrakeBoardStateMachineTask+0xc8e>
    788e:	1dbb      	adds	r3, r7, #6
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	2b00      	cmp	r3, #0
    7894:	d135      	bne.n	7902 <BrakeBoardStateMachineTask+0xc8e>
			{
				done = 1; 
    7896:	1dbb      	adds	r3, r7, #6
    7898:	2201      	movs	r2, #1
    789a:	701a      	strb	r2, [r3, #0]
				MotorOff();
    789c:	4b3b      	ldr	r3, [pc, #236]	; (798c <BrakeBoardStateMachineTask+0xd18>)
    789e:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    78a0:	2001      	movs	r0, #1
    78a2:	4b3b      	ldr	r3, [pc, #236]	; (7990 <BrakeBoardStateMachineTask+0xd1c>)
    78a4:	4798      	blx	r3
    78a6:	1c03      	adds	r3, r0, #0
    78a8:	2b00      	cmp	r3, #0
    78aa:	d10d      	bne.n	78c8 <BrakeBoardStateMachineTask+0xc54>
				{
					brakeState = BRAKESTATE_ERROR;
    78ac:	4b27      	ldr	r3, [pc, #156]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    78ae:	2208      	movs	r2, #8
    78b0:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    78b2:	4b2b      	ldr	r3, [pc, #172]	; (7960 <BrakeBoardStateMachineTask+0xcec>)
    78b4:	2200      	movs	r2, #0
    78b6:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    78b8:	4b2a      	ldr	r3, [pc, #168]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    78ba:	781b      	ldrb	r3, [r3, #0]
    78bc:	2202      	movs	r2, #2
    78be:	4393      	bics	r3, r2
    78c0:	b2da      	uxtb	r2, r3
    78c2:	4b28      	ldr	r3, [pc, #160]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    78c4:	701a      	strb	r2, [r3, #0]
    78c6:	e01c      	b.n	7902 <BrakeBoardStateMachineTask+0xc8e>
				}
				else
				{
					thresholdmet = 0; 
    78c8:	4b27      	ldr	r3, [pc, #156]	; (7968 <BrakeBoardStateMachineTask+0xcf4>)
    78ca:	2200      	movs	r2, #0
    78cc:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ACTIVE_HOLD; 
    78ce:	4b1f      	ldr	r3, [pc, #124]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    78d0:	220d      	movs	r2, #13
    78d2:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_DITHER;
    78d4:	4b23      	ldr	r3, [pc, #140]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	2210      	movs	r2, #16
    78da:	4393      	bics	r3, r2
    78dc:	b2da      	uxtb	r2, r3
    78de:	4b21      	ldr	r3, [pc, #132]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    78e0:	701a      	strb	r2, [r3, #0]
					ditherTimer = 0;  
    78e2:	4b2c      	ldr	r3, [pc, #176]	; (7994 <BrakeBoardStateMachineTask+0xd20>)
    78e4:	2200      	movs	r2, #0
    78e6:	801a      	strh	r2, [r3, #0]
					if (encoderFlip != 0)
    78e8:	4b2b      	ldr	r3, [pc, #172]	; (7998 <BrakeBoardStateMachineTask+0xd24>)
    78ea:	781b      	ldrb	r3, [r3, #0]
    78ec:	2b00      	cmp	r3, #0
    78ee:	d004      	beq.n	78fa <BrakeBoardStateMachineTask+0xc86>
					{
						encoderFillOffset = MAX_BUILDTABLE;
    78f0:	4b2a      	ldr	r3, [pc, #168]	; (799c <BrakeBoardStateMachineTask+0xd28>)
    78f2:	2280      	movs	r2, #128	; 0x80
    78f4:	00d2      	lsls	r2, r2, #3
    78f6:	801a      	strh	r2, [r3, #0]
    78f8:	e003      	b.n	7902 <BrakeBoardStateMachineTask+0xc8e>
					}
					else
					{
						encoderFillOffset = encoderTableOffset; 
    78fa:	4b29      	ldr	r3, [pc, #164]	; (79a0 <BrakeBoardStateMachineTask+0xd2c>)
    78fc:	881a      	ldrh	r2, [r3, #0]
    78fe:	4b27      	ldr	r3, [pc, #156]	; (799c <BrakeBoardStateMachineTask+0xd28>)
    7900:	801a      	strh	r2, [r3, #0]
					}
				}
				
			}	
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    7902:	4b18      	ldr	r3, [pc, #96]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	1c1a      	adds	r2, r3, #0
    7908:	2302      	movs	r3, #2
    790a:	4013      	ands	r3, r2
    790c:	d059      	beq.n	79c2 <BrakeBoardStateMachineTask+0xd4e>
    790e:	1dbb      	adds	r3, r7, #6
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	2b00      	cmp	r3, #0
    7914:	d155      	bne.n	79c2 <BrakeBoardStateMachineTask+0xd4e>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7916:	4b13      	ldr	r3, [pc, #76]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    7918:	781b      	ldrb	r3, [r3, #0]
    791a:	2202      	movs	r2, #2
    791c:	4393      	bics	r3, r2
    791e:	b2da      	uxtb	r2, r3
    7920:	4b10      	ldr	r3, [pc, #64]	; (7964 <BrakeBoardStateMachineTask+0xcf0>)
    7922:	701a      	strb	r2, [r3, #0]
				MotorOff();
    7924:	4b19      	ldr	r3, [pc, #100]	; (798c <BrakeBoardStateMachineTask+0xd18>)
    7926:	4798      	blx	r3
				done = 1; 
    7928:	1dbb      	adds	r3, r7, #6
    792a:	2201      	movs	r2, #1
    792c:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    792e:	2002      	movs	r0, #2
    7930:	4b17      	ldr	r3, [pc, #92]	; (7990 <BrakeBoardStateMachineTask+0xd1c>)
    7932:	4798      	blx	r3
    7934:	1c03      	adds	r3, r0, #0
    7936:	2b00      	cmp	r3, #0
    7938:	d134      	bne.n	79a4 <BrakeBoardStateMachineTask+0xd30>
				{
					brakeState = BRAKESTATE_ERROR;
    793a:	4b04      	ldr	r3, [pc, #16]	; (794c <BrakeBoardStateMachineTask+0xcd8>)
    793c:	2208      	movs	r2, #8
    793e:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7940:	4b07      	ldr	r3, [pc, #28]	; (7960 <BrakeBoardStateMachineTask+0xcec>)
    7942:	2200      	movs	r2, #0
    7944:	701a      	strb	r2, [r3, #0]
    7946:	e035      	b.n	79b4 <BrakeBoardStateMachineTask+0xd40>
    7948:	20003660 	.word	0x20003660
    794c:	20002eaa 	.word	0x20002eaa
    7950:	20003036 	.word	0x20003036
    7954:	2000303c 	.word	0x2000303c
    7958:	20002ed0 	.word	0x20002ed0
    795c:	00008ed1 	.word	0x00008ed1
    7960:	2000368e 	.word	0x2000368e
    7964:	20002ecc 	.word	0x20002ecc
    7968:	200004ae 	.word	0x200004ae
    796c:	20002efc 	.word	0x20002efc
    7970:	200004af 	.word	0x200004af
    7974:	000086b9 	.word	0x000086b9
    7978:	20002eb0 	.word	0x20002eb0
    797c:	20002f98 	.word	0x20002f98
    7980:	20002ed2 	.word	0x20002ed2
    7984:	00005b7d 	.word	0x00005b7d
    7988:	2000303e 	.word	0x2000303e
    798c:	00008d51 	.word	0x00008d51
    7990:	000068a1 	.word	0x000068a1
    7994:	20002eb8 	.word	0x20002eb8
    7998:	200004aa 	.word	0x200004aa
    799c:	200004a6 	.word	0x200004a6
    79a0:	20001e8e 	.word	0x20001e8e
				}
				else
				{
 					MotorCCW();
    79a4:	4bb4      	ldr	r3, [pc, #720]	; (7c78 <BrakeBoardStateMachineTask+0x1004>)
    79a6:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    79a8:	4bb4      	ldr	r3, [pc, #720]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    79aa:	220a      	movs	r2, #10
    79ac:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    79ae:	4bb4      	ldr	r3, [pc, #720]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    79b0:	2217      	movs	r2, #23
    79b2:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    79b4:	4bb3      	ldr	r3, [pc, #716]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	2202      	movs	r2, #2
    79ba:	4393      	bics	r3, r2
    79bc:	b2da      	uxtb	r2, r3
    79be:	4bb1      	ldr	r3, [pc, #708]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    79c0:	701a      	strb	r2, [r3, #0]
			}			
			if ((motorRunTime == 0)&&(done == 0))
    79c2:	4bb1      	ldr	r3, [pc, #708]	; (7c88 <BrakeBoardStateMachineTask+0x1014>)
    79c4:	881b      	ldrh	r3, [r3, #0]
    79c6:	2b00      	cmp	r3, #0
    79c8:	d000      	beq.n	79cc <BrakeBoardStateMachineTask+0xd58>
    79ca:	e07e      	b.n	7aca <BrakeBoardStateMachineTask+0xe56>
    79cc:	1dbb      	adds	r3, r7, #6
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	2b00      	cmp	r3, #0
    79d2:	d000      	beq.n	79d6 <BrakeBoardStateMachineTask+0xd62>
    79d4:	e079      	b.n	7aca <BrakeBoardStateMachineTask+0xe56>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    79d6:	2001      	movs	r0, #1
    79d8:	4bac      	ldr	r3, [pc, #688]	; (7c8c <BrakeBoardStateMachineTask+0x1018>)
    79da:	4798      	blx	r3
    79dc:	1c03      	adds	r3, r0, #0
    79de:	1c1a      	adds	r2, r3, #0
    79e0:	4bab      	ldr	r3, [pc, #684]	; (7c90 <BrakeBoardStateMachineTask+0x101c>)
    79e2:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculated();
    79e4:	4bab      	ldr	r3, [pc, #684]	; (7c94 <BrakeBoardStateMachineTask+0x1020>)
    79e6:	4798      	blx	r3
    79e8:	1c03      	adds	r3, r0, #0
    79ea:	1c1a      	adds	r2, r3, #0
    79ec:	4baa      	ldr	r3, [pc, #680]	; (7c98 <BrakeBoardStateMachineTask+0x1024>)
    79ee:	801a      	strh	r2, [r3, #0]
				//---------------v1.05 
				if (table0.Item.Hybrid == FALSE)
    79f0:	4baa      	ldr	r3, [pc, #680]	; (7c9c <BrakeBoardStateMachineTask+0x1028>)
    79f2:	7e5b      	ldrb	r3, [r3, #25]
    79f4:	2b00      	cmp	r3, #0
    79f6:	d119      	bne.n	7a2c <BrakeBoardStateMachineTask+0xdb8>
				{								
					if (brakeCycleCount <2)
    79f8:	4ba9      	ldr	r3, [pc, #676]	; (7ca0 <BrakeBoardStateMachineTask+0x102c>)
    79fa:	781b      	ldrb	r3, [r3, #0]
    79fc:	2b01      	cmp	r3, #1
    79fe:	d806      	bhi.n	7a0e <BrakeBoardStateMachineTask+0xd9a>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    7a00:	2002      	movs	r0, #2
    7a02:	4ba8      	ldr	r3, [pc, #672]	; (7ca4 <BrakeBoardStateMachineTask+0x1030>)
    7a04:	4798      	blx	r3
    7a06:	1c03      	adds	r3, r0, #0
    7a08:	1c1a      	adds	r2, r3, #0
    7a0a:	4ba3      	ldr	r3, [pc, #652]	; (7c98 <BrakeBoardStateMachineTask+0x1024>)
    7a0c:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    7a0e:	4ba4      	ldr	r3, [pc, #656]	; (7ca0 <BrakeBoardStateMachineTask+0x102c>)
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	2b02      	cmp	r3, #2
    7a14:	d10a      	bne.n	7a2c <BrakeBoardStateMachineTask+0xdb8>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    7a16:	4ba1      	ldr	r3, [pc, #644]	; (7c9c <BrakeBoardStateMachineTask+0x1028>)
    7a18:	7d9b      	ldrb	r3, [r3, #22]
    7a1a:	085b      	lsrs	r3, r3, #1
    7a1c:	b2db      	uxtb	r3, r3
    7a1e:	1c18      	adds	r0, r3, #0
    7a20:	4ba0      	ldr	r3, [pc, #640]	; (7ca4 <BrakeBoardStateMachineTask+0x1030>)
    7a22:	4798      	blx	r3
    7a24:	1c03      	adds	r3, r0, #0
    7a26:	1c1a      	adds	r2, r3, #0
    7a28:	4b9b      	ldr	r3, [pc, #620]	; (7c98 <BrakeBoardStateMachineTask+0x1024>)
    7a2a:	801a      	strh	r2, [r3, #0]
					}					
				}
				//--------------------v1.05
				if (currentRead > newCurrentThreshold)   
    7a2c:	4b98      	ldr	r3, [pc, #608]	; (7c90 <BrakeBoardStateMachineTask+0x101c>)
    7a2e:	881a      	ldrh	r2, [r3, #0]
    7a30:	4b99      	ldr	r3, [pc, #612]	; (7c98 <BrakeBoardStateMachineTask+0x1024>)
    7a32:	881b      	ldrh	r3, [r3, #0]
    7a34:	429a      	cmp	r2, r3
    7a36:	d948      	bls.n	7aca <BrakeBoardStateMachineTask+0xe56>
				{
					MotorOff();
    7a38:	4b9b      	ldr	r3, [pc, #620]	; (7ca8 <BrakeBoardStateMachineTask+0x1034>)
    7a3a:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    7a3c:	4b98      	ldr	r3, [pc, #608]	; (7ca0 <BrakeBoardStateMachineTask+0x102c>)
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	2b09      	cmp	r3, #9
    7a42:	d805      	bhi.n	7a50 <BrakeBoardStateMachineTask+0xddc>
					{
						brakeCycleCount++;
    7a44:	4b96      	ldr	r3, [pc, #600]	; (7ca0 <BrakeBoardStateMachineTask+0x102c>)
    7a46:	781b      	ldrb	r3, [r3, #0]
    7a48:	3301      	adds	r3, #1
    7a4a:	b2da      	uxtb	r2, r3
    7a4c:	4b94      	ldr	r3, [pc, #592]	; (7ca0 <BrakeBoardStateMachineTask+0x102c>)
    7a4e:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7a50:	2002      	movs	r0, #2
    7a52:	4b96      	ldr	r3, [pc, #600]	; (7cac <BrakeBoardStateMachineTask+0x1038>)
    7a54:	4798      	blx	r3
    7a56:	1c03      	adds	r3, r0, #0
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d110      	bne.n	7a7e <BrakeBoardStateMachineTask+0xe0a>
					{
						done = 1; 
    7a5c:	1dbb      	adds	r3, r7, #6
    7a5e:	2201      	movs	r2, #1
    7a60:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR;
    7a62:	4b87      	ldr	r3, [pc, #540]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7a64:	2208      	movs	r2, #8
    7a66:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    7a68:	4b84      	ldr	r3, [pc, #528]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7a6a:	2200      	movs	r2, #0
    7a6c:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7a6e:	4b85      	ldr	r3, [pc, #532]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	2202      	movs	r2, #2
    7a74:	4393      	bics	r3, r2
    7a76:	b2da      	uxtb	r2, r3
    7a78:	4b82      	ldr	r3, [pc, #520]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7a7a:	701a      	strb	r2, [r3, #0]
    7a7c:	e025      	b.n	7aca <BrakeBoardStateMachineTask+0xe56>
					}
					else
					{
						done =1; 
    7a7e:	1dbb      	adds	r3, r7, #6
    7a80:	2201      	movs	r2, #1
    7a82:	701a      	strb	r2, [r3, #0]
						thresholdmet = 0;
    7a84:	4b8a      	ldr	r3, [pc, #552]	; (7cb0 <BrakeBoardStateMachineTask+0x103c>)
    7a86:	2200      	movs	r2, #0
    7a88:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_HOLD;  		
    7a8a:	4b7d      	ldr	r3, [pc, #500]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7a8c:	220d      	movs	r2, #13
    7a8e:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    7a90:	4b7c      	ldr	r3, [pc, #496]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	2210      	movs	r2, #16
    7a96:	4393      	bics	r3, r2
    7a98:	b2da      	uxtb	r2, r3
    7a9a:	4b7a      	ldr	r3, [pc, #488]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7a9c:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;  	
    7a9e:	4b85      	ldr	r3, [pc, #532]	; (7cb4 <BrakeBoardStateMachineTask+0x1040>)
    7aa0:	2200      	movs	r2, #0
    7aa2:	801a      	strh	r2, [r3, #0]
						holdG = instantGain; 	
    7aa4:	4b84      	ldr	r3, [pc, #528]	; (7cb8 <BrakeBoardStateMachineTask+0x1044>)
    7aa6:	881a      	ldrh	r2, [r3, #0]
    7aa8:	4b84      	ldr	r3, [pc, #528]	; (7cbc <BrakeBoardStateMachineTask+0x1048>)
    7aaa:	801a      	strh	r2, [r3, #0]
						if (encoderFlip != 0)
    7aac:	4b84      	ldr	r3, [pc, #528]	; (7cc0 <BrakeBoardStateMachineTask+0x104c>)
    7aae:	781b      	ldrb	r3, [r3, #0]
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d004      	beq.n	7abe <BrakeBoardStateMachineTask+0xe4a>
						{
							encoderFillOffset = MAX_BUILDTABLE;
    7ab4:	4b83      	ldr	r3, [pc, #524]	; (7cc4 <BrakeBoardStateMachineTask+0x1050>)
    7ab6:	2280      	movs	r2, #128	; 0x80
    7ab8:	00d2      	lsls	r2, r2, #3
    7aba:	801a      	strh	r2, [r3, #0]
    7abc:	e005      	b.n	7aca <BrakeBoardStateMachineTask+0xe56>
						}
						else
						{
							encoderFillOffset = encoderTableOffset;
    7abe:	4b82      	ldr	r3, [pc, #520]	; (7cc8 <BrakeBoardStateMachineTask+0x1054>)
    7ac0:	881a      	ldrh	r2, [r3, #0]
    7ac2:	4b80      	ldr	r3, [pc, #512]	; (7cc4 <BrakeBoardStateMachineTask+0x1050>)
    7ac4:	801a      	strh	r2, [r3, #0]
						thresholdmet = 0; 
					}			
//				} 						
			}
#endif			
			break;
    7ac6:	f000 fce0 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    7aca:	f000 fcde 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}				
		case BRAKESTATE_ACTIVE_HOLD:
		{
			done = 0;
    7ace:	1dbb      	adds	r3, r7, #6
    7ad0:	2200      	movs	r2, #0
    7ad2:	701a      	strb	r2, [r3, #0]
			// you are braking .... so
			// 1. look for 500 counts on current to stop braking.
			// 2. when at 1/10 g then retract
			// 3. also maximum time of braking is 15 second.
			//
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    7ad4:	4b6b      	ldr	r3, [pc, #428]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	1c1a      	adds	r2, r3, #0
    7ada:	2302      	movs	r3, #2
    7adc:	4013      	ands	r3, r2
    7ade:	d02b      	beq.n	7b38 <BrakeBoardStateMachineTask+0xec4>
    7ae0:	1dbb      	adds	r3, r7, #6
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d127      	bne.n	7b38 <BrakeBoardStateMachineTask+0xec4>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7ae8:	4b66      	ldr	r3, [pc, #408]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7aea:	781b      	ldrb	r3, [r3, #0]
    7aec:	2202      	movs	r2, #2
    7aee:	4393      	bics	r3, r2
    7af0:	b2da      	uxtb	r2, r3
    7af2:	4b64      	ldr	r3, [pc, #400]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7af4:	701a      	strb	r2, [r3, #0]
				MotorOff();
    7af6:	4b6c      	ldr	r3, [pc, #432]	; (7ca8 <BrakeBoardStateMachineTask+0x1034>)
    7af8:	4798      	blx	r3
				done = 1; 
    7afa:	1dbb      	adds	r3, r7, #6
    7afc:	2201      	movs	r2, #1
    7afe:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7b00:	2002      	movs	r0, #2
    7b02:	4b6a      	ldr	r3, [pc, #424]	; (7cac <BrakeBoardStateMachineTask+0x1038>)
    7b04:	4798      	blx	r3
    7b06:	1c03      	adds	r3, r0, #0
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d106      	bne.n	7b1a <BrakeBoardStateMachineTask+0xea6>
				{
					brakeState = BRAKESTATE_ERROR;
    7b0c:	4b5c      	ldr	r3, [pc, #368]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7b0e:	2208      	movs	r2, #8
    7b10:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7b12:	4b5a      	ldr	r3, [pc, #360]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7b14:	2200      	movs	r2, #0
    7b16:	701a      	strb	r2, [r3, #0]
    7b18:	e007      	b.n	7b2a <BrakeBoardStateMachineTask+0xeb6>
				}
				else
				{
 					MotorCCW();
    7b1a:	4b57      	ldr	r3, [pc, #348]	; (7c78 <BrakeBoardStateMachineTask+0x1004>)
    7b1c:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7b1e:	4b57      	ldr	r3, [pc, #348]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7b20:	220a      	movs	r2, #10
    7b22:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    7b24:	4b56      	ldr	r3, [pc, #344]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7b26:	2217      	movs	r2, #23
    7b28:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7b2a:	4b56      	ldr	r3, [pc, #344]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	2202      	movs	r2, #2
    7b30:	4393      	bics	r3, r2
    7b32:	b2da      	uxtb	r2, r3
    7b34:	4b53      	ldr	r3, [pc, #332]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7b36:	701a      	strb	r2, [r3, #0]
			}			
			if (done == 0)
    7b38:	1dbb      	adds	r3, r7, #6
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d152      	bne.n	7be6 <BrakeBoardStateMachineTask+0xf72>
			{
				tempdiffx = MotorGetAcc(TRUE);				
    7b40:	2001      	movs	r0, #1
    7b42:	4b62      	ldr	r3, [pc, #392]	; (7ccc <BrakeBoardStateMachineTask+0x1058>)
    7b44:	4798      	blx	r3
    7b46:	1c03      	adds	r3, r0, #0
    7b48:	1c1a      	adds	r2, r3, #0
    7b4a:	4b61      	ldr	r3, [pc, #388]	; (7cd0 <BrakeBoardStateMachineTask+0x105c>)
    7b4c:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    7b4e:	4b53      	ldr	r3, [pc, #332]	; (7c9c <BrakeBoardStateMachineTask+0x1028>)
    7b50:	7eda      	ldrb	r2, [r3, #27]
    7b52:	1cbb      	adds	r3, r7, #2
    7b54:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    7b56:	1cbb      	adds	r3, r7, #2
    7b58:	881b      	ldrh	r3, [r3, #0]
    7b5a:	2b09      	cmp	r3, #9
    7b5c:	d902      	bls.n	7b64 <BrakeBoardStateMachineTask+0xef0>
				{
					itemp2 = 0;
    7b5e:	1cbb      	adds	r3, r7, #2
    7b60:	2200      	movs	r2, #0
    7b62:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    7b64:	1cba      	adds	r2, r7, #2
    7b66:	1cbb      	adds	r3, r7, #2
    7b68:	881b      	ldrh	r3, [r3, #0]
    7b6a:	1c19      	adds	r1, r3, #0
    7b6c:	00c9      	lsls	r1, r1, #3
    7b6e:	18cb      	adds	r3, r1, r3
    7b70:	1c19      	adds	r1, r3, #0
    7b72:	00c8      	lsls	r0, r1, #3
    7b74:	1c19      	adds	r1, r3, #0
    7b76:	1c03      	adds	r3, r0, #0
    7b78:	18cb      	adds	r3, r1, r3
    7b7a:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_TWENTYITH_G;
    7b7c:	1cbb      	adds	r3, r7, #2
    7b7e:	1cba      	adds	r2, r7, #2
    7b80:	8812      	ldrh	r2, [r2, #0]
    7b82:	4854      	ldr	r0, [pc, #336]	; (7cd4 <BrakeBoardStateMachineTask+0x1060>)
    7b84:	1812      	adds	r2, r2, r0
    7b86:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_LESS,motorAccXBaseline)!=0)
    7b88:	1cbb      	adds	r3, r7, #2
    7b8a:	881a      	ldrh	r2, [r3, #0]
    7b8c:	4b52      	ldr	r3, [pc, #328]	; (7cd8 <BrakeBoardStateMachineTask+0x1064>)
    7b8e:	881b      	ldrh	r3, [r3, #0]
    7b90:	b212      	sxth	r2, r2
    7b92:	b21b      	sxth	r3, r3
    7b94:	1c10      	adds	r0, r2, #0
    7b96:	2102      	movs	r1, #2
    7b98:	1c1a      	adds	r2, r3, #0
    7b9a:	4b50      	ldr	r3, [pc, #320]	; (7cdc <BrakeBoardStateMachineTask+0x1068>)
    7b9c:	4798      	blx	r3
    7b9e:	1c03      	adds	r3, r0, #0
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d01b      	beq.n	7bdc <BrakeBoardStateMachineTask+0xf68>
				{
					thresholdmet++; 
    7ba4:	4b42      	ldr	r3, [pc, #264]	; (7cb0 <BrakeBoardStateMachineTask+0x103c>)
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	3301      	adds	r3, #1
    7baa:	b2da      	uxtb	r2, r3
    7bac:	4b40      	ldr	r3, [pc, #256]	; (7cb0 <BrakeBoardStateMachineTask+0x103c>)
    7bae:	701a      	strb	r2, [r3, #0]
 					done = 1; 
    7bb0:	1dbb      	adds	r3, r7, #6
    7bb2:	2201      	movs	r2, #1
    7bb4:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    7bb6:	4b3e      	ldr	r3, [pc, #248]	; (7cb0 <BrakeBoardStateMachineTask+0x103c>)
    7bb8:	2200      	movs	r2, #0
    7bba:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    7bbc:	4b2e      	ldr	r3, [pc, #184]	; (7c78 <BrakeBoardStateMachineTask+0x1004>)
    7bbe:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;   
    7bc0:	4b2e      	ldr	r3, [pc, #184]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7bc2:	220a      	movs	r2, #10
    7bc4:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT;  
    7bc6:	4b2e      	ldr	r3, [pc, #184]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7bc8:	2210      	movs	r2, #16
    7bca:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;				
    7bcc:	4b2d      	ldr	r3, [pc, #180]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	2202      	movs	r2, #2
    7bd2:	4393      	bics	r3, r2
    7bd4:	b2da      	uxtb	r2, r3
    7bd6:	4b2b      	ldr	r3, [pc, #172]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7bd8:	701a      	strb	r2, [r3, #0]
    7bda:	e004      	b.n	7be6 <BrakeBoardStateMachineTask+0xf72>
				}
				else
				{
					thresholdmet = 0; 
    7bdc:	4b34      	ldr	r3, [pc, #208]	; (7cb0 <BrakeBoardStateMachineTask+0x103c>)
    7bde:	2200      	movs	r2, #0
    7be0:	701a      	strb	r2, [r3, #0]
						MotorExtendMore(); 								
					} 
				}				
			}
#endif			
			break;
    7be2:	f000 fc52 	bl	848a <BrakeBoardStateMachineTask+0x1816>
    7be6:	f000 fc50 	bl	848a <BrakeBoardStateMachineTask+0x1816>
		}		
		case BRAKESTATE_ACTIVE_RETRACT:
		{
			done = 0;
    7bea:	1dbb      	adds	r3, r7, #6
    7bec:	2200      	movs	r2, #0
    7bee:	701a      	strb	r2, [r3, #0]
 			if ((hlimitState == 0)&&(done == 0))
    7bf0:	4b3b      	ldr	r3, [pc, #236]	; (7ce0 <BrakeBoardStateMachineTask+0x106c>)
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	d11b      	bne.n	7c30 <BrakeBoardStateMachineTask+0xfbc>
    7bf8:	1dbb      	adds	r3, r7, #6
    7bfa:	781b      	ldrb	r3, [r3, #0]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d117      	bne.n	7c30 <BrakeBoardStateMachineTask+0xfbc>
			{
				done = 1; 
    7c00:	1dbb      	adds	r3, r7, #6
    7c02:	2201      	movs	r2, #1
    7c04:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    7c06:	2000      	movs	r0, #0
    7c08:	4b28      	ldr	r3, [pc, #160]	; (7cac <BrakeBoardStateMachineTask+0x1038>)
    7c0a:	4798      	blx	r3
    7c0c:	1c03      	adds	r3, r0, #0
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d106      	bne.n	7c20 <BrakeBoardStateMachineTask+0xfac>
				{
					brakeState = BRAKESTATE_ERROR;
    7c12:	4b1b      	ldr	r3, [pc, #108]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7c14:	2208      	movs	r2, #8
    7c16:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7c18:	4b18      	ldr	r3, [pc, #96]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7c1a:	2200      	movs	r2, #0
    7c1c:	701a      	strb	r2, [r3, #0]
    7c1e:	e007      	b.n	7c30 <BrakeBoardStateMachineTask+0xfbc>
				}
				else
				{
//					MotorNeedNewBaseline();
					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7c20:	4b17      	ldr	r3, [pc, #92]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7c22:	220b      	movs	r2, #11
    7c24:	701a      	strb	r2, [r3, #0]
					MotorOff();
    7c26:	4b20      	ldr	r3, [pc, #128]	; (7ca8 <BrakeBoardStateMachineTask+0x1034>)
    7c28:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIMESHORT;
    7c2a:	4b14      	ldr	r3, [pc, #80]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7c2c:	2201      	movs	r2, #1
    7c2e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    7c30:	4b14      	ldr	r3, [pc, #80]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	1c1a      	adds	r2, r3, #0
    7c36:	2302      	movs	r3, #2
    7c38:	4013      	ands	r3, r2
    7c3a:	d05b      	beq.n	7cf4 <BrakeBoardStateMachineTask+0x1080>
    7c3c:	1dbb      	adds	r3, r7, #6
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	2b00      	cmp	r3, #0
    7c42:	d157      	bne.n	7cf4 <BrakeBoardStateMachineTask+0x1080>
			{
				done = 1; 
    7c44:	1dbb      	adds	r3, r7, #6
    7c46:	2201      	movs	r2, #1
    7c48:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7c4a:	4b0e      	ldr	r3, [pc, #56]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	2202      	movs	r2, #2
    7c50:	4393      	bics	r3, r2
    7c52:	b2da      	uxtb	r2, r3
    7c54:	4b0b      	ldr	r3, [pc, #44]	; (7c84 <BrakeBoardStateMachineTask+0x1010>)
    7c56:	701a      	strb	r2, [r3, #0]
				MotorOff();
    7c58:	4b13      	ldr	r3, [pc, #76]	; (7ca8 <BrakeBoardStateMachineTask+0x1034>)
    7c5a:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7c5c:	2002      	movs	r0, #2
    7c5e:	4b13      	ldr	r3, [pc, #76]	; (7cac <BrakeBoardStateMachineTask+0x1038>)
    7c60:	4798      	blx	r3
    7c62:	1c03      	adds	r3, r0, #0
    7c64:	2b00      	cmp	r3, #0
    7c66:	d13d      	bne.n	7ce4 <BrakeBoardStateMachineTask+0x1070>
				{
					brakeState = BRAKESTATE_ERROR;
    7c68:	4b05      	ldr	r3, [pc, #20]	; (7c80 <BrakeBoardStateMachineTask+0x100c>)
    7c6a:	2208      	movs	r2, #8
    7c6c:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7c6e:	4b03      	ldr	r3, [pc, #12]	; (7c7c <BrakeBoardStateMachineTask+0x1008>)
    7c70:	2200      	movs	r2, #0
    7c72:	701a      	strb	r2, [r3, #0]
    7c74:	e03e      	b.n	7cf4 <BrakeBoardStateMachineTask+0x1080>
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	00008e41 	.word	0x00008e41
    7c7c:	2000368e 	.word	0x2000368e
    7c80:	20002eaa 	.word	0x20002eaa
    7c84:	20002ecc 	.word	0x20002ecc
    7c88:	20002e9e 	.word	0x20002e9e
    7c8c:	0000a5a9 	.word	0x0000a5a9
    7c90:	20002e94 	.word	0x20002e94
    7c94:	000086d9 	.word	0x000086d9
    7c98:	20002e98 	.word	0x20002e98
    7c9c:	20002f98 	.word	0x20002f98
    7ca0:	200004b0 	.word	0x200004b0
    7ca4:	00008961 	.word	0x00008961
    7ca8:	00008d51 	.word	0x00008d51
    7cac:	000068a1 	.word	0x000068a1
    7cb0:	200004ae 	.word	0x200004ae
    7cb4:	20002eb8 	.word	0x20002eb8
    7cb8:	20002ed4 	.word	0x20002ed4
    7cbc:	20002eae 	.word	0x20002eae
    7cc0:	200004aa 	.word	0x200004aa
    7cc4:	200004a6 	.word	0x200004a6
    7cc8:	20001e8e 	.word	0x20001e8e
    7ccc:	000086b9 	.word	0x000086b9
    7cd0:	20002eb0 	.word	0x20002eb0
    7cd4:	00000333 	.word	0x00000333
    7cd8:	20002ed2 	.word	0x20002ed2
    7cdc:	00005b7d 	.word	0x00005b7d
    7ce0:	20003034 	.word	0x20003034
				}
				else
				{
					MotorCCW();
    7ce4:	4bba      	ldr	r3, [pc, #744]	; (7fd0 <BrakeBoardStateMachineTask+0x135c>)
    7ce6:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7ce8:	4bba      	ldr	r3, [pc, #744]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7cea:	220a      	movs	r2, #10
    7cec:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    7cee:	4bba      	ldr	r3, [pc, #744]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7cf0:	2217      	movs	r2, #23
    7cf2:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((done == 0)&&(action == NONE)&&((brakeChange & BRAKECHANGE_DITHER)!=0))
    7cf4:	1dbb      	adds	r3, r7, #6
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d000      	beq.n	7cfe <BrakeBoardStateMachineTask+0x108a>
    7cfc:	e079      	b.n	7df2 <BrakeBoardStateMachineTask+0x117e>
    7cfe:	4bb7      	ldr	r3, [pc, #732]	; (7fdc <BrakeBoardStateMachineTask+0x1368>)
    7d00:	781b      	ldrb	r3, [r3, #0]
    7d02:	2b00      	cmp	r3, #0
    7d04:	d000      	beq.n	7d08 <BrakeBoardStateMachineTask+0x1094>
    7d06:	e074      	b.n	7df2 <BrakeBoardStateMachineTask+0x117e>
    7d08:	4bb5      	ldr	r3, [pc, #724]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	1c1a      	adds	r2, r3, #0
    7d0e:	2310      	movs	r3, #16
    7d10:	4013      	ands	r3, r2
    7d12:	d100      	bne.n	7d16 <BrakeBoardStateMachineTask+0x10a2>
    7d14:	e06d      	b.n	7df2 <BrakeBoardStateMachineTask+0x117e>
			{
				brakeChange &= ~BRAKECHANGE_DITHER; 
    7d16:	4bb2      	ldr	r3, [pc, #712]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7d18:	781b      	ldrb	r3, [r3, #0]
    7d1a:	2210      	movs	r2, #16
    7d1c:	4393      	bics	r3, r2
    7d1e:	b2da      	uxtb	r2, r3
    7d20:	4baf      	ldr	r3, [pc, #700]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7d22:	701a      	strb	r2, [r3, #0]
				//--------------------------
				// at 100msec check gain value 
				newG = MotorGetAcc(TRUE);
    7d24:	2001      	movs	r0, #1
    7d26:	4baf      	ldr	r3, [pc, #700]	; (7fe4 <BrakeBoardStateMachineTask+0x1370>)
    7d28:	4798      	blx	r3
    7d2a:	1c03      	adds	r3, r0, #0
    7d2c:	b29a      	uxth	r2, r3
    7d2e:	4bae      	ldr	r3, [pc, #696]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7d30:	801a      	strh	r2, [r3, #0]
				if (newG < holdG)
    7d32:	4bad      	ldr	r3, [pc, #692]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7d34:	881a      	ldrh	r2, [r3, #0]
    7d36:	4bad      	ldr	r3, [pc, #692]	; (7fec <BrakeBoardStateMachineTask+0x1378>)
    7d38:	881b      	ldrh	r3, [r3, #0]
    7d3a:	429a      	cmp	r2, r3
    7d3c:	d239      	bcs.n	7db2 <BrakeBoardStateMachineTask+0x113e>
				{
					diffG = (holdG - newG); 
    7d3e:	4bab      	ldr	r3, [pc, #684]	; (7fec <BrakeBoardStateMachineTask+0x1378>)
    7d40:	881a      	ldrh	r2, [r3, #0]
    7d42:	4ba9      	ldr	r3, [pc, #676]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7d44:	881b      	ldrh	r3, [r3, #0]
    7d46:	1ad3      	subs	r3, r2, r3
    7d48:	b29a      	uxth	r2, r3
    7d4a:	4ba9      	ldr	r3, [pc, #676]	; (7ff0 <BrakeBoardStateMachineTask+0x137c>)
    7d4c:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    7d4e:	4ba8      	ldr	r3, [pc, #672]	; (7ff0 <BrakeBoardStateMachineTask+0x137c>)
    7d50:	881a      	ldrh	r2, [r3, #0]
    7d52:	4ba8      	ldr	r3, [pc, #672]	; (7ff4 <BrakeBoardStateMachineTask+0x1380>)
    7d54:	429a      	cmp	r2, r3
    7d56:	d94c      	bls.n	7df2 <BrakeBoardStateMachineTask+0x117e>
					{
						//---------------------
						// Calculate the current from the equation for the g 
						matchCurrent = CurrentMotorCalculatedForG(newG);
    7d58:	4ba3      	ldr	r3, [pc, #652]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7d5a:	881b      	ldrh	r3, [r3, #0]
    7d5c:	1c18      	adds	r0, r3, #0
    7d5e:	4ba6      	ldr	r3, [pc, #664]	; (7ff8 <BrakeBoardStateMachineTask+0x1384>)
    7d60:	4798      	blx	r3
    7d62:	1c03      	adds	r3, r0, #0
    7d64:	1c1a      	adds	r2, r3, #0
    7d66:	4ba5      	ldr	r3, [pc, #660]	; (7ffc <BrakeBoardStateMachineTask+0x1388>)
    7d68:	801a      	strh	r2, [r3, #0]
						itemp = MotorFindEncoderMatch(matchCurrent);
    7d6a:	4ba4      	ldr	r3, [pc, #656]	; (7ffc <BrakeBoardStateMachineTask+0x1388>)
    7d6c:	881b      	ldrh	r3, [r3, #0]
    7d6e:	1c18      	adds	r0, r3, #0
    7d70:	4ba3      	ldr	r3, [pc, #652]	; (8000 <BrakeBoardStateMachineTask+0x138c>)
    7d72:	4798      	blx	r3
    7d74:	1c03      	adds	r3, r0, #0
    7d76:	1c1a      	adds	r2, r3, #0
    7d78:	1c3b      	adds	r3, r7, #0
    7d7a:	701a      	strb	r2, [r3, #0]
						if (itemp > MAX_ENCODERCOUNT_BACK)
						{
							itemp = MAX_ENCODERCOUNT_BACK; 
						}
						encoderCountBackTotal += itemp; 
    7d7c:	1c3b      	adds	r3, r7, #0
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	b29a      	uxth	r2, r3
    7d82:	4ba0      	ldr	r3, [pc, #640]	; (8004 <BrakeBoardStateMachineTask+0x1390>)
    7d84:	881b      	ldrh	r3, [r3, #0]
    7d86:	18d3      	adds	r3, r2, r3
    7d88:	b29a      	uxth	r2, r3
    7d8a:	4b9e      	ldr	r3, [pc, #632]	; (8004 <BrakeBoardStateMachineTask+0x1390>)
    7d8c:	801a      	strh	r2, [r3, #0]
						//--------------------------
						if (encoderCountBackTotal <1000)
    7d8e:	4b9d      	ldr	r3, [pc, #628]	; (8004 <BrakeBoardStateMachineTask+0x1390>)
    7d90:	881a      	ldrh	r2, [r3, #0]
    7d92:	4b9d      	ldr	r3, [pc, #628]	; (8008 <BrakeBoardStateMachineTask+0x1394>)
    7d94:	429a      	cmp	r2, r3
    7d96:	d82c      	bhi.n	7df2 <BrakeBoardStateMachineTask+0x117e>
						{
							encoderCountBack = itemp; 
    7d98:	1c3b      	adds	r3, r7, #0
    7d9a:	781b      	ldrb	r3, [r3, #0]
    7d9c:	b29a      	uxth	r2, r3
    7d9e:	4b9b      	ldr	r3, [pc, #620]	; (800c <BrakeBoardStateMachineTask+0x1398>)
    7da0:	801a      	strh	r2, [r3, #0]
							RetractByEncoderCount();	
    7da2:	4b9b      	ldr	r3, [pc, #620]	; (8010 <BrakeBoardStateMachineTask+0x139c>)
    7da4:	4798      	blx	r3
							holdG = newG; 	
    7da6:	4b90      	ldr	r3, [pc, #576]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7da8:	881a      	ldrh	r2, [r3, #0]
    7daa:	4b90      	ldr	r3, [pc, #576]	; (7fec <BrakeBoardStateMachineTask+0x1378>)
    7dac:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
 									
					} 
				}							
			}  			
			break;
    7dae:	f000 fb6c 	bl	848a <BrakeBoardStateMachineTask+0x1816>
						}
					}
				}			
				else
				{
					diffG = (newG - holdG);
    7db2:	4b8d      	ldr	r3, [pc, #564]	; (7fe8 <BrakeBoardStateMachineTask+0x1374>)
    7db4:	881a      	ldrh	r2, [r3, #0]
    7db6:	4b8d      	ldr	r3, [pc, #564]	; (7fec <BrakeBoardStateMachineTask+0x1378>)
    7db8:	881b      	ldrh	r3, [r3, #0]
    7dba:	1ad3      	subs	r3, r2, r3
    7dbc:	b29a      	uxth	r2, r3
    7dbe:	4b8c      	ldr	r3, [pc, #560]	; (7ff0 <BrakeBoardStateMachineTask+0x137c>)
    7dc0:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    7dc2:	4b8b      	ldr	r3, [pc, #556]	; (7ff0 <BrakeBoardStateMachineTask+0x137c>)
    7dc4:	881a      	ldrh	r2, [r3, #0]
    7dc6:	4b8b      	ldr	r3, [pc, #556]	; (7ff4 <BrakeBoardStateMachineTask+0x1380>)
    7dc8:	429a      	cmp	r2, r3
    7dca:	d912      	bls.n	7df2 <BrakeBoardStateMachineTask+0x117e>
					{
						//---------------Extend
						thresholdmet = 0;
    7dcc:	4b91      	ldr	r3, [pc, #580]	; (8014 <BrakeBoardStateMachineTask+0x13a0>)
    7dce:	2200      	movs	r2, #0
    7dd0:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_EXTEND;
    7dd2:	4b81      	ldr	r3, [pc, #516]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7dd4:	220a      	movs	r2, #10
    7dd6:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    7dd8:	4b81      	ldr	r3, [pc, #516]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	2210      	movs	r2, #16
    7dde:	4393      	bics	r3, r2
    7de0:	b2da      	uxtb	r2, r3
    7de2:	4b7f      	ldr	r3, [pc, #508]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7de4:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;
    7de6:	4b8c      	ldr	r3, [pc, #560]	; (8018 <BrakeBoardStateMachineTask+0x13a4>)
    7de8:	2200      	movs	r2, #0
    7dea:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
    7dec:	4b8b      	ldr	r3, [pc, #556]	; (801c <BrakeBoardStateMachineTask+0x13a8>)
    7dee:	4798      	blx	r3
 									
					} 
				}							
			}  			
			break;
    7df0:	e34b      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    7df2:	e34a      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
		case BRAKESTATE_END_RETRACT_TIMEOUT:
		case BRAKESTATE_END_RETRACT:
		case BRAKESTATE_END_RETRACT_BREAKAWAY:
		case BRAKESTATE_END_RETRACT_MANUAL:
		{
			breakawayHoldTimer = 0; 
    7df4:	4b8a      	ldr	r3, [pc, #552]	; (8020 <BrakeBoardStateMachineTask+0x13ac>)
    7df6:	2200      	movs	r2, #0
    7df8:	801a      	strh	r2, [r3, #0]
 			if (hlimitState == 0)
    7dfa:	4b8a      	ldr	r3, [pc, #552]	; (8024 <BrakeBoardStateMachineTask+0x13b0>)
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	2b00      	cmp	r3, #0
    7e00:	d130      	bne.n	7e64 <BrakeBoardStateMachineTask+0x11f0>
			{
				MotorOff();
    7e02:	4b89      	ldr	r3, [pc, #548]	; (8028 <BrakeBoardStateMachineTask+0x13b4>)
    7e04:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    7e06:	2000      	movs	r0, #0
    7e08:	4b88      	ldr	r3, [pc, #544]	; (802c <BrakeBoardStateMachineTask+0x13b8>)
    7e0a:	4798      	blx	r3
    7e0c:	1c03      	adds	r3, r0, #0
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d106      	bne.n	7e20 <BrakeBoardStateMachineTask+0x11ac>
				{
					brakeState = BRAKESTATE_ERROR;
    7e12:	4b71      	ldr	r3, [pc, #452]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7e14:	2208      	movs	r2, #8
    7e16:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7e18:	4b6e      	ldr	r3, [pc, #440]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7e1a:	2200      	movs	r2, #0
    7e1c:	701a      	strb	r2, [r3, #0]
    7e1e:	e019      	b.n	7e54 <BrakeBoardStateMachineTask+0x11e0>
				}
				else
				{
					brakeSupTime = BRAKESUPTIME_SHORT;
    7e20:	4b6c      	ldr	r3, [pc, #432]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7e22:	2202      	movs	r2, #2
    7e24:	701a      	strb	r2, [r3, #0]
					if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    7e26:	4b6c      	ldr	r3, [pc, #432]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	2b17      	cmp	r3, #23
    7e2c:	d102      	bne.n	7e34 <BrakeBoardStateMachineTask+0x11c0>
					{
						brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    7e2e:	4b69      	ldr	r3, [pc, #420]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7e30:	220f      	movs	r2, #15
    7e32:	701a      	strb	r2, [r3, #0]
					}
//					MotorNeedNewBaseline();
					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7e34:	4b68      	ldr	r3, [pc, #416]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7e36:	220b      	movs	r2, #11
    7e38:	701a      	strb	r2, [r3, #0]
					
					if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    7e3a:	4b7d      	ldr	r3, [pc, #500]	; (8030 <BrakeBoardStateMachineTask+0x13bc>)
    7e3c:	781b      	ldrb	r3, [r3, #0]
    7e3e:	1c1a      	adds	r2, r3, #0
    7e40:	2301      	movs	r3, #1
    7e42:	4013      	ands	r3, r2
    7e44:	d106      	bne.n	7e54 <BrakeBoardStateMachineTask+0x11e0>
					{
						brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7e46:	4b7b      	ldr	r3, [pc, #492]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7e48:	791b      	ldrb	r3, [r3, #4]
    7e4a:	2210      	movs	r2, #16
    7e4c:	4393      	bics	r3, r2
    7e4e:	b2da      	uxtb	r2, r3
    7e50:	4b78      	ldr	r3, [pc, #480]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7e52:	711a      	strb	r2, [r3, #4]
					}
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7e54:	4b62      	ldr	r3, [pc, #392]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7e56:	781b      	ldrb	r3, [r3, #0]
    7e58:	2202      	movs	r2, #2
    7e5a:	4393      	bics	r3, r2
    7e5c:	b2da      	uxtb	r2, r3
    7e5e:	4b60      	ldr	r3, [pc, #384]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7e60:	701a      	strb	r2, [r3, #0]
    7e62:	e03d      	b.n	7ee0 <BrakeBoardStateMachineTask+0x126c>
			}
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7e64:	4b5e      	ldr	r3, [pc, #376]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7e66:	781b      	ldrb	r3, [r3, #0]
    7e68:	1c1a      	adds	r2, r3, #0
    7e6a:	2302      	movs	r3, #2
    7e6c:	4013      	ands	r3, r2
    7e6e:	d037      	beq.n	7ee0 <BrakeBoardStateMachineTask+0x126c>
				{
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7e70:	4b5b      	ldr	r3, [pc, #364]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	2202      	movs	r2, #2
    7e76:	4393      	bics	r3, r2
    7e78:	b2da      	uxtb	r2, r3
    7e7a:	4b59      	ldr	r3, [pc, #356]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7e7c:	701a      	strb	r2, [r3, #0]
					MotorOff();
    7e7e:	4b6a      	ldr	r3, [pc, #424]	; (8028 <BrakeBoardStateMachineTask+0x13b4>)
    7e80:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7e82:	2002      	movs	r0, #2
    7e84:	4b69      	ldr	r3, [pc, #420]	; (802c <BrakeBoardStateMachineTask+0x13b8>)
    7e86:	4798      	blx	r3
    7e88:	1c03      	adds	r3, r0, #0
    7e8a:	2b00      	cmp	r3, #0
    7e8c:	d106      	bne.n	7e9c <BrakeBoardStateMachineTask+0x1228>
					{
						brakeState = BRAKESTATE_ERROR;
    7e8e:	4b52      	ldr	r3, [pc, #328]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7e90:	2208      	movs	r2, #8
    7e92:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    7e94:	4b4f      	ldr	r3, [pc, #316]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7e96:	2200      	movs	r2, #0
    7e98:	701a      	strb	r2, [r3, #0]
    7e9a:	e019      	b.n	7ed0 <BrakeBoardStateMachineTask+0x125c>
					}
					else
					{
						brakeSupTime = BRAKESUPTIME_SHORT;
    7e9c:	4b4d      	ldr	r3, [pc, #308]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7e9e:	2202      	movs	r2, #2
    7ea0:	701a      	strb	r2, [r3, #0]
						if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    7ea2:	4b4d      	ldr	r3, [pc, #308]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	2b17      	cmp	r3, #23
    7ea8:	d102      	bne.n	7eb0 <BrakeBoardStateMachineTask+0x123c>
						{
							brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    7eaa:	4b4a      	ldr	r3, [pc, #296]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7eac:	220f      	movs	r2, #15
    7eae:	701a      	strb	r2, [r3, #0]
						}		
//						MotorNeedNewBaseline();				
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7eb0:	4b49      	ldr	r3, [pc, #292]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7eb2:	220b      	movs	r2, #11
    7eb4:	701a      	strb	r2, [r3, #0]
						if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    7eb6:	4b5e      	ldr	r3, [pc, #376]	; (8030 <BrakeBoardStateMachineTask+0x13bc>)
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	1c1a      	adds	r2, r3, #0
    7ebc:	2301      	movs	r3, #1
    7ebe:	4013      	ands	r3, r2
    7ec0:	d106      	bne.n	7ed0 <BrakeBoardStateMachineTask+0x125c>
						{
							brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7ec2:	4b5c      	ldr	r3, [pc, #368]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7ec4:	791b      	ldrb	r3, [r3, #4]
    7ec6:	2210      	movs	r2, #16
    7ec8:	4393      	bics	r3, r2
    7eca:	b2da      	uxtb	r2, r3
    7ecc:	4b59      	ldr	r3, [pc, #356]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7ece:	711a      	strb	r2, [r3, #4]
						}
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7ed0:	4b43      	ldr	r3, [pc, #268]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	2202      	movs	r2, #2
    7ed6:	4393      	bics	r3, r2
    7ed8:	b2da      	uxtb	r2, r3
    7eda:	4b41      	ldr	r3, [pc, #260]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7edc:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    7ede:	e2d4      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    7ee0:	e2d3      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
		}		
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    7ee2:	4b54      	ldr	r3, [pc, #336]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7ee4:	791b      	ldrb	r3, [r3, #4]
    7ee6:	2202      	movs	r2, #2
    7ee8:	4313      	orrs	r3, r2
    7eea:	b2da      	uxtb	r2, r3
    7eec:	4b51      	ldr	r3, [pc, #324]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7eee:	711a      	strb	r2, [r3, #4]
			if ((breakawayRing_pressed == 0) || 
    7ef0:	4b51      	ldr	r3, [pc, #324]	; (8038 <BrakeBoardStateMachineTask+0x13c4>)
    7ef2:	881b      	ldrh	r3, [r3, #0]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d008      	beq.n	7f0a <BrakeBoardStateMachineTask+0x1296>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7ef8:	4b4f      	ldr	r3, [pc, #316]	; (8038 <BrakeBoardStateMachineTask+0x13c4>)
    7efa:	881b      	ldrh	r3, [r3, #0]
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			if ((breakawayRing_pressed == 0) || 
    7efc:	b21b      	sxth	r3, r3
    7efe:	2b01      	cmp	r3, #1
    7f00:	d11c      	bne.n	7f3c <BrakeBoardStateMachineTask+0x12c8>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7f02:	4b4e      	ldr	r3, [pc, #312]	; (803c <BrakeBoardStateMachineTask+0x13c8>)
    7f04:	881b      	ldrh	r3, [r3, #0]
    7f06:	2b00      	cmp	r3, #0
    7f08:	d118      	bne.n	7f3c <BrakeBoardStateMachineTask+0x12c8>
			{			
					done = 1;
    7f0a:	1dbb      	adds	r3, r7, #6
    7f0c:	2201      	movs	r2, #1
    7f0e:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    7f10:	4b2f      	ldr	r3, [pc, #188]	; (7fd0 <BrakeBoardStateMachineTask+0x135c>)
    7f12:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7f14:	4b2f      	ldr	r3, [pc, #188]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7f16:	220a      	movs	r2, #10
    7f18:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    7f1a:	4b2f      	ldr	r3, [pc, #188]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7f1c:	2213      	movs	r2, #19
    7f1e:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7f20:	4b2f      	ldr	r3, [pc, #188]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f22:	781b      	ldrb	r3, [r3, #0]
    7f24:	2202      	movs	r2, #2
    7f26:	4393      	bics	r3, r2
    7f28:	b2da      	uxtb	r2, r3
    7f2a:	4b2d      	ldr	r3, [pc, #180]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f2c:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7f2e:	4b41      	ldr	r3, [pc, #260]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7f30:	791b      	ldrb	r3, [r3, #4]
    7f32:	2202      	movs	r2, #2
    7f34:	4393      	bics	r3, r2
    7f36:	b2da      	uxtb	r2, r3
    7f38:	4b3e      	ldr	r3, [pc, #248]	; (8034 <BrakeBoardStateMachineTask+0x13c0>)
    7f3a:	711a      	strb	r2, [r3, #4]
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    7f3c:	4b28      	ldr	r3, [pc, #160]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f3e:	781b      	ldrb	r3, [r3, #0]
    7f40:	1c1a      	adds	r2, r3, #0
    7f42:	2302      	movs	r3, #2
    7f44:	4013      	ands	r3, r2
    7f46:	d02b      	beq.n	7fa0 <BrakeBoardStateMachineTask+0x132c>
    7f48:	1dbb      	adds	r3, r7, #6
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d127      	bne.n	7fa0 <BrakeBoardStateMachineTask+0x132c>
			{
				done = 1;
    7f50:	1dbb      	adds	r3, r7, #6
    7f52:	2201      	movs	r2, #1
    7f54:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7f56:	4b22      	ldr	r3, [pc, #136]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f58:	781b      	ldrb	r3, [r3, #0]
    7f5a:	2202      	movs	r2, #2
    7f5c:	4393      	bics	r3, r2
    7f5e:	b2da      	uxtb	r2, r3
    7f60:	4b1f      	ldr	r3, [pc, #124]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f62:	701a      	strb	r2, [r3, #0]
				MotorOff();
    7f64:	4b30      	ldr	r3, [pc, #192]	; (8028 <BrakeBoardStateMachineTask+0x13b4>)
    7f66:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7f68:	2002      	movs	r0, #2
    7f6a:	4b30      	ldr	r3, [pc, #192]	; (802c <BrakeBoardStateMachineTask+0x13b8>)
    7f6c:	4798      	blx	r3
    7f6e:	1c03      	adds	r3, r0, #0
    7f70:	2b00      	cmp	r3, #0
    7f72:	d106      	bne.n	7f82 <BrakeBoardStateMachineTask+0x130e>
				{
					brakeState = BRAKESTATE_ERROR;
    7f74:	4b18      	ldr	r3, [pc, #96]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7f76:	2208      	movs	r2, #8
    7f78:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7f7a:	4b16      	ldr	r3, [pc, #88]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7f7c:	2200      	movs	r2, #0
    7f7e:	701a      	strb	r2, [r3, #0]
    7f80:	e00e      	b.n	7fa0 <BrakeBoardStateMachineTask+0x132c>
				}
				else
				{
					MotorCCW();
    7f82:	4b13      	ldr	r3, [pc, #76]	; (7fd0 <BrakeBoardStateMachineTask+0x135c>)
    7f84:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7f86:	4b13      	ldr	r3, [pc, #76]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7f88:	220a      	movs	r2, #10
    7f8a:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    7f8c:	4b12      	ldr	r3, [pc, #72]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7f8e:	2213      	movs	r2, #19
    7f90:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7f92:	4b13      	ldr	r3, [pc, #76]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	2202      	movs	r2, #2
    7f98:	4393      	bics	r3, r2
    7f9a:	b2da      	uxtb	r2, r3
    7f9c:	4b10      	ldr	r3, [pc, #64]	; (7fe0 <BrakeBoardStateMachineTask+0x136c>)
    7f9e:	701a      	strb	r2, [r3, #0]
				}
			}						
 			if ((flimitState == 0)&&(done == 0))
    7fa0:	4b27      	ldr	r3, [pc, #156]	; (8040 <BrakeBoardStateMachineTask+0x13cc>)
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d159      	bne.n	805c <BrakeBoardStateMachineTask+0x13e8>
    7fa8:	1dbb      	adds	r3, r7, #6
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	2b00      	cmp	r3, #0
    7fae:	d155      	bne.n	805c <BrakeBoardStateMachineTask+0x13e8>
			{
				done = 1; 
    7fb0:	1dbb      	adds	r3, r7, #6
    7fb2:	2201      	movs	r2, #1
    7fb4:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    7fb6:	2001      	movs	r0, #1
    7fb8:	4b1c      	ldr	r3, [pc, #112]	; (802c <BrakeBoardStateMachineTask+0x13b8>)
    7fba:	4798      	blx	r3
    7fbc:	1c03      	adds	r3, r0, #0
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	d140      	bne.n	8044 <BrakeBoardStateMachineTask+0x13d0>
				{
					brakeState = BRAKESTATE_ERROR;
    7fc2:	4b05      	ldr	r3, [pc, #20]	; (7fd8 <BrakeBoardStateMachineTask+0x1364>)
    7fc4:	2208      	movs	r2, #8
    7fc6:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7fc8:	4b02      	ldr	r3, [pc, #8]	; (7fd4 <BrakeBoardStateMachineTask+0x1360>)
    7fca:	2200      	movs	r2, #0
    7fcc:	701a      	strb	r2, [r3, #0]
    7fce:	e03e      	b.n	804e <BrakeBoardStateMachineTask+0x13da>
    7fd0:	00008e41 	.word	0x00008e41
    7fd4:	2000368e 	.word	0x2000368e
    7fd8:	20002eaa 	.word	0x20002eaa
    7fdc:	200004ab 	.word	0x200004ab
    7fe0:	20002ecc 	.word	0x20002ecc
    7fe4:	000086b9 	.word	0x000086b9
    7fe8:	20002eb2 	.word	0x20002eb2
    7fec:	20002eae 	.word	0x20002eae
    7ff0:	20002ea6 	.word	0x20002ea6
    7ff4:	00000666 	.word	0x00000666
    7ff8:	00008829 	.word	0x00008829
    7ffc:	20002ea4 	.word	0x20002ea4
    8000:	0000641d 	.word	0x0000641d
    8004:	20002ec0 	.word	0x20002ec0
    8008:	000003e7 	.word	0x000003e7
    800c:	20002ec4 	.word	0x20002ec4
    8010:	00008ddd 	.word	0x00008ddd
    8014:	200004ae 	.word	0x200004ae
    8018:	20002eb8 	.word	0x20002eb8
    801c:	00008f75 	.word	0x00008f75
    8020:	20002ed0 	.word	0x20002ed0
    8024:	20003034 	.word	0x20003034
    8028:	00008d51 	.word	0x00008d51
    802c:	000068a1 	.word	0x000068a1
    8030:	20002efc 	.word	0x20002efc
    8034:	20003660 	.word	0x20003660
    8038:	20003036 	.word	0x20003036
    803c:	2000303c 	.word	0x2000303c
    8040:	2000303e 	.word	0x2000303e
				}
				else
				{
					MotorOff();
    8044:	4bcc      	ldr	r3, [pc, #816]	; (8378 <BrakeBoardStateMachineTask+0x1704>)
    8046:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY; 
    8048:	4bcc      	ldr	r3, [pc, #816]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    804a:	2212      	movs	r2, #18
    804c:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    804e:	4bcc      	ldr	r3, [pc, #816]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	2202      	movs	r2, #2
    8054:	4393      	bics	r3, r2
    8056:	b2da      	uxtb	r2, r3
    8058:	4bc9      	ldr	r3, [pc, #804]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    805a:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    805c:	4bc9      	ldr	r3, [pc, #804]	; (8384 <BrakeBoardStateMachineTask+0x1710>)
    805e:	881b      	ldrh	r3, [r3, #0]
    8060:	2b00      	cmp	r3, #0
    8062:	d130      	bne.n	80c6 <BrakeBoardStateMachineTask+0x1452>
    8064:	1dbb      	adds	r3, r7, #6
    8066:	781b      	ldrb	r3, [r3, #0]
    8068:	2b00      	cmp	r3, #0
    806a:	d12c      	bne.n	80c6 <BrakeBoardStateMachineTask+0x1452>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    806c:	2001      	movs	r0, #1
    806e:	4bc6      	ldr	r3, [pc, #792]	; (8388 <BrakeBoardStateMachineTask+0x1714>)
    8070:	4798      	blx	r3
    8072:	1c03      	adds	r3, r0, #0
    8074:	1c1a      	adds	r2, r3, #0
    8076:	4bc5      	ldr	r3, [pc, #788]	; (838c <BrakeBoardStateMachineTask+0x1718>)
    8078:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedBreakaway();
    807a:	4bc5      	ldr	r3, [pc, #788]	; (8390 <BrakeBoardStateMachineTask+0x171c>)
    807c:	4798      	blx	r3
    807e:	1c03      	adds	r3, r0, #0
    8080:	1c1a      	adds	r2, r3, #0
    8082:	4bc4      	ldr	r3, [pc, #784]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    8084:	801a      	strh	r2, [r3, #0]
				if (currentRead > newCurrentThreshold)   
    8086:	4bc1      	ldr	r3, [pc, #772]	; (838c <BrakeBoardStateMachineTask+0x1718>)
    8088:	881a      	ldrh	r2, [r3, #0]
    808a:	4bc2      	ldr	r3, [pc, #776]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    808c:	881b      	ldrh	r3, [r3, #0]
    808e:	429a      	cmp	r2, r3
    8090:	d919      	bls.n	80c6 <BrakeBoardStateMachineTask+0x1452>
				{
					MotorOff();
    8092:	4bb9      	ldr	r3, [pc, #740]	; (8378 <BrakeBoardStateMachineTask+0x1704>)
    8094:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8096:	2002      	movs	r0, #2
    8098:	4bbf      	ldr	r3, [pc, #764]	; (8398 <BrakeBoardStateMachineTask+0x1724>)
    809a:	4798      	blx	r3
    809c:	1c03      	adds	r3, r0, #0
    809e:	2b00      	cmp	r3, #0
    80a0:	d106      	bne.n	80b0 <BrakeBoardStateMachineTask+0x143c>
					{
						brakeState = BRAKESTATE_ERROR;
    80a2:	4bb6      	ldr	r3, [pc, #728]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    80a4:	2208      	movs	r2, #8
    80a6:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    80a8:	4bbc      	ldr	r3, [pc, #752]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    80aa:	2200      	movs	r2, #0
    80ac:	701a      	strb	r2, [r3, #0]
    80ae:	e002      	b.n	80b6 <BrakeBoardStateMachineTask+0x1442>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY;  			
    80b0:	4bb2      	ldr	r3, [pc, #712]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    80b2:	2212      	movs	r2, #18
    80b4:	701a      	strb	r2, [r3, #0]
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    80b6:	4bb2      	ldr	r3, [pc, #712]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    80b8:	781b      	ldrb	r3, [r3, #0]
    80ba:	2202      	movs	r2, #2
    80bc:	4393      	bics	r3, r2
    80be:	b2da      	uxtb	r2, r3
    80c0:	4baf      	ldr	r3, [pc, #700]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    80c2:	701a      	strb	r2, [r3, #0]
				}
			}			
			break;
    80c4:	e1e1      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    80c6:	e1e0      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
		}
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			done = 0;
    80c8:	1dbb      	adds	r3, r7, #6
    80ca:	2200      	movs	r2, #0
    80cc:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    80ce:	4bb4      	ldr	r3, [pc, #720]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    80d0:	791b      	ldrb	r3, [r3, #4]
    80d2:	2202      	movs	r2, #2
    80d4:	4313      	orrs	r3, r2
    80d6:	b2da      	uxtb	r2, r3
    80d8:	4bb1      	ldr	r3, [pc, #708]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    80da:	711a      	strb	r2, [r3, #4]
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    80dc:	4bb1      	ldr	r3, [pc, #708]	; (83a4 <BrakeBoardStateMachineTask+0x1730>)
    80de:	881b      	ldrh	r3, [r3, #0]
    80e0:	2b00      	cmp	r3, #0
    80e2:	d008      	beq.n	80f6 <BrakeBoardStateMachineTask+0x1482>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    80e4:	4baf      	ldr	r3, [pc, #700]	; (83a4 <BrakeBoardStateMachineTask+0x1730>)
    80e6:	881b      	ldrh	r3, [r3, #0]
		{
			done = 0;
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    80e8:	b21b      	sxth	r3, r3
    80ea:	2b01      	cmp	r3, #1
    80ec:	d11c      	bne.n	8128 <BrakeBoardStateMachineTask+0x14b4>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    80ee:	4bae      	ldr	r3, [pc, #696]	; (83a8 <BrakeBoardStateMachineTask+0x1734>)
    80f0:	881b      	ldrh	r3, [r3, #0]
    80f2:	2b00      	cmp	r3, #0
    80f4:	d118      	bne.n	8128 <BrakeBoardStateMachineTask+0x14b4>
			{		
				//----------------------------
				// Hold until cleared by: break-away signal 
				// returning to normal, set-up button pressed 
				// on brake unit or cleared with remote.  	
				done = 1;
    80f6:	1dbb      	adds	r3, r7, #6
    80f8:	2201      	movs	r2, #1
    80fa:	701a      	strb	r2, [r3, #0]
				MotorCCW();
    80fc:	4bab      	ldr	r3, [pc, #684]	; (83ac <BrakeBoardStateMachineTask+0x1738>)
    80fe:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;
    8100:	4ba6      	ldr	r3, [pc, #664]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    8102:	220a      	movs	r2, #10
    8104:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8106:	4b9d      	ldr	r3, [pc, #628]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8108:	2213      	movs	r2, #19
    810a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    810c:	4b9c      	ldr	r3, [pc, #624]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    810e:	781b      	ldrb	r3, [r3, #0]
    8110:	2202      	movs	r2, #2
    8112:	4393      	bics	r3, r2
    8114:	b2da      	uxtb	r2, r3
    8116:	4b9a      	ldr	r3, [pc, #616]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8118:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    811a:	4ba1      	ldr	r3, [pc, #644]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    811c:	791b      	ldrb	r3, [r3, #4]
    811e:	2202      	movs	r2, #2
    8120:	4393      	bics	r3, r2
    8122:	b2da      	uxtb	r2, r3
    8124:	4b9e      	ldr	r3, [pc, #632]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    8126:	711a      	strb	r2, [r3, #4]
			}
			if (done == 0)
    8128:	1dbb      	adds	r3, r7, #6
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	2b00      	cmp	r3, #0
    812e:	d122      	bne.n	8176 <BrakeBoardStateMachineTask+0x1502>
			{
				if ((button & KEY_SETUP)!=0)
    8130:	1c7b      	adds	r3, r7, #1
    8132:	781a      	ldrb	r2, [r3, #0]
    8134:	2301      	movs	r3, #1
    8136:	4013      	ands	r3, r2
    8138:	d01d      	beq.n	8176 <BrakeBoardStateMachineTask+0x1502>
				{
					if (setup_pressed == 1)
    813a:	4b9d      	ldr	r3, [pc, #628]	; (83b0 <BrakeBoardStateMachineTask+0x173c>)
    813c:	881b      	ldrh	r3, [r3, #0]
    813e:	b21b      	sxth	r3, r3
    8140:	2b01      	cmp	r3, #1
    8142:	d118      	bne.n	8176 <BrakeBoardStateMachineTask+0x1502>
					{
						done = 1;
    8144:	1dbb      	adds	r3, r7, #6
    8146:	2201      	movs	r2, #1
    8148:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    814a:	4b8d      	ldr	r3, [pc, #564]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	2208      	movs	r2, #8
    8150:	4393      	bics	r3, r2
    8152:	b2da      	uxtb	r2, r3
    8154:	4b8a      	ldr	r3, [pc, #552]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8156:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    8158:	4b94      	ldr	r3, [pc, #592]	; (83ac <BrakeBoardStateMachineTask+0x1738>)
    815a:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    815c:	4b8f      	ldr	r3, [pc, #572]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    815e:	220a      	movs	r2, #10
    8160:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8162:	4b86      	ldr	r3, [pc, #536]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8164:	2213      	movs	r2, #19
    8166:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8168:	4b85      	ldr	r3, [pc, #532]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	2202      	movs	r2, #2
    816e:	4393      	bics	r3, r2
    8170:	b2da      	uxtb	r2, r3
    8172:	4b83      	ldr	r3, [pc, #524]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8174:	701a      	strb	r2, [r3, #0]
					}
				}	
			}		
			if (done == 0)
    8176:	1dbb      	adds	r3, r7, #6
    8178:	781b      	ldrb	r3, [r3, #0]
    817a:	2b00      	cmp	r3, #0
    817c:	d11f      	bne.n	81be <BrakeBoardStateMachineTask+0x154a>
			{
				if ((remoteStatus & REMOTE_CLEARBREAKAWAY)!=0)
    817e:	4b8d      	ldr	r3, [pc, #564]	; (83b4 <BrakeBoardStateMachineTask+0x1740>)
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	1c1a      	adds	r2, r3, #0
    8184:	2302      	movs	r3, #2
    8186:	4013      	ands	r3, r2
    8188:	d019      	beq.n	81be <BrakeBoardStateMachineTask+0x154a>
				{
						done = 1;
    818a:	1dbb      	adds	r3, r7, #6
    818c:	2201      	movs	r2, #1
    818e:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    8190:	4b7b      	ldr	r3, [pc, #492]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8192:	781b      	ldrb	r3, [r3, #0]
    8194:	2208      	movs	r2, #8
    8196:	4393      	bics	r3, r2
    8198:	b2da      	uxtb	r2, r3
    819a:	4b79      	ldr	r3, [pc, #484]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    819c:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    819e:	4b83      	ldr	r3, [pc, #524]	; (83ac <BrakeBoardStateMachineTask+0x1738>)
    81a0:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    81a2:	4b7e      	ldr	r3, [pc, #504]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    81a4:	220a      	movs	r2, #10
    81a6:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    81a8:	4b74      	ldr	r3, [pc, #464]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    81aa:	2213      	movs	r2, #19
    81ac:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    81ae:	4b74      	ldr	r3, [pc, #464]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    81b0:	781b      	ldrb	r3, [r3, #0]
    81b2:	2202      	movs	r2, #2
    81b4:	4393      	bics	r3, r2
    81b6:	b2da      	uxtb	r2, r3
    81b8:	4b71      	ldr	r3, [pc, #452]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    81ba:	701a      	strb	r2, [r3, #0]
				}	
			}									
			break;
    81bc:	e165      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    81be:	e164      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
	//--------------------------------
	// MANUAL STATES. 
	//--------------------------------		
		case BRAKESTATE_ACTIVE_EXTEND_MANUAL:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    81c0:	4b6f      	ldr	r3, [pc, #444]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	1c1a      	adds	r2, r3, #0
    81c6:	2302      	movs	r3, #2
    81c8:	4013      	ands	r3, r2
    81ca:	d02b      	beq.n	8224 <BrakeBoardStateMachineTask+0x15b0>
    81cc:	1dbb      	adds	r3, r7, #6
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	2b00      	cmp	r3, #0
    81d2:	d127      	bne.n	8224 <BrakeBoardStateMachineTask+0x15b0>
			{
				done = 1;
    81d4:	1dbb      	adds	r3, r7, #6
    81d6:	2201      	movs	r2, #1
    81d8:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    81da:	4b69      	ldr	r3, [pc, #420]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	2202      	movs	r2, #2
    81e0:	4393      	bics	r3, r2
    81e2:	b2da      	uxtb	r2, r3
    81e4:	4b66      	ldr	r3, [pc, #408]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    81e6:	701a      	strb	r2, [r3, #0]
				MotorOff();
    81e8:	4b63      	ldr	r3, [pc, #396]	; (8378 <BrakeBoardStateMachineTask+0x1704>)
    81ea:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    81ec:	2002      	movs	r0, #2
    81ee:	4b6a      	ldr	r3, [pc, #424]	; (8398 <BrakeBoardStateMachineTask+0x1724>)
    81f0:	4798      	blx	r3
    81f2:	1c03      	adds	r3, r0, #0
    81f4:	2b00      	cmp	r3, #0
    81f6:	d106      	bne.n	8206 <BrakeBoardStateMachineTask+0x1592>
				{
					brakeState = BRAKESTATE_ERROR;
    81f8:	4b60      	ldr	r3, [pc, #384]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    81fa:	2208      	movs	r2, #8
    81fc:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    81fe:	4b67      	ldr	r3, [pc, #412]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    8200:	2200      	movs	r2, #0
    8202:	701a      	strb	r2, [r3, #0]
    8204:	e00e      	b.n	8224 <BrakeBoardStateMachineTask+0x15b0>
				}
				else
				{
					MotorCCW();
    8206:	4b69      	ldr	r3, [pc, #420]	; (83ac <BrakeBoardStateMachineTask+0x1738>)
    8208:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    820a:	4b64      	ldr	r3, [pc, #400]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    820c:	220a      	movs	r2, #10
    820e:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8210:	4b5a      	ldr	r3, [pc, #360]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8212:	2216      	movs	r2, #22
    8214:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8216:	4b5a      	ldr	r3, [pc, #360]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	2202      	movs	r2, #2
    821c:	4393      	bics	r3, r2
    821e:	b2da      	uxtb	r2, r3
    8220:	4b57      	ldr	r3, [pc, #348]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8222:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((flimitState == 0)&&(done == 0))
    8224:	4b64      	ldr	r3, [pc, #400]	; (83b8 <BrakeBoardStateMachineTask+0x1744>)
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	2b00      	cmp	r3, #0
    822a:	d11f      	bne.n	826c <BrakeBoardStateMachineTask+0x15f8>
    822c:	1dbb      	adds	r3, r7, #6
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	2b00      	cmp	r3, #0
    8232:	d11b      	bne.n	826c <BrakeBoardStateMachineTask+0x15f8>
			{
				done = 1;
    8234:	1dbb      	adds	r3, r7, #6
    8236:	2201      	movs	r2, #1
    8238:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    823a:	2001      	movs	r0, #1
    823c:	4b56      	ldr	r3, [pc, #344]	; (8398 <BrakeBoardStateMachineTask+0x1724>)
    823e:	4798      	blx	r3
    8240:	1c03      	adds	r3, r0, #0
    8242:	2b00      	cmp	r3, #0
    8244:	d106      	bne.n	8254 <BrakeBoardStateMachineTask+0x15e0>
				{
					brakeState = BRAKESTATE_ERROR;
    8246:	4b4d      	ldr	r3, [pc, #308]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8248:	2208      	movs	r2, #8
    824a:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    824c:	4b53      	ldr	r3, [pc, #332]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    824e:	2200      	movs	r2, #0
    8250:	701a      	strb	r2, [r3, #0]
    8252:	e004      	b.n	825e <BrakeBoardStateMachineTask+0x15ea>
				}
				else
				{
					MotorOff();
    8254:	4b48      	ldr	r3, [pc, #288]	; (8378 <BrakeBoardStateMachineTask+0x1704>)
    8256:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    8258:	4b48      	ldr	r3, [pc, #288]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    825a:	2215      	movs	r2, #21
    825c:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    825e:	4b48      	ldr	r3, [pc, #288]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	2202      	movs	r2, #2
    8264:	4393      	bics	r3, r2
    8266:	b2da      	uxtb	r2, r3
    8268:	4b45      	ldr	r3, [pc, #276]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    826a:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    826c:	4b45      	ldr	r3, [pc, #276]	; (8384 <BrakeBoardStateMachineTask+0x1710>)
    826e:	881b      	ldrh	r3, [r3, #0]
    8270:	2b00      	cmp	r3, #0
    8272:	d157      	bne.n	8324 <BrakeBoardStateMachineTask+0x16b0>
    8274:	1dbb      	adds	r3, r7, #6
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	2b00      	cmp	r3, #0
    827a:	d153      	bne.n	8324 <BrakeBoardStateMachineTask+0x16b0>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    827c:	2001      	movs	r0, #1
    827e:	4b42      	ldr	r3, [pc, #264]	; (8388 <BrakeBoardStateMachineTask+0x1714>)
    8280:	4798      	blx	r3
    8282:	1c03      	adds	r3, r0, #0
    8284:	1c1a      	adds	r2, r3, #0
    8286:	4b41      	ldr	r3, [pc, #260]	; (838c <BrakeBoardStateMachineTask+0x1718>)
    8288:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedManual();
    828a:	4b4c      	ldr	r3, [pc, #304]	; (83bc <BrakeBoardStateMachineTask+0x1748>)
    828c:	4798      	blx	r3
    828e:	1c03      	adds	r3, r0, #0
    8290:	1c1a      	adds	r2, r3, #0
    8292:	4b40      	ldr	r3, [pc, #256]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    8294:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    8296:	4b4a      	ldr	r3, [pc, #296]	; (83c0 <BrakeBoardStateMachineTask+0x174c>)
    8298:	7e5b      	ldrb	r3, [r3, #25]
    829a:	2b00      	cmp	r3, #0
    829c:	d119      	bne.n	82d2 <BrakeBoardStateMachineTask+0x165e>
				{
					if (brakeCycleCount <2)
    829e:	4b49      	ldr	r3, [pc, #292]	; (83c4 <BrakeBoardStateMachineTask+0x1750>)
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	2b01      	cmp	r3, #1
    82a4:	d806      	bhi.n	82b4 <BrakeBoardStateMachineTask+0x1640>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    82a6:	2002      	movs	r0, #2
    82a8:	4b47      	ldr	r3, [pc, #284]	; (83c8 <BrakeBoardStateMachineTask+0x1754>)
    82aa:	4798      	blx	r3
    82ac:	1c03      	adds	r3, r0, #0
    82ae:	1c1a      	adds	r2, r3, #0
    82b0:	4b38      	ldr	r3, [pc, #224]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    82b2:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    82b4:	4b43      	ldr	r3, [pc, #268]	; (83c4 <BrakeBoardStateMachineTask+0x1750>)
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	2b02      	cmp	r3, #2
    82ba:	d10a      	bne.n	82d2 <BrakeBoardStateMachineTask+0x165e>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    82bc:	4b40      	ldr	r3, [pc, #256]	; (83c0 <BrakeBoardStateMachineTask+0x174c>)
    82be:	7d9b      	ldrb	r3, [r3, #22]
    82c0:	085b      	lsrs	r3, r3, #1
    82c2:	b2db      	uxtb	r3, r3
    82c4:	1c18      	adds	r0, r3, #0
    82c6:	4b40      	ldr	r3, [pc, #256]	; (83c8 <BrakeBoardStateMachineTask+0x1754>)
    82c8:	4798      	blx	r3
    82ca:	1c03      	adds	r3, r0, #0
    82cc:	1c1a      	adds	r2, r3, #0
    82ce:	4b31      	ldr	r3, [pc, #196]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    82d0:	801a      	strh	r2, [r3, #0]
					}
				}				
				if (currentRead > newCurrentThreshold)
    82d2:	4b2e      	ldr	r3, [pc, #184]	; (838c <BrakeBoardStateMachineTask+0x1718>)
    82d4:	881a      	ldrh	r2, [r3, #0]
    82d6:	4b2f      	ldr	r3, [pc, #188]	; (8394 <BrakeBoardStateMachineTask+0x1720>)
    82d8:	881b      	ldrh	r3, [r3, #0]
    82da:	429a      	cmp	r2, r3
    82dc:	d922      	bls.n	8324 <BrakeBoardStateMachineTask+0x16b0>
				{
					MotorOff();
    82de:	4b26      	ldr	r3, [pc, #152]	; (8378 <BrakeBoardStateMachineTask+0x1704>)
    82e0:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    82e2:	4b38      	ldr	r3, [pc, #224]	; (83c4 <BrakeBoardStateMachineTask+0x1750>)
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	2b09      	cmp	r3, #9
    82e8:	d805      	bhi.n	82f6 <BrakeBoardStateMachineTask+0x1682>
					{
						brakeCycleCount++;
    82ea:	4b36      	ldr	r3, [pc, #216]	; (83c4 <BrakeBoardStateMachineTask+0x1750>)
    82ec:	781b      	ldrb	r3, [r3, #0]
    82ee:	3301      	adds	r3, #1
    82f0:	b2da      	uxtb	r2, r3
    82f2:	4b34      	ldr	r3, [pc, #208]	; (83c4 <BrakeBoardStateMachineTask+0x1750>)
    82f4:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    82f6:	2002      	movs	r0, #2
    82f8:	4b27      	ldr	r3, [pc, #156]	; (8398 <BrakeBoardStateMachineTask+0x1724>)
    82fa:	4798      	blx	r3
    82fc:	1c03      	adds	r3, r0, #0
    82fe:	2b00      	cmp	r3, #0
    8300:	d10d      	bne.n	831e <BrakeBoardStateMachineTask+0x16aa>
					{
						brakeState = BRAKESTATE_ERROR;
    8302:	4b1e      	ldr	r3, [pc, #120]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8304:	2208      	movs	r2, #8
    8306:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    8308:	4b24      	ldr	r3, [pc, #144]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    830a:	2200      	movs	r2, #0
    830c:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    830e:	4b1c      	ldr	r3, [pc, #112]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8310:	781b      	ldrb	r3, [r3, #0]
    8312:	2202      	movs	r2, #2
    8314:	4393      	bics	r3, r2
    8316:	b2da      	uxtb	r2, r3
    8318:	4b19      	ldr	r3, [pc, #100]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    831a:	701a      	strb	r2, [r3, #0]
    831c:	e002      	b.n	8324 <BrakeBoardStateMachineTask+0x16b0>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    831e:	4b17      	ldr	r3, [pc, #92]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    8320:	2215      	movs	r2, #21
    8322:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			//------------------------
			// you are braking ....
			if (done == 0)
    8324:	1dbb      	adds	r3, r7, #6
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	2b00      	cmp	r3, #0
    832a:	d117      	bne.n	835c <BrakeBoardStateMachineTask+0x16e8>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    832c:	4b21      	ldr	r3, [pc, #132]	; (83b4 <BrakeBoardStateMachineTask+0x1740>)
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	1c1a      	adds	r2, r3, #0
    8332:	2301      	movs	r3, #1
    8334:	4013      	ands	r3, r2
    8336:	d111      	bne.n	835c <BrakeBoardStateMachineTask+0x16e8>
				{
					done = 1;
    8338:	1dbb      	adds	r3, r7, #6
    833a:	2201      	movs	r2, #1
    833c:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    833e:	4b1b      	ldr	r3, [pc, #108]	; (83ac <BrakeBoardStateMachineTask+0x1738>)
    8340:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8342:	4b16      	ldr	r3, [pc, #88]	; (839c <BrakeBoardStateMachineTask+0x1728>)
    8344:	220a      	movs	r2, #10
    8346:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8348:	4b0c      	ldr	r3, [pc, #48]	; (837c <BrakeBoardStateMachineTask+0x1708>)
    834a:	2216      	movs	r2, #22
    834c:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    834e:	4b0c      	ldr	r3, [pc, #48]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    8350:	781b      	ldrb	r3, [r3, #0]
    8352:	2202      	movs	r2, #2
    8354:	4393      	bics	r3, r2
    8356:	b2da      	uxtb	r2, r3
    8358:	4b09      	ldr	r3, [pc, #36]	; (8380 <BrakeBoardStateMachineTask+0x170c>)
    835a:	701a      	strb	r2, [r3, #0]
				}
			}			
			if (done == 0)
    835c:	1dbb      	adds	r3, r7, #6
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	2b00      	cmp	r3, #0
    8362:	d107      	bne.n	8374 <BrakeBoardStateMachineTask+0x1700>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8364:	4b0e      	ldr	r3, [pc, #56]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    8366:	791b      	ldrb	r3, [r3, #4]
    8368:	2210      	movs	r2, #16
    836a:	4313      	orrs	r3, r2
    836c:	b2da      	uxtb	r2, r3
    836e:	4b0c      	ldr	r3, [pc, #48]	; (83a0 <BrakeBoardStateMachineTask+0x172c>)
    8370:	711a      	strb	r2, [r3, #4]
			}
			break;
    8372:	e08a      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    8374:	e089      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    8376:	46c0      	nop			; (mov r8, r8)
    8378:	00008d51 	.word	0x00008d51
    837c:	20002eaa 	.word	0x20002eaa
    8380:	20002ecc 	.word	0x20002ecc
    8384:	20002e9e 	.word	0x20002e9e
    8388:	0000a5a9 	.word	0x0000a5a9
    838c:	20002e94 	.word	0x20002e94
    8390:	000089dd 	.word	0x000089dd
    8394:	20002e98 	.word	0x20002e98
    8398:	000068a1 	.word	0x000068a1
    839c:	2000368e 	.word	0x2000368e
    83a0:	20003660 	.word	0x20003660
    83a4:	20003036 	.word	0x20003036
    83a8:	2000303c 	.word	0x2000303c
    83ac:	00008e41 	.word	0x00008e41
    83b0:	2000303a 	.word	0x2000303a
    83b4:	20002efc 	.word	0x20002efc
    83b8:	2000303e 	.word	0x2000303e
    83bc:	00008a79 	.word	0x00008a79
    83c0:	20002f98 	.word	0x20002f98
    83c4:	200004b0 	.word	0x200004b0
    83c8:	00008961 	.word	0x00008961
		}	
		case BRAKESTATE_ACTIVE_HOLD_MANUAL:
		{
			done = 0;
    83cc:	1dbb      	adds	r3, r7, #6
    83ce:	2200      	movs	r2, #0
    83d0:	701a      	strb	r2, [r3, #0]
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    83d2:	4b30      	ldr	r3, [pc, #192]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	1c1a      	adds	r2, r3, #0
    83d8:	2302      	movs	r3, #2
    83da:	4013      	ands	r3, r2
    83dc:	d02b      	beq.n	8436 <BrakeBoardStateMachineTask+0x17c2>
    83de:	1dbb      	adds	r3, r7, #6
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	2b00      	cmp	r3, #0
    83e4:	d127      	bne.n	8436 <BrakeBoardStateMachineTask+0x17c2>
			{
				done = 1;
    83e6:	1dbb      	adds	r3, r7, #6
    83e8:	2201      	movs	r2, #1
    83ea:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    83ec:	4b29      	ldr	r3, [pc, #164]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	2202      	movs	r2, #2
    83f2:	4393      	bics	r3, r2
    83f4:	b2da      	uxtb	r2, r3
    83f6:	4b27      	ldr	r3, [pc, #156]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    83f8:	701a      	strb	r2, [r3, #0]
				MotorOff();
    83fa:	4b27      	ldr	r3, [pc, #156]	; (8498 <BrakeBoardStateMachineTask+0x1824>)
    83fc:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    83fe:	2002      	movs	r0, #2
    8400:	4b26      	ldr	r3, [pc, #152]	; (849c <BrakeBoardStateMachineTask+0x1828>)
    8402:	4798      	blx	r3
    8404:	1c03      	adds	r3, r0, #0
    8406:	2b00      	cmp	r3, #0
    8408:	d106      	bne.n	8418 <BrakeBoardStateMachineTask+0x17a4>
				{
					brakeState = BRAKESTATE_ERROR;
    840a:	4b25      	ldr	r3, [pc, #148]	; (84a0 <BrakeBoardStateMachineTask+0x182c>)
    840c:	2208      	movs	r2, #8
    840e:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8410:	4b24      	ldr	r3, [pc, #144]	; (84a4 <BrakeBoardStateMachineTask+0x1830>)
    8412:	2200      	movs	r2, #0
    8414:	701a      	strb	r2, [r3, #0]
    8416:	e00e      	b.n	8436 <BrakeBoardStateMachineTask+0x17c2>
				}
				else
				{
					MotorCCW();
    8418:	4b23      	ldr	r3, [pc, #140]	; (84a8 <BrakeBoardStateMachineTask+0x1834>)
    841a:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    841c:	4b21      	ldr	r3, [pc, #132]	; (84a4 <BrakeBoardStateMachineTask+0x1830>)
    841e:	220a      	movs	r2, #10
    8420:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8422:	4b1f      	ldr	r3, [pc, #124]	; (84a0 <BrakeBoardStateMachineTask+0x182c>)
    8424:	2216      	movs	r2, #22
    8426:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8428:	4b1a      	ldr	r3, [pc, #104]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    842a:	781b      	ldrb	r3, [r3, #0]
    842c:	2202      	movs	r2, #2
    842e:	4393      	bics	r3, r2
    8430:	b2da      	uxtb	r2, r3
    8432:	4b18      	ldr	r3, [pc, #96]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    8434:	701a      	strb	r2, [r3, #0]
				}
			}			
			//------------------------
			// you are braking ....
			if (done == 0)
    8436:	1dbb      	adds	r3, r7, #6
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2b00      	cmp	r3, #0
    843c:	d117      	bne.n	846e <BrakeBoardStateMachineTask+0x17fa>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    843e:	4b1b      	ldr	r3, [pc, #108]	; (84ac <BrakeBoardStateMachineTask+0x1838>)
    8440:	781b      	ldrb	r3, [r3, #0]
    8442:	1c1a      	adds	r2, r3, #0
    8444:	2301      	movs	r3, #1
    8446:	4013      	ands	r3, r2
    8448:	d111      	bne.n	846e <BrakeBoardStateMachineTask+0x17fa>
				{
					done = 1;
    844a:	1dbb      	adds	r3, r7, #6
    844c:	2201      	movs	r2, #1
    844e:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8450:	4b15      	ldr	r3, [pc, #84]	; (84a8 <BrakeBoardStateMachineTask+0x1834>)
    8452:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8454:	4b13      	ldr	r3, [pc, #76]	; (84a4 <BrakeBoardStateMachineTask+0x1830>)
    8456:	220a      	movs	r2, #10
    8458:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    845a:	4b11      	ldr	r3, [pc, #68]	; (84a0 <BrakeBoardStateMachineTask+0x182c>)
    845c:	2216      	movs	r2, #22
    845e:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8460:	4b0c      	ldr	r3, [pc, #48]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	2202      	movs	r2, #2
    8466:	4393      	bics	r3, r2
    8468:	b2da      	uxtb	r2, r3
    846a:	4b0a      	ldr	r3, [pc, #40]	; (8494 <BrakeBoardStateMachineTask+0x1820>)
    846c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (done == 0)
    846e:	1dbb      	adds	r3, r7, #6
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	2b00      	cmp	r3, #0
    8474:	d107      	bne.n	8486 <BrakeBoardStateMachineTask+0x1812>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8476:	4b0e      	ldr	r3, [pc, #56]	; (84b0 <BrakeBoardStateMachineTask+0x183c>)
    8478:	791b      	ldrb	r3, [r3, #4]
    847a:	2210      	movs	r2, #16
    847c:	4313      	orrs	r3, r2
    847e:	b2da      	uxtb	r2, r3
    8480:	4b0b      	ldr	r3, [pc, #44]	; (84b0 <BrakeBoardStateMachineTask+0x183c>)
    8482:	711a      	strb	r2, [r3, #4]
			}
			break;
    8484:	e001      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
    8486:	e000      	b.n	848a <BrakeBoardStateMachineTask+0x1816>
					}
					break;
				}
			}
			}
			break;
    8488:	46c0      	nop			; (mov r8, r8)
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
			}
			break;
		}	
	}
	BrakeLEDControl();
    848a:	4b0a      	ldr	r3, [pc, #40]	; (84b4 <BrakeBoardStateMachineTask+0x1840>)
    848c:	4798      	blx	r3
}
    848e:	46bd      	mov	sp, r7
    8490:	b003      	add	sp, #12
    8492:	bd90      	pop	{r4, r7, pc}
    8494:	20002ecc 	.word	0x20002ecc
    8498:	00008d51 	.word	0x00008d51
    849c:	000068a1 	.word	0x000068a1
    84a0:	20002eaa 	.word	0x20002eaa
    84a4:	2000368e 	.word	0x2000368e
    84a8:	00008e41 	.word	0x00008e41
    84ac:	20002efc 	.word	0x20002efc
    84b0:	20003660 	.word	0x20003660
    84b4:	00006a71 	.word	0x00006a71

000084b8 <MotorNeedNewBaseline>:

//XXXXXXXXXXXXXXXXXXXXXXXXX DEACCELERATION DETECTION XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
int16_t motorTempDiffx = 0;

void MotorNeedNewBaseline(void)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	af00      	add	r7, sp, #0
	needNewBaseline=1;
    84bc:	4b03      	ldr	r3, [pc, #12]	; (84cc <MotorNeedNewBaseline+0x14>)
    84be:	2201      	movs	r2, #1
    84c0:	701a      	strb	r2, [r3, #0]
	needNewBaselineTimer=NEEDNEWBASELINE_TIME; 
    84c2:	4b03      	ldr	r3, [pc, #12]	; (84d0 <MotorNeedNewBaseline+0x18>)
    84c4:	2264      	movs	r2, #100	; 0x64
    84c6:	801a      	strh	r2, [r3, #0]
}
    84c8:	46bd      	mov	sp, r7
    84ca:	bd80      	pop	{r7, pc}
    84cc:	20000000 	.word	0x20000000
    84d0:	20000634 	.word	0x20000634

000084d4 <MotorBuildGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
void MotorBuildGetAcc(void)
{
    84d4:	b590      	push	{r4, r7, lr}
    84d6:	b085      	sub	sp, #20
    84d8:	af00      	add	r7, sp, #0
	int16_t mytempdiffx,newMotorx;
	uint8_t change;
	int32_t ltemp;
	
	mytempdiffx = 0;
    84da:	1c3b      	adds	r3, r7, #0
    84dc:	330e      	adds	r3, #14
    84de:	2200      	movs	r2, #0
    84e0:	801a      	strh	r2, [r3, #0]
	//   when some event requires this to happen -
	//   events noted today: power-up, just return to home, acceleration detected (-g)
	// DURING needNewBaseline - mytempdiffx returned will be zero 0000000000
	// needNewBaseline will be on a 10 second timer.
	//----------------------------------------
	if (AccelProvideReadingChange(&motorx,&motory,&motorz,&change)!= 0)
    84e2:	4864      	ldr	r0, [pc, #400]	; (8674 <MotorBuildGetAcc+0x1a0>)
    84e4:	4964      	ldr	r1, [pc, #400]	; (8678 <MotorBuildGetAcc+0x1a4>)
    84e6:	4a65      	ldr	r2, [pc, #404]	; (867c <MotorBuildGetAcc+0x1a8>)
    84e8:	1d7b      	adds	r3, r7, #5
    84ea:	4c65      	ldr	r4, [pc, #404]	; (8680 <MotorBuildGetAcc+0x1ac>)
    84ec:	47a0      	blx	r4
    84ee:	1c03      	adds	r3, r0, #0
    84f0:	2b00      	cmp	r3, #0
    84f2:	d100      	bne.n	84f6 <MotorBuildGetAcc+0x22>
    84f4:	e0ad      	b.n	8652 <MotorBuildGetAcc+0x17e>
	{
		if ((change != 0)&&(hlimitState == 0))
    84f6:	1d7b      	adds	r3, r7, #5
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	2b00      	cmp	r3, #0
    84fc:	d100      	bne.n	8500 <MotorBuildGetAcc+0x2c>
    84fe:	e094      	b.n	862a <MotorBuildGetAcc+0x156>
    8500:	4b60      	ldr	r3, [pc, #384]	; (8684 <MotorBuildGetAcc+0x1b0>)
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2b00      	cmp	r3, #0
    8506:	d000      	beq.n	850a <MotorBuildGetAcc+0x36>
    8508:	e08f      	b.n	862a <MotorBuildGetAcc+0x156>
		{
			newMotorx = (int16_t)motorx;
    850a:	4b5a      	ldr	r3, [pc, #360]	; (8674 <MotorBuildGetAcc+0x1a0>)
    850c:	881a      	ldrh	r2, [r3, #0]
    850e:	1dbb      	adds	r3, r7, #6
    8510:	801a      	strh	r2, [r3, #0]
			ltemp = (int32_t)motorAccXBaseline;
    8512:	4b5d      	ldr	r3, [pc, #372]	; (8688 <MotorBuildGetAcc+0x1b4>)
    8514:	881b      	ldrh	r3, [r3, #0]
    8516:	b21b      	sxth	r3, r3
    8518:	60bb      	str	r3, [r7, #8]
			
			if (needNewBaseline != 0)
    851a:	4b5c      	ldr	r3, [pc, #368]	; (868c <MotorBuildGetAcc+0x1b8>)
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	2b00      	cmp	r3, #0
    8520:	d041      	beq.n	85a6 <MotorBuildGetAcc+0xd2>
			{
				if (newMotorx >0)
    8522:	1dbb      	adds	r3, r7, #6
    8524:	2200      	movs	r2, #0
    8526:	5e9b      	ldrsh	r3, [r3, r2]
    8528:	2b00      	cmp	r3, #0
    852a:	dd11      	ble.n	8550 <MotorBuildGetAcc+0x7c>
				{
					ltemp = ltemp * 100;
    852c:	68bb      	ldr	r3, [r7, #8]
    852e:	2264      	movs	r2, #100	; 0x64
    8530:	4353      	muls	r3, r2
    8532:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8534:	1dbb      	adds	r3, r7, #6
    8536:	2200      	movs	r2, #0
    8538:	5e9b      	ldrsh	r3, [r3, r2]
    853a:	68ba      	ldr	r2, [r7, #8]
    853c:	18d3      	adds	r3, r2, r3
    853e:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8540:	68ba      	ldr	r2, [r7, #8]
    8542:	4b53      	ldr	r3, [pc, #332]	; (8690 <MotorBuildGetAcc+0x1bc>)
    8544:	1c10      	adds	r0, r2, #0
    8546:	2165      	movs	r1, #101	; 0x65
    8548:	4798      	blx	r3
    854a:	1c03      	adds	r3, r0, #0
    854c:	60bb      	str	r3, [r7, #8]
    854e:	e010      	b.n	8572 <MotorBuildGetAcc+0x9e>
				}
				else
				{
					ltemp = ltemp * 100;
    8550:	68bb      	ldr	r3, [r7, #8]
    8552:	2264      	movs	r2, #100	; 0x64
    8554:	4353      	muls	r3, r2
    8556:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8558:	1dbb      	adds	r3, r7, #6
    855a:	2200      	movs	r2, #0
    855c:	5e9b      	ldrsh	r3, [r3, r2]
    855e:	68ba      	ldr	r2, [r7, #8]
    8560:	18d3      	adds	r3, r2, r3
    8562:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8564:	68ba      	ldr	r2, [r7, #8]
    8566:	4b4a      	ldr	r3, [pc, #296]	; (8690 <MotorBuildGetAcc+0x1bc>)
    8568:	1c10      	adds	r0, r2, #0
    856a:	2165      	movs	r1, #101	; 0x65
    856c:	4798      	blx	r3
    856e:	1c03      	adds	r3, r0, #0
    8570:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    8572:	4b48      	ldr	r3, [pc, #288]	; (8694 <MotorBuildGetAcc+0x1c0>)
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	2b00      	cmp	r3, #0
    8578:	d106      	bne.n	8588 <MotorBuildGetAcc+0xb4>
				{
					ltemp = newMotorx;
    857a:	1dbb      	adds	r3, r7, #6
    857c:	2200      	movs	r2, #0
    857e:	5e9b      	ldrsh	r3, [r3, r2]
    8580:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    8582:	4b44      	ldr	r3, [pc, #272]	; (8694 <MotorBuildGetAcc+0x1c0>)
    8584:	2201      	movs	r2, #1
    8586:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    8588:	68bb      	ldr	r3, [r7, #8]
    858a:	b29a      	uxth	r2, r3
    858c:	4b3e      	ldr	r3, [pc, #248]	; (8688 <MotorBuildGetAcc+0x1b4>)
    858e:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    8590:	4b39      	ldr	r3, [pc, #228]	; (8678 <MotorBuildGetAcc+0x1a4>)
    8592:	881b      	ldrh	r3, [r3, #0]
    8594:	b29a      	uxth	r2, r3
    8596:	4b40      	ldr	r3, [pc, #256]	; (8698 <MotorBuildGetAcc+0x1c4>)
    8598:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;				
    859a:	4b38      	ldr	r3, [pc, #224]	; (867c <MotorBuildGetAcc+0x1a8>)
    859c:	881b      	ldrh	r3, [r3, #0]
    859e:	b29a      	uxth	r2, r3
    85a0:	4b3e      	ldr	r3, [pc, #248]	; (869c <MotorBuildGetAcc+0x1c8>)
    85a2:	801a      	strh	r2, [r3, #0]
    85a4:	e041      	b.n	862a <MotorBuildGetAcc+0x156>
			}
			else
			{
				if (newMotorx >0)
    85a6:	1dbb      	adds	r3, r7, #6
    85a8:	2200      	movs	r2, #0
    85aa:	5e9b      	ldrsh	r3, [r3, r2]
    85ac:	2b00      	cmp	r3, #0
    85ae:	dd12      	ble.n	85d6 <MotorBuildGetAcc+0x102>
				{
					ltemp = ltemp * 1000;
    85b0:	68bb      	ldr	r3, [r7, #8]
    85b2:	22fa      	movs	r2, #250	; 0xfa
    85b4:	0092      	lsls	r2, r2, #2
    85b6:	4353      	muls	r3, r2
    85b8:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    85ba:	1dbb      	adds	r3, r7, #6
    85bc:	2200      	movs	r2, #0
    85be:	5e9b      	ldrsh	r3, [r3, r2]
    85c0:	68ba      	ldr	r2, [r7, #8]
    85c2:	18d3      	adds	r3, r2, r3
    85c4:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/1001;
    85c6:	68ba      	ldr	r2, [r7, #8]
    85c8:	4b31      	ldr	r3, [pc, #196]	; (8690 <MotorBuildGetAcc+0x1bc>)
    85ca:	1c10      	adds	r0, r2, #0
    85cc:	4934      	ldr	r1, [pc, #208]	; (86a0 <MotorBuildGetAcc+0x1cc>)
    85ce:	4798      	blx	r3
    85d0:	1c03      	adds	r3, r0, #0
    85d2:	60bb      	str	r3, [r7, #8]
    85d4:	e010      	b.n	85f8 <MotorBuildGetAcc+0x124>
				}
				else
				{
					ltemp = ltemp * 5000;
    85d6:	68bb      	ldr	r3, [r7, #8]
    85d8:	4a32      	ldr	r2, [pc, #200]	; (86a4 <MotorBuildGetAcc+0x1d0>)
    85da:	4353      	muls	r3, r2
    85dc:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    85de:	1dbb      	adds	r3, r7, #6
    85e0:	2200      	movs	r2, #0
    85e2:	5e9b      	ldrsh	r3, [r3, r2]
    85e4:	68ba      	ldr	r2, [r7, #8]
    85e6:	18d3      	adds	r3, r2, r3
    85e8:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/5001;
    85ea:	68ba      	ldr	r2, [r7, #8]
    85ec:	4b28      	ldr	r3, [pc, #160]	; (8690 <MotorBuildGetAcc+0x1bc>)
    85ee:	1c10      	adds	r0, r2, #0
    85f0:	492d      	ldr	r1, [pc, #180]	; (86a8 <MotorBuildGetAcc+0x1d4>)
    85f2:	4798      	blx	r3
    85f4:	1c03      	adds	r3, r0, #0
    85f6:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    85f8:	4b26      	ldr	r3, [pc, #152]	; (8694 <MotorBuildGetAcc+0x1c0>)
    85fa:	781b      	ldrb	r3, [r3, #0]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d106      	bne.n	860e <MotorBuildGetAcc+0x13a>
				{
					ltemp = newMotorx;
    8600:	1dbb      	adds	r3, r7, #6
    8602:	2200      	movs	r2, #0
    8604:	5e9b      	ldrsh	r3, [r3, r2]
    8606:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    8608:	4b22      	ldr	r3, [pc, #136]	; (8694 <MotorBuildGetAcc+0x1c0>)
    860a:	2201      	movs	r2, #1
    860c:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    860e:	68bb      	ldr	r3, [r7, #8]
    8610:	b29a      	uxth	r2, r3
    8612:	4b1d      	ldr	r3, [pc, #116]	; (8688 <MotorBuildGetAcc+0x1b4>)
    8614:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    8616:	4b18      	ldr	r3, [pc, #96]	; (8678 <MotorBuildGetAcc+0x1a4>)
    8618:	881b      	ldrh	r3, [r3, #0]
    861a:	b29a      	uxth	r2, r3
    861c:	4b1e      	ldr	r3, [pc, #120]	; (8698 <MotorBuildGetAcc+0x1c4>)
    861e:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;
    8620:	4b16      	ldr	r3, [pc, #88]	; (867c <MotorBuildGetAcc+0x1a8>)
    8622:	881b      	ldrh	r3, [r3, #0]
    8624:	b29a      	uxth	r2, r3
    8626:	4b1d      	ldr	r3, [pc, #116]	; (869c <MotorBuildGetAcc+0x1c8>)
    8628:	801a      	strh	r2, [r3, #0]
			}
		}
		tempx = (int16_t)motorx;
    862a:	4b12      	ldr	r3, [pc, #72]	; (8674 <MotorBuildGetAcc+0x1a0>)
    862c:	881b      	ldrh	r3, [r3, #0]
    862e:	b29a      	uxth	r2, r3
    8630:	4b1e      	ldr	r3, [pc, #120]	; (86ac <MotorBuildGetAcc+0x1d8>)
    8632:	801a      	strh	r2, [r3, #0]
		tempbasex = (int16_t) motorAccXBaseline;
    8634:	4b14      	ldr	r3, [pc, #80]	; (8688 <MotorBuildGetAcc+0x1b4>)
    8636:	881a      	ldrh	r2, [r3, #0]
    8638:	4b1d      	ldr	r3, [pc, #116]	; (86b0 <MotorBuildGetAcc+0x1dc>)
    863a:	801a      	strh	r2, [r3, #0]
		mytempdiffx = tempx- tempbasex;
    863c:	4b1b      	ldr	r3, [pc, #108]	; (86ac <MotorBuildGetAcc+0x1d8>)
    863e:	881b      	ldrh	r3, [r3, #0]
    8640:	b29a      	uxth	r2, r3
    8642:	4b1b      	ldr	r3, [pc, #108]	; (86b0 <MotorBuildGetAcc+0x1dc>)
    8644:	881b      	ldrh	r3, [r3, #0]
    8646:	b29b      	uxth	r3, r3
    8648:	1ad3      	subs	r3, r2, r3
    864a:	b29a      	uxth	r2, r3
    864c:	1c3b      	adds	r3, r7, #0
    864e:	330e      	adds	r3, #14
    8650:	801a      	strh	r2, [r3, #0]
		
	}
	if (needNewBaseline != 0)
    8652:	4b0e      	ldr	r3, [pc, #56]	; (868c <MotorBuildGetAcc+0x1b8>)
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	2b00      	cmp	r3, #0
    8658:	d003      	beq.n	8662 <MotorBuildGetAcc+0x18e>
	{
		mytempdiffx = 0; 
    865a:	1c3b      	adds	r3, r7, #0
    865c:	330e      	adds	r3, #14
    865e:	2200      	movs	r2, #0
    8660:	801a      	strh	r2, [r3, #0]
	}
	motorTempDiffx = mytempdiffx;
    8662:	4b14      	ldr	r3, [pc, #80]	; (86b4 <MotorBuildGetAcc+0x1e0>)
    8664:	1c3a      	adds	r2, r7, #0
    8666:	320e      	adds	r2, #14
    8668:	8812      	ldrh	r2, [r2, #0]
    866a:	801a      	strh	r2, [r3, #0]
}
    866c:	46bd      	mov	sp, r7
    866e:	b005      	add	sp, #20
    8670:	bd90      	pop	{r4, r7, pc}
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	20002ece 	.word	0x20002ece
    8678:	20002e96 	.word	0x20002e96
    867c:	20002ea8 	.word	0x20002ea8
    8680:	00005c81 	.word	0x00005c81
    8684:	20003034 	.word	0x20003034
    8688:	20002ed2 	.word	0x20002ed2
    868c:	20000000 	.word	0x20000000
    8690:	000146d5 	.word	0x000146d5
    8694:	20002eb6 	.word	0x20002eb6
    8698:	20002e9a 	.word	0x20002e9a
    869c:	20002eac 	.word	0x20002eac
    86a0:	000003e9 	.word	0x000003e9
    86a4:	00001388 	.word	0x00001388
    86a8:	00001389 	.word	0x00001389
    86ac:	20002ebc 	.word	0x20002ebc
    86b0:	20002ebe 	.word	0x20002ebe
    86b4:	200004b2 	.word	0x200004b2

000086b8 <MotorGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
int16_t MotorGetAcc(uint8_t activeBraking)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	b082      	sub	sp, #8
    86bc:	af00      	add	r7, sp, #0
    86be:	1c02      	adds	r2, r0, #0
    86c0:	1dfb      	adds	r3, r7, #7
    86c2:	701a      	strb	r2, [r3, #0]
	return motorTempDiffx;
    86c4:	4b03      	ldr	r3, [pc, #12]	; (86d4 <MotorGetAcc+0x1c>)
    86c6:	881b      	ldrh	r3, [r3, #0]
    86c8:	b21b      	sxth	r3, r3
}
    86ca:	1c18      	adds	r0, r3, #0
    86cc:	46bd      	mov	sp, r7
    86ce:	b002      	add	sp, #8
    86d0:	bd80      	pop	{r7, pc}
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	200004b2 	.word	0x200004b2

000086d8 <CurrentMotorCalculated>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculated(void)
{
    86d8:	b580      	push	{r7, lr}
    86da:	b084      	sub	sp, #16
    86dc:	af00      	add	r7, sp, #0
	uint32_t ltemp1,temp2;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    86de:	1c3b      	adds	r3, r7, #0
    86e0:	330a      	adds	r3, #10
    86e2:	2200      	movs	r2, #0
    86e4:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    86e6:	4b46      	ldr	r3, [pc, #280]	; (8800 <CurrentMotorCalculated+0x128>)
    86e8:	7d9a      	ldrb	r2, [r3, #22]
    86ea:	4b46      	ldr	r3, [pc, #280]	; (8804 <CurrentMotorCalculated+0x12c>)
    86ec:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    86ee:	4b44      	ldr	r3, [pc, #272]	; (8800 <CurrentMotorCalculated+0x128>)
    86f0:	789a      	ldrb	r2, [r3, #2]
    86f2:	4b45      	ldr	r3, [pc, #276]	; (8808 <CurrentMotorCalculated+0x130>)
    86f4:	701a      	strb	r2, [r3, #0]
	
	if ((fm<1)||(fm>9))
    86f6:	4b43      	ldr	r3, [pc, #268]	; (8804 <CurrentMotorCalculated+0x12c>)
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	2b00      	cmp	r3, #0
    86fc:	d003      	beq.n	8706 <CurrentMotorCalculated+0x2e>
    86fe:	4b41      	ldr	r3, [pc, #260]	; (8804 <CurrentMotorCalculated+0x12c>)
    8700:	781b      	ldrb	r3, [r3, #0]
    8702:	2b09      	cmp	r3, #9
    8704:	d902      	bls.n	870c <CurrentMotorCalculated+0x34>
	{
		fm = 5;
    8706:	4b3f      	ldr	r3, [pc, #252]	; (8804 <CurrentMotorCalculated+0x12c>)
    8708:	2205      	movs	r2, #5
    870a:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    870c:	4b3e      	ldr	r3, [pc, #248]	; (8808 <CurrentMotorCalculated+0x130>)
    870e:	781b      	ldrb	r3, [r3, #0]
    8710:	2b00      	cmp	r3, #0
    8712:	d003      	beq.n	871c <CurrentMotorCalculated+0x44>
    8714:	4b3c      	ldr	r3, [pc, #240]	; (8808 <CurrentMotorCalculated+0x130>)
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	2b09      	cmp	r3, #9
    871a:	d902      	bls.n	8722 <CurrentMotorCalculated+0x4a>
	{
		gain = 5;
    871c:	4b3a      	ldr	r3, [pc, #232]	; (8808 <CurrentMotorCalculated+0x130>)
    871e:	2205      	movs	r2, #5
    8720:	701a      	strb	r2, [r3, #0]
	}		 
	instantGain = MotorGetAcc(TRUE);
    8722:	2001      	movs	r0, #1
    8724:	4b39      	ldr	r3, [pc, #228]	; (880c <CurrentMotorCalculated+0x134>)
    8726:	4798      	blx	r3
    8728:	1c03      	adds	r3, r0, #0
    872a:	b29a      	uxth	r2, r3
    872c:	4b38      	ldr	r3, [pc, #224]	; (8810 <CurrentMotorCalculated+0x138>)
    872e:	801a      	strh	r2, [r3, #0]
	if (instantGain > 0)
    8730:	4b37      	ldr	r3, [pc, #220]	; (8810 <CurrentMotorCalculated+0x138>)
    8732:	881b      	ldrh	r3, [r3, #0]
    8734:	2b00      	cmp	r3, #0
    8736:	d102      	bne.n	873e <CurrentMotorCalculated+0x66>
//		instantGain = -1 * instantGain; 
//		instantGain =1; 
	}
	else
	{
		instantGain =0;  //1; 
    8738:	4b35      	ldr	r3, [pc, #212]	; (8810 <CurrentMotorCalculated+0x138>)
    873a:	2200      	movs	r2, #0
    873c:	801a      	strh	r2, [r3, #0]
//	{
//		instantGain = -1 * instantGain; 
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = instantGain * (gain*10)/5;
    873e:	4b34      	ldr	r3, [pc, #208]	; (8810 <CurrentMotorCalculated+0x138>)
    8740:	881b      	ldrh	r3, [r3, #0]
    8742:	1c19      	adds	r1, r3, #0
    8744:	4b30      	ldr	r3, [pc, #192]	; (8808 <CurrentMotorCalculated+0x130>)
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	1c1a      	adds	r2, r3, #0
    874a:	1c13      	adds	r3, r2, #0
    874c:	009b      	lsls	r3, r3, #2
    874e:	189b      	adds	r3, r3, r2
    8750:	005b      	lsls	r3, r3, #1
    8752:	1c1a      	adds	r2, r3, #0
    8754:	434a      	muls	r2, r1
    8756:	4b2f      	ldr	r3, [pc, #188]	; (8814 <CurrentMotorCalculated+0x13c>)
    8758:	1c10      	adds	r0, r2, #0
    875a:	2105      	movs	r1, #5
    875c:	4798      	blx	r3
    875e:	1c03      	adds	r3, r0, #0
    8760:	60fb      	str	r3, [r7, #12]
		temp2 = temp2/10; 
    8762:	68fa      	ldr	r2, [r7, #12]
    8764:	4b2c      	ldr	r3, [pc, #176]	; (8818 <CurrentMotorCalculated+0x140>)
    8766:	1c10      	adds	r0, r2, #0
    8768:	210a      	movs	r1, #10
    876a:	4798      	blx	r3
    876c:	1c03      	adds	r3, r0, #0
    876e:	60fb      	str	r3, [r7, #12]
		if (temp2 > ACC_HALF_G)
    8770:	68fa      	ldr	r2, [r7, #12]
    8772:	2380      	movs	r3, #128	; 0x80
    8774:	019b      	lsls	r3, r3, #6
    8776:	429a      	cmp	r2, r3
    8778:	d902      	bls.n	8780 <CurrentMotorCalculated+0xa8>
		{
			temp2 = ACC_HALF_G; 
    877a:	2380      	movs	r3, #128	; 0x80
    877c:	019b      	lsls	r3, r3, #6
    877e:	60fb      	str	r3, [r7, #12]
		}
		ltemp = temp2;
    8780:	4b26      	ldr	r3, [pc, #152]	; (881c <CurrentMotorCalculated+0x144>)
    8782:	68fa      	ldr	r2, [r7, #12]
    8784:	601a      	str	r2, [r3, #0]
		ltemp = ltemp * 100; 
    8786:	4b25      	ldr	r3, [pc, #148]	; (881c <CurrentMotorCalculated+0x144>)
    8788:	681b      	ldr	r3, [r3, #0]
    878a:	2264      	movs	r2, #100	; 0x64
    878c:	435a      	muls	r2, r3
    878e:	4b23      	ldr	r3, [pc, #140]	; (881c <CurrentMotorCalculated+0x144>)
    8790:	601a      	str	r2, [r3, #0]
		ltemp = ltemp/ACC_ONE_G;
    8792:	4b22      	ldr	r3, [pc, #136]	; (881c <CurrentMotorCalculated+0x144>)
    8794:	681b      	ldr	r3, [r3, #0]
    8796:	0b9a      	lsrs	r2, r3, #14
    8798:	4b20      	ldr	r3, [pc, #128]	; (881c <CurrentMotorCalculated+0x144>)
    879a:	601a      	str	r2, [r3, #0]
		temp2 = ltemp; 		
    879c:	4b1f      	ldr	r3, [pc, #124]	; (881c <CurrentMotorCalculated+0x144>)
    879e:	681b      	ldr	r3, [r3, #0]
    87a0:	60fb      	str	r3, [r7, #12]
		//----------------------------
		ltemp1 = temp2;
    87a2:	68fb      	ldr	r3, [r7, #12]
    87a4:	607b      	str	r3, [r7, #4]
		gPrime = ltemp1; 
    87a6:	687b      	ldr	r3, [r7, #4]
    87a8:	b29a      	uxth	r2, r3
    87aa:	4b1d      	ldr	r3, [pc, #116]	; (8820 <CurrentMotorCalculated+0x148>)
    87ac:	801a      	strh	r2, [r3, #0]
		ltemp1 = (ltemp1 * fm * 70);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    87ae:	4b15      	ldr	r3, [pc, #84]	; (8804 <CurrentMotorCalculated+0x12c>)
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	687a      	ldr	r2, [r7, #4]
    87b4:	4353      	muls	r3, r2
    87b6:	2246      	movs	r2, #70	; 0x46
    87b8:	4353      	muls	r3, r2
    87ba:	607b      	str	r3, [r7, #4]
		ltemp1 = 19000 + ltemp1;  //V00_78
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	4a19      	ldr	r2, [pc, #100]	; (8824 <CurrentMotorCalculated+0x14c>)
    87c0:	189b      	adds	r3, r3, r2
    87c2:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1 * 205; 
    87c4:	687b      	ldr	r3, [r7, #4]
    87c6:	22cd      	movs	r2, #205	; 0xcd
    87c8:	4353      	muls	r3, r2
    87ca:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    87cc:	687a      	ldr	r2, [r7, #4]
    87ce:	4b12      	ldr	r3, [pc, #72]	; (8818 <CurrentMotorCalculated+0x140>)
    87d0:	1c10      	adds	r0, r2, #0
    87d2:	2164      	movs	r1, #100	; 0x64
    87d4:	4798      	blx	r3
    87d6:	1c03      	adds	r3, r0, #0
    87d8:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    87da:	687a      	ldr	r2, [r7, #4]
    87dc:	4b0e      	ldr	r3, [pc, #56]	; (8818 <CurrentMotorCalculated+0x140>)
    87de:	1c10      	adds	r0, r2, #0
    87e0:	2164      	movs	r1, #100	; 0x64
    87e2:	4798      	blx	r3
    87e4:	1c03      	adds	r3, r0, #0
    87e6:	607b      	str	r3, [r7, #4]
		returnCurrent = ltemp1; 
    87e8:	1c3b      	adds	r3, r7, #0
    87ea:	330a      	adds	r3, #10
    87ec:	687a      	ldr	r2, [r7, #4]
    87ee:	801a      	strh	r2, [r3, #0]
//	}
//	else
//	{
//		returnCurrent = 1; 
//	}
	return returnCurrent;
    87f0:	1c3b      	adds	r3, r7, #0
    87f2:	330a      	adds	r3, #10
    87f4:	881b      	ldrh	r3, [r3, #0]
}
    87f6:	1c18      	adds	r0, r3, #0
    87f8:	46bd      	mov	sp, r7
    87fa:	b004      	add	sp, #16
    87fc:	bd80      	pop	{r7, pc}
    87fe:	46c0      	nop			; (mov r8, r8)
    8800:	20002f98 	.word	0x20002f98
    8804:	20002ea0 	.word	0x20002ea0
    8808:	20002eb7 	.word	0x20002eb7
    880c:	000086b9 	.word	0x000086b9
    8810:	20002ed4 	.word	0x20002ed4
    8814:	000146d5 	.word	0x000146d5
    8818:	00014639 	.word	0x00014639
    881c:	20002e90 	.word	0x20002e90
    8820:	20002ec6 	.word	0x20002ec6
    8824:	00004a38 	.word	0x00004a38

00008828 <CurrentMotorCalculatedForG>:
 
uint16_t CurrentMotorCalculatedForG(uint16_t gin)
{
    8828:	b580      	push	{r7, lr}
    882a:	b088      	sub	sp, #32
    882c:	af00      	add	r7, sp, #0
    882e:	1c02      	adds	r2, r0, #0
    8830:	1dbb      	adds	r3, r7, #6
    8832:	801a      	strh	r2, [r3, #0]
	
	uint32_t ltemp1,ltemp,temp2;
	uint8_t fm; 
	uint16_t returnCurrent,iGain;
	
	returnCurrent = 0;
    8834:	1c3b      	adds	r3, r7, #0
    8836:	3318      	adds	r3, #24
    8838:	2200      	movs	r2, #0
    883a:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    883c:	1c3b      	adds	r3, r7, #0
    883e:	331b      	adds	r3, #27
    8840:	2207      	movs	r2, #7
    8842:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    8844:	1c3b      	adds	r3, r7, #0
    8846:	331b      	adds	r3, #27
    8848:	4a40      	ldr	r2, [pc, #256]	; (894c <CurrentMotorCalculatedForG+0x124>)
    884a:	7d92      	ldrb	r2, [r2, #22]
    884c:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    884e:	4b3f      	ldr	r3, [pc, #252]	; (894c <CurrentMotorCalculatedForG+0x124>)
    8850:	789a      	ldrb	r2, [r3, #2]
    8852:	4b3f      	ldr	r3, [pc, #252]	; (8950 <CurrentMotorCalculatedForG+0x128>)
    8854:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    8856:	1c3b      	adds	r3, r7, #0
    8858:	331b      	adds	r3, #27
    885a:	781b      	ldrb	r3, [r3, #0]
    885c:	2b00      	cmp	r3, #0
    885e:	d004      	beq.n	886a <CurrentMotorCalculatedForG+0x42>
    8860:	1c3b      	adds	r3, r7, #0
    8862:	331b      	adds	r3, #27
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	2b09      	cmp	r3, #9
    8868:	d903      	bls.n	8872 <CurrentMotorCalculatedForG+0x4a>
	{
		fm = 5;
    886a:	1c3b      	adds	r3, r7, #0
    886c:	331b      	adds	r3, #27
    886e:	2205      	movs	r2, #5
    8870:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    8872:	4b37      	ldr	r3, [pc, #220]	; (8950 <CurrentMotorCalculatedForG+0x128>)
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	2b00      	cmp	r3, #0
    8878:	d003      	beq.n	8882 <CurrentMotorCalculatedForG+0x5a>
    887a:	4b35      	ldr	r3, [pc, #212]	; (8950 <CurrentMotorCalculatedForG+0x128>)
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	2b09      	cmp	r3, #9
    8880:	d902      	bls.n	8888 <CurrentMotorCalculatedForG+0x60>
	{
		gain = 5;
    8882:	4b33      	ldr	r3, [pc, #204]	; (8950 <CurrentMotorCalculatedForG+0x128>)
    8884:	2205      	movs	r2, #5
    8886:	701a      	strb	r2, [r3, #0]
	}
			 
	iGain = gin;
    8888:	1c3b      	adds	r3, r7, #0
    888a:	3316      	adds	r3, #22
    888c:	1dba      	adds	r2, r7, #6
    888e:	8812      	ldrh	r2, [r2, #0]
    8890:	801a      	strh	r2, [r3, #0]
	if (iGain != 0)
    8892:	1c3b      	adds	r3, r7, #0
    8894:	3316      	adds	r3, #22
    8896:	881b      	ldrh	r3, [r3, #0]
    8898:	2b00      	cmp	r3, #0
    889a:	d04f      	beq.n	893c <CurrentMotorCalculatedForG+0x114>
	{
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = iGain * (gain*10)/5;
    889c:	1c3b      	adds	r3, r7, #0
    889e:	3316      	adds	r3, #22
    88a0:	8819      	ldrh	r1, [r3, #0]
    88a2:	4b2b      	ldr	r3, [pc, #172]	; (8950 <CurrentMotorCalculatedForG+0x128>)
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	1c1a      	adds	r2, r3, #0
    88a8:	1c13      	adds	r3, r2, #0
    88aa:	009b      	lsls	r3, r3, #2
    88ac:	189b      	adds	r3, r3, r2
    88ae:	005b      	lsls	r3, r3, #1
    88b0:	1c1a      	adds	r2, r3, #0
    88b2:	434a      	muls	r2, r1
    88b4:	4b27      	ldr	r3, [pc, #156]	; (8954 <CurrentMotorCalculatedForG+0x12c>)
    88b6:	1c10      	adds	r0, r2, #0
    88b8:	2105      	movs	r1, #5
    88ba:	4798      	blx	r3
    88bc:	1c03      	adds	r3, r0, #0
    88be:	61fb      	str	r3, [r7, #28]
		temp2 = temp2/10; 
    88c0:	69fa      	ldr	r2, [r7, #28]
    88c2:	4b25      	ldr	r3, [pc, #148]	; (8958 <CurrentMotorCalculatedForG+0x130>)
    88c4:	1c10      	adds	r0, r2, #0
    88c6:	210a      	movs	r1, #10
    88c8:	4798      	blx	r3
    88ca:	1c03      	adds	r3, r0, #0
    88cc:	61fb      	str	r3, [r7, #28]
		if (temp2 > ACC_HALF_G)
    88ce:	69fa      	ldr	r2, [r7, #28]
    88d0:	2380      	movs	r3, #128	; 0x80
    88d2:	019b      	lsls	r3, r3, #6
    88d4:	429a      	cmp	r2, r3
    88d6:	d902      	bls.n	88de <CurrentMotorCalculatedForG+0xb6>
		{
			temp2 = ACC_HALF_G; 
    88d8:	2380      	movs	r3, #128	; 0x80
    88da:	019b      	lsls	r3, r3, #6
    88dc:	61fb      	str	r3, [r7, #28]
		}
		ltemp = temp2;
    88de:	69fb      	ldr	r3, [r7, #28]
    88e0:	613b      	str	r3, [r7, #16]
		ltemp = ltemp * 100; 
    88e2:	693b      	ldr	r3, [r7, #16]
    88e4:	2264      	movs	r2, #100	; 0x64
    88e6:	4353      	muls	r3, r2
    88e8:	613b      	str	r3, [r7, #16]
		ltemp = ltemp/ACC_ONE_G;
    88ea:	693b      	ldr	r3, [r7, #16]
    88ec:	0b9b      	lsrs	r3, r3, #14
    88ee:	613b      	str	r3, [r7, #16]
		temp2 = ltemp; 		
    88f0:	693b      	ldr	r3, [r7, #16]
    88f2:	61fb      	str	r3, [r7, #28]
		//----------------------------
		ltemp1 = temp2;
    88f4:	69fb      	ldr	r3, [r7, #28]
    88f6:	60fb      	str	r3, [r7, #12]
		ltemp1 = (ltemp1 * fm * 70);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    88f8:	1c3b      	adds	r3, r7, #0
    88fa:	331b      	adds	r3, #27
    88fc:	781b      	ldrb	r3, [r3, #0]
    88fe:	68fa      	ldr	r2, [r7, #12]
    8900:	4353      	muls	r3, r2
    8902:	2246      	movs	r2, #70	; 0x46
    8904:	4353      	muls	r3, r2
    8906:	60fb      	str	r3, [r7, #12]
		ltemp1 = 19000 + ltemp1;  //V00_78
    8908:	68fb      	ldr	r3, [r7, #12]
    890a:	4a14      	ldr	r2, [pc, #80]	; (895c <CurrentMotorCalculatedForG+0x134>)
    890c:	189b      	adds	r3, r3, r2
    890e:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1 * 205; 
    8910:	68fb      	ldr	r3, [r7, #12]
    8912:	22cd      	movs	r2, #205	; 0xcd
    8914:	4353      	muls	r3, r2
    8916:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    8918:	68fa      	ldr	r2, [r7, #12]
    891a:	4b0f      	ldr	r3, [pc, #60]	; (8958 <CurrentMotorCalculatedForG+0x130>)
    891c:	1c10      	adds	r0, r2, #0
    891e:	2164      	movs	r1, #100	; 0x64
    8920:	4798      	blx	r3
    8922:	1c03      	adds	r3, r0, #0
    8924:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    8926:	68fa      	ldr	r2, [r7, #12]
    8928:	4b0b      	ldr	r3, [pc, #44]	; (8958 <CurrentMotorCalculatedForG+0x130>)
    892a:	1c10      	adds	r0, r2, #0
    892c:	2164      	movs	r1, #100	; 0x64
    892e:	4798      	blx	r3
    8930:	1c03      	adds	r3, r0, #0
    8932:	60fb      	str	r3, [r7, #12]
		returnCurrent = ltemp1; 
    8934:	1c3b      	adds	r3, r7, #0
    8936:	3318      	adds	r3, #24
    8938:	68fa      	ldr	r2, [r7, #12]
    893a:	801a      	strh	r2, [r3, #0]
	}
	return returnCurrent;
    893c:	1c3b      	adds	r3, r7, #0
    893e:	3318      	adds	r3, #24
    8940:	881b      	ldrh	r3, [r3, #0]
} 
    8942:	1c18      	adds	r0, r3, #0
    8944:	46bd      	mov	sp, r7
    8946:	b008      	add	sp, #32
    8948:	bd80      	pop	{r7, pc}
    894a:	46c0      	nop			; (mov r8, r8)
    894c:	20002f98 	.word	0x20002f98
    8950:	20002eb7 	.word	0x20002eb7
    8954:	000146d5 	.word	0x000146d5
    8958:	00014639 	.word	0x00014639
    895c:	00004a38 	.word	0x00004a38

00008960 <CurrentMotorCalculatedStartup>:
//------------------------------------------------------------------------------
// This function
// Imotor=1.5+Fm*0.56 
//==============================================================================
uint16_t CurrentMotorCalculatedStartup(uint8_t forceMax)
{
    8960:	b580      	push	{r7, lr}
    8962:	b084      	sub	sp, #16
    8964:	af00      	add	r7, sp, #0
    8966:	1c02      	adds	r2, r0, #0
    8968:	1dfb      	adds	r3, r7, #7
    896a:	701a      	strb	r2, [r3, #0]
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    896c:	1c3b      	adds	r3, r7, #0
    896e:	330e      	adds	r3, #14
    8970:	2200      	movs	r2, #0
    8972:	801a      	strh	r2, [r3, #0]
//	fm = table0.Item.ForceMaxSet;
	fm = forceMax;
    8974:	4b16      	ldr	r3, [pc, #88]	; (89d0 <CurrentMotorCalculatedStartup+0x70>)
    8976:	1dfa      	adds	r2, r7, #7
    8978:	7812      	ldrb	r2, [r2, #0]
    897a:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    897c:	4b14      	ldr	r3, [pc, #80]	; (89d0 <CurrentMotorCalculatedStartup+0x70>)
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	2b00      	cmp	r3, #0
    8982:	d003      	beq.n	898c <CurrentMotorCalculatedStartup+0x2c>
    8984:	4b12      	ldr	r3, [pc, #72]	; (89d0 <CurrentMotorCalculatedStartup+0x70>)
    8986:	781b      	ldrb	r3, [r3, #0]
    8988:	2b09      	cmp	r3, #9
    898a:	d902      	bls.n	8992 <CurrentMotorCalculatedStartup+0x32>
	{
		fm = 5;
    898c:	4b10      	ldr	r3, [pc, #64]	; (89d0 <CurrentMotorCalculatedStartup+0x70>)
    898e:	2205      	movs	r2, #5
    8990:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1500 + (fm * 560);  //V00_62  was *375 now *560 //V00_78
    8992:	4b0f      	ldr	r3, [pc, #60]	; (89d0 <CurrentMotorCalculatedStartup+0x70>)
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	228c      	movs	r2, #140	; 0x8c
    8998:	0092      	lsls	r2, r2, #2
    899a:	4353      	muls	r3, r2
    899c:	4a0d      	ldr	r2, [pc, #52]	; (89d4 <CurrentMotorCalculatedStartup+0x74>)
    899e:	189b      	adds	r3, r3, r2
    89a0:	60bb      	str	r3, [r7, #8]
	temp1 = temp1 * 205;
    89a2:	68bb      	ldr	r3, [r7, #8]
    89a4:	22cd      	movs	r2, #205	; 0xcd
    89a6:	4353      	muls	r3, r2
    89a8:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/1000;
    89aa:	68ba      	ldr	r2, [r7, #8]
    89ac:	4b0a      	ldr	r3, [pc, #40]	; (89d8 <CurrentMotorCalculatedStartup+0x78>)
    89ae:	1c10      	adds	r0, r2, #0
    89b0:	22fa      	movs	r2, #250	; 0xfa
    89b2:	0091      	lsls	r1, r2, #2
    89b4:	4798      	blx	r3
    89b6:	1c03      	adds	r3, r0, #0
    89b8:	60bb      	str	r3, [r7, #8]
	returnCurrent = temp1;
    89ba:	1c3b      	adds	r3, r7, #0
    89bc:	330e      	adds	r3, #14
    89be:	68ba      	ldr	r2, [r7, #8]
    89c0:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    89c2:	1c3b      	adds	r3, r7, #0
    89c4:	330e      	adds	r3, #14
    89c6:	881b      	ldrh	r3, [r3, #0]
} 
    89c8:	1c18      	adds	r0, r3, #0
    89ca:	46bd      	mov	sp, r7
    89cc:	b004      	add	sp, #16
    89ce:	bd80      	pop	{r7, pc}
    89d0:	20002ea0 	.word	0x20002ea0
    89d4:	000005dc 	.word	0x000005dc
    89d8:	00014639 	.word	0x00014639

000089dc <CurrentMotorCalculatedBreakaway>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedBreakaway(void)
{
    89dc:	b580      	push	{r7, lr}
    89de:	b082      	sub	sp, #8
    89e0:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    89e2:	1dbb      	adds	r3, r7, #6
    89e4:	2200      	movs	r2, #0
    89e6:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    89e8:	4b1e      	ldr	r3, [pc, #120]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    89ea:	2207      	movs	r2, #7
    89ec:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    89ee:	4b1e      	ldr	r3, [pc, #120]	; (8a68 <CurrentMotorCalculatedBreakaway+0x8c>)
    89f0:	7d9a      	ldrb	r2, [r3, #22]
    89f2:	4b1c      	ldr	r3, [pc, #112]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    89f4:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    89f6:	4b1c      	ldr	r3, [pc, #112]	; (8a68 <CurrentMotorCalculatedBreakaway+0x8c>)
    89f8:	789a      	ldrb	r2, [r3, #2]
    89fa:	4b1c      	ldr	r3, [pc, #112]	; (8a6c <CurrentMotorCalculatedBreakaway+0x90>)
    89fc:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    89fe:	4b19      	ldr	r3, [pc, #100]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d003      	beq.n	8a0e <CurrentMotorCalculatedBreakaway+0x32>
    8a06:	4b17      	ldr	r3, [pc, #92]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	2b09      	cmp	r3, #9
    8a0c:	d902      	bls.n	8a14 <CurrentMotorCalculatedBreakaway+0x38>
	{
		fm = 5;
    8a0e:	4b15      	ldr	r3, [pc, #84]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    8a10:	2205      	movs	r2, #5
    8a12:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    8a14:	4b15      	ldr	r3, [pc, #84]	; (8a6c <CurrentMotorCalculatedBreakaway+0x90>)
    8a16:	781b      	ldrb	r3, [r3, #0]
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d003      	beq.n	8a24 <CurrentMotorCalculatedBreakaway+0x48>
    8a1c:	4b13      	ldr	r3, [pc, #76]	; (8a6c <CurrentMotorCalculatedBreakaway+0x90>)
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	2b09      	cmp	r3, #9
    8a22:	d902      	bls.n	8a2a <CurrentMotorCalculatedBreakaway+0x4e>
	{
		gain = 5;
    8a24:	4b11      	ldr	r3, [pc, #68]	; (8a6c <CurrentMotorCalculatedBreakaway+0x90>)
    8a26:	2205      	movs	r2, #5
    8a28:	701a      	strb	r2, [r3, #0]
	}
 	//----------------------------
	temp1 = 1900 + (fm * 375);  //V00_62  was *375 now *560 //V00_78
    8a2a:	4b0e      	ldr	r3, [pc, #56]	; (8a64 <CurrentMotorCalculatedBreakaway+0x88>)
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	2278      	movs	r2, #120	; 0x78
    8a30:	32ff      	adds	r2, #255	; 0xff
    8a32:	4353      	muls	r3, r2
    8a34:	4a0e      	ldr	r2, [pc, #56]	; (8a70 <CurrentMotorCalculatedBreakaway+0x94>)
    8a36:	189b      	adds	r3, r3, r2
    8a38:	603b      	str	r3, [r7, #0]
	temp1 = temp1 * 205;
    8a3a:	683b      	ldr	r3, [r7, #0]
    8a3c:	22cd      	movs	r2, #205	; 0xcd
    8a3e:	4353      	muls	r3, r2
    8a40:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    8a42:	683a      	ldr	r2, [r7, #0]
    8a44:	4b0b      	ldr	r3, [pc, #44]	; (8a74 <CurrentMotorCalculatedBreakaway+0x98>)
    8a46:	1c10      	adds	r0, r2, #0
    8a48:	22fa      	movs	r2, #250	; 0xfa
    8a4a:	0091      	lsls	r1, r2, #2
    8a4c:	4798      	blx	r3
    8a4e:	1c03      	adds	r3, r0, #0
    8a50:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    8a52:	1dbb      	adds	r3, r7, #6
    8a54:	683a      	ldr	r2, [r7, #0]
    8a56:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    8a58:	1dbb      	adds	r3, r7, #6
    8a5a:	881b      	ldrh	r3, [r3, #0]
} 
    8a5c:	1c18      	adds	r0, r3, #0
    8a5e:	46bd      	mov	sp, r7
    8a60:	b002      	add	sp, #8
    8a62:	bd80      	pop	{r7, pc}
    8a64:	20002ea0 	.word	0x20002ea0
    8a68:	20002f98 	.word	0x20002f98
    8a6c:	20002eb7 	.word	0x20002eb7
    8a70:	0000076c 	.word	0x0000076c
    8a74:	00014639 	.word	0x00014639

00008a78 <CurrentMotorCalculatedManual>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedManual(void)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b082      	sub	sp, #8
    8a7c:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    8a7e:	1dbb      	adds	r3, r7, #6
    8a80:	2200      	movs	r2, #0
    8a82:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    8a84:	4b1f      	ldr	r3, [pc, #124]	; (8b04 <CurrentMotorCalculatedManual+0x8c>)
    8a86:	7d9a      	ldrb	r2, [r3, #22]
    8a88:	4b1f      	ldr	r3, [pc, #124]	; (8b08 <CurrentMotorCalculatedManual+0x90>)
    8a8a:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    8a8c:	4b1d      	ldr	r3, [pc, #116]	; (8b04 <CurrentMotorCalculatedManual+0x8c>)
    8a8e:	789a      	ldrb	r2, [r3, #2]
    8a90:	4b1e      	ldr	r3, [pc, #120]	; (8b0c <CurrentMotorCalculatedManual+0x94>)
    8a92:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    8a94:	4b1c      	ldr	r3, [pc, #112]	; (8b08 <CurrentMotorCalculatedManual+0x90>)
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d003      	beq.n	8aa4 <CurrentMotorCalculatedManual+0x2c>
    8a9c:	4b1a      	ldr	r3, [pc, #104]	; (8b08 <CurrentMotorCalculatedManual+0x90>)
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	2b09      	cmp	r3, #9
    8aa2:	d902      	bls.n	8aaa <CurrentMotorCalculatedManual+0x32>
	{
		fm = 5;
    8aa4:	4b18      	ldr	r3, [pc, #96]	; (8b08 <CurrentMotorCalculatedManual+0x90>)
    8aa6:	2205      	movs	r2, #5
    8aa8:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    8aaa:	4b18      	ldr	r3, [pc, #96]	; (8b0c <CurrentMotorCalculatedManual+0x94>)
    8aac:	781b      	ldrb	r3, [r3, #0]
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d003      	beq.n	8aba <CurrentMotorCalculatedManual+0x42>
    8ab2:	4b16      	ldr	r3, [pc, #88]	; (8b0c <CurrentMotorCalculatedManual+0x94>)
    8ab4:	781b      	ldrb	r3, [r3, #0]
    8ab6:	2b09      	cmp	r3, #9
    8ab8:	d902      	bls.n	8ac0 <CurrentMotorCalculatedManual+0x48>
	{
		gain = 5;
    8aba:	4b14      	ldr	r3, [pc, #80]	; (8b0c <CurrentMotorCalculatedManual+0x94>)
    8abc:	2205      	movs	r2, #5
    8abe:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1900 + (fm * gain * 56); //V00_62  was *56 now *84 //V00_78
    8ac0:	4b11      	ldr	r3, [pc, #68]	; (8b08 <CurrentMotorCalculatedManual+0x90>)
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	4a11      	ldr	r2, [pc, #68]	; (8b0c <CurrentMotorCalculatedManual+0x94>)
    8ac6:	7812      	ldrb	r2, [r2, #0]
    8ac8:	435a      	muls	r2, r3
    8aca:	1c13      	adds	r3, r2, #0
    8acc:	00db      	lsls	r3, r3, #3
    8ace:	1a9b      	subs	r3, r3, r2
    8ad0:	00db      	lsls	r3, r3, #3
    8ad2:	4a0f      	ldr	r2, [pc, #60]	; (8b10 <CurrentMotorCalculatedManual+0x98>)
    8ad4:	189b      	adds	r3, r3, r2
    8ad6:	603b      	str	r3, [r7, #0]
	//---------------------
	// to make it 75% divide now by 100
	//---------------------
	temp1 = temp1 * 205;
    8ad8:	683b      	ldr	r3, [r7, #0]
    8ada:	22cd      	movs	r2, #205	; 0xcd
    8adc:	4353      	muls	r3, r2
    8ade:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    8ae0:	683a      	ldr	r2, [r7, #0]
    8ae2:	4b0c      	ldr	r3, [pc, #48]	; (8b14 <CurrentMotorCalculatedManual+0x9c>)
    8ae4:	1c10      	adds	r0, r2, #0
    8ae6:	22fa      	movs	r2, #250	; 0xfa
    8ae8:	0091      	lsls	r1, r2, #2
    8aea:	4798      	blx	r3
    8aec:	1c03      	adds	r3, r0, #0
    8aee:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    8af0:	1dbb      	adds	r3, r7, #6
    8af2:	683a      	ldr	r2, [r7, #0]
    8af4:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    8af6:	1dbb      	adds	r3, r7, #6
    8af8:	881b      	ldrh	r3, [r3, #0]
} 
    8afa:	1c18      	adds	r0, r3, #0
    8afc:	46bd      	mov	sp, r7
    8afe:	b002      	add	sp, #8
    8b00:	bd80      	pop	{r7, pc}
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	20002f98 	.word	0x20002f98
    8b08:	20002ea0 	.word	0x20002ea0
    8b0c:	20002eb7 	.word	0x20002eb7
    8b10:	0000076c 	.word	0x0000076c
    8b14:	00014639 	.word	0x00014639

00008b18 <ConfigureMotorFLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitChannel(void)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	b084      	sub	sp, #16
    8b1c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    8b1e:	1d3b      	adds	r3, r7, #4
    8b20:	1c18      	adds	r0, r3, #0
    8b22:	4b0b      	ldr	r3, [pc, #44]	; (8b50 <ConfigureMotorFLimitChannel+0x38>)
    8b24:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA21A_EIC_EXTINT5;
    8b26:	1d3b      	adds	r3, r7, #4
    8b28:	2215      	movs	r2, #21
    8b2a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA21A_EIC_EXTINT5;
    8b2c:	1d3b      	adds	r3, r7, #4
    8b2e:	2200      	movs	r2, #0
    8b30:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    8b32:	1d3b      	adds	r3, r7, #4
    8b34:	2200      	movs	r2, #0
    8b36:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    8b38:	1d3b      	adds	r3, r7, #4
    8b3a:	2203      	movs	r2, #3
    8b3c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(5, &config_extint_chan);
    8b3e:	1d3b      	adds	r3, r7, #4
    8b40:	2005      	movs	r0, #5
    8b42:	1c19      	adds	r1, r3, #0
    8b44:	4b03      	ldr	r3, [pc, #12]	; (8b54 <ConfigureMotorFLimitChannel+0x3c>)
    8b46:	4798      	blx	r3
}
    8b48:	46bd      	mov	sp, r7
    8b4a:	b004      	add	sp, #16
    8b4c:	bd80      	pop	{r7, pc}
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	000067c9 	.word	0x000067c9
    8b54:	0000406d 	.word	0x0000406d

00008b58 <ConfigureMotorFLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitCallbacks(void)
{
    8b58:	b580      	push	{r7, lr}
    8b5a:	af00      	add	r7, sp, #0
	extint_register_callback(MotorFLimitCallback,5,EXTINT_CALLBACK_TYPE_DETECT);
    8b5c:	4b05      	ldr	r3, [pc, #20]	; (8b74 <ConfigureMotorFLimitCallbacks+0x1c>)
    8b5e:	1c18      	adds	r0, r3, #0
    8b60:	2105      	movs	r1, #5
    8b62:	2200      	movs	r2, #0
    8b64:	4b04      	ldr	r3, [pc, #16]	; (8b78 <ConfigureMotorFLimitCallbacks+0x20>)
    8b66:	4798      	blx	r3
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
    8b68:	2005      	movs	r0, #5
    8b6a:	2100      	movs	r1, #0
    8b6c:	4b03      	ldr	r3, [pc, #12]	; (8b7c <ConfigureMotorFLimitCallbacks+0x24>)
    8b6e:	4798      	blx	r3
}
    8b70:	46bd      	mov	sp, r7
    8b72:	bd80      	pop	{r7, pc}
    8b74:	00008b81 	.word	0x00008b81
    8b78:	00004239 	.word	0x00004239
    8b7c:	00004295 	.word	0x00004295

00008b80 <MotorFLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorFLimitCallback(void)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORFLIMIT;
    8b84:	4b0a      	ldr	r3, [pc, #40]	; (8bb0 <MotorFLimitCallback+0x30>)
    8b86:	681b      	ldr	r3, [r3, #0]
    8b88:	2204      	movs	r2, #4
    8b8a:	431a      	orrs	r2, r3
    8b8c:	4b08      	ldr	r3, [pc, #32]	; (8bb0 <MotorFLimitCallback+0x30>)
    8b8e:	601a      	str	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);		
    8b90:	2015      	movs	r0, #21
    8b92:	4b08      	ldr	r3, [pc, #32]	; (8bb4 <MotorFLimitCallback+0x34>)
    8b94:	4798      	blx	r3
    8b96:	1c03      	adds	r3, r0, #0
    8b98:	1c1a      	adds	r2, r3, #0
    8b9a:	4b07      	ldr	r3, [pc, #28]	; (8bb8 <MotorFLimitCallback+0x38>)
    8b9c:	701a      	strb	r2, [r3, #0]
	if (flimitState == 0)
    8b9e:	4b06      	ldr	r3, [pc, #24]	; (8bb8 <MotorFLimitCallback+0x38>)
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d101      	bne.n	8baa <MotorFLimitCallback+0x2a>
	{
		MotorOff();
    8ba6:	4b05      	ldr	r3, [pc, #20]	; (8bbc <MotorFLimitCallback+0x3c>)
    8ba8:	4798      	blx	r3
	}
}
    8baa:	46bd      	mov	sp, r7
    8bac:	bd80      	pop	{r7, pc}
    8bae:	46c0      	nop			; (mov r8, r8)
    8bb0:	20003668 	.word	0x20003668
    8bb4:	0000672d 	.word	0x0000672d
    8bb8:	2000303e 	.word	0x2000303e
    8bbc:	00008d51 	.word	0x00008d51

00008bc0 <ConfigureMotorHLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitChannel(void)
{
    8bc0:	b580      	push	{r7, lr}
    8bc2:	b084      	sub	sp, #16
    8bc4:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    8bc6:	1d3b      	adds	r3, r7, #4
    8bc8:	1c18      	adds	r0, r3, #0
    8bca:	4b0b      	ldr	r3, [pc, #44]	; (8bf8 <ConfigureMotorHLimitChannel+0x38>)
    8bcc:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA20A_EIC_EXTINT4;   
    8bce:	1d3b      	adds	r3, r7, #4
    8bd0:	2214      	movs	r2, #20
    8bd2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA20A_EIC_EXTINT4;   
    8bd4:	1d3b      	adds	r3, r7, #4
    8bd6:	2200      	movs	r2, #0
    8bd8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    8bda:	1d3b      	adds	r3, r7, #4
    8bdc:	2200      	movs	r2, #0
    8bde:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH; 
    8be0:	1d3b      	adds	r3, r7, #4
    8be2:	2203      	movs	r2, #3
    8be4:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(4, &config_extint_chan);   
    8be6:	1d3b      	adds	r3, r7, #4
    8be8:	2004      	movs	r0, #4
    8bea:	1c19      	adds	r1, r3, #0
    8bec:	4b03      	ldr	r3, [pc, #12]	; (8bfc <ConfigureMotorHLimitChannel+0x3c>)
    8bee:	4798      	blx	r3
}
    8bf0:	46bd      	mov	sp, r7
    8bf2:	b004      	add	sp, #16
    8bf4:	bd80      	pop	{r7, pc}
    8bf6:	46c0      	nop			; (mov r8, r8)
    8bf8:	000067c9 	.word	0x000067c9
    8bfc:	0000406d 	.word	0x0000406d

00008c00 <ConfigureMotorHLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitCallbacks(void)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	af00      	add	r7, sp, #0
	extint_register_callback(MotorHLimitCallback,4,EXTINT_CALLBACK_TYPE_DETECT);
    8c04:	4b05      	ldr	r3, [pc, #20]	; (8c1c <ConfigureMotorHLimitCallbacks+0x1c>)
    8c06:	1c18      	adds	r0, r3, #0
    8c08:	2104      	movs	r1, #4
    8c0a:	2200      	movs	r2, #0
    8c0c:	4b04      	ldr	r3, [pc, #16]	; (8c20 <ConfigureMotorHLimitCallbacks+0x20>)
    8c0e:	4798      	blx	r3
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
    8c10:	2004      	movs	r0, #4
    8c12:	2100      	movs	r1, #0
    8c14:	4b03      	ldr	r3, [pc, #12]	; (8c24 <ConfigureMotorHLimitCallbacks+0x24>)
    8c16:	4798      	blx	r3
}
    8c18:	46bd      	mov	sp, r7
    8c1a:	bd80      	pop	{r7, pc}
    8c1c:	00008c29 	.word	0x00008c29
    8c20:	00004239 	.word	0x00004239
    8c24:	00004295 	.word	0x00004295

00008c28 <MotorHLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorHLimitCallback(void)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORHLIMIT;
    8c2c:	4b0a      	ldr	r3, [pc, #40]	; (8c58 <MotorHLimitCallback+0x30>)
    8c2e:	681b      	ldr	r3, [r3, #0]
    8c30:	2202      	movs	r2, #2
    8c32:	431a      	orrs	r2, r3
    8c34:	4b08      	ldr	r3, [pc, #32]	; (8c58 <MotorHLimitCallback+0x30>)
    8c36:	601a      	str	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    8c38:	2014      	movs	r0, #20
    8c3a:	4b08      	ldr	r3, [pc, #32]	; (8c5c <MotorHLimitCallback+0x34>)
    8c3c:	4798      	blx	r3
    8c3e:	1c03      	adds	r3, r0, #0
    8c40:	1c1a      	adds	r2, r3, #0
    8c42:	4b07      	ldr	r3, [pc, #28]	; (8c60 <MotorHLimitCallback+0x38>)
    8c44:	701a      	strb	r2, [r3, #0]
	if (hlimitState == 0)
    8c46:	4b06      	ldr	r3, [pc, #24]	; (8c60 <MotorHLimitCallback+0x38>)
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d101      	bne.n	8c52 <MotorHLimitCallback+0x2a>
	{
		MotorOff();
    8c4e:	4b05      	ldr	r3, [pc, #20]	; (8c64 <MotorHLimitCallback+0x3c>)
    8c50:	4798      	blx	r3
	}
}
    8c52:	46bd      	mov	sp, r7
    8c54:	bd80      	pop	{r7, pc}
    8c56:	46c0      	nop			; (mov r8, r8)
    8c58:	20003668 	.word	0x20003668
    8c5c:	0000672d 	.word	0x0000672d
    8c60:	20003034 	.word	0x20003034
    8c64:	00008d51 	.word	0x00008d51

00008c68 <MotorHLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorHLimitTask(void)
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	af00      	add	r7, sp, #0
	hlimitCount++;	
    8c6c:	4b07      	ldr	r3, [pc, #28]	; (8c8c <MotorHLimitTask+0x24>)
    8c6e:	781b      	ldrb	r3, [r3, #0]
    8c70:	3301      	adds	r3, #1
    8c72:	b2da      	uxtb	r2, r3
    8c74:	4b05      	ldr	r3, [pc, #20]	; (8c8c <MotorHLimitTask+0x24>)
    8c76:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    8c78:	2014      	movs	r0, #20
    8c7a:	4b05      	ldr	r3, [pc, #20]	; (8c90 <MotorHLimitTask+0x28>)
    8c7c:	4798      	blx	r3
    8c7e:	1c03      	adds	r3, r0, #0
    8c80:	1c1a      	adds	r2, r3, #0
    8c82:	4b04      	ldr	r3, [pc, #16]	; (8c94 <MotorHLimitTask+0x2c>)
    8c84:	701a      	strb	r2, [r3, #0]
}
    8c86:	46bd      	mov	sp, r7
    8c88:	bd80      	pop	{r7, pc}
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	20002ecd 	.word	0x20002ecd
    8c90:	0000672d 	.word	0x0000672d
    8c94:	20003034 	.word	0x20003034

00008c98 <MotorFLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorFLimitTask(void)
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	af00      	add	r7, sp, #0
	flimitCount++;
    8c9c:	4b07      	ldr	r3, [pc, #28]	; (8cbc <MotorFLimitTask+0x24>)
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	3301      	adds	r3, #1
    8ca2:	b2da      	uxtb	r2, r3
    8ca4:	4b05      	ldr	r3, [pc, #20]	; (8cbc <MotorFLimitTask+0x24>)
    8ca6:	701a      	strb	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);
    8ca8:	2015      	movs	r0, #21
    8caa:	4b05      	ldr	r3, [pc, #20]	; (8cc0 <MotorFLimitTask+0x28>)
    8cac:	4798      	blx	r3
    8cae:	1c03      	adds	r3, r0, #0
    8cb0:	1c1a      	adds	r2, r3, #0
    8cb2:	4b04      	ldr	r3, [pc, #16]	; (8cc4 <MotorFLimitTask+0x2c>)
    8cb4:	701a      	strb	r2, [r3, #0]
}
    8cb6:	46bd      	mov	sp, r7
    8cb8:	bd80      	pop	{r7, pc}
    8cba:	46c0      	nop			; (mov r8, r8)
    8cbc:	20002ea1 	.word	0x20002ea1
    8cc0:	0000672d 	.word	0x0000672d
    8cc4:	2000303e 	.word	0x2000303e

00008cc8 <MotorInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorInit(void)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	af00      	add	r7, sp, #0
	hlimitCount = 0;
    8ccc:	4b13      	ldr	r3, [pc, #76]	; (8d1c <MotorInit+0x54>)
    8cce:	2200      	movs	r2, #0
    8cd0:	701a      	strb	r2, [r3, #0]
	flimitCount = 0; 
    8cd2:	4b13      	ldr	r3, [pc, #76]	; (8d20 <MotorInit+0x58>)
    8cd4:	2200      	movs	r2, #0
    8cd6:	701a      	strb	r2, [r3, #0]
	
	ConfigureMotorHLimitChannel();
    8cd8:	4b12      	ldr	r3, [pc, #72]	; (8d24 <MotorInit+0x5c>)
    8cda:	4798      	blx	r3
	ConfigureMotorHLimitCallbacks();
    8cdc:	4b12      	ldr	r3, [pc, #72]	; (8d28 <MotorInit+0x60>)
    8cde:	4798      	blx	r3
	
	ConfigureMotorFLimitChannel();
    8ce0:	4b12      	ldr	r3, [pc, #72]	; (8d2c <MotorInit+0x64>)
    8ce2:	4798      	blx	r3
	ConfigureMotorFLimitCallbacks();	
    8ce4:	4b12      	ldr	r3, [pc, #72]	; (8d30 <MotorInit+0x68>)
    8ce6:	4798      	blx	r3
	
	flimitState = port_pin_get_input_level(FLIMIT);
    8ce8:	2015      	movs	r0, #21
    8cea:	4b12      	ldr	r3, [pc, #72]	; (8d34 <MotorInit+0x6c>)
    8cec:	4798      	blx	r3
    8cee:	1c03      	adds	r3, r0, #0
    8cf0:	1c1a      	adds	r2, r3, #0
    8cf2:	4b11      	ldr	r3, [pc, #68]	; (8d38 <MotorInit+0x70>)
    8cf4:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    8cf6:	2014      	movs	r0, #20
    8cf8:	4b0e      	ldr	r3, [pc, #56]	; (8d34 <MotorInit+0x6c>)
    8cfa:	4798      	blx	r3
    8cfc:	1c03      	adds	r3, r0, #0
    8cfe:	1c1a      	adds	r2, r3, #0
    8d00:	4b0e      	ldr	r3, [pc, #56]	; (8d3c <MotorInit+0x74>)
    8d02:	701a      	strb	r2, [r3, #0]
	
	ConfigureEncoder();
    8d04:	4b0e      	ldr	r3, [pc, #56]	; (8d40 <MotorInit+0x78>)
    8d06:	4798      	blx	r3
	ConfigureEncoderCallbacks();
    8d08:	4b0e      	ldr	r3, [pc, #56]	; (8d44 <MotorInit+0x7c>)
    8d0a:	4798      	blx	r3
	encoderCount = 0; 
    8d0c:	4b0e      	ldr	r3, [pc, #56]	; (8d48 <MotorInit+0x80>)
    8d0e:	2200      	movs	r2, #0
    8d10:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    8d12:	4b0e      	ldr	r3, [pc, #56]	; (8d4c <MotorInit+0x84>)
    8d14:	2200      	movs	r2, #0
    8d16:	801a      	strh	r2, [r3, #0]
}
    8d18:	46bd      	mov	sp, r7
    8d1a:	bd80      	pop	{r7, pc}
    8d1c:	20002ecd 	.word	0x20002ecd
    8d20:	20002ea1 	.word	0x20002ea1
    8d24:	00008bc1 	.word	0x00008bc1
    8d28:	00008c01 	.word	0x00008c01
    8d2c:	00008b19 	.word	0x00008b19
    8d30:	00008b59 	.word	0x00008b59
    8d34:	0000672d 	.word	0x0000672d
    8d38:	2000303e 	.word	0x2000303e
    8d3c:	20003034 	.word	0x20003034
    8d40:	00006555 	.word	0x00006555
    8d44:	00006595 	.word	0x00006595
    8d48:	200004a8 	.word	0x200004a8
    8d4c:	20001e8c 	.word	0x20001e8c

00008d50 <MotorOff>:
// FUNCTION:   MotorOff
//------------------------------------------------------------------------------
// This function Initializes registers to allow button interrupts
//==============================================================================
void MotorOff(void)
{
    8d50:	b580      	push	{r7, lr}
    8d52:	b082      	sub	sp, #8
    8d54:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    8d56:	1d3b      	adds	r3, r7, #4
    8d58:	1c18      	adds	r0, r3, #0
    8d5a:	4b1a      	ldr	r3, [pc, #104]	; (8dc4 <MotorOff+0x74>)
    8d5c:	4798      	blx	r3
  
	motorOn = FALSE; 
    8d5e:	4b1a      	ldr	r3, [pc, #104]	; (8dc8 <MotorOff+0x78>)
    8d60:	2200      	movs	r2, #0
    8d62:	701a      	strb	r2, [r3, #0]
	motorRunTime = 0;	
    8d64:	4b19      	ldr	r3, [pc, #100]	; (8dcc <MotorOff+0x7c>)
    8d66:	2200      	movs	r2, #0
    8d68:	801a      	strh	r2, [r3, #0]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8d6a:	1d3b      	adds	r3, r7, #4
    8d6c:	2201      	movs	r2, #1
    8d6e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);
    8d70:	1d3b      	adds	r3, r7, #4
    8d72:	2012      	movs	r0, #18
    8d74:	1c19      	adds	r1, r3, #0
    8d76:	4b16      	ldr	r3, [pc, #88]	; (8dd0 <MotorOff+0x80>)
    8d78:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    8d7a:	2012      	movs	r0, #18
    8d7c:	2100      	movs	r1, #0
    8d7e:	4b15      	ldr	r3, [pc, #84]	; (8dd4 <MotorOff+0x84>)
    8d80:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    8d82:	1d3b      	adds	r3, r7, #4
    8d84:	2018      	movs	r0, #24
    8d86:	1c19      	adds	r1, r3, #0
    8d88:	4b11      	ldr	r3, [pc, #68]	; (8dd0 <MotorOff+0x80>)
    8d8a:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    8d8c:	2018      	movs	r0, #24
    8d8e:	2100      	movs	r1, #0
    8d90:	4b10      	ldr	r3, [pc, #64]	; (8dd4 <MotorOff+0x84>)
    8d92:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);
    8d94:	1d3b      	adds	r3, r7, #4
    8d96:	2013      	movs	r0, #19
    8d98:	1c19      	adds	r1, r3, #0
    8d9a:	4b0d      	ldr	r3, [pc, #52]	; (8dd0 <MotorOff+0x80>)
    8d9c:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    8d9e:	2013      	movs	r0, #19
    8da0:	2100      	movs	r1, #0
    8da2:	4b0c      	ldr	r3, [pc, #48]	; (8dd4 <MotorOff+0x84>)
    8da4:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);
    8da6:	1d3b      	adds	r3, r7, #4
    8da8:	2019      	movs	r0, #25
    8daa:	1c19      	adds	r1, r3, #0
    8dac:	4b08      	ldr	r3, [pc, #32]	; (8dd0 <MotorOff+0x80>)
    8dae:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    8db0:	2019      	movs	r0, #25
    8db2:	2100      	movs	r1, #0
    8db4:	4b07      	ldr	r3, [pc, #28]	; (8dd4 <MotorOff+0x84>)
    8db6:	4798      	blx	r3
	action = NONE; 
    8db8:	4b07      	ldr	r3, [pc, #28]	; (8dd8 <MotorOff+0x88>)
    8dba:	2200      	movs	r2, #0
    8dbc:	701a      	strb	r2, [r3, #0]
}
    8dbe:	46bd      	mov	sp, r7
    8dc0:	b002      	add	sp, #8
    8dc2:	bd80      	pop	{r7, pc}
    8dc4:	0000670d 	.word	0x0000670d
    8dc8:	200004ac 	.word	0x200004ac
    8dcc:	20002e9e 	.word	0x20002e9e
    8dd0:	00010c95 	.word	0x00010c95
    8dd4:	00006775 	.word	0x00006775
    8dd8:	200004ab 	.word	0x200004ab

00008ddc <RetractByEncoderCount>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RetractByEncoderCount(void)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	b082      	sub	sp, #8
    8de0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    8de2:	1d3b      	adds	r3, r7, #4
    8de4:	1c18      	adds	r0, r3, #0
    8de6:	4b11      	ldr	r3, [pc, #68]	; (8e2c <RetractByEncoderCount+0x50>)
    8de8:	4798      	blx	r3
	
	motorOn = TRUE; 
    8dea:	4b11      	ldr	r3, [pc, #68]	; (8e30 <RetractByEncoderCount+0x54>)
    8dec:	2201      	movs	r2, #1
    8dee:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    8df0:	2013      	movs	r0, #19
    8df2:	2100      	movs	r1, #0
    8df4:	4b0f      	ldr	r3, [pc, #60]	; (8e34 <RetractByEncoderCount+0x58>)
    8df6:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    8df8:	2019      	movs	r0, #25
    8dfa:	2101      	movs	r1, #1
    8dfc:	4b0d      	ldr	r3, [pc, #52]	; (8e34 <RetractByEncoderCount+0x58>)
    8dfe:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8e00:	1d3b      	adds	r3, r7, #4
    8e02:	2200      	movs	r2, #0
    8e04:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8e06:	1d3b      	adds	r3, r7, #4
    8e08:	2200      	movs	r2, #0
    8e0a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    8e0c:	1d3b      	adds	r3, r7, #4
    8e0e:	2012      	movs	r0, #18
    8e10:	1c19      	adds	r1, r3, #0
    8e12:	4b09      	ldr	r3, [pc, #36]	; (8e38 <RetractByEncoderCount+0x5c>)
    8e14:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    8e16:	1d3b      	adds	r3, r7, #4
    8e18:	2018      	movs	r0, #24
    8e1a:	1c19      	adds	r1, r3, #0
    8e1c:	4b06      	ldr	r3, [pc, #24]	; (8e38 <RetractByEncoderCount+0x5c>)
    8e1e:	4798      	blx	r3
	action = RETRACTING_BY_ENCODER; 
    8e20:	4b06      	ldr	r3, [pc, #24]	; (8e3c <RetractByEncoderCount+0x60>)
    8e22:	2203      	movs	r2, #3
    8e24:	701a      	strb	r2, [r3, #0]
}
    8e26:	46bd      	mov	sp, r7
    8e28:	b002      	add	sp, #8
    8e2a:	bd80      	pop	{r7, pc}
    8e2c:	0000670d 	.word	0x0000670d
    8e30:	200004ac 	.word	0x200004ac
    8e34:	00006775 	.word	0x00006775
    8e38:	00010c95 	.word	0x00010c95
    8e3c:	200004ab 	.word	0x200004ab

00008e40 <MotorCCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorCCW(void)
{
    8e40:	b580      	push	{r7, lr}
    8e42:	b082      	sub	sp, #8
    8e44:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    8e46:	1d3b      	adds	r3, r7, #4
    8e48:	1c18      	adds	r0, r3, #0
    8e4a:	4b18      	ldr	r3, [pc, #96]	; (8eac <MotorCCW+0x6c>)
    8e4c:	4798      	blx	r3
	
	motorOn = TRUE; 
    8e4e:	4b18      	ldr	r3, [pc, #96]	; (8eb0 <MotorCCW+0x70>)
    8e50:	2201      	movs	r2, #1
    8e52:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    8e54:	4b17      	ldr	r3, [pc, #92]	; (8eb4 <MotorCCW+0x74>)
    8e56:	2296      	movs	r2, #150	; 0x96
    8e58:	0052      	lsls	r2, r2, #1
    8e5a:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0; 
    8e5c:	4b16      	ldr	r3, [pc, #88]	; (8eb8 <MotorCCW+0x78>)
    8e5e:	2200      	movs	r2, #0
    8e60:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;
    8e62:	4b16      	ldr	r3, [pc, #88]	; (8ebc <MotorCCW+0x7c>)
    8e64:	2200      	movs	r2, #0
    8e66:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    8e68:	4b15      	ldr	r3, [pc, #84]	; (8ec0 <MotorCCW+0x80>)
    8e6a:	2200      	movs	r2, #0
    8e6c:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    8e6e:	2013      	movs	r0, #19
    8e70:	2100      	movs	r1, #0
    8e72:	4b14      	ldr	r3, [pc, #80]	; (8ec4 <MotorCCW+0x84>)
    8e74:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    8e76:	2019      	movs	r0, #25
    8e78:	2101      	movs	r1, #1
    8e7a:	4b12      	ldr	r3, [pc, #72]	; (8ec4 <MotorCCW+0x84>)
    8e7c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8e7e:	1d3b      	adds	r3, r7, #4
    8e80:	2200      	movs	r2, #0
    8e82:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8e84:	1d3b      	adds	r3, r7, #4
    8e86:	2200      	movs	r2, #0
    8e88:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    8e8a:	1d3b      	adds	r3, r7, #4
    8e8c:	2012      	movs	r0, #18
    8e8e:	1c19      	adds	r1, r3, #0
    8e90:	4b0d      	ldr	r3, [pc, #52]	; (8ec8 <MotorCCW+0x88>)
    8e92:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    8e94:	1d3b      	adds	r3, r7, #4
    8e96:	2018      	movs	r0, #24
    8e98:	1c19      	adds	r1, r3, #0
    8e9a:	4b0b      	ldr	r3, [pc, #44]	; (8ec8 <MotorCCW+0x88>)
    8e9c:	4798      	blx	r3
	action = RETRACTING; 
    8e9e:	4b0b      	ldr	r3, [pc, #44]	; (8ecc <MotorCCW+0x8c>)
    8ea0:	2202      	movs	r2, #2
    8ea2:	701a      	strb	r2, [r3, #0]
}
    8ea4:	46bd      	mov	sp, r7
    8ea6:	b002      	add	sp, #8
    8ea8:	bd80      	pop	{r7, pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	0000670d 	.word	0x0000670d
    8eb0:	200004ac 	.word	0x200004ac
    8eb4:	20002e9e 	.word	0x20002e9e
    8eb8:	200004b8 	.word	0x200004b8
    8ebc:	200004a8 	.word	0x200004a8
    8ec0:	20001e8c 	.word	0x20001e8c
    8ec4:	00006775 	.word	0x00006775
    8ec8:	00010c95 	.word	0x00010c95
    8ecc:	200004ab 	.word	0x200004ab

00008ed0 <MotorCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void MotorCW(void)
{
    8ed0:	b580      	push	{r7, lr}
    8ed2:	b082      	sub	sp, #8
    8ed4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    8ed6:	1d3b      	adds	r3, r7, #4
    8ed8:	1c18      	adds	r0, r3, #0
    8eda:	4b1b      	ldr	r3, [pc, #108]	; (8f48 <MotorCW+0x78>)
    8edc:	4798      	blx	r3

	motorOn = TRUE; 
    8ede:	4b1b      	ldr	r3, [pc, #108]	; (8f4c <MotorCW+0x7c>)
    8ee0:	2201      	movs	r2, #1
    8ee2:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    8ee4:	4b1a      	ldr	r3, [pc, #104]	; (8f50 <MotorCW+0x80>)
    8ee6:	2296      	movs	r2, #150	; 0x96
    8ee8:	0052      	lsls	r2, r2, #1
    8eea:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    8eec:	4b19      	ldr	r3, [pc, #100]	; (8f54 <MotorCW+0x84>)
    8eee:	2200      	movs	r2, #0
    8ef0:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;	
    8ef2:	4b19      	ldr	r3, [pc, #100]	; (8f58 <MotorCW+0x88>)
    8ef4:	2200      	movs	r2, #0
    8ef6:	801a      	strh	r2, [r3, #0]
	encoderFlip = 0; 
    8ef8:	4b18      	ldr	r3, [pc, #96]	; (8f5c <MotorCW+0x8c>)
    8efa:	2200      	movs	r2, #0
    8efc:	701a      	strb	r2, [r3, #0]
	buildTableOffset = 0;
    8efe:	4b18      	ldr	r3, [pc, #96]	; (8f60 <MotorCW+0x90>)
    8f00:	2200      	movs	r2, #0
    8f02:	801a      	strh	r2, [r3, #0]
	encoderTableOffset = 0; 
    8f04:	4b17      	ldr	r3, [pc, #92]	; (8f64 <MotorCW+0x94>)
    8f06:	2200      	movs	r2, #0
    8f08:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, true);
    8f0a:	2013      	movs	r0, #19
    8f0c:	2101      	movs	r1, #1
    8f0e:	4b16      	ldr	r3, [pc, #88]	; (8f68 <MotorCW+0x98>)
    8f10:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    8f12:	2019      	movs	r0, #25
    8f14:	2100      	movs	r1, #0
    8f16:	4b14      	ldr	r3, [pc, #80]	; (8f68 <MotorCW+0x98>)
    8f18:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8f1a:	1d3b      	adds	r3, r7, #4
    8f1c:	2200      	movs	r2, #0
    8f1e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8f20:	1d3b      	adds	r3, r7, #4
    8f22:	2200      	movs	r2, #0
    8f24:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    8f26:	1d3b      	adds	r3, r7, #4
    8f28:	2012      	movs	r0, #18
    8f2a:	1c19      	adds	r1, r3, #0
    8f2c:	4b0f      	ldr	r3, [pc, #60]	; (8f6c <MotorCW+0x9c>)
    8f2e:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    8f30:	1d3b      	adds	r3, r7, #4
    8f32:	2018      	movs	r0, #24
    8f34:	1c19      	adds	r1, r3, #0
    8f36:	4b0d      	ldr	r3, [pc, #52]	; (8f6c <MotorCW+0x9c>)
    8f38:	4798      	blx	r3
	action = EXTENDING; 
    8f3a:	4b0d      	ldr	r3, [pc, #52]	; (8f70 <MotorCW+0xa0>)
    8f3c:	2201      	movs	r2, #1
    8f3e:	701a      	strb	r2, [r3, #0]
	
}
    8f40:	46bd      	mov	sp, r7
    8f42:	b002      	add	sp, #8
    8f44:	bd80      	pop	{r7, pc}
    8f46:	46c0      	nop			; (mov r8, r8)
    8f48:	0000670d 	.word	0x0000670d
    8f4c:	200004ac 	.word	0x200004ac
    8f50:	20002e9e 	.word	0x20002e9e
    8f54:	200004b8 	.word	0x200004b8
    8f58:	200004a8 	.word	0x200004a8
    8f5c:	200004aa 	.word	0x200004aa
    8f60:	20001e8c 	.word	0x20001e8c
    8f64:	20001e8e 	.word	0x20001e8e
    8f68:	00006775 	.word	0x00006775
    8f6c:	00010c95 	.word	0x00010c95
    8f70:	200004ab 	.word	0x200004ab

00008f74 <MotorExtendMore>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorExtendMore(void)
{
    8f74:	b580      	push	{r7, lr}
    8f76:	b082      	sub	sp, #8
    8f78:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    8f7a:	1d3b      	adds	r3, r7, #4
    8f7c:	1c18      	adds	r0, r3, #0
    8f7e:	4b16      	ldr	r3, [pc, #88]	; (8fd8 <MotorExtendMore+0x64>)
    8f80:	4798      	blx	r3

	motorOn = TRUE;
    8f82:	4b16      	ldr	r3, [pc, #88]	; (8fdc <MotorExtendMore+0x68>)
    8f84:	2201      	movs	r2, #1
    8f86:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;
    8f88:	4b15      	ldr	r3, [pc, #84]	; (8fe0 <MotorExtendMore+0x6c>)
    8f8a:	2296      	movs	r2, #150	; 0x96
    8f8c:	0052      	lsls	r2, r2, #1
    8f8e:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    8f90:	4b14      	ldr	r3, [pc, #80]	; (8fe4 <MotorExtendMore+0x70>)
    8f92:	2200      	movs	r2, #0
    8f94:	801a      	strh	r2, [r3, #0]
//	encoderCount = 0;
//	encoderFlip = 0;
	buildTableOffset = 0;
    8f96:	4b14      	ldr	r3, [pc, #80]	; (8fe8 <MotorExtendMore+0x74>)
    8f98:	2200      	movs	r2, #0
    8f9a:	801a      	strh	r2, [r3, #0]
//	encoderTableOffset = 0;
	port_pin_set_output_level(INa, true);
    8f9c:	2013      	movs	r0, #19
    8f9e:	2101      	movs	r1, #1
    8fa0:	4b12      	ldr	r3, [pc, #72]	; (8fec <MotorExtendMore+0x78>)
    8fa2:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    8fa4:	2019      	movs	r0, #25
    8fa6:	2100      	movs	r1, #0
    8fa8:	4b10      	ldr	r3, [pc, #64]	; (8fec <MotorExtendMore+0x78>)
    8faa:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8fac:	1d3b      	adds	r3, r7, #4
    8fae:	2200      	movs	r2, #0
    8fb0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8fb2:	1d3b      	adds	r3, r7, #4
    8fb4:	2200      	movs	r2, #0
    8fb6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    8fb8:	1d3b      	adds	r3, r7, #4
    8fba:	2012      	movs	r0, #18
    8fbc:	1c19      	adds	r1, r3, #0
    8fbe:	4b0c      	ldr	r3, [pc, #48]	; (8ff0 <MotorExtendMore+0x7c>)
    8fc0:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    8fc2:	1d3b      	adds	r3, r7, #4
    8fc4:	2018      	movs	r0, #24
    8fc6:	1c19      	adds	r1, r3, #0
    8fc8:	4b09      	ldr	r3, [pc, #36]	; (8ff0 <MotorExtendMore+0x7c>)
    8fca:	4798      	blx	r3
	action = EXTENDING;
    8fcc:	4b09      	ldr	r3, [pc, #36]	; (8ff4 <MotorExtendMore+0x80>)
    8fce:	2201      	movs	r2, #1
    8fd0:	701a      	strb	r2, [r3, #0]
	
}
    8fd2:	46bd      	mov	sp, r7
    8fd4:	b002      	add	sp, #8
    8fd6:	bd80      	pop	{r7, pc}
    8fd8:	0000670d 	.word	0x0000670d
    8fdc:	200004ac 	.word	0x200004ac
    8fe0:	20002e9e 	.word	0x20002e9e
    8fe4:	200004b8 	.word	0x200004b8
    8fe8:	20001e8c 	.word	0x20001e8c
    8fec:	00006775 	.word	0x00006775
    8ff0:	00010c95 	.word	0x00010c95
    8ff4:	200004ab 	.word	0x200004ab

00008ff8 <AppProtocolChecksum>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AppProtocolChecksum(uint8_t *buffers,uint16_t length)
{
    8ff8:	b580      	push	{r7, lr}
    8ffa:	b086      	sub	sp, #24
    8ffc:	af00      	add	r7, sp, #0
    8ffe:	6078      	str	r0, [r7, #4]
    9000:	1c0a      	adds	r2, r1, #0
    9002:	1cbb      	adds	r3, r7, #2
    9004:	801a      	strh	r2, [r3, #0]
	uint8_t checksum,*ptr; 
	uint16_t i; 
	
	checksum = 0; 
    9006:	1c3b      	adds	r3, r7, #0
    9008:	3317      	adds	r3, #23
    900a:	2200      	movs	r2, #0
    900c:	701a      	strb	r2, [r3, #0]
	ptr = buffers; 
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	613b      	str	r3, [r7, #16]
	
	for (i=0;i<length;i++)
    9012:	1c3b      	adds	r3, r7, #0
    9014:	330e      	adds	r3, #14
    9016:	2200      	movs	r2, #0
    9018:	801a      	strh	r2, [r3, #0]
    901a:	e011      	b.n	9040 <AppProtocolChecksum+0x48>
	{
		checksum += *ptr++;	
    901c:	693b      	ldr	r3, [r7, #16]
    901e:	1c5a      	adds	r2, r3, #1
    9020:	613a      	str	r2, [r7, #16]
    9022:	7819      	ldrb	r1, [r3, #0]
    9024:	1c3b      	adds	r3, r7, #0
    9026:	3317      	adds	r3, #23
    9028:	1c3a      	adds	r2, r7, #0
    902a:	3217      	adds	r2, #23
    902c:	7812      	ldrb	r2, [r2, #0]
    902e:	188a      	adds	r2, r1, r2
    9030:	701a      	strb	r2, [r3, #0]
	uint16_t i; 
	
	checksum = 0; 
	ptr = buffers; 
	
	for (i=0;i<length;i++)
    9032:	1c3b      	adds	r3, r7, #0
    9034:	330e      	adds	r3, #14
    9036:	881a      	ldrh	r2, [r3, #0]
    9038:	1c3b      	adds	r3, r7, #0
    903a:	330e      	adds	r3, #14
    903c:	3201      	adds	r2, #1
    903e:	801a      	strh	r2, [r3, #0]
    9040:	1c3a      	adds	r2, r7, #0
    9042:	320e      	adds	r2, #14
    9044:	1cbb      	adds	r3, r7, #2
    9046:	8812      	ldrh	r2, [r2, #0]
    9048:	881b      	ldrh	r3, [r3, #0]
    904a:	429a      	cmp	r2, r3
    904c:	d3e6      	bcc.n	901c <AppProtocolChecksum+0x24>
	{
		checksum += *ptr++;	
	}
	return checksum; 
    904e:	1c3b      	adds	r3, r7, #0
    9050:	3317      	adds	r3, #23
    9052:	781b      	ldrb	r3, [r3, #0]
}
    9054:	1c18      	adds	r0, r3, #0
    9056:	46bd      	mov	sp, r7
    9058:	b006      	add	sp, #24
    905a:	bd80      	pop	{r7, pc}

0000905c <NewRemoteDownload>:

#if BRAKEBOARD		

uint8_t newRemoteDownloadNeeded = FALSE; 
uint8_t NewRemoteDownload(void)
{
    905c:	b580      	push	{r7, lr}
    905e:	af00      	add	r7, sp, #0
	//----------------- if there is a remote version in SCRATCH 
	//                    RETURN the information and allow the remote 
	//                    to decide if it wants a download. 
	//----------------------------------------
	CheckScratch();
    9060:	4b03      	ldr	r3, [pc, #12]	; (9070 <NewRemoteDownload+0x14>)
    9062:	4798      	blx	r3
	return newRemoteDownloadNeeded; 
    9064:	4b03      	ldr	r3, [pc, #12]	; (9074 <NewRemoteDownload+0x18>)
    9066:	781b      	ldrb	r3, [r3, #0]
}
    9068:	1c18      	adds	r0, r3, #0
    906a:	46bd      	mov	sp, r7
    906c:	bd80      	pop	{r7, pc}
    906e:	46c0      	nop			; (mov r8, r8)
    9070:	0000af45 	.word	0x0000af45
    9074:	200004b5 	.word	0x200004b5

00009078 <AppProtocolBrake>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void AppProtocolBrake(uint8_t *buffers)
{
    9078:	b590      	push	{r4, r7, lr}
    907a:	b08f      	sub	sp, #60	; 0x3c
    907c:	af00      	add	r7, sp, #0
    907e:	6078      	str	r0, [r7, #4]
	uint8_t length,i,match,temp,offset,goodmsg,checksum;  
	uint16_t x,y,z;
	uint32_t ltemp1,ltemp2;
	uint8_t *lptr; 

	if ((buffers[1] == '#')&&(buffers[0]>3))
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	3301      	adds	r3, #1
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	2b23      	cmp	r3, #35	; 0x23
    9088:	d001      	beq.n	908e <AppProtocolBrake+0x16>
    908a:	f000 ff91 	bl	9fb0 <AppProtocolBrake+0xf38>
    908e:	687b      	ldr	r3, [r7, #4]
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	2b03      	cmp	r3, #3
    9094:	d801      	bhi.n	909a <AppProtocolBrake+0x22>
    9096:	f000 ff8b 	bl	9fb0 <AppProtocolBrake+0xf38>
		//--------------------------------
		// Qualify the received message - match is TRUE 
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
    909a:	1c3b      	adds	r3, r7, #0
    909c:	3336      	adds	r3, #54	; 0x36
    909e:	2200      	movs	r2, #0
    90a0:	701a      	strb	r2, [r3, #0]
		goodmsg = FALSE;
    90a2:	1c3b      	adds	r3, r7, #0
    90a4:	3334      	adds	r3, #52	; 0x34
    90a6:	2200      	movs	r2, #0
    90a8:	701a      	strb	r2, [r3, #0]
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	3302      	adds	r3, #2
    90ae:	781a      	ldrb	r2, [r3, #0]
    90b0:	4bc9      	ldr	r3, [pc, #804]	; (93d8 <AppProtocolBrake+0x360>)
    90b2:	7bdb      	ldrb	r3, [r3, #15]
    90b4:	429a      	cmp	r2, r3
    90b6:	d10a      	bne.n	90ce <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
    90b8:	687b      	ldr	r3, [r7, #4]
    90ba:	3303      	adds	r3, #3
    90bc:	781a      	ldrb	r2, [r3, #0]
    90be:	4bc6      	ldr	r3, [pc, #792]	; (93d8 <AppProtocolBrake+0x360>)
    90c0:	7c1b      	ldrb	r3, [r3, #16]
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
		goodmsg = FALSE;
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    90c2:	429a      	cmp	r2, r3
    90c4:	d103      	bne.n	90ce <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
		{
			match = TRUE; 
    90c6:	1c3b      	adds	r3, r7, #0
    90c8:	3336      	adds	r3, #54	; 0x36
    90ca:	2201      	movs	r2, #1
    90cc:	701a      	strb	r2, [r3, #0]
		}		
		//----------------
		// build the command
		itemp = buffers[4];
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	3304      	adds	r3, #4
    90d2:	781a      	ldrb	r2, [r3, #0]
    90d4:	1c3b      	adds	r3, r7, #0
    90d6:	332e      	adds	r3, #46	; 0x2e
    90d8:	801a      	strh	r2, [r3, #0]
		itemp2 = buffers[5];
    90da:	687b      	ldr	r3, [r7, #4]
    90dc:	3305      	adds	r3, #5
    90de:	781a      	ldrb	r2, [r3, #0]
    90e0:	1c3b      	adds	r3, r7, #0
    90e2:	332c      	adds	r3, #44	; 0x2c
    90e4:	801a      	strh	r2, [r3, #0]
		itemp = itemp<<8; 
    90e6:	1c3b      	adds	r3, r7, #0
    90e8:	332e      	adds	r3, #46	; 0x2e
    90ea:	1c3a      	adds	r2, r7, #0
    90ec:	322e      	adds	r2, #46	; 0x2e
    90ee:	8812      	ldrh	r2, [r2, #0]
    90f0:	0212      	lsls	r2, r2, #8
    90f2:	801a      	strh	r2, [r3, #0]
		itemp |= itemp2; 
    90f4:	1c3b      	adds	r3, r7, #0
    90f6:	332e      	adds	r3, #46	; 0x2e
    90f8:	1c39      	adds	r1, r7, #0
    90fa:	312e      	adds	r1, #46	; 0x2e
    90fc:	1c3a      	adds	r2, r7, #0
    90fe:	322c      	adds	r2, #44	; 0x2c
    9100:	8809      	ldrh	r1, [r1, #0]
    9102:	8812      	ldrh	r2, [r2, #0]
    9104:	430a      	orrs	r2, r1
    9106:	801a      	strh	r2, [r3, #0]
		command = itemp;
    9108:	1c3b      	adds	r3, r7, #0
    910a:	332a      	adds	r3, #42	; 0x2a
    910c:	1c3a      	adds	r2, r7, #0
    910e:	322e      	adds	r2, #46	; 0x2e
    9110:	8812      	ldrh	r2, [r2, #0]
    9112:	801a      	strh	r2, [r3, #0]
		//----------------
		// get the length
		length = buffers[0];
    9114:	1c3b      	adds	r3, r7, #0
    9116:	3329      	adds	r3, #41	; 0x29
    9118:	687a      	ldr	r2, [r7, #4]
    911a:	7812      	ldrb	r2, [r2, #0]
    911c:	701a      	strb	r2, [r3, #0]
	
		goodmsg = AppProtocolChecksum(&buffers[1],length-2);	
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	1c5a      	adds	r2, r3, #1
    9122:	1c3b      	adds	r3, r7, #0
    9124:	3329      	adds	r3, #41	; 0x29
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	b29b      	uxth	r3, r3
    912a:	3b02      	subs	r3, #2
    912c:	b29b      	uxth	r3, r3
    912e:	1c3c      	adds	r4, r7, #0
    9130:	3434      	adds	r4, #52	; 0x34
    9132:	1c10      	adds	r0, r2, #0
    9134:	1c19      	adds	r1, r3, #0
    9136:	4ba9      	ldr	r3, [pc, #676]	; (93dc <AppProtocolBrake+0x364>)
    9138:	4798      	blx	r3
    913a:	1c03      	adds	r3, r0, #0
    913c:	7023      	strb	r3, [r4, #0]
		if (goodmsg == buffers[length-1])
    913e:	1c3b      	adds	r3, r7, #0
    9140:	3329      	adds	r3, #41	; 0x29
    9142:	781b      	ldrb	r3, [r3, #0]
    9144:	3b01      	subs	r3, #1
    9146:	687a      	ldr	r2, [r7, #4]
    9148:	18d3      	adds	r3, r2, r3
    914a:	781b      	ldrb	r3, [r3, #0]
    914c:	1c3a      	adds	r2, r7, #0
    914e:	3234      	adds	r2, #52	; 0x34
    9150:	7812      	ldrb	r2, [r2, #0]
    9152:	429a      	cmp	r2, r3
    9154:	d104      	bne.n	9160 <AppProtocolBrake+0xe8>
		{
			goodmsg = TRUE; 
    9156:	1c3b      	adds	r3, r7, #0
    9158:	3334      	adds	r3, #52	; 0x34
    915a:	2201      	movs	r2, #1
    915c:	701a      	strb	r2, [r3, #0]
    915e:	e003      	b.n	9168 <AppProtocolBrake+0xf0>
		}
		else
		{
			goodmsg = FALSE; 
    9160:	1c3b      	adds	r3, r7, #0
    9162:	3334      	adds	r3, #52	; 0x34
    9164:	2200      	movs	r2, #0
    9166:	701a      	strb	r2, [r3, #0]
		}
								
		if ((((command == MSG_PR)&&(buffers[2] == 0xff)&&(buffers[3]==0xff)) ||
    9168:	1c3b      	adds	r3, r7, #0
    916a:	332a      	adds	r3, #42	; 0x2a
    916c:	881a      	ldrh	r2, [r3, #0]
    916e:	4b9c      	ldr	r3, [pc, #624]	; (93e0 <AppProtocolBrake+0x368>)
    9170:	429a      	cmp	r2, r3
    9172:	d109      	bne.n	9188 <AppProtocolBrake+0x110>
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	3302      	adds	r3, #2
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	2bff      	cmp	r3, #255	; 0xff
    917c:	d104      	bne.n	9188 <AppProtocolBrake+0x110>
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	3303      	adds	r3, #3
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	2bff      	cmp	r3, #255	; 0xff
    9186:	d00e      	beq.n	91a6 <AppProtocolBrake+0x12e>
    9188:	1c3b      	adds	r3, r7, #0
    918a:	332a      	adds	r3, #42	; 0x2a
    918c:	881a      	ldrh	r2, [r3, #0]
    918e:	4b94      	ldr	r3, [pc, #592]	; (93e0 <AppProtocolBrake+0x368>)
    9190:	429a      	cmp	r2, r3
    9192:	d101      	bne.n	9198 <AppProtocolBrake+0x120>
    9194:	f000 ff0c 	bl	9fb0 <AppProtocolBrake+0xf38>
			((command != MSG_PR)&&(match == TRUE)))&&(goodmsg == TRUE))
    9198:	1c3b      	adds	r3, r7, #0
    919a:	3336      	adds	r3, #54	; 0x36
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	2b01      	cmp	r3, #1
    91a0:	d001      	beq.n	91a6 <AppProtocolBrake+0x12e>
    91a2:	f000 ff05 	bl	9fb0 <AppProtocolBrake+0xf38>
    91a6:	1c3b      	adds	r3, r7, #0
    91a8:	3334      	adds	r3, #52	; 0x34
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	2b01      	cmp	r3, #1
    91ae:	d001      	beq.n	91b4 <AppProtocolBrake+0x13c>
    91b0:	f000 fefe 	bl	9fb0 <AppProtocolBrake+0xf38>
		{
	
			if ((buffers[1] == '#')&&(length>3))
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	3301      	adds	r3, #1
    91b8:	781b      	ldrb	r3, [r3, #0]
    91ba:	2b23      	cmp	r3, #35	; 0x23
    91bc:	d001      	beq.n	91c2 <AppProtocolBrake+0x14a>
    91be:	f000 fef7 	bl	9fb0 <AppProtocolBrake+0xf38>
    91c2:	1c3b      	adds	r3, r7, #0
    91c4:	3329      	adds	r3, #41	; 0x29
    91c6:	781b      	ldrb	r3, [r3, #0]
    91c8:	2b03      	cmp	r3, #3
    91ca:	d801      	bhi.n	91d0 <AppProtocolBrake+0x158>
    91cc:	f000 fef0 	bl	9fb0 <AppProtocolBrake+0xf38>
			{
				commSupTimer = COMM_SUP_TIME; 
    91d0:	4b84      	ldr	r3, [pc, #528]	; (93e4 <AppProtocolBrake+0x36c>)
    91d2:	22fa      	movs	r2, #250	; 0xfa
    91d4:	0052      	lsls	r2, r2, #1
    91d6:	801a      	strh	r2, [r3, #0]
				commFailureCount = 0; 
    91d8:	4b83      	ldr	r3, [pc, #524]	; (93e8 <AppProtocolBrake+0x370>)
    91da:	2200      	movs	r2, #0
    91dc:	701a      	strb	r2, [r3, #0]
				commErrorCount = 0; 	
    91de:	4b83      	ldr	r3, [pc, #524]	; (93ec <AppProtocolBrake+0x374>)
    91e0:	2200      	movs	r2, #0
    91e2:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_COMMERROR; 
    91e4:	4b82      	ldr	r3, [pc, #520]	; (93f0 <AppProtocolBrake+0x378>)
    91e6:	791b      	ldrb	r3, [r3, #4]
    91e8:	2201      	movs	r2, #1
    91ea:	4393      	bics	r3, r2
    91ec:	b2da      	uxtb	r2, r3
    91ee:	4b80      	ldr	r3, [pc, #512]	; (93f0 <AppProtocolBrake+0x378>)
    91f0:	711a      	strb	r2, [r3, #4]
					
				if ((command == MSG_STATUS)||(command == MSG_FV)||(command==0x5245)||(command==0x5241))		
    91f2:	1c3b      	adds	r3, r7, #0
    91f4:	332a      	adds	r3, #42	; 0x2a
    91f6:	881a      	ldrh	r2, [r3, #0]
    91f8:	4b7e      	ldr	r3, [pc, #504]	; (93f4 <AppProtocolBrake+0x37c>)
    91fa:	429a      	cmp	r2, r3
    91fc:	d012      	beq.n	9224 <AppProtocolBrake+0x1ac>
    91fe:	1c3b      	adds	r3, r7, #0
    9200:	332a      	adds	r3, #42	; 0x2a
    9202:	881a      	ldrh	r2, [r3, #0]
    9204:	4b7c      	ldr	r3, [pc, #496]	; (93f8 <AppProtocolBrake+0x380>)
    9206:	429a      	cmp	r2, r3
    9208:	d00c      	beq.n	9224 <AppProtocolBrake+0x1ac>
    920a:	1c3b      	adds	r3, r7, #0
    920c:	332a      	adds	r3, #42	; 0x2a
    920e:	881a      	ldrh	r2, [r3, #0]
    9210:	4b7a      	ldr	r3, [pc, #488]	; (93fc <AppProtocolBrake+0x384>)
    9212:	429a      	cmp	r2, r3
    9214:	d006      	beq.n	9224 <AppProtocolBrake+0x1ac>
    9216:	1c3b      	adds	r3, r7, #0
    9218:	332a      	adds	r3, #42	; 0x2a
    921a:	881a      	ldrh	r2, [r3, #0]
    921c:	4b78      	ldr	r3, [pc, #480]	; (9400 <AppProtocolBrake+0x388>)
    921e:	429a      	cmp	r2, r3
    9220:	d000      	beq.n	9224 <AppProtocolBrake+0x1ac>
    9222:	e0a7      	b.n	9374 <AppProtocolBrake+0x2fc>
				{
						remoteStatus = buffers[7];
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	79da      	ldrb	r2, [r3, #7]
    9228:	4b76      	ldr	r3, [pc, #472]	; (9404 <AppProtocolBrake+0x38c>)
    922a:	701a      	strb	r2, [r3, #0]
						remoteForce = buffers[8]; 
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	7a1a      	ldrb	r2, [r3, #8]
    9230:	4b75      	ldr	r3, [pc, #468]	; (9408 <AppProtocolBrake+0x390>)
    9232:	701a      	strb	r2, [r3, #0]
						remoteSettings = buffers[9];
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	7a5a      	ldrb	r2, [r3, #9]
    9238:	4b74      	ldr	r3, [pc, #464]	; (940c <AppProtocolBrake+0x394>)
    923a:	701a      	strb	r2, [r3, #0]
						//-----------------------force setting
						if ((remoteForce & 0x0f) != (table0.Item.MaxForce))	
    923c:	4b72      	ldr	r3, [pc, #456]	; (9408 <AppProtocolBrake+0x390>)
    923e:	781b      	ldrb	r3, [r3, #0]
    9240:	1c1a      	adds	r2, r3, #0
    9242:	230f      	movs	r3, #15
    9244:	401a      	ands	r2, r3
    9246:	4b64      	ldr	r3, [pc, #400]	; (93d8 <AppProtocolBrake+0x360>)
    9248:	789b      	ldrb	r3, [r3, #2]
    924a:	429a      	cmp	r2, r3
    924c:	d00c      	beq.n	9268 <AppProtocolBrake+0x1f0>
						{
							table0.Item.MaxForce = remoteForce & 0x0f; 
    924e:	4b6e      	ldr	r3, [pc, #440]	; (9408 <AppProtocolBrake+0x390>)
    9250:	781a      	ldrb	r2, [r3, #0]
    9252:	230f      	movs	r3, #15
    9254:	4013      	ands	r3, r2
    9256:	b2da      	uxtb	r2, r3
    9258:	4b5f      	ldr	r3, [pc, #380]	; (93d8 <AppProtocolBrake+0x360>)
    925a:	709a      	strb	r2, [r3, #2]
							ConfigUpdate(table0.Item.MaxForce,MaxForce_Setting);
    925c:	4b5e      	ldr	r3, [pc, #376]	; (93d8 <AppProtocolBrake+0x360>)
    925e:	789b      	ldrb	r3, [r3, #2]
    9260:	1c18      	adds	r0, r3, #0
    9262:	212a      	movs	r1, #42	; 0x2a
    9264:	4b6a      	ldr	r3, [pc, #424]	; (9410 <AppProtocolBrake+0x398>)
    9266:	4798      	blx	r3
						}
						//--------------------- max force set 
						temp = remoteForce >>4; 
    9268:	4b67      	ldr	r3, [pc, #412]	; (9408 <AppProtocolBrake+0x390>)
    926a:	781a      	ldrb	r2, [r3, #0]
    926c:	1c3b      	adds	r3, r7, #0
    926e:	3335      	adds	r3, #53	; 0x35
    9270:	0912      	lsrs	r2, r2, #4
    9272:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f; 
    9274:	1c3b      	adds	r3, r7, #0
    9276:	3335      	adds	r3, #53	; 0x35
    9278:	1c3a      	adds	r2, r7, #0
    927a:	3235      	adds	r2, #53	; 0x35
    927c:	7811      	ldrb	r1, [r2, #0]
    927e:	220f      	movs	r2, #15
    9280:	400a      	ands	r2, r1
    9282:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.ForceMaxSet))	
    9284:	4b54      	ldr	r3, [pc, #336]	; (93d8 <AppProtocolBrake+0x360>)
    9286:	7d9b      	ldrb	r3, [r3, #22]
    9288:	1c3a      	adds	r2, r7, #0
    928a:	3235      	adds	r2, #53	; 0x35
    928c:	7812      	ldrb	r2, [r2, #0]
    928e:	429a      	cmp	r2, r3
    9290:	d00d      	beq.n	92ae <AppProtocolBrake+0x236>
						{
							table0.Item.ForceMaxSet = temp & 0x0f; 
    9292:	1c3b      	adds	r3, r7, #0
    9294:	3335      	adds	r3, #53	; 0x35
    9296:	781a      	ldrb	r2, [r3, #0]
    9298:	230f      	movs	r3, #15
    929a:	4013      	ands	r3, r2
    929c:	b2da      	uxtb	r2, r3
    929e:	4b4e      	ldr	r3, [pc, #312]	; (93d8 <AppProtocolBrake+0x360>)
    92a0:	759a      	strb	r2, [r3, #22]
							ConfigUpdate(table0.Item.ForceMaxSet,ForceMaxSetting);
    92a2:	4b4d      	ldr	r3, [pc, #308]	; (93d8 <AppProtocolBrake+0x360>)
    92a4:	7d9b      	ldrb	r3, [r3, #22]
    92a6:	1c18      	adds	r0, r3, #0
    92a8:	213e      	movs	r1, #62	; 0x3e
    92aa:	4b59      	ldr	r3, [pc, #356]	; (9410 <AppProtocolBrake+0x398>)
    92ac:	4798      	blx	r3
						}					
						//-------------------handle active brake enable setting 	
						//--------------------- sensitivity set
						temp = remoteSettings >>4;
    92ae:	4b57      	ldr	r3, [pc, #348]	; (940c <AppProtocolBrake+0x394>)
    92b0:	781a      	ldrb	r2, [r3, #0]
    92b2:	1c3b      	adds	r3, r7, #0
    92b4:	3335      	adds	r3, #53	; 0x35
    92b6:	0912      	lsrs	r2, r2, #4
    92b8:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f;
    92ba:	1c3b      	adds	r3, r7, #0
    92bc:	3335      	adds	r3, #53	; 0x35
    92be:	1c3a      	adds	r2, r7, #0
    92c0:	3235      	adds	r2, #53	; 0x35
    92c2:	7811      	ldrb	r1, [r2, #0]
    92c4:	220f      	movs	r2, #15
    92c6:	400a      	ands	r2, r1
    92c8:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.SensitivitySet))
    92ca:	4b43      	ldr	r3, [pc, #268]	; (93d8 <AppProtocolBrake+0x360>)
    92cc:	7edb      	ldrb	r3, [r3, #27]
    92ce:	1c3a      	adds	r2, r7, #0
    92d0:	3235      	adds	r2, #53	; 0x35
    92d2:	7812      	ldrb	r2, [r2, #0]
    92d4:	429a      	cmp	r2, r3
    92d6:	d00d      	beq.n	92f4 <AppProtocolBrake+0x27c>
						{
							table0.Item.SensitivitySet= temp & 0x0f;
    92d8:	1c3b      	adds	r3, r7, #0
    92da:	3335      	adds	r3, #53	; 0x35
    92dc:	781a      	ldrb	r2, [r3, #0]
    92de:	230f      	movs	r3, #15
    92e0:	4013      	ands	r3, r2
    92e2:	b2da      	uxtb	r2, r3
    92e4:	4b3c      	ldr	r3, [pc, #240]	; (93d8 <AppProtocolBrake+0x360>)
    92e6:	76da      	strb	r2, [r3, #27]
							ConfigUpdate(table0.Item.SensitivitySet,SensitivitySetting);
    92e8:	4b3b      	ldr	r3, [pc, #236]	; (93d8 <AppProtocolBrake+0x360>)
    92ea:	7edb      	ldrb	r3, [r3, #27]
    92ec:	1c18      	adds	r0, r3, #0
    92ee:	2143      	movs	r1, #67	; 0x43
    92f0:	4b47      	ldr	r3, [pc, #284]	; (9410 <AppProtocolBrake+0x398>)
    92f2:	4798      	blx	r3
						}					
						temp = 0; 
    92f4:	1c3b      	adds	r3, r7, #0
    92f6:	3335      	adds	r3, #53	; 0x35
    92f8:	2200      	movs	r2, #0
    92fa:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_ACTIVEBRAKEENABLE)!= FALSE)
    92fc:	4b43      	ldr	r3, [pc, #268]	; (940c <AppProtocolBrake+0x394>)
    92fe:	781b      	ldrb	r3, [r3, #0]
    9300:	1c1a      	adds	r2, r3, #0
    9302:	2301      	movs	r3, #1
    9304:	4013      	ands	r3, r2
    9306:	d003      	beq.n	9310 <AppProtocolBrake+0x298>
						{
							temp = TRUE; 
    9308:	1c3b      	adds	r3, r7, #0
    930a:	3335      	adds	r3, #53	; 0x35
    930c:	2201      	movs	r2, #1
    930e:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.ActiveBrakeEnable)	
    9310:	4b31      	ldr	r3, [pc, #196]	; (93d8 <AppProtocolBrake+0x360>)
    9312:	7ddb      	ldrb	r3, [r3, #23]
    9314:	1c3a      	adds	r2, r7, #0
    9316:	3235      	adds	r2, #53	; 0x35
    9318:	7812      	ldrb	r2, [r2, #0]
    931a:	429a      	cmp	r2, r3
    931c:	d00a      	beq.n	9334 <AppProtocolBrake+0x2bc>
						{
							table0.Item.ActiveBrakeEnable = temp;
    931e:	4b2e      	ldr	r3, [pc, #184]	; (93d8 <AppProtocolBrake+0x360>)
    9320:	1c3a      	adds	r2, r7, #0
    9322:	3235      	adds	r2, #53	; 0x35
    9324:	7812      	ldrb	r2, [r2, #0]
    9326:	75da      	strb	r2, [r3, #23]
							ConfigUpdate(table0.Item.ActiveBrakeEnable,ActiveBrakeEnableSetting);
    9328:	4b2b      	ldr	r3, [pc, #172]	; (93d8 <AppProtocolBrake+0x360>)
    932a:	7ddb      	ldrb	r3, [r3, #23]
    932c:	1c18      	adds	r0, r3, #0
    932e:	213f      	movs	r1, #63	; 0x3f
    9330:	4b37      	ldr	r3, [pc, #220]	; (9410 <AppProtocolBrake+0x398>)
    9332:	4798      	blx	r3
						}			
						//-------------------handle TPMS Enable setting 	
						temp = 0; 
    9334:	1c3b      	adds	r3, r7, #0
    9336:	3335      	adds	r3, #53	; 0x35
    9338:	2200      	movs	r2, #0
    933a:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_TPMSENABLE)!= FALSE)
    933c:	4b33      	ldr	r3, [pc, #204]	; (940c <AppProtocolBrake+0x394>)
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	1c1a      	adds	r2, r3, #0
    9342:	2302      	movs	r3, #2
    9344:	4013      	ands	r3, r2
    9346:	d003      	beq.n	9350 <AppProtocolBrake+0x2d8>
						{
							temp = TRUE; 
    9348:	1c3b      	adds	r3, r7, #0
    934a:	3335      	adds	r3, #53	; 0x35
    934c:	2201      	movs	r2, #1
    934e:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.TPMSEnable)	
    9350:	4b21      	ldr	r3, [pc, #132]	; (93d8 <AppProtocolBrake+0x360>)
    9352:	7e1b      	ldrb	r3, [r3, #24]
    9354:	1c3a      	adds	r2, r7, #0
    9356:	3235      	adds	r2, #53	; 0x35
    9358:	7812      	ldrb	r2, [r2, #0]
    935a:	429a      	cmp	r2, r3
    935c:	d00a      	beq.n	9374 <AppProtocolBrake+0x2fc>
						{
							table0.Item.TPMSEnable = temp;
    935e:	4b1e      	ldr	r3, [pc, #120]	; (93d8 <AppProtocolBrake+0x360>)
    9360:	1c3a      	adds	r2, r7, #0
    9362:	3235      	adds	r2, #53	; 0x35
    9364:	7812      	ldrb	r2, [r2, #0]
    9366:	761a      	strb	r2, [r3, #24]
							ConfigUpdate(table0.Item.TPMSEnable,TPMSEnableSetting);
    9368:	4b1b      	ldr	r3, [pc, #108]	; (93d8 <AppProtocolBrake+0x360>)
    936a:	7e1b      	ldrb	r3, [r3, #24]
    936c:	1c18      	adds	r0, r3, #0
    936e:	2140      	movs	r1, #64	; 0x40
    9370:	4b27      	ldr	r3, [pc, #156]	; (9410 <AppProtocolBrake+0x398>)
    9372:	4798      	blx	r3
						}																		
				}
				switch (command)
    9374:	1c3b      	adds	r3, r7, #0
    9376:	332a      	adds	r3, #42	; 0x2a
    9378:	881b      	ldrh	r3, [r3, #0]
    937a:	4a19      	ldr	r2, [pc, #100]	; (93e0 <AppProtocolBrake+0x368>)
    937c:	4293      	cmp	r3, r2
    937e:	d100      	bne.n	9382 <AppProtocolBrake+0x30a>
    9380:	e2cd      	b.n	991e <AppProtocolBrake+0x8a6>
    9382:	4a17      	ldr	r2, [pc, #92]	; (93e0 <AppProtocolBrake+0x368>)
    9384:	4293      	cmp	r3, r2
    9386:	dc0c      	bgt.n	93a2 <AppProtocolBrake+0x32a>
    9388:	4a22      	ldr	r2, [pc, #136]	; (9414 <AppProtocolBrake+0x39c>)
    938a:	4293      	cmp	r3, r2
    938c:	d048      	beq.n	9420 <AppProtocolBrake+0x3a8>
    938e:	4a1a      	ldr	r2, [pc, #104]	; (93f8 <AppProtocolBrake+0x380>)
    9390:	4293      	cmp	r3, r2
    9392:	d100      	bne.n	9396 <AppProtocolBrake+0x31e>
    9394:	e304      	b.n	99a0 <AppProtocolBrake+0x928>
    9396:	4a17      	ldr	r2, [pc, #92]	; (93f4 <AppProtocolBrake+0x37c>)
    9398:	4293      	cmp	r3, r2
    939a:	d100      	bne.n	939e <AppProtocolBrake+0x326>
    939c:	e36e      	b.n	9a7c <AppProtocolBrake+0xa04>
    939e:	f000 fe07 	bl	9fb0 <AppProtocolBrake+0xf38>
    93a2:	4a16      	ldr	r2, [pc, #88]	; (93fc <AppProtocolBrake+0x384>)
    93a4:	4293      	cmp	r3, r2
    93a6:	d101      	bne.n	93ac <AppProtocolBrake+0x334>
    93a8:	f000 fc01 	bl	9bae <AppProtocolBrake+0xb36>
    93ac:	4a13      	ldr	r2, [pc, #76]	; (93fc <AppProtocolBrake+0x384>)
    93ae:	4293      	cmp	r3, r2
    93b0:	dc06      	bgt.n	93c0 <AppProtocolBrake+0x348>
    93b2:	4a13      	ldr	r2, [pc, #76]	; (9400 <AppProtocolBrake+0x388>)
    93b4:	4293      	cmp	r3, r2
    93b6:	d101      	bne.n	93bc <AppProtocolBrake+0x344>
    93b8:	f000 fc46 	bl	9c48 <AppProtocolBrake+0xbd0>
    93bc:	f000 fdf8 	bl	9fb0 <AppProtocolBrake+0xf38>
    93c0:	4a15      	ldr	r2, [pc, #84]	; (9418 <AppProtocolBrake+0x3a0>)
    93c2:	4293      	cmp	r3, r2
    93c4:	d101      	bne.n	93ca <AppProtocolBrake+0x352>
    93c6:	f000 fcd0 	bl	9d6a <AppProtocolBrake+0xcf2>
    93ca:	4a14      	ldr	r2, [pc, #80]	; (941c <AppProtocolBrake+0x3a4>)
    93cc:	4293      	cmp	r3, r2
    93ce:	d100      	bne.n	93d2 <AppProtocolBrake+0x35a>
    93d0:	e268      	b.n	98a4 <AppProtocolBrake+0x82c>
    93d2:	f000 fded 	bl	9fb0 <AppProtocolBrake+0xf38>
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	20002f98 	.word	0x20002f98
    93dc:	00008ff9 	.word	0x00008ff9
    93e0:	0000504d 	.word	0x0000504d
    93e4:	20003686 	.word	0x20003686
    93e8:	20003684 	.word	0x20003684
    93ec:	2000367d 	.word	0x2000367d
    93f0:	20003660 	.word	0x20003660
    93f4:	0000424d 	.word	0x0000424d
    93f8:	0000464d 	.word	0x0000464d
    93fc:	00005245 	.word	0x00005245
    9400:	00005241 	.word	0x00005241
    9404:	20002efc 	.word	0x20002efc
    9408:	20002eda 	.word	0x20002eda
    940c:	20002f96 	.word	0x20002f96
    9410:	0000a3f9 	.word	0x0000a3f9
    9414:	00004452 	.word	0x00004452
    9418:	00005254 	.word	0x00005254
    941c:	00005357 	.word	0x00005357
					case 0x4452:
					{
						//----------------------------------
						// check the offset and see if download mode. 
						//----------------------------------
						protocolBuffer[0] = '#';
    9420:	4bd3      	ldr	r3, [pc, #844]	; (9770 <AppProtocolBrake+0x6f8>)
    9422:	2223      	movs	r2, #35	; 0x23
    9424:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9426:	4bd3      	ldr	r3, [pc, #844]	; (9774 <AppProtocolBrake+0x6fc>)
    9428:	7bda      	ldrb	r2, [r3, #15]
    942a:	4bd1      	ldr	r3, [pc, #836]	; (9770 <AppProtocolBrake+0x6f8>)
    942c:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    942e:	4bd1      	ldr	r3, [pc, #836]	; (9774 <AppProtocolBrake+0x6fc>)
    9430:	7c1a      	ldrb	r2, [r3, #16]
    9432:	4bcf      	ldr	r3, [pc, #828]	; (9770 <AppProtocolBrake+0x6f8>)
    9434:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'D';
    9436:	4bce      	ldr	r3, [pc, #824]	; (9770 <AppProtocolBrake+0x6f8>)
    9438:	2244      	movs	r2, #68	; 0x44
    943a:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'R';
    943c:	4bcc      	ldr	r3, [pc, #816]	; (9770 <AppProtocolBrake+0x6f8>)
    943e:	2252      	movs	r2, #82	; 0x52
    9440:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0; //length 
    9442:	4bcb      	ldr	r3, [pc, #812]	; (9770 <AppProtocolBrake+0x6f8>)
    9444:	2200      	movs	r2, #0
    9446:	715a      	strb	r2, [r3, #5]
						if ((NewRemoteDownload()==TRUE)&&(bluetoothAwake!=0))
    9448:	4bcb      	ldr	r3, [pc, #812]	; (9778 <AppProtocolBrake+0x700>)
    944a:	4798      	blx	r3
    944c:	1c03      	adds	r3, r0, #0
    944e:	2b01      	cmp	r3, #1
    9450:	d000      	beq.n	9454 <AppProtocolBrake+0x3dc>
    9452:	e1e1      	b.n	9818 <AppProtocolBrake+0x7a0>
    9454:	4bc9      	ldr	r3, [pc, #804]	; (977c <AppProtocolBrake+0x704>)
    9456:	781b      	ldrb	r3, [r3, #0]
    9458:	2b00      	cmp	r3, #0
    945a:	d100      	bne.n	945e <AppProtocolBrake+0x3e6>
    945c:	e1dc      	b.n	9818 <AppProtocolBrake+0x7a0>
						{
							//----------------
							// build the offset
							itemp = buffers[7];
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	3307      	adds	r3, #7
    9462:	781a      	ldrb	r2, [r3, #0]
    9464:	1c3b      	adds	r3, r7, #0
    9466:	332e      	adds	r3, #46	; 0x2e
    9468:	801a      	strh	r2, [r3, #0]
							itemp2 = buffers[8];
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	3308      	adds	r3, #8
    946e:	781a      	ldrb	r2, [r3, #0]
    9470:	1c3b      	adds	r3, r7, #0
    9472:	332c      	adds	r3, #44	; 0x2c
    9474:	801a      	strh	r2, [r3, #0]
							itemp = itemp<<8; 
    9476:	1c3b      	adds	r3, r7, #0
    9478:	332e      	adds	r3, #46	; 0x2e
    947a:	1c3a      	adds	r2, r7, #0
    947c:	322e      	adds	r2, #46	; 0x2e
    947e:	8812      	ldrh	r2, [r2, #0]
    9480:	0212      	lsls	r2, r2, #8
    9482:	801a      	strh	r2, [r3, #0]
							itemp |= itemp2; 
    9484:	1c3b      	adds	r3, r7, #0
    9486:	332e      	adds	r3, #46	; 0x2e
    9488:	1c39      	adds	r1, r7, #0
    948a:	312e      	adds	r1, #46	; 0x2e
    948c:	1c3a      	adds	r2, r7, #0
    948e:	322c      	adds	r2, #44	; 0x2c
    9490:	8809      	ldrh	r1, [r1, #0]
    9492:	8812      	ldrh	r2, [r2, #0]
    9494:	430a      	orrs	r2, r1
    9496:	801a      	strh	r2, [r3, #0]
							doffset = itemp;						
    9498:	1c3b      	adds	r3, r7, #0
    949a:	3326      	adds	r3, #38	; 0x26
    949c:	1c3a      	adds	r2, r7, #0
    949e:	322e      	adds	r2, #46	; 0x2e
    94a0:	8812      	ldrh	r2, [r2, #0]
    94a2:	801a      	strh	r2, [r3, #0]
							if (doffset == 0)
    94a4:	1c3b      	adds	r3, r7, #0
    94a6:	3326      	adds	r3, #38	; 0x26
    94a8:	881b      	ldrh	r3, [r3, #0]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d000      	beq.n	94b0 <AppProtocolBrake+0x438>
    94ae:	e0ef      	b.n	9690 <AppProtocolBrake+0x618>
							{
								protocolBuffer[5] = 28; 
    94b0:	4baf      	ldr	r3, [pc, #700]	; (9770 <AppProtocolBrake+0x6f8>)
    94b2:	221c      	movs	r2, #28
    94b4:	715a      	strb	r2, [r3, #5]
								//----------offset 
								protocolBuffer[6] = 0x00;
    94b6:	4bae      	ldr	r3, [pc, #696]	; (9770 <AppProtocolBrake+0x6f8>)
    94b8:	2200      	movs	r2, #0
    94ba:	719a      	strb	r2, [r3, #6]
								protocolBuffer[7] = 0x00;
    94bc:	4bac      	ldr	r3, [pc, #688]	; (9770 <AppProtocolBrake+0x6f8>)
    94be:	2200      	movs	r2, #0
    94c0:	71da      	strb	r2, [r3, #7]
							//----------length 							
								//-------file length, 4 bytes
								ltemp1 = newRemoteInfo.appLength >>24;
    94c2:	4baf      	ldr	r3, [pc, #700]	; (9780 <AppProtocolBrake+0x708>)
    94c4:	685b      	ldr	r3, [r3, #4]
    94c6:	0e1b      	lsrs	r3, r3, #24
    94c8:	623b      	str	r3, [r7, #32]
								protocolBuffer[8] = ltemp1; 
    94ca:	6a3b      	ldr	r3, [r7, #32]
    94cc:	b2da      	uxtb	r2, r3
    94ce:	4ba8      	ldr	r3, [pc, #672]	; (9770 <AppProtocolBrake+0x6f8>)
    94d0:	721a      	strb	r2, [r3, #8]
								ltemp1 = newRemoteInfo.appLength >>16; 
    94d2:	4bab      	ldr	r3, [pc, #684]	; (9780 <AppProtocolBrake+0x708>)
    94d4:	685b      	ldr	r3, [r3, #4]
    94d6:	0c1b      	lsrs	r3, r3, #16
    94d8:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    94da:	6a3a      	ldr	r2, [r7, #32]
    94dc:	23ff      	movs	r3, #255	; 0xff
    94de:	4013      	ands	r3, r2
    94e0:	623b      	str	r3, [r7, #32]
								protocolBuffer[9] = ltemp1; 
    94e2:	6a3b      	ldr	r3, [r7, #32]
    94e4:	b2da      	uxtb	r2, r3
    94e6:	4ba2      	ldr	r3, [pc, #648]	; (9770 <AppProtocolBrake+0x6f8>)
    94e8:	725a      	strb	r2, [r3, #9]
								ltemp1 = newRemoteInfo.appLength >>8; 
    94ea:	4ba5      	ldr	r3, [pc, #660]	; (9780 <AppProtocolBrake+0x708>)
    94ec:	685b      	ldr	r3, [r3, #4]
    94ee:	0a1b      	lsrs	r3, r3, #8
    94f0:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    94f2:	6a3a      	ldr	r2, [r7, #32]
    94f4:	23ff      	movs	r3, #255	; 0xff
    94f6:	4013      	ands	r3, r2
    94f8:	623b      	str	r3, [r7, #32]
								protocolBuffer[10] = ltemp1; 
    94fa:	6a3b      	ldr	r3, [r7, #32]
    94fc:	b2da      	uxtb	r2, r3
    94fe:	4b9c      	ldr	r3, [pc, #624]	; (9770 <AppProtocolBrake+0x6f8>)
    9500:	729a      	strb	r2, [r3, #10]
								ltemp1 = newRemoteInfo.appLength; 
    9502:	4b9f      	ldr	r3, [pc, #636]	; (9780 <AppProtocolBrake+0x708>)
    9504:	685b      	ldr	r3, [r3, #4]
    9506:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    9508:	6a3a      	ldr	r2, [r7, #32]
    950a:	23ff      	movs	r3, #255	; 0xff
    950c:	4013      	ands	r3, r2
    950e:	623b      	str	r3, [r7, #32]
								protocolBuffer[11] = ltemp1; 	
    9510:	6a3b      	ldr	r3, [r7, #32]
    9512:	b2da      	uxtb	r2, r3
    9514:	4b96      	ldr	r3, [pc, #600]	; (9770 <AppProtocolBrake+0x6f8>)
    9516:	72da      	strb	r2, [r3, #11]
								//-------file checksum, 4 bytes
								ltemp1 = newRemoteInfo.checksum >>24;
    9518:	4b99      	ldr	r3, [pc, #612]	; (9780 <AppProtocolBrake+0x708>)
    951a:	681b      	ldr	r3, [r3, #0]
    951c:	0e1b      	lsrs	r3, r3, #24
    951e:	623b      	str	r3, [r7, #32]
								protocolBuffer[12] = ltemp1; 
    9520:	6a3b      	ldr	r3, [r7, #32]
    9522:	b2da      	uxtb	r2, r3
    9524:	4b92      	ldr	r3, [pc, #584]	; (9770 <AppProtocolBrake+0x6f8>)
    9526:	731a      	strb	r2, [r3, #12]
								ltemp1 = newRemoteInfo.checksum >>16; 
    9528:	4b95      	ldr	r3, [pc, #596]	; (9780 <AppProtocolBrake+0x708>)
    952a:	681b      	ldr	r3, [r3, #0]
    952c:	0c1b      	lsrs	r3, r3, #16
    952e:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    9530:	6a3a      	ldr	r2, [r7, #32]
    9532:	23ff      	movs	r3, #255	; 0xff
    9534:	4013      	ands	r3, r2
    9536:	623b      	str	r3, [r7, #32]
								protocolBuffer[13] = ltemp1; 
    9538:	6a3b      	ldr	r3, [r7, #32]
    953a:	b2da      	uxtb	r2, r3
    953c:	4b8c      	ldr	r3, [pc, #560]	; (9770 <AppProtocolBrake+0x6f8>)
    953e:	735a      	strb	r2, [r3, #13]
								ltemp1 = newRemoteInfo.checksum >>8; 
    9540:	4b8f      	ldr	r3, [pc, #572]	; (9780 <AppProtocolBrake+0x708>)
    9542:	681b      	ldr	r3, [r3, #0]
    9544:	0a1b      	lsrs	r3, r3, #8
    9546:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    9548:	6a3a      	ldr	r2, [r7, #32]
    954a:	23ff      	movs	r3, #255	; 0xff
    954c:	4013      	ands	r3, r2
    954e:	623b      	str	r3, [r7, #32]
								protocolBuffer[14] = ltemp1; 
    9550:	6a3b      	ldr	r3, [r7, #32]
    9552:	b2da      	uxtb	r2, r3
    9554:	4b86      	ldr	r3, [pc, #536]	; (9770 <AppProtocolBrake+0x6f8>)
    9556:	739a      	strb	r2, [r3, #14]
								ltemp1 = newRemoteInfo.checksum; 
    9558:	4b89      	ldr	r3, [pc, #548]	; (9780 <AppProtocolBrake+0x708>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    955e:	6a3a      	ldr	r2, [r7, #32]
    9560:	23ff      	movs	r3, #255	; 0xff
    9562:	4013      	ands	r3, r2
    9564:	623b      	str	r3, [r7, #32]
								protocolBuffer[15] = ltemp1; 		
    9566:	6a3b      	ldr	r3, [r7, #32]
    9568:	b2da      	uxtb	r2, r3
    956a:	4b81      	ldr	r3, [pc, #516]	; (9770 <AppProtocolBrake+0x6f8>)
    956c:	73da      	strb	r2, [r3, #15]
								//-------file checksum start, 4 bytes
								ltemp1 = newRemoteInfo.checksumStartOffset >>24;
    956e:	4b84      	ldr	r3, [pc, #528]	; (9780 <AppProtocolBrake+0x708>)
    9570:	689b      	ldr	r3, [r3, #8]
    9572:	0e1b      	lsrs	r3, r3, #24
    9574:	623b      	str	r3, [r7, #32]
								protocolBuffer[16] = ltemp1; 
    9576:	6a3b      	ldr	r3, [r7, #32]
    9578:	b2da      	uxtb	r2, r3
    957a:	4b7d      	ldr	r3, [pc, #500]	; (9770 <AppProtocolBrake+0x6f8>)
    957c:	741a      	strb	r2, [r3, #16]
								ltemp1 = newRemoteInfo.checksumStartOffset >>16; 
    957e:	4b80      	ldr	r3, [pc, #512]	; (9780 <AppProtocolBrake+0x708>)
    9580:	689b      	ldr	r3, [r3, #8]
    9582:	0c1b      	lsrs	r3, r3, #16
    9584:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    9586:	6a3a      	ldr	r2, [r7, #32]
    9588:	23ff      	movs	r3, #255	; 0xff
    958a:	4013      	ands	r3, r2
    958c:	623b      	str	r3, [r7, #32]
								protocolBuffer[17] = ltemp1; 
    958e:	6a3b      	ldr	r3, [r7, #32]
    9590:	b2da      	uxtb	r2, r3
    9592:	4b77      	ldr	r3, [pc, #476]	; (9770 <AppProtocolBrake+0x6f8>)
    9594:	745a      	strb	r2, [r3, #17]
								ltemp1 = newRemoteInfo.checksumStartOffset >>8; 
    9596:	4b7a      	ldr	r3, [pc, #488]	; (9780 <AppProtocolBrake+0x708>)
    9598:	689b      	ldr	r3, [r3, #8]
    959a:	0a1b      	lsrs	r3, r3, #8
    959c:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    959e:	6a3a      	ldr	r2, [r7, #32]
    95a0:	23ff      	movs	r3, #255	; 0xff
    95a2:	4013      	ands	r3, r2
    95a4:	623b      	str	r3, [r7, #32]
								protocolBuffer[18] = ltemp1; 
    95a6:	6a3b      	ldr	r3, [r7, #32]
    95a8:	b2da      	uxtb	r2, r3
    95aa:	4b71      	ldr	r3, [pc, #452]	; (9770 <AppProtocolBrake+0x6f8>)
    95ac:	749a      	strb	r2, [r3, #18]
								ltemp1 = newRemoteInfo.checksumStartOffset; 
    95ae:	4b74      	ldr	r3, [pc, #464]	; (9780 <AppProtocolBrake+0x708>)
    95b0:	689b      	ldr	r3, [r3, #8]
    95b2:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    95b4:	6a3a      	ldr	r2, [r7, #32]
    95b6:	23ff      	movs	r3, #255	; 0xff
    95b8:	4013      	ands	r3, r2
    95ba:	623b      	str	r3, [r7, #32]
								protocolBuffer[19] = ltemp1; 			
    95bc:	6a3b      	ldr	r3, [r7, #32]
    95be:	b2da      	uxtb	r2, r3
    95c0:	4b6b      	ldr	r3, [pc, #428]	; (9770 <AppProtocolBrake+0x6f8>)
    95c2:	74da      	strb	r2, [r3, #19]
								//-------file version, 4 bytes 
								ltemp1 = newRemoteInfo.version >>24;
    95c4:	4b6e      	ldr	r3, [pc, #440]	; (9780 <AppProtocolBrake+0x708>)
    95c6:	68db      	ldr	r3, [r3, #12]
    95c8:	0e1b      	lsrs	r3, r3, #24
    95ca:	623b      	str	r3, [r7, #32]
								protocolBuffer[20] = ltemp1; 
    95cc:	6a3b      	ldr	r3, [r7, #32]
    95ce:	b2da      	uxtb	r2, r3
    95d0:	4b67      	ldr	r3, [pc, #412]	; (9770 <AppProtocolBrake+0x6f8>)
    95d2:	751a      	strb	r2, [r3, #20]
								ltemp1 = newRemoteInfo.version >>16; 
    95d4:	4b6a      	ldr	r3, [pc, #424]	; (9780 <AppProtocolBrake+0x708>)
    95d6:	68db      	ldr	r3, [r3, #12]
    95d8:	0c1b      	lsrs	r3, r3, #16
    95da:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    95dc:	6a3a      	ldr	r2, [r7, #32]
    95de:	23ff      	movs	r3, #255	; 0xff
    95e0:	4013      	ands	r3, r2
    95e2:	623b      	str	r3, [r7, #32]
								protocolBuffer[21] = ltemp1; 
    95e4:	6a3b      	ldr	r3, [r7, #32]
    95e6:	b2da      	uxtb	r2, r3
    95e8:	4b61      	ldr	r3, [pc, #388]	; (9770 <AppProtocolBrake+0x6f8>)
    95ea:	755a      	strb	r2, [r3, #21]
								ltemp1 = newRemoteInfo.version >>8; 
    95ec:	4b64      	ldr	r3, [pc, #400]	; (9780 <AppProtocolBrake+0x708>)
    95ee:	68db      	ldr	r3, [r3, #12]
    95f0:	0a1b      	lsrs	r3, r3, #8
    95f2:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    95f4:	6a3a      	ldr	r2, [r7, #32]
    95f6:	23ff      	movs	r3, #255	; 0xff
    95f8:	4013      	ands	r3, r2
    95fa:	623b      	str	r3, [r7, #32]
								protocolBuffer[22] = ltemp1; 
    95fc:	6a3b      	ldr	r3, [r7, #32]
    95fe:	b2da      	uxtb	r2, r3
    9600:	4b5b      	ldr	r3, [pc, #364]	; (9770 <AppProtocolBrake+0x6f8>)
    9602:	759a      	strb	r2, [r3, #22]
								ltemp1 = newRemoteInfo.version; 
    9604:	4b5e      	ldr	r3, [pc, #376]	; (9780 <AppProtocolBrake+0x708>)
    9606:	68db      	ldr	r3, [r3, #12]
    9608:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    960a:	6a3a      	ldr	r2, [r7, #32]
    960c:	23ff      	movs	r3, #255	; 0xff
    960e:	4013      	ands	r3, r2
    9610:	623b      	str	r3, [r7, #32]
								protocolBuffer[23] = ltemp1; 			
    9612:	6a3b      	ldr	r3, [r7, #32]
    9614:	b2da      	uxtb	r2, r3
    9616:	4b56      	ldr	r3, [pc, #344]	; (9770 <AppProtocolBrake+0x6f8>)
    9618:	75da      	strb	r2, [r3, #23]
								//-------number of packets, 1 byte
								ltemp1 = newRemoteInfo.appLength;
    961a:	4b59      	ldr	r3, [pc, #356]	; (9780 <AppProtocolBrake+0x708>)
    961c:	685b      	ldr	r3, [r3, #4]
    961e:	623b      	str	r3, [r7, #32]
								ltemp1 = ltemp1/128; 
    9620:	6a3b      	ldr	r3, [r7, #32]
    9622:	09db      	lsrs	r3, r3, #7
    9624:	623b      	str	r3, [r7, #32]
								ltemp1++;
    9626:	6a3b      	ldr	r3, [r7, #32]
    9628:	3301      	adds	r3, #1
    962a:	623b      	str	r3, [r7, #32]
								remoteDownloadPacketCount = ltemp1; 
    962c:	6a3b      	ldr	r3, [r7, #32]
    962e:	b29a      	uxth	r2, r3
    9630:	4b54      	ldr	r3, [pc, #336]	; (9784 <AppProtocolBrake+0x70c>)
    9632:	801a      	strh	r2, [r3, #0]
								protocolBuffer[24] = ltemp1>>8;
    9634:	6a3b      	ldr	r3, [r7, #32]
    9636:	0a1b      	lsrs	r3, r3, #8
    9638:	b2da      	uxtb	r2, r3
    963a:	4b4d      	ldr	r3, [pc, #308]	; (9770 <AppProtocolBrake+0x6f8>)
    963c:	761a      	strb	r2, [r3, #24]
								ltemp1 &= 0xff; 
    963e:	6a3a      	ldr	r2, [r7, #32]
    9640:	23ff      	movs	r3, #255	; 0xff
    9642:	4013      	ands	r3, r2
    9644:	623b      	str	r3, [r7, #32]
								protocolBuffer[25] = ltemp1;
    9646:	6a3b      	ldr	r3, [r7, #32]
    9648:	b2da      	uxtb	r2, r3
    964a:	4b49      	ldr	r3, [pc, #292]	; (9770 <AppProtocolBrake+0x6f8>)
    964c:	765a      	strb	r2, [r3, #25]
							
								checksum = AppProtocolChecksum(protocolBuffer,26);
    964e:	1c3c      	adds	r4, r7, #0
    9650:	341f      	adds	r4, #31
    9652:	4b47      	ldr	r3, [pc, #284]	; (9770 <AppProtocolBrake+0x6f8>)
    9654:	1c18      	adds	r0, r3, #0
    9656:	211a      	movs	r1, #26
    9658:	4b4b      	ldr	r3, [pc, #300]	; (9788 <AppProtocolBrake+0x710>)
    965a:	4798      	blx	r3
    965c:	1c03      	adds	r3, r0, #0
    965e:	7023      	strb	r3, [r4, #0]
								protocolBuffer[26] = checksum;
    9660:	4b43      	ldr	r3, [pc, #268]	; (9770 <AppProtocolBrake+0x6f8>)
    9662:	1c3a      	adds	r2, r7, #0
    9664:	321f      	adds	r2, #31
    9666:	7812      	ldrb	r2, [r2, #0]
    9668:	769a      	strb	r2, [r3, #26]
								protocolBuffer[27] = 0x04;
    966a:	4b41      	ldr	r3, [pc, #260]	; (9770 <AppProtocolBrake+0x6f8>)
    966c:	2204      	movs	r2, #4
    966e:	76da      	strb	r2, [r3, #27]
								if (whichRadio == WHICHRADIO_LORA)
    9670:	4b46      	ldr	r3, [pc, #280]	; (978c <AppProtocolBrake+0x714>)
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	2b99      	cmp	r3, #153	; 0x99
    9676:	d105      	bne.n	9684 <AppProtocolBrake+0x60c>
								{
									SX1272LoraTransmit(protocolBuffer,28);
    9678:	4b3d      	ldr	r3, [pc, #244]	; (9770 <AppProtocolBrake+0x6f8>)
    967a:	1c18      	adds	r0, r3, #0
    967c:	211c      	movs	r1, #28
    967e:	4b44      	ldr	r3, [pc, #272]	; (9790 <AppProtocolBrake+0x718>)
    9680:	4798      	blx	r3
    9682:	e0c8      	b.n	9816 <AppProtocolBrake+0x79e>
								}
								else
								{
									SX1272FskTransmit(protocolBuffer,28);
    9684:	4b3a      	ldr	r3, [pc, #232]	; (9770 <AppProtocolBrake+0x6f8>)
    9686:	1c18      	adds	r0, r3, #0
    9688:	211c      	movs	r1, #28
    968a:	4b42      	ldr	r3, [pc, #264]	; (9794 <AppProtocolBrake+0x71c>)
    968c:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    968e:	e108      	b.n	98a2 <AppProtocolBrake+0x82a>
									SX1272FskTransmit(protocolBuffer,28);
								}							 
							}
							else
							{
								if (doffset == 0xffff)
    9690:	1c3b      	adds	r3, r7, #0
    9692:	3326      	adds	r3, #38	; 0x26
    9694:	881a      	ldrh	r2, [r3, #0]
    9696:	4b40      	ldr	r3, [pc, #256]	; (9798 <AppProtocolBrake+0x720>)
    9698:	429a      	cmp	r2, r3
    969a:	d138      	bne.n	970e <AppProtocolBrake+0x696>
								{
									newRemoteDownloadNeeded = FALSE; 
    969c:	4b3f      	ldr	r3, [pc, #252]	; (979c <AppProtocolBrake+0x724>)
    969e:	2200      	movs	r2, #0
    96a0:	701a      	strb	r2, [r3, #0]
									protocolBuffer[5] = 14;
    96a2:	4b33      	ldr	r3, [pc, #204]	; (9770 <AppProtocolBrake+0x6f8>)
    96a4:	220e      	movs	r2, #14
    96a6:	715a      	strb	r2, [r3, #5]
									//----------offset 
									protocolBuffer[6] = 0x00;
    96a8:	4b31      	ldr	r3, [pc, #196]	; (9770 <AppProtocolBrake+0x6f8>)
    96aa:	2200      	movs	r2, #0
    96ac:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = 0x00;
    96ae:	4b30      	ldr	r3, [pc, #192]	; (9770 <AppProtocolBrake+0x6f8>)
    96b0:	2200      	movs	r2, #0
    96b2:	71da      	strb	r2, [r3, #7]
									//----------length 
									protocolBuffer[8] = 0x00; 
    96b4:	4b2e      	ldr	r3, [pc, #184]	; (9770 <AppProtocolBrake+0x6f8>)
    96b6:	2200      	movs	r2, #0
    96b8:	721a      	strb	r2, [r3, #8]
									protocolBuffer[9] = 0x00;
    96ba:	4b2d      	ldr	r3, [pc, #180]	; (9770 <AppProtocolBrake+0x6f8>)
    96bc:	2200      	movs	r2, #0
    96be:	725a      	strb	r2, [r3, #9]
									protocolBuffer[10] = 0x00;
    96c0:	4b2b      	ldr	r3, [pc, #172]	; (9770 <AppProtocolBrake+0x6f8>)
    96c2:	2200      	movs	r2, #0
    96c4:	729a      	strb	r2, [r3, #10]
									protocolBuffer[11] = 0x00;
    96c6:	4b2a      	ldr	r3, [pc, #168]	; (9770 <AppProtocolBrake+0x6f8>)
    96c8:	2200      	movs	r2, #0
    96ca:	72da      	strb	r2, [r3, #11]
									checksum = AppProtocolChecksum(protocolBuffer,12);
    96cc:	1c3c      	adds	r4, r7, #0
    96ce:	341f      	adds	r4, #31
    96d0:	4b27      	ldr	r3, [pc, #156]	; (9770 <AppProtocolBrake+0x6f8>)
    96d2:	1c18      	adds	r0, r3, #0
    96d4:	210c      	movs	r1, #12
    96d6:	4b2c      	ldr	r3, [pc, #176]	; (9788 <AppProtocolBrake+0x710>)
    96d8:	4798      	blx	r3
    96da:	1c03      	adds	r3, r0, #0
    96dc:	7023      	strb	r3, [r4, #0]
									protocolBuffer[12] = checksum;
    96de:	4b24      	ldr	r3, [pc, #144]	; (9770 <AppProtocolBrake+0x6f8>)
    96e0:	1c3a      	adds	r2, r7, #0
    96e2:	321f      	adds	r2, #31
    96e4:	7812      	ldrb	r2, [r2, #0]
    96e6:	731a      	strb	r2, [r3, #12]
									protocolBuffer[13] = 0x04;
    96e8:	4b21      	ldr	r3, [pc, #132]	; (9770 <AppProtocolBrake+0x6f8>)
    96ea:	2204      	movs	r2, #4
    96ec:	735a      	strb	r2, [r3, #13]
									if (whichRadio == WHICHRADIO_LORA)
    96ee:	4b27      	ldr	r3, [pc, #156]	; (978c <AppProtocolBrake+0x714>)
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	2b99      	cmp	r3, #153	; 0x99
    96f4:	d105      	bne.n	9702 <AppProtocolBrake+0x68a>
									{
										SX1272LoraTransmit(protocolBuffer,14);
    96f6:	4b1e      	ldr	r3, [pc, #120]	; (9770 <AppProtocolBrake+0x6f8>)
    96f8:	1c18      	adds	r0, r3, #0
    96fa:	210e      	movs	r1, #14
    96fc:	4b24      	ldr	r3, [pc, #144]	; (9790 <AppProtocolBrake+0x718>)
    96fe:	4798      	blx	r3
    9700:	e089      	b.n	9816 <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,14);
    9702:	4b1b      	ldr	r3, [pc, #108]	; (9770 <AppProtocolBrake+0x6f8>)
    9704:	1c18      	adds	r0, r3, #0
    9706:	210e      	movs	r1, #14
    9708:	4b22      	ldr	r3, [pc, #136]	; (9794 <AppProtocolBrake+0x71c>)
    970a:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    970c:	e0c9      	b.n	98a2 <AppProtocolBrake+0x82a>
								}
								else
								{
							
									//-----------------offset greater than 0x00 
									protocolBuffer[5] = 138; 
    970e:	4b18      	ldr	r3, [pc, #96]	; (9770 <AppProtocolBrake+0x6f8>)
    9710:	228a      	movs	r2, #138	; 0x8a
    9712:	715a      	strb	r2, [r3, #5]
									//----------offset 
									itemp = doffset >>8;
    9714:	1c3b      	adds	r3, r7, #0
    9716:	332e      	adds	r3, #46	; 0x2e
    9718:	1c3a      	adds	r2, r7, #0
    971a:	3226      	adds	r2, #38	; 0x26
    971c:	8812      	ldrh	r2, [r2, #0]
    971e:	0a12      	lsrs	r2, r2, #8
    9720:	801a      	strh	r2, [r3, #0]
									itemp2 = doffset & 0xff; 
    9722:	1c3b      	adds	r3, r7, #0
    9724:	332c      	adds	r3, #44	; 0x2c
    9726:	1c3a      	adds	r2, r7, #0
    9728:	3226      	adds	r2, #38	; 0x26
    972a:	8811      	ldrh	r1, [r2, #0]
    972c:	22ff      	movs	r2, #255	; 0xff
    972e:	400a      	ands	r2, r1
    9730:	801a      	strh	r2, [r3, #0]
									protocolBuffer[6] = itemp;
    9732:	1c3b      	adds	r3, r7, #0
    9734:	332e      	adds	r3, #46	; 0x2e
    9736:	881b      	ldrh	r3, [r3, #0]
    9738:	b2da      	uxtb	r2, r3
    973a:	4b0d      	ldr	r3, [pc, #52]	; (9770 <AppProtocolBrake+0x6f8>)
    973c:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = itemp2;
    973e:	1c3b      	adds	r3, r7, #0
    9740:	332c      	adds	r3, #44	; 0x2c
    9742:	881b      	ldrh	r3, [r3, #0]
    9744:	b2da      	uxtb	r2, r3
    9746:	4b0a      	ldr	r3, [pc, #40]	; (9770 <AppProtocolBrake+0x6f8>)
    9748:	71da      	strb	r2, [r3, #7]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
    974a:	1c3b      	adds	r3, r7, #0
    974c:	3326      	adds	r3, #38	; 0x26
    974e:	881b      	ldrh	r3, [r3, #0]
    9750:	3b01      	subs	r3, #1
    9752:	01db      	lsls	r3, r3, #7
    9754:	623b      	str	r3, [r7, #32]
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
    9756:	6a3b      	ldr	r3, [r7, #32]
    9758:	2284      	movs	r2, #132	; 0x84
    975a:	0292      	lsls	r2, r2, #10
    975c:	189b      	adds	r3, r3, r2
    975e:	61bb      	str	r3, [r7, #24]
									lptr = ltemp2; 				 
    9760:	69bb      	ldr	r3, [r7, #24]
    9762:	633b      	str	r3, [r7, #48]	; 0x30
			 						for (x=0;x<128;x++)
    9764:	1c3b      	adds	r3, r7, #0
    9766:	3312      	adds	r3, #18
    9768:	2200      	movs	r2, #0
    976a:	801a      	strh	r2, [r3, #0]
    976c:	e02b      	b.n	97c6 <AppProtocolBrake+0x74e>
    976e:	46c0      	nop			; (mov r8, r8)
    9770:	20002f00 	.word	0x20002f00
    9774:	20002f98 	.word	0x20002f98
    9778:	0000905d 	.word	0x0000905d
    977c:	200004a4 	.word	0x200004a4
    9780:	20003058 	.word	0x20003058
    9784:	20002ed8 	.word	0x20002ed8
    9788:	00008ff9 	.word	0x00008ff9
    978c:	2000369a 	.word	0x2000369a
    9790:	00010035 	.word	0x00010035
    9794:	0000f20d 	.word	0x0000f20d
    9798:	0000ffff 	.word	0x0000ffff
    979c:	200004b5 	.word	0x200004b5
									{
										protocolBuffer[x+8] = *lptr++;	
    97a0:	1c3b      	adds	r3, r7, #0
    97a2:	3312      	adds	r3, #18
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	1c1a      	adds	r2, r3, #0
    97a8:	3208      	adds	r2, #8
    97aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    97ac:	1c59      	adds	r1, r3, #1
    97ae:	6339      	str	r1, [r7, #48]	; 0x30
    97b0:	7819      	ldrb	r1, [r3, #0]
    97b2:	4ba5      	ldr	r3, [pc, #660]	; (9a48 <AppProtocolBrake+0x9d0>)
    97b4:	5499      	strb	r1, [r3, r2]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
									lptr = ltemp2; 				 
			 						for (x=0;x<128;x++)
    97b6:	1c3b      	adds	r3, r7, #0
    97b8:	3312      	adds	r3, #18
    97ba:	881b      	ldrh	r3, [r3, #0]
    97bc:	3301      	adds	r3, #1
    97be:	b29a      	uxth	r2, r3
    97c0:	1c3b      	adds	r3, r7, #0
    97c2:	3312      	adds	r3, #18
    97c4:	801a      	strh	r2, [r3, #0]
    97c6:	1c3b      	adds	r3, r7, #0
    97c8:	3312      	adds	r3, #18
    97ca:	881b      	ldrh	r3, [r3, #0]
    97cc:	2b7f      	cmp	r3, #127	; 0x7f
    97ce:	d9e7      	bls.n	97a0 <AppProtocolBrake+0x728>
									{
										protocolBuffer[x+8] = *lptr++;	
									}
									checksum = AppProtocolChecksum(protocolBuffer,136);
    97d0:	1c3c      	adds	r4, r7, #0
    97d2:	341f      	adds	r4, #31
    97d4:	4b9c      	ldr	r3, [pc, #624]	; (9a48 <AppProtocolBrake+0x9d0>)
    97d6:	1c18      	adds	r0, r3, #0
    97d8:	2188      	movs	r1, #136	; 0x88
    97da:	4b9c      	ldr	r3, [pc, #624]	; (9a4c <AppProtocolBrake+0x9d4>)
    97dc:	4798      	blx	r3
    97de:	1c03      	adds	r3, r0, #0
    97e0:	7023      	strb	r3, [r4, #0]
									protocolBuffer[136] = checksum;
    97e2:	4a99      	ldr	r2, [pc, #612]	; (9a48 <AppProtocolBrake+0x9d0>)
    97e4:	1c39      	adds	r1, r7, #0
    97e6:	311f      	adds	r1, #31
    97e8:	2388      	movs	r3, #136	; 0x88
    97ea:	7809      	ldrb	r1, [r1, #0]
    97ec:	54d1      	strb	r1, [r2, r3]
									protocolBuffer[137] = 0x04;
    97ee:	4a96      	ldr	r2, [pc, #600]	; (9a48 <AppProtocolBrake+0x9d0>)
    97f0:	2389      	movs	r3, #137	; 0x89
    97f2:	2104      	movs	r1, #4
    97f4:	54d1      	strb	r1, [r2, r3]
									if (whichRadio == WHICHRADIO_LORA)
    97f6:	4b96      	ldr	r3, [pc, #600]	; (9a50 <AppProtocolBrake+0x9d8>)
    97f8:	781b      	ldrb	r3, [r3, #0]
    97fa:	2b99      	cmp	r3, #153	; 0x99
    97fc:	d105      	bne.n	980a <AppProtocolBrake+0x792>
									{
										SX1272LoraTransmit(protocolBuffer,138);
    97fe:	4b92      	ldr	r3, [pc, #584]	; (9a48 <AppProtocolBrake+0x9d0>)
    9800:	1c18      	adds	r0, r3, #0
    9802:	218a      	movs	r1, #138	; 0x8a
    9804:	4b93      	ldr	r3, [pc, #588]	; (9a54 <AppProtocolBrake+0x9dc>)
    9806:	4798      	blx	r3
    9808:	e005      	b.n	9816 <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,138);
    980a:	4b8f      	ldr	r3, [pc, #572]	; (9a48 <AppProtocolBrake+0x9d0>)
    980c:	1c18      	adds	r0, r3, #0
    980e:	218a      	movs	r1, #138	; 0x8a
    9810:	4b91      	ldr	r3, [pc, #580]	; (9a58 <AppProtocolBrake+0x9e0>)
    9812:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    9814:	e045      	b.n	98a2 <AppProtocolBrake+0x82a>
    9816:	e044      	b.n	98a2 <AppProtocolBrake+0x82a>
								}
							}
						}
						else
						{				
							remoteDownloadPacketNumber=0; 
    9818:	4b90      	ldr	r3, [pc, #576]	; (9a5c <AppProtocolBrake+0x9e4>)
    981a:	2200      	movs	r2, #0
    981c:	801a      	strh	r2, [r3, #0]
							remoteDownloadPacketCount=0; 
    981e:	4b90      	ldr	r3, [pc, #576]	; (9a60 <AppProtocolBrake+0x9e8>)
    9820:	2200      	movs	r2, #0
    9822:	801a      	strh	r2, [r3, #0]
							remoteDownloadNextPacketNumber=0;
    9824:	4b8f      	ldr	r3, [pc, #572]	; (9a64 <AppProtocolBrake+0x9ec>)
    9826:	2200      	movs	r2, #0
    9828:	801a      	strh	r2, [r3, #0]
							remoteDownloadLastPacketNumber=0; 
    982a:	4b8f      	ldr	r3, [pc, #572]	; (9a68 <AppProtocolBrake+0x9f0>)
    982c:	2200      	movs	r2, #0
    982e:	801a      	strh	r2, [r3, #0]
							remoteDownloadLength=0; 						
    9830:	4b8e      	ldr	r3, [pc, #568]	; (9a6c <AppProtocolBrake+0x9f4>)
    9832:	2200      	movs	r2, #0
    9834:	601a      	str	r2, [r3, #0]
						 					 
							protocolBuffer[5] = 14;
    9836:	4b84      	ldr	r3, [pc, #528]	; (9a48 <AppProtocolBrake+0x9d0>)
    9838:	220e      	movs	r2, #14
    983a:	715a      	strb	r2, [r3, #5]
							//----------offset 
							protocolBuffer[6] = 0x00;
    983c:	4b82      	ldr	r3, [pc, #520]	; (9a48 <AppProtocolBrake+0x9d0>)
    983e:	2200      	movs	r2, #0
    9840:	719a      	strb	r2, [r3, #6]
							protocolBuffer[7] = 0x00;
    9842:	4b81      	ldr	r3, [pc, #516]	; (9a48 <AppProtocolBrake+0x9d0>)
    9844:	2200      	movs	r2, #0
    9846:	71da      	strb	r2, [r3, #7]
							//----------length 
							protocolBuffer[8] = 0x00; 
    9848:	4b7f      	ldr	r3, [pc, #508]	; (9a48 <AppProtocolBrake+0x9d0>)
    984a:	2200      	movs	r2, #0
    984c:	721a      	strb	r2, [r3, #8]
							protocolBuffer[9] = 0x00;
    984e:	4b7e      	ldr	r3, [pc, #504]	; (9a48 <AppProtocolBrake+0x9d0>)
    9850:	2200      	movs	r2, #0
    9852:	725a      	strb	r2, [r3, #9]
							protocolBuffer[10] = 0x00;
    9854:	4b7c      	ldr	r3, [pc, #496]	; (9a48 <AppProtocolBrake+0x9d0>)
    9856:	2200      	movs	r2, #0
    9858:	729a      	strb	r2, [r3, #10]
							protocolBuffer[11] = 0x00;
    985a:	4b7b      	ldr	r3, [pc, #492]	; (9a48 <AppProtocolBrake+0x9d0>)
    985c:	2200      	movs	r2, #0
    985e:	72da      	strb	r2, [r3, #11]
							checksum = AppProtocolChecksum(protocolBuffer,12);
    9860:	1c3c      	adds	r4, r7, #0
    9862:	341f      	adds	r4, #31
    9864:	4b78      	ldr	r3, [pc, #480]	; (9a48 <AppProtocolBrake+0x9d0>)
    9866:	1c18      	adds	r0, r3, #0
    9868:	210c      	movs	r1, #12
    986a:	4b78      	ldr	r3, [pc, #480]	; (9a4c <AppProtocolBrake+0x9d4>)
    986c:	4798      	blx	r3
    986e:	1c03      	adds	r3, r0, #0
    9870:	7023      	strb	r3, [r4, #0]
							protocolBuffer[12] = checksum;
    9872:	4b75      	ldr	r3, [pc, #468]	; (9a48 <AppProtocolBrake+0x9d0>)
    9874:	1c3a      	adds	r2, r7, #0
    9876:	321f      	adds	r2, #31
    9878:	7812      	ldrb	r2, [r2, #0]
    987a:	731a      	strb	r2, [r3, #12]
							protocolBuffer[13] = 0x04;
    987c:	4b72      	ldr	r3, [pc, #456]	; (9a48 <AppProtocolBrake+0x9d0>)
    987e:	2204      	movs	r2, #4
    9880:	735a      	strb	r2, [r3, #13]
							if (whichRadio == WHICHRADIO_LORA)
    9882:	4b73      	ldr	r3, [pc, #460]	; (9a50 <AppProtocolBrake+0x9d8>)
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	2b99      	cmp	r3, #153	; 0x99
    9888:	d105      	bne.n	9896 <AppProtocolBrake+0x81e>
							{
								SX1272LoraTransmit(protocolBuffer,14);
    988a:	4b6f      	ldr	r3, [pc, #444]	; (9a48 <AppProtocolBrake+0x9d0>)
    988c:	1c18      	adds	r0, r3, #0
    988e:	210e      	movs	r1, #14
    9890:	4b70      	ldr	r3, [pc, #448]	; (9a54 <AppProtocolBrake+0x9dc>)
    9892:	4798      	blx	r3
    9894:	e005      	b.n	98a2 <AppProtocolBrake+0x82a>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,14);
    9896:	4b6c      	ldr	r3, [pc, #432]	; (9a48 <AppProtocolBrake+0x9d0>)
    9898:	1c18      	adds	r0, r3, #0
    989a:	210e      	movs	r1, #14
    989c:	4b6e      	ldr	r3, [pc, #440]	; (9a58 <AppProtocolBrake+0x9e0>)
    989e:	4798      	blx	r3
							}	
						}
						break;
    98a0:	e386      	b.n	9fb0 <AppProtocolBrake+0xf38>
    98a2:	e385      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}
					case MSG_SW:
					{
						protocolBuffer[0] = '#';
    98a4:	4b68      	ldr	r3, [pc, #416]	; (9a48 <AppProtocolBrake+0x9d0>)
    98a6:	2223      	movs	r2, #35	; 0x23
    98a8:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    98aa:	4b71      	ldr	r3, [pc, #452]	; (9a70 <AppProtocolBrake+0x9f8>)
    98ac:	7bda      	ldrb	r2, [r3, #15]
    98ae:	4b66      	ldr	r3, [pc, #408]	; (9a48 <AppProtocolBrake+0x9d0>)
    98b0:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    98b2:	4b6f      	ldr	r3, [pc, #444]	; (9a70 <AppProtocolBrake+0x9f8>)
    98b4:	7c1a      	ldrb	r2, [r3, #16]
    98b6:	4b64      	ldr	r3, [pc, #400]	; (9a48 <AppProtocolBrake+0x9d0>)
    98b8:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'S';
    98ba:	4b63      	ldr	r3, [pc, #396]	; (9a48 <AppProtocolBrake+0x9d0>)
    98bc:	2253      	movs	r2, #83	; 0x53
    98be:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'W';					 
    98c0:	4b61      	ldr	r3, [pc, #388]	; (9a48 <AppProtocolBrake+0x9d0>)
    98c2:	2257      	movs	r2, #87	; 0x57
    98c4:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0x09;
    98c6:	4b60      	ldr	r3, [pc, #384]	; (9a48 <AppProtocolBrake+0x9d0>)
    98c8:	2209      	movs	r2, #9
    98ca:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = buffers[7];  //yes switching
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	79da      	ldrb	r2, [r3, #7]
    98d0:	4b5d      	ldr	r3, [pc, #372]	; (9a48 <AppProtocolBrake+0x9d0>)
    98d2:	719a      	strb	r2, [r3, #6]
						switchOnTransmit = buffers[7]; 
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	79da      	ldrb	r2, [r3, #7]
    98d8:	4b66      	ldr	r3, [pc, #408]	; (9a74 <AppProtocolBrake+0x9fc>)
    98da:	701a      	strb	r2, [r3, #0]
						checksum = AppProtocolChecksum(protocolBuffer,7);
    98dc:	1c3c      	adds	r4, r7, #0
    98de:	341f      	adds	r4, #31
    98e0:	4b59      	ldr	r3, [pc, #356]	; (9a48 <AppProtocolBrake+0x9d0>)
    98e2:	1c18      	adds	r0, r3, #0
    98e4:	2107      	movs	r1, #7
    98e6:	4b59      	ldr	r3, [pc, #356]	; (9a4c <AppProtocolBrake+0x9d4>)
    98e8:	4798      	blx	r3
    98ea:	1c03      	adds	r3, r0, #0
    98ec:	7023      	strb	r3, [r4, #0]
						protocolBuffer[7] = checksum;
    98ee:	4b56      	ldr	r3, [pc, #344]	; (9a48 <AppProtocolBrake+0x9d0>)
    98f0:	1c3a      	adds	r2, r7, #0
    98f2:	321f      	adds	r2, #31
    98f4:	7812      	ldrb	r2, [r2, #0]
    98f6:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = 0x04;
    98f8:	4b53      	ldr	r3, [pc, #332]	; (9a48 <AppProtocolBrake+0x9d0>)
    98fa:	2204      	movs	r2, #4
    98fc:	721a      	strb	r2, [r3, #8]
						if (whichRadio == WHICHRADIO_LORA)
    98fe:	4b54      	ldr	r3, [pc, #336]	; (9a50 <AppProtocolBrake+0x9d8>)
    9900:	781b      	ldrb	r3, [r3, #0]
    9902:	2b99      	cmp	r3, #153	; 0x99
    9904:	d105      	bne.n	9912 <AppProtocolBrake+0x89a>
						{
							SX1272LoraTransmit(protocolBuffer,9);
    9906:	4b50      	ldr	r3, [pc, #320]	; (9a48 <AppProtocolBrake+0x9d0>)
    9908:	1c18      	adds	r0, r3, #0
    990a:	2109      	movs	r1, #9
    990c:	4b51      	ldr	r3, [pc, #324]	; (9a54 <AppProtocolBrake+0x9dc>)
    990e:	4798      	blx	r3
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
						}
					
						break;
    9910:	e34e      	b.n	9fb0 <AppProtocolBrake+0xf38>
						{
							SX1272LoraTransmit(protocolBuffer,9);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
    9912:	4b4d      	ldr	r3, [pc, #308]	; (9a48 <AppProtocolBrake+0x9d0>)
    9914:	1c18      	adds	r0, r3, #0
    9916:	2109      	movs	r1, #9
    9918:	4b4f      	ldr	r3, [pc, #316]	; (9a58 <AppProtocolBrake+0x9e0>)
    991a:	4798      	blx	r3
						}
					
						break;
    991c:	e348      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}				
					case MSG_PR:
					{			
						protocolBuffer[0] = '#';
    991e:	4b4a      	ldr	r3, [pc, #296]	; (9a48 <AppProtocolBrake+0x9d0>)
    9920:	2223      	movs	r2, #35	; 0x23
    9922:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9924:	4b52      	ldr	r3, [pc, #328]	; (9a70 <AppProtocolBrake+0x9f8>)
    9926:	7bda      	ldrb	r2, [r3, #15]
    9928:	4b47      	ldr	r3, [pc, #284]	; (9a48 <AppProtocolBrake+0x9d0>)
    992a:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    992c:	4b50      	ldr	r3, [pc, #320]	; (9a70 <AppProtocolBrake+0x9f8>)
    992e:	7c1a      	ldrb	r2, [r3, #16]
    9930:	4b45      	ldr	r3, [pc, #276]	; (9a48 <AppProtocolBrake+0x9d0>)
    9932:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'P';
    9934:	4b44      	ldr	r3, [pc, #272]	; (9a48 <AppProtocolBrake+0x9d0>)
    9936:	2250      	movs	r2, #80	; 0x50
    9938:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';	
    993a:	4b43      	ldr	r3, [pc, #268]	; (9a48 <AppProtocolBrake+0x9d0>)
    993c:	224d      	movs	r2, #77	; 0x4d
    993e:	711a      	strb	r2, [r3, #4]
						if (setup_pressed == 0)		
    9940:	4b4d      	ldr	r3, [pc, #308]	; (9a78 <AppProtocolBrake+0xa00>)
    9942:	881b      	ldrh	r3, [r3, #0]
    9944:	2b00      	cmp	r3, #0
    9946:	d102      	bne.n	994e <AppProtocolBrake+0x8d6>
						{
							protocolBuffer[4] = 'L';		
    9948:	4b3f      	ldr	r3, [pc, #252]	; (9a48 <AppProtocolBrake+0x9d0>)
    994a:	224c      	movs	r2, #76	; 0x4c
    994c:	711a      	strb	r2, [r3, #4]
						}				
						protocolBuffer[5] = 0x08; 	
    994e:	4b3e      	ldr	r3, [pc, #248]	; (9a48 <AppProtocolBrake+0x9d0>)
    9950:	2208      	movs	r2, #8
    9952:	715a      	strb	r2, [r3, #5]
						checksum = AppProtocolChecksum(protocolBuffer,6);	
    9954:	1c3c      	adds	r4, r7, #0
    9956:	341f      	adds	r4, #31
    9958:	4b3b      	ldr	r3, [pc, #236]	; (9a48 <AppProtocolBrake+0x9d0>)
    995a:	1c18      	adds	r0, r3, #0
    995c:	2106      	movs	r1, #6
    995e:	4b3b      	ldr	r3, [pc, #236]	; (9a4c <AppProtocolBrake+0x9d4>)
    9960:	4798      	blx	r3
    9962:	1c03      	adds	r3, r0, #0
    9964:	7023      	strb	r3, [r4, #0]
						protocolBuffer[6] = checksum; 			
    9966:	4b38      	ldr	r3, [pc, #224]	; (9a48 <AppProtocolBrake+0x9d0>)
    9968:	1c3a      	adds	r2, r7, #0
    996a:	321f      	adds	r2, #31
    996c:	7812      	ldrb	r2, [r2, #0]
    996e:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = 0x04; 	
    9970:	4b35      	ldr	r3, [pc, #212]	; (9a48 <AppProtocolBrake+0x9d0>)
    9972:	2204      	movs	r2, #4
    9974:	71da      	strb	r2, [r3, #7]
						if (setup_pressed != 0)
    9976:	4b40      	ldr	r3, [pc, #256]	; (9a78 <AppProtocolBrake+0xa00>)
    9978:	881b      	ldrh	r3, [r3, #0]
    997a:	2b00      	cmp	r3, #0
    997c:	d00f      	beq.n	999e <AppProtocolBrake+0x926>
						{						
							if (whichRadio == WHICHRADIO_LORA)
    997e:	4b34      	ldr	r3, [pc, #208]	; (9a50 <AppProtocolBrake+0x9d8>)
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	2b99      	cmp	r3, #153	; 0x99
    9984:	d105      	bne.n	9992 <AppProtocolBrake+0x91a>
							{
								SX1272LoraTransmit(protocolBuffer,8);
    9986:	4b30      	ldr	r3, [pc, #192]	; (9a48 <AppProtocolBrake+0x9d0>)
    9988:	1c18      	adds	r0, r3, #0
    998a:	2108      	movs	r1, #8
    998c:	4b31      	ldr	r3, [pc, #196]	; (9a54 <AppProtocolBrake+0x9dc>)
    998e:	4798      	blx	r3
    9990:	e005      	b.n	999e <AppProtocolBrake+0x926>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,8);
    9992:	4b2d      	ldr	r3, [pc, #180]	; (9a48 <AppProtocolBrake+0x9d0>)
    9994:	1c18      	adds	r0, r3, #0
    9996:	2108      	movs	r1, #8
    9998:	4b2f      	ldr	r3, [pc, #188]	; (9a58 <AppProtocolBrake+0x9e0>)
    999a:	4798      	blx	r3
							}
						}
						break;
    999c:	e308      	b.n	9fb0 <AppProtocolBrake+0xf38>
    999e:	e307      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}
					case MSG_FV:
					{
 							//---------FV
						protocolBuffer[0] = '#';
    99a0:	4b29      	ldr	r3, [pc, #164]	; (9a48 <AppProtocolBrake+0x9d0>)
    99a2:	2223      	movs	r2, #35	; 0x23
    99a4:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    99a6:	4b32      	ldr	r3, [pc, #200]	; (9a70 <AppProtocolBrake+0x9f8>)
    99a8:	7bda      	ldrb	r2, [r3, #15]
    99aa:	4b27      	ldr	r3, [pc, #156]	; (9a48 <AppProtocolBrake+0x9d0>)
    99ac:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    99ae:	4b30      	ldr	r3, [pc, #192]	; (9a70 <AppProtocolBrake+0x9f8>)
    99b0:	7c1a      	ldrb	r2, [r3, #16]
    99b2:	4b25      	ldr	r3, [pc, #148]	; (9a48 <AppProtocolBrake+0x9d0>)
    99b4:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'F';
    99b6:	4b24      	ldr	r3, [pc, #144]	; (9a48 <AppProtocolBrake+0x9d0>)
    99b8:	2246      	movs	r2, #70	; 0x46
    99ba:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    99bc:	4b22      	ldr	r3, [pc, #136]	; (9a48 <AppProtocolBrake+0x9d0>)
    99be:	224d      	movs	r2, #77	; 0x4d
    99c0:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 18;
    99c2:	4b21      	ldr	r3, [pc, #132]	; (9a48 <AppProtocolBrake+0x9d0>)
    99c4:	2212      	movs	r2, #18
    99c6:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = FWVER3;
    99c8:	4b1f      	ldr	r3, [pc, #124]	; (9a48 <AppProtocolBrake+0x9d0>)
    99ca:	2230      	movs	r2, #48	; 0x30
    99cc:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = FWVER2;
    99ce:	4b1e      	ldr	r3, [pc, #120]	; (9a48 <AppProtocolBrake+0x9d0>)
    99d0:	2231      	movs	r2, #49	; 0x31
    99d2:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = FWVER1;
    99d4:	4b1c      	ldr	r3, [pc, #112]	; (9a48 <AppProtocolBrake+0x9d0>)
    99d6:	2231      	movs	r2, #49	; 0x31
    99d8:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	FWVER0;			
    99da:	4b1b      	ldr	r3, [pc, #108]	; (9a48 <AppProtocolBrake+0x9d0>)
    99dc:	2234      	movs	r2, #52	; 0x34
    99de:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10]= MONTHMSB;
    99e0:	4b19      	ldr	r3, [pc, #100]	; (9a48 <AppProtocolBrake+0x9d0>)
    99e2:	2230      	movs	r2, #48	; 0x30
    99e4:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = MONTHLSB;
    99e6:	4b18      	ldr	r3, [pc, #96]	; (9a48 <AppProtocolBrake+0x9d0>)
    99e8:	2236      	movs	r2, #54	; 0x36
    99ea:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = DAYMSB;
    99ec:	4b16      	ldr	r3, [pc, #88]	; (9a48 <AppProtocolBrake+0x9d0>)
    99ee:	2232      	movs	r2, #50	; 0x32
    99f0:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = DAYLSB;						
    99f2:	4b15      	ldr	r3, [pc, #84]	; (9a48 <AppProtocolBrake+0x9d0>)
    99f4:	2235      	movs	r2, #53	; 0x35
    99f6:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = YEARMSB;
    99f8:	4b13      	ldr	r3, [pc, #76]	; (9a48 <AppProtocolBrake+0x9d0>)
    99fa:	2231      	movs	r2, #49	; 0x31
    99fc:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = YEARLSB;	
    99fe:	4b12      	ldr	r3, [pc, #72]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a00:	2237      	movs	r2, #55	; 0x37
    9a02:	73da      	strb	r2, [r3, #15]
						checksum = AppProtocolChecksum(protocolBuffer,16);	
    9a04:	1c3c      	adds	r4, r7, #0
    9a06:	341f      	adds	r4, #31
    9a08:	4b0f      	ldr	r3, [pc, #60]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a0a:	1c18      	adds	r0, r3, #0
    9a0c:	2110      	movs	r1, #16
    9a0e:	4b0f      	ldr	r3, [pc, #60]	; (9a4c <AppProtocolBrake+0x9d4>)
    9a10:	4798      	blx	r3
    9a12:	1c03      	adds	r3, r0, #0
    9a14:	7023      	strb	r3, [r4, #0]
						protocolBuffer[16] = checksum; 					
    9a16:	4b0c      	ldr	r3, [pc, #48]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a18:	1c3a      	adds	r2, r7, #0
    9a1a:	321f      	adds	r2, #31
    9a1c:	7812      	ldrb	r2, [r2, #0]
    9a1e:	741a      	strb	r2, [r3, #16]
						protocolBuffer[17] = 0x04; 	
    9a20:	4b09      	ldr	r3, [pc, #36]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a22:	2204      	movs	r2, #4
    9a24:	745a      	strb	r2, [r3, #17]
						if (whichRadio == WHICHRADIO_LORA)
    9a26:	4b0a      	ldr	r3, [pc, #40]	; (9a50 <AppProtocolBrake+0x9d8>)
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	2b99      	cmp	r3, #153	; 0x99
    9a2c:	d105      	bne.n	9a3a <AppProtocolBrake+0x9c2>
						{
							SX1272LoraTransmit(protocolBuffer,18);
    9a2e:	4b06      	ldr	r3, [pc, #24]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a30:	1c18      	adds	r0, r3, #0
    9a32:	2112      	movs	r1, #18
    9a34:	4b07      	ldr	r3, [pc, #28]	; (9a54 <AppProtocolBrake+0x9dc>)
    9a36:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
						}					
						break;
    9a38:	e2ba      	b.n	9fb0 <AppProtocolBrake+0xf38>
						{
							SX1272LoraTransmit(protocolBuffer,18);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
    9a3a:	4b03      	ldr	r3, [pc, #12]	; (9a48 <AppProtocolBrake+0x9d0>)
    9a3c:	1c18      	adds	r0, r3, #0
    9a3e:	2112      	movs	r1, #18
    9a40:	4b05      	ldr	r3, [pc, #20]	; (9a58 <AppProtocolBrake+0x9e0>)
    9a42:	4798      	blx	r3
						}					
						break;
    9a44:	e2b4      	b.n	9fb0 <AppProtocolBrake+0xf38>
    9a46:	46c0      	nop			; (mov r8, r8)
    9a48:	20002f00 	.word	0x20002f00
    9a4c:	00008ff9 	.word	0x00008ff9
    9a50:	2000369a 	.word	0x2000369a
    9a54:	00010035 	.word	0x00010035
    9a58:	0000f20d 	.word	0x0000f20d
    9a5c:	20002ef8 	.word	0x20002ef8
    9a60:	20002ed8 	.word	0x20002ed8
    9a64:	20002efe 	.word	0x20002efe
    9a68:	20002efa 	.word	0x20002efa
    9a6c:	20002ef4 	.word	0x20002ef4
    9a70:	20002f98 	.word	0x20002f98
    9a74:	200004d1 	.word	0x200004d1
    9a78:	2000303a 	.word	0x2000303a
					}									
					case MSG_STATUS:
					{
 							//---------BS
						remoteVersionToReport[0] = buffers[10];
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	7a9a      	ldrb	r2, [r3, #10]
    9a80:	4bea      	ldr	r3, [pc, #936]	; (9e2c <AppProtocolBrake+0xdb4>)
    9a82:	701a      	strb	r2, [r3, #0]
						remoteVersionToReport[1] = buffers[11];
    9a84:	687b      	ldr	r3, [r7, #4]
    9a86:	7ada      	ldrb	r2, [r3, #11]
    9a88:	4be8      	ldr	r3, [pc, #928]	; (9e2c <AppProtocolBrake+0xdb4>)
    9a8a:	705a      	strb	r2, [r3, #1]
						remoteVersionToReport[2] = buffers[12];
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	7b1a      	ldrb	r2, [r3, #12]
    9a90:	4be6      	ldr	r3, [pc, #920]	; (9e2c <AppProtocolBrake+0xdb4>)
    9a92:	709a      	strb	r2, [r3, #2]
						remoteVersionToReport[3] = buffers[13];
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	7b5a      	ldrb	r2, [r3, #13]
    9a98:	4be4      	ldr	r3, [pc, #912]	; (9e2c <AppProtocolBrake+0xdb4>)
    9a9a:	70da      	strb	r2, [r3, #3]
					
						//--------------------------------------
						protocolBuffer[0] = '#';
    9a9c:	4be4      	ldr	r3, [pc, #912]	; (9e30 <AppProtocolBrake+0xdb8>)
    9a9e:	2223      	movs	r2, #35	; 0x23
    9aa0:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9aa2:	4be4      	ldr	r3, [pc, #912]	; (9e34 <AppProtocolBrake+0xdbc>)
    9aa4:	7bda      	ldrb	r2, [r3, #15]
    9aa6:	4be2      	ldr	r3, [pc, #904]	; (9e30 <AppProtocolBrake+0xdb8>)
    9aa8:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    9aaa:	4be2      	ldr	r3, [pc, #904]	; (9e34 <AppProtocolBrake+0xdbc>)
    9aac:	7c1a      	ldrb	r2, [r3, #16]
    9aae:	4be0      	ldr	r3, [pc, #896]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ab0:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'B';
    9ab2:	4bdf      	ldr	r3, [pc, #892]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ab4:	2242      	movs	r2, #66	; 0x42
    9ab6:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    9ab8:	4bdd      	ldr	r3, [pc, #884]	; (9e30 <AppProtocolBrake+0xdb8>)
    9aba:	224d      	movs	r2, #77	; 0x4d
    9abc:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 22;
    9abe:	4bdc      	ldr	r3, [pc, #880]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ac0:	2216      	movs	r2, #22
    9ac2:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = statusData.TireRadio;
    9ac4:	4bdc      	ldr	r3, [pc, #880]	; (9e38 <AppProtocolBrake+0xdc0>)
    9ac6:	781a      	ldrb	r2, [r3, #0]
    9ac8:	4bd9      	ldr	r3, [pc, #868]	; (9e30 <AppProtocolBrake+0xdb8>)
    9aca:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = statusData.ExtRadio;
    9acc:	4bda      	ldr	r3, [pc, #872]	; (9e38 <AppProtocolBrake+0xdc0>)
    9ace:	785a      	ldrb	r2, [r3, #1]
    9ad0:	4bd7      	ldr	r3, [pc, #860]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ad2:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = statusData.EEPROM;;
    9ad4:	4bd8      	ldr	r3, [pc, #864]	; (9e38 <AppProtocolBrake+0xdc0>)
    9ad6:	789a      	ldrb	r2, [r3, #2]
    9ad8:	4bd5      	ldr	r3, [pc, #852]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ada:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	statusData.Accelerometer;		
    9adc:	4bd6      	ldr	r3, [pc, #856]	; (9e38 <AppProtocolBrake+0xdc0>)
    9ade:	78da      	ldrb	r2, [r3, #3]
    9ae0:	4bd3      	ldr	r3, [pc, #844]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ae2:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10] = brakeStatus.VoltageInput;
    9ae4:	4bd5      	ldr	r3, [pc, #852]	; (9e3c <AppProtocolBrake+0xdc4>)
    9ae6:	781a      	ldrb	r2, [r3, #0]
    9ae8:	4bd1      	ldr	r3, [pc, #836]	; (9e30 <AppProtocolBrake+0xdb8>)
    9aea:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = brakeStatus.AccelerometerStatus;
    9aec:	4bd3      	ldr	r3, [pc, #844]	; (9e3c <AppProtocolBrake+0xdc4>)
    9aee:	78da      	ldrb	r2, [r3, #3]
    9af0:	4bcf      	ldr	r3, [pc, #828]	; (9e30 <AppProtocolBrake+0xdb8>)
    9af2:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = brakeStatus.ActuatorStatus;;
    9af4:	4bd1      	ldr	r3, [pc, #836]	; (9e3c <AppProtocolBrake+0xdc4>)
    9af6:	789a      	ldrb	r2, [r3, #2]
    9af8:	4bcd      	ldr	r3, [pc, #820]	; (9e30 <AppProtocolBrake+0xdb8>)
    9afa:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = brakeStatus.BrakeState;	
    9afc:	4bcf      	ldr	r3, [pc, #828]	; (9e3c <AppProtocolBrake+0xdc4>)
    9afe:	791a      	ldrb	r2, [r3, #4]
    9b00:	4bcb      	ldr	r3, [pc, #812]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b02:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = brakeStatus.VoltageSupercap; 	
    9b04:	4bcd      	ldr	r3, [pc, #820]	; (9e3c <AppProtocolBrake+0xdc4>)
    9b06:	785a      	ldrb	r2, [r3, #1]
    9b08:	4bc9      	ldr	r3, [pc, #804]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b0a:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = brakeState; 		
    9b0c:	4bcc      	ldr	r3, [pc, #816]	; (9e40 <AppProtocolBrake+0xdc8>)
    9b0e:	781a      	ldrb	r2, [r3, #0]
    9b10:	4bc7      	ldr	r3, [pc, #796]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b12:	73da      	strb	r2, [r3, #15]
						protocolBuffer[16] = 0x00; 	
    9b14:	4bc6      	ldr	r3, [pc, #792]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b16:	2200      	movs	r2, #0
    9b18:	741a      	strb	r2, [r3, #16]
						if (switchToFSK ==TRUE)
    9b1a:	4bca      	ldr	r3, [pc, #808]	; (9e44 <AppProtocolBrake+0xdcc>)
    9b1c:	781b      	ldrb	r3, [r3, #0]
    9b1e:	2b01      	cmp	r3, #1
    9b20:	d102      	bne.n	9b28 <AppProtocolBrake+0xab0>
						{
							protocolBuffer[16] = 0x55; 
    9b22:	4bc3      	ldr	r3, [pc, #780]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b24:	2255      	movs	r2, #85	; 0x55
    9b26:	741a      	strb	r2, [r3, #16]
						}
						ltemp = gPrime;
    9b28:	1c3b      	adds	r3, r7, #0
    9b2a:	3316      	adds	r3, #22
    9b2c:	4ac6      	ldr	r2, [pc, #792]	; (9e48 <AppProtocolBrake+0xdd0>)
    9b2e:	8812      	ldrh	r2, [r2, #0]
    9b30:	801a      	strh	r2, [r3, #0]
						ltemp = ltemp>>8;
    9b32:	1c3b      	adds	r3, r7, #0
    9b34:	3316      	adds	r3, #22
    9b36:	1c3a      	adds	r2, r7, #0
    9b38:	3216      	adds	r2, #22
    9b3a:	8812      	ldrh	r2, [r2, #0]
    9b3c:	0a12      	lsrs	r2, r2, #8
    9b3e:	801a      	strh	r2, [r3, #0]
						protocolBuffer[17] = ltemp; 
    9b40:	1c3b      	adds	r3, r7, #0
    9b42:	3316      	adds	r3, #22
    9b44:	881b      	ldrh	r3, [r3, #0]
    9b46:	b2da      	uxtb	r2, r3
    9b48:	4bb9      	ldr	r3, [pc, #740]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b4a:	745a      	strb	r2, [r3, #17]
						ltemp = gPrime & 0x00ff;	
    9b4c:	4bbe      	ldr	r3, [pc, #760]	; (9e48 <AppProtocolBrake+0xdd0>)
    9b4e:	8819      	ldrh	r1, [r3, #0]
    9b50:	1c3b      	adds	r3, r7, #0
    9b52:	3316      	adds	r3, #22
    9b54:	22ff      	movs	r2, #255	; 0xff
    9b56:	400a      	ands	r2, r1
    9b58:	801a      	strh	r2, [r3, #0]
						protocolBuffer[18] = ltemp; 	
    9b5a:	1c3b      	adds	r3, r7, #0
    9b5c:	3316      	adds	r3, #22
    9b5e:	881b      	ldrh	r3, [r3, #0]
    9b60:	b2da      	uxtb	r2, r3
    9b62:	4bb3      	ldr	r3, [pc, #716]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b64:	749a      	strb	r2, [r3, #18]
						protocolBuffer[19] = 0x00; 	
    9b66:	4bb2      	ldr	r3, [pc, #712]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b68:	2200      	movs	r2, #0
    9b6a:	74da      	strb	r2, [r3, #19]
 					
						checksum = AppProtocolChecksum(protocolBuffer,20);	
    9b6c:	1c3c      	adds	r4, r7, #0
    9b6e:	341f      	adds	r4, #31
    9b70:	4baf      	ldr	r3, [pc, #700]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b72:	1c18      	adds	r0, r3, #0
    9b74:	2114      	movs	r1, #20
    9b76:	4bb5      	ldr	r3, [pc, #724]	; (9e4c <AppProtocolBrake+0xdd4>)
    9b78:	4798      	blx	r3
    9b7a:	1c03      	adds	r3, r0, #0
    9b7c:	7023      	strb	r3, [r4, #0]
						protocolBuffer[20] = checksum; 																			
    9b7e:	4bac      	ldr	r3, [pc, #688]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b80:	1c3a      	adds	r2, r7, #0
    9b82:	321f      	adds	r2, #31
    9b84:	7812      	ldrb	r2, [r2, #0]
    9b86:	751a      	strb	r2, [r3, #20]
						protocolBuffer[21] = 0x04; 	
    9b88:	4ba9      	ldr	r3, [pc, #676]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b8a:	2204      	movs	r2, #4
    9b8c:	755a      	strb	r2, [r3, #21]
						if (whichRadio == WHICHRADIO_LORA)
    9b8e:	4bb0      	ldr	r3, [pc, #704]	; (9e50 <AppProtocolBrake+0xdd8>)
    9b90:	781b      	ldrb	r3, [r3, #0]
    9b92:	2b99      	cmp	r3, #153	; 0x99
    9b94:	d105      	bne.n	9ba2 <AppProtocolBrake+0xb2a>
						{
							SX1272LoraTransmit(protocolBuffer,22);
    9b96:	4ba6      	ldr	r3, [pc, #664]	; (9e30 <AppProtocolBrake+0xdb8>)
    9b98:	1c18      	adds	r0, r3, #0
    9b9a:	2116      	movs	r1, #22
    9b9c:	4bad      	ldr	r3, [pc, #692]	; (9e54 <AppProtocolBrake+0xddc>)
    9b9e:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
						}		
						break;
    9ba0:	e206      	b.n	9fb0 <AppProtocolBrake+0xf38>
						{
							SX1272LoraTransmit(protocolBuffer,22);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
    9ba2:	4ba3      	ldr	r3, [pc, #652]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ba4:	1c18      	adds	r0, r3, #0
    9ba6:	2116      	movs	r1, #22
    9ba8:	4bab      	ldr	r3, [pc, #684]	; (9e58 <AppProtocolBrake+0xde0>)
    9baa:	4798      	blx	r3
						}		
						break;
    9bac:	e200      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}						
					case 0x5245:
					{
						//---------RE
						protocolBuffer[0] = '#';
    9bae:	4ba0      	ldr	r3, [pc, #640]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bb0:	2223      	movs	r2, #35	; 0x23
    9bb2:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9bb4:	4b9f      	ldr	r3, [pc, #636]	; (9e34 <AppProtocolBrake+0xdbc>)
    9bb6:	7bda      	ldrb	r2, [r3, #15]
    9bb8:	4b9d      	ldr	r3, [pc, #628]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bba:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    9bbc:	4b9d      	ldr	r3, [pc, #628]	; (9e34 <AppProtocolBrake+0xdbc>)
    9bbe:	7c1a      	ldrb	r2, [r3, #16]
    9bc0:	4b9b      	ldr	r3, [pc, #620]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bc2:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    9bc4:	4b9a      	ldr	r3, [pc, #616]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bc6:	2252      	movs	r2, #82	; 0x52
    9bc8:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'E';
    9bca:	4b99      	ldr	r3, [pc, #612]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bcc:	2245      	movs	r2, #69	; 0x45
    9bce:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    9bd0:	4b97      	ldr	r3, [pc, #604]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bd2:	220e      	movs	r2, #14
    9bd4:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = table0.Item.EepromManDevSerial[0];
    9bd6:	4b97      	ldr	r3, [pc, #604]	; (9e34 <AppProtocolBrake+0xdbc>)
    9bd8:	7ada      	ldrb	r2, [r3, #11]
    9bda:	4b95      	ldr	r3, [pc, #596]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bdc:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = table0.Item.EepromManDevSerial[1];
    9bde:	4b95      	ldr	r3, [pc, #596]	; (9e34 <AppProtocolBrake+0xdbc>)
    9be0:	7b1a      	ldrb	r2, [r3, #12]
    9be2:	4b93      	ldr	r3, [pc, #588]	; (9e30 <AppProtocolBrake+0xdb8>)
    9be4:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = table0.Item.EepromManDevSerial[2];;
    9be6:	4b93      	ldr	r3, [pc, #588]	; (9e34 <AppProtocolBrake+0xdbc>)
    9be8:	7b5a      	ldrb	r2, [r3, #13]
    9bea:	4b91      	ldr	r3, [pc, #580]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bec:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	table0.Item.EepromManDevSerial[3];;				
    9bee:	4b91      	ldr	r3, [pc, #580]	; (9e34 <AppProtocolBrake+0xdbc>)
    9bf0:	7b9a      	ldrb	r2, [r3, #14]
    9bf2:	4b8f      	ldr	r3, [pc, #572]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bf4:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10] = table0.Item.EepromManDevSerial[4];
    9bf6:	4b8f      	ldr	r3, [pc, #572]	; (9e34 <AppProtocolBrake+0xdbc>)
    9bf8:	7bda      	ldrb	r2, [r3, #15]
    9bfa:	4b8d      	ldr	r3, [pc, #564]	; (9e30 <AppProtocolBrake+0xdb8>)
    9bfc:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = table0.Item.EepromManDevSerial[5];		
    9bfe:	4b8d      	ldr	r3, [pc, #564]	; (9e34 <AppProtocolBrake+0xdbc>)
    9c00:	7c1a      	ldrb	r2, [r3, #16]
    9c02:	4b8b      	ldr	r3, [pc, #556]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c04:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    9c06:	1c3c      	adds	r4, r7, #0
    9c08:	341f      	adds	r4, #31
    9c0a:	4b89      	ldr	r3, [pc, #548]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c0c:	1c18      	adds	r0, r3, #0
    9c0e:	210c      	movs	r1, #12
    9c10:	4b8e      	ldr	r3, [pc, #568]	; (9e4c <AppProtocolBrake+0xdd4>)
    9c12:	4798      	blx	r3
    9c14:	1c03      	adds	r3, r0, #0
    9c16:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 				
    9c18:	4b85      	ldr	r3, [pc, #532]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c1a:	1c3a      	adds	r2, r7, #0
    9c1c:	321f      	adds	r2, #31
    9c1e:	7812      	ldrb	r2, [r2, #0]
    9c20:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 		
    9c22:	4b83      	ldr	r3, [pc, #524]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c24:	2204      	movs	r2, #4
    9c26:	735a      	strb	r2, [r3, #13]
						if (whichRadio == WHICHRADIO_LORA)
    9c28:	4b89      	ldr	r3, [pc, #548]	; (9e50 <AppProtocolBrake+0xdd8>)
    9c2a:	781b      	ldrb	r3, [r3, #0]
    9c2c:	2b99      	cmp	r3, #153	; 0x99
    9c2e:	d105      	bne.n	9c3c <AppProtocolBrake+0xbc4>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    9c30:	4b7f      	ldr	r3, [pc, #508]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c32:	1c18      	adds	r0, r3, #0
    9c34:	210e      	movs	r1, #14
    9c36:	4b87      	ldr	r3, [pc, #540]	; (9e54 <AppProtocolBrake+0xddc>)
    9c38:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}											
						break;
    9c3a:	e1b9      	b.n	9fb0 <AppProtocolBrake+0xf38>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    9c3c:	4b7c      	ldr	r3, [pc, #496]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c3e:	1c18      	adds	r0, r3, #0
    9c40:	210e      	movs	r1, #14
    9c42:	4b85      	ldr	r3, [pc, #532]	; (9e58 <AppProtocolBrake+0xde0>)
    9c44:	4798      	blx	r3
						}											
						break;
    9c46:	e1b3      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}
					case 0x5241:
					{
						//---------RA
						AccelProvideReading(&x,&y,&z); 
    9c48:	1c39      	adds	r1, r7, #0
    9c4a:	3112      	adds	r1, #18
    9c4c:	1c3a      	adds	r2, r7, #0
    9c4e:	3210      	adds	r2, #16
    9c50:	1c3b      	adds	r3, r7, #0
    9c52:	330e      	adds	r3, #14
    9c54:	1c08      	adds	r0, r1, #0
    9c56:	1c11      	adds	r1, r2, #0
    9c58:	1c1a      	adds	r2, r3, #0
    9c5a:	4b80      	ldr	r3, [pc, #512]	; (9e5c <AppProtocolBrake+0xde4>)
    9c5c:	4798      	blx	r3
						protocolBuffer[0] = '#';
    9c5e:	4b74      	ldr	r3, [pc, #464]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c60:	2223      	movs	r2, #35	; 0x23
    9c62:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9c64:	4b73      	ldr	r3, [pc, #460]	; (9e34 <AppProtocolBrake+0xdbc>)
    9c66:	7bda      	ldrb	r2, [r3, #15]
    9c68:	4b71      	ldr	r3, [pc, #452]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c6a:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    9c6c:	4b71      	ldr	r3, [pc, #452]	; (9e34 <AppProtocolBrake+0xdbc>)
    9c6e:	7c1a      	ldrb	r2, [r3, #16]
    9c70:	4b6f      	ldr	r3, [pc, #444]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c72:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    9c74:	4b6e      	ldr	r3, [pc, #440]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c76:	2252      	movs	r2, #82	; 0x52
    9c78:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'A';
    9c7a:	4b6d      	ldr	r3, [pc, #436]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c7c:	2241      	movs	r2, #65	; 0x41
    9c7e:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    9c80:	4b6b      	ldr	r3, [pc, #428]	; (9e30 <AppProtocolBrake+0xdb8>)
    9c82:	220e      	movs	r2, #14
    9c84:	715a      	strb	r2, [r3, #5]
						itemp = x>>8;
    9c86:	1c3b      	adds	r3, r7, #0
    9c88:	3312      	adds	r3, #18
    9c8a:	881a      	ldrh	r2, [r3, #0]
    9c8c:	1c3b      	adds	r3, r7, #0
    9c8e:	332e      	adds	r3, #46	; 0x2e
    9c90:	0a12      	lsrs	r2, r2, #8
    9c92:	801a      	strh	r2, [r3, #0]
						itemp2 = x & 0x00ff;
    9c94:	1c3b      	adds	r3, r7, #0
    9c96:	3312      	adds	r3, #18
    9c98:	8819      	ldrh	r1, [r3, #0]
    9c9a:	1c3b      	adds	r3, r7, #0
    9c9c:	332c      	adds	r3, #44	; 0x2c
    9c9e:	22ff      	movs	r2, #255	; 0xff
    9ca0:	400a      	ands	r2, r1
    9ca2:	801a      	strh	r2, [r3, #0]
						protocolBuffer[6] = itemp;
    9ca4:	1c3b      	adds	r3, r7, #0
    9ca6:	332e      	adds	r3, #46	; 0x2e
    9ca8:	881b      	ldrh	r3, [r3, #0]
    9caa:	b2da      	uxtb	r2, r3
    9cac:	4b60      	ldr	r3, [pc, #384]	; (9e30 <AppProtocolBrake+0xdb8>)
    9cae:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = itemp2;
    9cb0:	1c3b      	adds	r3, r7, #0
    9cb2:	332c      	adds	r3, #44	; 0x2c
    9cb4:	881b      	ldrh	r3, [r3, #0]
    9cb6:	b2da      	uxtb	r2, r3
    9cb8:	4b5d      	ldr	r3, [pc, #372]	; (9e30 <AppProtocolBrake+0xdb8>)
    9cba:	71da      	strb	r2, [r3, #7]
						itemp = y>>8;
    9cbc:	1c3b      	adds	r3, r7, #0
    9cbe:	3310      	adds	r3, #16
    9cc0:	881a      	ldrh	r2, [r3, #0]
    9cc2:	1c3b      	adds	r3, r7, #0
    9cc4:	332e      	adds	r3, #46	; 0x2e
    9cc6:	0a12      	lsrs	r2, r2, #8
    9cc8:	801a      	strh	r2, [r3, #0]
						itemp2 = y & 0x00ff;				
    9cca:	1c3b      	adds	r3, r7, #0
    9ccc:	3310      	adds	r3, #16
    9cce:	8819      	ldrh	r1, [r3, #0]
    9cd0:	1c3b      	adds	r3, r7, #0
    9cd2:	332c      	adds	r3, #44	; 0x2c
    9cd4:	22ff      	movs	r2, #255	; 0xff
    9cd6:	400a      	ands	r2, r1
    9cd8:	801a      	strh	r2, [r3, #0]
						protocolBuffer[8] = itemp;
    9cda:	1c3b      	adds	r3, r7, #0
    9cdc:	332e      	adds	r3, #46	; 0x2e
    9cde:	881b      	ldrh	r3, [r3, #0]
    9ce0:	b2da      	uxtb	r2, r3
    9ce2:	4b53      	ldr	r3, [pc, #332]	; (9e30 <AppProtocolBrake+0xdb8>)
    9ce4:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	itemp2;		
    9ce6:	1c3b      	adds	r3, r7, #0
    9ce8:	332c      	adds	r3, #44	; 0x2c
    9cea:	881b      	ldrh	r3, [r3, #0]
    9cec:	b2da      	uxtb	r2, r3
    9cee:	4b50      	ldr	r3, [pc, #320]	; (9e30 <AppProtocolBrake+0xdb8>)
    9cf0:	725a      	strb	r2, [r3, #9]
						itemp = z>>8;
    9cf2:	1c3b      	adds	r3, r7, #0
    9cf4:	330e      	adds	r3, #14
    9cf6:	881a      	ldrh	r2, [r3, #0]
    9cf8:	1c3b      	adds	r3, r7, #0
    9cfa:	332e      	adds	r3, #46	; 0x2e
    9cfc:	0a12      	lsrs	r2, r2, #8
    9cfe:	801a      	strh	r2, [r3, #0]
						itemp2 = z & 0x00ff;		
    9d00:	1c3b      	adds	r3, r7, #0
    9d02:	330e      	adds	r3, #14
    9d04:	8819      	ldrh	r1, [r3, #0]
    9d06:	1c3b      	adds	r3, r7, #0
    9d08:	332c      	adds	r3, #44	; 0x2c
    9d0a:	22ff      	movs	r2, #255	; 0xff
    9d0c:	400a      	ands	r2, r1
    9d0e:	801a      	strh	r2, [r3, #0]
						protocolBuffer[10] = itemp;
    9d10:	1c3b      	adds	r3, r7, #0
    9d12:	332e      	adds	r3, #46	; 0x2e
    9d14:	881b      	ldrh	r3, [r3, #0]
    9d16:	b2da      	uxtb	r2, r3
    9d18:	4b45      	ldr	r3, [pc, #276]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d1a:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = itemp2;	
    9d1c:	1c3b      	adds	r3, r7, #0
    9d1e:	332c      	adds	r3, #44	; 0x2c
    9d20:	881b      	ldrh	r3, [r3, #0]
    9d22:	b2da      	uxtb	r2, r3
    9d24:	4b42      	ldr	r3, [pc, #264]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d26:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    9d28:	1c3c      	adds	r4, r7, #0
    9d2a:	341f      	adds	r4, #31
    9d2c:	4b40      	ldr	r3, [pc, #256]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d2e:	1c18      	adds	r0, r3, #0
    9d30:	210c      	movs	r1, #12
    9d32:	4b46      	ldr	r3, [pc, #280]	; (9e4c <AppProtocolBrake+0xdd4>)
    9d34:	4798      	blx	r3
    9d36:	1c03      	adds	r3, r0, #0
    9d38:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 			
    9d3a:	4b3d      	ldr	r3, [pc, #244]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d3c:	1c3a      	adds	r2, r7, #0
    9d3e:	321f      	adds	r2, #31
    9d40:	7812      	ldrb	r2, [r2, #0]
    9d42:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 	
    9d44:	4b3a      	ldr	r3, [pc, #232]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d46:	2204      	movs	r2, #4
    9d48:	735a      	strb	r2, [r3, #13]
	 	
						if (whichRadio == WHICHRADIO_LORA)
    9d4a:	4b41      	ldr	r3, [pc, #260]	; (9e50 <AppProtocolBrake+0xdd8>)
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	2b99      	cmp	r3, #153	; 0x99
    9d50:	d105      	bne.n	9d5e <AppProtocolBrake+0xce6>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    9d52:	4b37      	ldr	r3, [pc, #220]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d54:	1c18      	adds	r0, r3, #0
    9d56:	210e      	movs	r1, #14
    9d58:	4b3e      	ldr	r3, [pc, #248]	; (9e54 <AppProtocolBrake+0xddc>)
    9d5a:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}								
						break;
    9d5c:	e128      	b.n	9fb0 <AppProtocolBrake+0xf38>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    9d5e:	4b34      	ldr	r3, [pc, #208]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d60:	1c18      	adds	r0, r3, #0
    9d62:	210e      	movs	r1, #14
    9d64:	4b3c      	ldr	r3, [pc, #240]	; (9e58 <AppProtocolBrake+0xde0>)
    9d66:	4798      	blx	r3
						}								
						break;
    9d68:	e122      	b.n	9fb0 <AppProtocolBrake+0xf38>
					}			
					case 0x5254:
					{
						//---------RT
						if (buffers[7]<4)
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	3307      	adds	r3, #7
    9d6e:	781b      	ldrb	r3, [r3, #0]
    9d70:	2b03      	cmp	r3, #3
    9d72:	d900      	bls.n	9d76 <AppProtocolBrake+0xcfe>
    9d74:	e0e3      	b.n	9f3e <AppProtocolBrake+0xec6>
						{
							protocolBuffer[0] = '#';
    9d76:	4b2e      	ldr	r3, [pc, #184]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d78:	2223      	movs	r2, #35	; 0x23
    9d7a:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9d7c:	4b2d      	ldr	r3, [pc, #180]	; (9e34 <AppProtocolBrake+0xdbc>)
    9d7e:	7bda      	ldrb	r2, [r3, #15]
    9d80:	4b2b      	ldr	r3, [pc, #172]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d82:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    9d84:	4b2b      	ldr	r3, [pc, #172]	; (9e34 <AppProtocolBrake+0xdbc>)
    9d86:	7c1a      	ldrb	r2, [r3, #16]
    9d88:	4b29      	ldr	r3, [pc, #164]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d8a:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    9d8c:	4b28      	ldr	r3, [pc, #160]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d8e:	2252      	movs	r2, #82	; 0x52
    9d90:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    9d92:	4b27      	ldr	r3, [pc, #156]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d94:	2254      	movs	r2, #84	; 0x54
    9d96:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] =  33;
    9d98:	4b25      	ldr	r3, [pc, #148]	; (9e30 <AppProtocolBrake+0xdb8>)
    9d9a:	2221      	movs	r2, #33	; 0x21
    9d9c:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[7];	
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	79da      	ldrb	r2, [r3, #7]
    9da2:	4b23      	ldr	r3, [pc, #140]	; (9e30 <AppProtocolBrake+0xdb8>)
    9da4:	719a      	strb	r2, [r3, #6]
					 
							offset = buffers[7]*3; 
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	3307      	adds	r3, #7
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	1c39      	adds	r1, r7, #0
    9dae:	3115      	adds	r1, #21
    9db0:	1c1a      	adds	r2, r3, #0
    9db2:	1892      	adds	r2, r2, r2
    9db4:	18d3      	adds	r3, r2, r3
    9db6:	700b      	strb	r3, [r1, #0]
							protocolBuffer[7] = sensorDynamic[offset].Change;
    9db8:	1c3b      	adds	r3, r7, #0
    9dba:	3315      	adds	r3, #21
    9dbc:	781b      	ldrb	r3, [r3, #0]
    9dbe:	4a28      	ldr	r2, [pc, #160]	; (9e60 <AppProtocolBrake+0xde8>)
    9dc0:	011b      	lsls	r3, r3, #4
    9dc2:	18d3      	adds	r3, r2, r3
    9dc4:	791a      	ldrb	r2, [r3, #4]
    9dc6:	4b1a      	ldr	r3, [pc, #104]	; (9e30 <AppProtocolBrake+0xdb8>)
    9dc8:	71da      	strb	r2, [r3, #7]
							for (i=0;i<7;i++)
    9dca:	1c3b      	adds	r3, r7, #0
    9dcc:	3337      	adds	r3, #55	; 0x37
    9dce:	2200      	movs	r2, #0
    9dd0:	701a      	strb	r2, [r3, #0]
    9dd2:	e017      	b.n	9e04 <AppProtocolBrake+0xd8c>
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
    9dd4:	1c3b      	adds	r3, r7, #0
    9dd6:	3337      	adds	r3, #55	; 0x37
    9dd8:	781b      	ldrb	r3, [r3, #0]
    9dda:	3308      	adds	r3, #8
    9ddc:	1c3a      	adds	r2, r7, #0
    9dde:	3215      	adds	r2, #21
    9de0:	7810      	ldrb	r0, [r2, #0]
    9de2:	1c3a      	adds	r2, r7, #0
    9de4:	3237      	adds	r2, #55	; 0x37
    9de6:	7812      	ldrb	r2, [r2, #0]
    9de8:	491d      	ldr	r1, [pc, #116]	; (9e60 <AppProtocolBrake+0xde8>)
    9dea:	0100      	lsls	r0, r0, #4
    9dec:	1882      	adds	r2, r0, r2
    9dee:	188a      	adds	r2, r1, r2
    9df0:	7951      	ldrb	r1, [r2, #5]
    9df2:	4a0f      	ldr	r2, [pc, #60]	; (9e30 <AppProtocolBrake+0xdb8>)
    9df4:	54d1      	strb	r1, [r2, r3]
							protocolBuffer[5] =  33;
							protocolBuffer[6] = buffers[7];	
					 
							offset = buffers[7]*3; 
							protocolBuffer[7] = sensorDynamic[offset].Change;
							for (i=0;i<7;i++)
    9df6:	1c3b      	adds	r3, r7, #0
    9df8:	3337      	adds	r3, #55	; 0x37
    9dfa:	781a      	ldrb	r2, [r3, #0]
    9dfc:	1c3b      	adds	r3, r7, #0
    9dfe:	3337      	adds	r3, #55	; 0x37
    9e00:	3201      	adds	r2, #1
    9e02:	701a      	strb	r2, [r3, #0]
    9e04:	1c3b      	adds	r3, r7, #0
    9e06:	3337      	adds	r3, #55	; 0x37
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	2b06      	cmp	r3, #6
    9e0c:	d9e2      	bls.n	9dd4 <AppProtocolBrake+0xd5c>
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
    9e0e:	1c3b      	adds	r3, r7, #0
    9e10:	3315      	adds	r3, #21
    9e12:	781b      	ldrb	r3, [r3, #0]
    9e14:	3301      	adds	r3, #1
    9e16:	4a12      	ldr	r2, [pc, #72]	; (9e60 <AppProtocolBrake+0xde8>)
    9e18:	011b      	lsls	r3, r3, #4
    9e1a:	18d3      	adds	r3, r2, r3
    9e1c:	791a      	ldrb	r2, [r3, #4]
    9e1e:	4b04      	ldr	r3, [pc, #16]	; (9e30 <AppProtocolBrake+0xdb8>)
    9e20:	73da      	strb	r2, [r3, #15]
							for (i=0;i<7;i++)
    9e22:	1c3b      	adds	r3, r7, #0
    9e24:	3337      	adds	r3, #55	; 0x37
    9e26:	2200      	movs	r2, #0
    9e28:	701a      	strb	r2, [r3, #0]
    9e2a:	e034      	b.n	9e96 <AppProtocolBrake+0xe1e>
    9e2c:	20002edc 	.word	0x20002edc
    9e30:	20002f00 	.word	0x20002f00
    9e34:	20002f98 	.word	0x20002f98
    9e38:	20003694 	.word	0x20003694
    9e3c:	20003660 	.word	0x20003660
    9e40:	20002eaa 	.word	0x20002eaa
    9e44:	200004b4 	.word	0x200004b4
    9e48:	20002ec6 	.word	0x20002ec6
    9e4c:	00008ff9 	.word	0x00008ff9
    9e50:	2000369a 	.word	0x2000369a
    9e54:	00010035 	.word	0x00010035
    9e58:	0000f20d 	.word	0x0000f20d
    9e5c:	00005cfd 	.word	0x00005cfd
    9e60:	20003380 	.word	0x20003380
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
    9e64:	1c3b      	adds	r3, r7, #0
    9e66:	3337      	adds	r3, #55	; 0x37
    9e68:	781b      	ldrb	r3, [r3, #0]
    9e6a:	3310      	adds	r3, #16
    9e6c:	1c3a      	adds	r2, r7, #0
    9e6e:	3215      	adds	r2, #21
    9e70:	7812      	ldrb	r2, [r2, #0]
    9e72:	1c50      	adds	r0, r2, #1
    9e74:	1c3a      	adds	r2, r7, #0
    9e76:	3237      	adds	r2, #55	; 0x37
    9e78:	7812      	ldrb	r2, [r2, #0]
    9e7a:	494f      	ldr	r1, [pc, #316]	; (9fb8 <AppProtocolBrake+0xf40>)
    9e7c:	0100      	lsls	r0, r0, #4
    9e7e:	1882      	adds	r2, r0, r2
    9e80:	188a      	adds	r2, r1, r2
    9e82:	7951      	ldrb	r1, [r2, #5]
    9e84:	4a4d      	ldr	r2, [pc, #308]	; (9fbc <AppProtocolBrake+0xf44>)
    9e86:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
							for (i=0;i<7;i++)
    9e88:	1c3b      	adds	r3, r7, #0
    9e8a:	3337      	adds	r3, #55	; 0x37
    9e8c:	781a      	ldrb	r2, [r3, #0]
    9e8e:	1c3b      	adds	r3, r7, #0
    9e90:	3337      	adds	r3, #55	; 0x37
    9e92:	3201      	adds	r2, #1
    9e94:	701a      	strb	r2, [r3, #0]
    9e96:	1c3b      	adds	r3, r7, #0
    9e98:	3337      	adds	r3, #55	; 0x37
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	2b06      	cmp	r3, #6
    9e9e:	d9e1      	bls.n	9e64 <AppProtocolBrake+0xdec>
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
    9ea0:	1c3b      	adds	r3, r7, #0
    9ea2:	3315      	adds	r3, #21
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	3302      	adds	r3, #2
    9ea8:	4a43      	ldr	r2, [pc, #268]	; (9fb8 <AppProtocolBrake+0xf40>)
    9eaa:	011b      	lsls	r3, r3, #4
    9eac:	18d3      	adds	r3, r2, r3
    9eae:	791a      	ldrb	r2, [r3, #4]
    9eb0:	4b42      	ldr	r3, [pc, #264]	; (9fbc <AppProtocolBrake+0xf44>)
    9eb2:	75da      	strb	r2, [r3, #23]
							for (i=0;i<7;i++)
    9eb4:	1c3b      	adds	r3, r7, #0
    9eb6:	3337      	adds	r3, #55	; 0x37
    9eb8:	2200      	movs	r2, #0
    9eba:	701a      	strb	r2, [r3, #0]
    9ebc:	e018      	b.n	9ef0 <AppProtocolBrake+0xe78>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
    9ebe:	1c3b      	adds	r3, r7, #0
    9ec0:	3337      	adds	r3, #55	; 0x37
    9ec2:	781b      	ldrb	r3, [r3, #0]
    9ec4:	3318      	adds	r3, #24
    9ec6:	1c3a      	adds	r2, r7, #0
    9ec8:	3215      	adds	r2, #21
    9eca:	7812      	ldrb	r2, [r2, #0]
    9ecc:	1c90      	adds	r0, r2, #2
    9ece:	1c3a      	adds	r2, r7, #0
    9ed0:	3237      	adds	r2, #55	; 0x37
    9ed2:	7812      	ldrb	r2, [r2, #0]
    9ed4:	4938      	ldr	r1, [pc, #224]	; (9fb8 <AppProtocolBrake+0xf40>)
    9ed6:	0100      	lsls	r0, r0, #4
    9ed8:	1882      	adds	r2, r0, r2
    9eda:	188a      	adds	r2, r1, r2
    9edc:	7951      	ldrb	r1, [r2, #5]
    9ede:	4a37      	ldr	r2, [pc, #220]	; (9fbc <AppProtocolBrake+0xf44>)
    9ee0:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
							for (i=0;i<7;i++)
    9ee2:	1c3b      	adds	r3, r7, #0
    9ee4:	3337      	adds	r3, #55	; 0x37
    9ee6:	781a      	ldrb	r2, [r3, #0]
    9ee8:	1c3b      	adds	r3, r7, #0
    9eea:	3337      	adds	r3, #55	; 0x37
    9eec:	3201      	adds	r2, #1
    9eee:	701a      	strb	r2, [r3, #0]
    9ef0:	1c3b      	adds	r3, r7, #0
    9ef2:	3337      	adds	r3, #55	; 0x37
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	2b06      	cmp	r3, #6
    9ef8:	d9e1      	bls.n	9ebe <AppProtocolBrake+0xe46>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
							}	
							checksum = AppProtocolChecksum(protocolBuffer,31);	
    9efa:	1c3c      	adds	r4, r7, #0
    9efc:	341f      	adds	r4, #31
    9efe:	4b2f      	ldr	r3, [pc, #188]	; (9fbc <AppProtocolBrake+0xf44>)
    9f00:	1c18      	adds	r0, r3, #0
    9f02:	211f      	movs	r1, #31
    9f04:	4b2e      	ldr	r3, [pc, #184]	; (9fc0 <AppProtocolBrake+0xf48>)
    9f06:	4798      	blx	r3
    9f08:	1c03      	adds	r3, r0, #0
    9f0a:	7023      	strb	r3, [r4, #0]
							protocolBuffer[31] = checksum; 			
    9f0c:	4b2b      	ldr	r3, [pc, #172]	; (9fbc <AppProtocolBrake+0xf44>)
    9f0e:	1c3a      	adds	r2, r7, #0
    9f10:	321f      	adds	r2, #31
    9f12:	7812      	ldrb	r2, [r2, #0]
    9f14:	77da      	strb	r2, [r3, #31]
							protocolBuffer[32] = 0x04; 																	
    9f16:	4a29      	ldr	r2, [pc, #164]	; (9fbc <AppProtocolBrake+0xf44>)
    9f18:	2320      	movs	r3, #32
    9f1a:	2104      	movs	r1, #4
    9f1c:	54d1      	strb	r1, [r2, r3]
											
							if (whichRadio == WHICHRADIO_LORA)
    9f1e:	4b29      	ldr	r3, [pc, #164]	; (9fc4 <AppProtocolBrake+0xf4c>)
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	2b99      	cmp	r3, #153	; 0x99
    9f24:	d105      	bne.n	9f32 <AppProtocolBrake+0xeba>
							{
								SX1272LoraTransmit(protocolBuffer,33);
    9f26:	4b25      	ldr	r3, [pc, #148]	; (9fbc <AppProtocolBrake+0xf44>)
    9f28:	1c18      	adds	r0, r3, #0
    9f2a:	2121      	movs	r1, #33	; 0x21
    9f2c:	4b26      	ldr	r3, [pc, #152]	; (9fc8 <AppProtocolBrake+0xf50>)
    9f2e:	4798      	blx	r3
    9f30:	e03d      	b.n	9fae <AppProtocolBrake+0xf36>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,33);
    9f32:	4b22      	ldr	r3, [pc, #136]	; (9fbc <AppProtocolBrake+0xf44>)
    9f34:	1c18      	adds	r0, r3, #0
    9f36:	2121      	movs	r1, #33	; 0x21
    9f38:	4b24      	ldr	r3, [pc, #144]	; (9fcc <AppProtocolBrake+0xf54>)
    9f3a:	4798      	blx	r3
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
							}											
						}
						break;
    9f3c:	e038      	b.n	9fb0 <AppProtocolBrake+0xf38>
								SX1272FskTransmit(protocolBuffer,33);
							}								
						}
						else
						{
							protocolBuffer[0] = '#';
    9f3e:	4b1f      	ldr	r3, [pc, #124]	; (9fbc <AppProtocolBrake+0xf44>)
    9f40:	2223      	movs	r2, #35	; 0x23
    9f42:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    9f44:	4b22      	ldr	r3, [pc, #136]	; (9fd0 <AppProtocolBrake+0xf58>)
    9f46:	7bda      	ldrb	r2, [r3, #15]
    9f48:	4b1c      	ldr	r3, [pc, #112]	; (9fbc <AppProtocolBrake+0xf44>)
    9f4a:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    9f4c:	4b20      	ldr	r3, [pc, #128]	; (9fd0 <AppProtocolBrake+0xf58>)
    9f4e:	7c1a      	ldrb	r2, [r3, #16]
    9f50:	4b1a      	ldr	r3, [pc, #104]	; (9fbc <AppProtocolBrake+0xf44>)
    9f52:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    9f54:	4b19      	ldr	r3, [pc, #100]	; (9fbc <AppProtocolBrake+0xf44>)
    9f56:	2252      	movs	r2, #82	; 0x52
    9f58:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    9f5a:	4b18      	ldr	r3, [pc, #96]	; (9fbc <AppProtocolBrake+0xf44>)
    9f5c:	2254      	movs	r2, #84	; 0x54
    9f5e:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] = 9;
    9f60:	4b16      	ldr	r3, [pc, #88]	; (9fbc <AppProtocolBrake+0xf44>)
    9f62:	2209      	movs	r2, #9
    9f64:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[6];
    9f66:	687b      	ldr	r3, [r7, #4]
    9f68:	799a      	ldrb	r2, [r3, #6]
    9f6a:	4b14      	ldr	r3, [pc, #80]	; (9fbc <AppProtocolBrake+0xf44>)
    9f6c:	719a      	strb	r2, [r3, #6]
							checksum = AppProtocolChecksum(protocolBuffer,7);	
    9f6e:	1c3c      	adds	r4, r7, #0
    9f70:	341f      	adds	r4, #31
    9f72:	4b12      	ldr	r3, [pc, #72]	; (9fbc <AppProtocolBrake+0xf44>)
    9f74:	1c18      	adds	r0, r3, #0
    9f76:	2107      	movs	r1, #7
    9f78:	4b11      	ldr	r3, [pc, #68]	; (9fc0 <AppProtocolBrake+0xf48>)
    9f7a:	4798      	blx	r3
    9f7c:	1c03      	adds	r3, r0, #0
    9f7e:	7023      	strb	r3, [r4, #0]
							protocolBuffer[7] = checksum; 			
    9f80:	4b0e      	ldr	r3, [pc, #56]	; (9fbc <AppProtocolBrake+0xf44>)
    9f82:	1c3a      	adds	r2, r7, #0
    9f84:	321f      	adds	r2, #31
    9f86:	7812      	ldrb	r2, [r2, #0]
    9f88:	71da      	strb	r2, [r3, #7]
							protocolBuffer[8] = 0x04; 		
    9f8a:	4b0c      	ldr	r3, [pc, #48]	; (9fbc <AppProtocolBrake+0xf44>)
    9f8c:	2204      	movs	r2, #4
    9f8e:	721a      	strb	r2, [r3, #8]
							if (whichRadio == WHICHRADIO_LORA)
    9f90:	4b0c      	ldr	r3, [pc, #48]	; (9fc4 <AppProtocolBrake+0xf4c>)
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	2b99      	cmp	r3, #153	; 0x99
    9f96:	d105      	bne.n	9fa4 <AppProtocolBrake+0xf2c>
							{
								SX1272LoraTransmit(protocolBuffer,9);
    9f98:	4b08      	ldr	r3, [pc, #32]	; (9fbc <AppProtocolBrake+0xf44>)
    9f9a:	1c18      	adds	r0, r3, #0
    9f9c:	2109      	movs	r1, #9
    9f9e:	4b0a      	ldr	r3, [pc, #40]	; (9fc8 <AppProtocolBrake+0xf50>)
    9fa0:	4798      	blx	r3
    9fa2:	e004      	b.n	9fae <AppProtocolBrake+0xf36>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
    9fa4:	4b05      	ldr	r3, [pc, #20]	; (9fbc <AppProtocolBrake+0xf44>)
    9fa6:	1c18      	adds	r0, r3, #0
    9fa8:	2109      	movs	r1, #9
    9faa:	4b08      	ldr	r3, [pc, #32]	; (9fcc <AppProtocolBrake+0xf54>)
    9fac:	4798      	blx	r3
							}											
						}
						break;
    9fae:	46c0      	nop			; (mov r8, r8)
			
				}		
			}
		}
	}
}
    9fb0:	46bd      	mov	sp, r7
    9fb2:	b00f      	add	sp, #60	; 0x3c
    9fb4:	bd90      	pop	{r4, r7, pc}
    9fb6:	46c0      	nop			; (mov r8, r8)
    9fb8:	20003380 	.word	0x20003380
    9fbc:	20002f00 	.word	0x20002f00
    9fc0:	00008ff9 	.word	0x00008ff9
    9fc4:	2000369a 	.word	0x2000369a
    9fc8:	00010035 	.word	0x00010035
    9fcc:	0000f20d 	.word	0x0000f20d
    9fd0:	20002f98 	.word	0x20002f98

00009fd4 <SendOneMessage>:
#endif	

void SendOneMessage()
{
    9fd4:	b590      	push	{r4, r7, lr}
    9fd6:	b083      	sub	sp, #12
    9fd8:	af00      	add	r7, sp, #0
 
		//-------------------
		// address field set to ffff
		// since in pairing mode.
		//-------------------
		buffer[0] = '#';
    9fda:	4b19      	ldr	r3, [pc, #100]	; (a040 <SendOneMessage+0x6c>)
    9fdc:	2223      	movs	r2, #35	; 0x23
    9fde:	701a      	strb	r2, [r3, #0]
		buffer[1] = 0xff;
    9fe0:	4b17      	ldr	r3, [pc, #92]	; (a040 <SendOneMessage+0x6c>)
    9fe2:	22ff      	movs	r2, #255	; 0xff
    9fe4:	705a      	strb	r2, [r3, #1]
		buffer[2] = 0xff;
    9fe6:	4b16      	ldr	r3, [pc, #88]	; (a040 <SendOneMessage+0x6c>)
    9fe8:	22ff      	movs	r2, #255	; 0xff
    9fea:	709a      	strb	r2, [r3, #2]
		buffer[3] = 'T';
    9fec:	4b14      	ldr	r3, [pc, #80]	; (a040 <SendOneMessage+0x6c>)
    9fee:	2254      	movs	r2, #84	; 0x54
    9ff0:	70da      	strb	r2, [r3, #3]
		buffer[4] = 'T';
    9ff2:	4b13      	ldr	r3, [pc, #76]	; (a040 <SendOneMessage+0x6c>)
    9ff4:	2254      	movs	r2, #84	; 0x54
    9ff6:	711a      	strb	r2, [r3, #4]
		buffer[5] = 8;
    9ff8:	4b11      	ldr	r3, [pc, #68]	; (a040 <SendOneMessage+0x6c>)
    9ffa:	2208      	movs	r2, #8
    9ffc:	715a      	strb	r2, [r3, #5]
		checksum = AppProtocolChecksum(buffer,6);
    9ffe:	1dfc      	adds	r4, r7, #7
    a000:	4b0f      	ldr	r3, [pc, #60]	; (a040 <SendOneMessage+0x6c>)
    a002:	1c18      	adds	r0, r3, #0
    a004:	2106      	movs	r1, #6
    a006:	4b0f      	ldr	r3, [pc, #60]	; (a044 <SendOneMessage+0x70>)
    a008:	4798      	blx	r3
    a00a:	1c03      	adds	r3, r0, #0
    a00c:	7023      	strb	r3, [r4, #0]
		buffer[6] = checksum;
    a00e:	4b0c      	ldr	r3, [pc, #48]	; (a040 <SendOneMessage+0x6c>)
    a010:	1dfa      	adds	r2, r7, #7
    a012:	7812      	ldrb	r2, [r2, #0]
    a014:	719a      	strb	r2, [r3, #6]
		buffer[7] = 0x04;
    a016:	4b0a      	ldr	r3, [pc, #40]	; (a040 <SendOneMessage+0x6c>)
    a018:	2204      	movs	r2, #4
    a01a:	71da      	strb	r2, [r3, #7]
		if (whichRadio == WHICHRADIO_LORA)
    a01c:	4b0a      	ldr	r3, [pc, #40]	; (a048 <SendOneMessage+0x74>)
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	2b99      	cmp	r3, #153	; 0x99
    a022:	d105      	bne.n	a030 <SendOneMessage+0x5c>
		{
			SX1272LoraTransmit(buffer,8);
    a024:	4b06      	ldr	r3, [pc, #24]	; (a040 <SendOneMessage+0x6c>)
    a026:	1c18      	adds	r0, r3, #0
    a028:	2108      	movs	r1, #8
    a02a:	4b08      	ldr	r3, [pc, #32]	; (a04c <SendOneMessage+0x78>)
    a02c:	4798      	blx	r3
    a02e:	e004      	b.n	a03a <SendOneMessage+0x66>
		}
		else
		{
			SX1272FskTransmit(buffer,8);
    a030:	4b03      	ldr	r3, [pc, #12]	; (a040 <SendOneMessage+0x6c>)
    a032:	1c18      	adds	r0, r3, #0
    a034:	2108      	movs	r1, #8
    a036:	4b06      	ldr	r3, [pc, #24]	; (a050 <SendOneMessage+0x7c>)
    a038:	4798      	blx	r3
		}
 
}
    a03a:	46bd      	mov	sp, r7
    a03c:	b003      	add	sp, #12
    a03e:	bd90      	pop	{r4, r7, pc}
    a040:	20002ee0 	.word	0x20002ee0
    a044:	00008ff9 	.word	0x00008ff9
    a048:	2000369a 	.word	0x2000369a
    a04c:	00010035 	.word	0x00010035
    a050:	0000f20d 	.word	0x0000f20d

0000a054 <ConfigInit>:
//------------------------------------------------------------------------------
// This function handles allows all the RAM copies of EEPROM values to be loaded 
// in.
//==============================================================================
void ConfigInit(void)
{
    a054:	b580      	push	{r7, lr}
    a056:	b086      	sub	sp, #24
    a058:	af00      	add	r7, sp, #0
  uint8_t testBuffer[10],value,n,eepromManDevSerial[6],i; 
  
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    a05a:	1c3b      	adds	r3, r7, #0
    a05c:	330c      	adds	r3, #12
    a05e:	1c18      	adds	r0, r3, #0
    a060:	2102      	movs	r1, #2
    a062:	220a      	movs	r2, #10
    a064:	4bdf      	ldr	r3, [pc, #892]	; (a3e4 <ConfigInit+0x390>)
    a066:	4798      	blx	r3
    a068:	1c03      	adds	r3, r0, #0
    a06a:	2b00      	cmp	r3, #0
    a06c:	d100      	bne.n	a070 <ConfigInit+0x1c>
    a06e:	e151      	b.n	a314 <ConfigInit+0x2c0>
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    a070:	1c3b      	adds	r3, r7, #0
    a072:	330c      	adds	r3, #12
    a074:	781b      	ldrb	r3, [r3, #0]
    a076:	2b43      	cmp	r3, #67	; 0x43
    a078:	d123      	bne.n	a0c2 <ConfigInit+0x6e>
    a07a:	1c3b      	adds	r3, r7, #0
    a07c:	330c      	adds	r3, #12
    a07e:	785b      	ldrb	r3, [r3, #1]
    a080:	2b52      	cmp	r3, #82	; 0x52
    a082:	d11e      	bne.n	a0c2 <ConfigInit+0x6e>
    a084:	1c3b      	adds	r3, r7, #0
    a086:	330c      	adds	r3, #12
    a088:	789b      	ldrb	r3, [r3, #2]
    a08a:	2b45      	cmp	r3, #69	; 0x45
    a08c:	d119      	bne.n	a0c2 <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    a08e:	1c3b      	adds	r3, r7, #0
    a090:	330c      	adds	r3, #12
    a092:	78db      	ldrb	r3, [r3, #3]
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    a094:	2b45      	cmp	r3, #69	; 0x45
    a096:	d114      	bne.n	a0c2 <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    a098:	1c3b      	adds	r3, r7, #0
    a09a:	330c      	adds	r3, #12
    a09c:	791b      	ldrb	r3, [r3, #4]
    a09e:	2b44      	cmp	r3, #68	; 0x44
    a0a0:	d10f      	bne.n	a0c2 <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    a0a2:	1c3b      	adds	r3, r7, #0
    a0a4:	330c      	adds	r3, #12
    a0a6:	799b      	ldrb	r3, [r3, #6]
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    a0a8:	2b30      	cmp	r3, #48	; 0x30
    a0aa:	d10a      	bne.n	a0c2 <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    a0ac:	1c3b      	adds	r3, r7, #0
    a0ae:	330c      	adds	r3, #12
    a0b0:	7a1b      	ldrb	r3, [r3, #8]
    a0b2:	2b30      	cmp	r3, #48	; 0x30
    a0b4:	d105      	bne.n	a0c2 <ConfigInit+0x6e>
		(testBuffer[9] == CONFIGDB_VER2))
    a0b6:	1c3b      	adds	r3, r7, #0
    a0b8:	330c      	adds	r3, #12
    a0ba:	7a5b      	ldrb	r3, [r3, #9]
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    a0bc:	2b36      	cmp	r3, #54	; 0x36
    a0be:	d100      	bne.n	a0c2 <ConfigInit+0x6e>
    a0c0:	e103      	b.n	a2ca <ConfigInit+0x276>
		 
	}
	else
	{
		//------------------------setup header and default values 
		testBuffer[0] = 'C';
    a0c2:	1c3b      	adds	r3, r7, #0
    a0c4:	330c      	adds	r3, #12
    a0c6:	2243      	movs	r2, #67	; 0x43
    a0c8:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 'R';
    a0ca:	1c3b      	adds	r3, r7, #0
    a0cc:	330c      	adds	r3, #12
    a0ce:	2252      	movs	r2, #82	; 0x52
    a0d0:	705a      	strb	r2, [r3, #1]
		testBuffer[2] = 'E';
    a0d2:	1c3b      	adds	r3, r7, #0
    a0d4:	330c      	adds	r3, #12
    a0d6:	2245      	movs	r2, #69	; 0x45
    a0d8:	709a      	strb	r2, [r3, #2]
		testBuffer[3] = 'E';
    a0da:	1c3b      	adds	r3, r7, #0
    a0dc:	330c      	adds	r3, #12
    a0de:	2245      	movs	r2, #69	; 0x45
    a0e0:	70da      	strb	r2, [r3, #3]
		testBuffer[4] = 'D';
    a0e2:	1c3b      	adds	r3, r7, #0
    a0e4:	330c      	adds	r3, #12
    a0e6:	2244      	movs	r2, #68	; 0x44
    a0e8:	711a      	strb	r2, [r3, #4]
		testBuffer[5] = 'V';
    a0ea:	1c3b      	adds	r3, r7, #0
    a0ec:	330c      	adds	r3, #12
    a0ee:	2256      	movs	r2, #86	; 0x56
    a0f0:	715a      	strb	r2, [r3, #5]
		testBuffer[6] = CONFIGDB_VER0;
    a0f2:	1c3b      	adds	r3, r7, #0
    a0f4:	330c      	adds	r3, #12
    a0f6:	2230      	movs	r2, #48	; 0x30
    a0f8:	719a      	strb	r2, [r3, #6]
		testBuffer[7] = '.';
    a0fa:	1c3b      	adds	r3, r7, #0
    a0fc:	330c      	adds	r3, #12
    a0fe:	222e      	movs	r2, #46	; 0x2e
    a100:	71da      	strb	r2, [r3, #7]
		testBuffer[8] = CONFIGDB_VER1;
    a102:	1c3b      	adds	r3, r7, #0
    a104:	330c      	adds	r3, #12
    a106:	2230      	movs	r2, #48	; 0x30
    a108:	721a      	strb	r2, [r3, #8]
		testBuffer[9] = CONFIGDB_VER2; 					
    a10a:	1c3b      	adds	r3, r7, #0
    a10c:	330c      	adds	r3, #12
    a10e:	2236      	movs	r2, #54	; 0x36
    a110:	725a      	strb	r2, [r3, #9]
		for (n=0;n<10;n++)
    a112:	1c3b      	adds	r3, r7, #0
    a114:	3317      	adds	r3, #23
    a116:	2200      	movs	r2, #0
    a118:	701a      	strb	r2, [r3, #0]
    a11a:	e016      	b.n	a14a <ConfigInit+0xf6>
		{
			if (I2CEEPROMBufferWrite(&testBuffer[n],TableHeader1_Setting+n,1)!= 0)
    a11c:	1c3b      	adds	r3, r7, #0
    a11e:	3317      	adds	r3, #23
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	1c3a      	adds	r2, r7, #0
    a124:	320c      	adds	r2, #12
    a126:	18d2      	adds	r2, r2, r3
    a128:	1c3b      	adds	r3, r7, #0
    a12a:	3317      	adds	r3, #23
    a12c:	781b      	ldrb	r3, [r3, #0]
    a12e:	3302      	adds	r3, #2
    a130:	b2db      	uxtb	r3, r3
    a132:	1c10      	adds	r0, r2, #0
    a134:	1c19      	adds	r1, r3, #0
    a136:	2201      	movs	r2, #1
    a138:	4bab      	ldr	r3, [pc, #684]	; (a3e8 <ConfigInit+0x394>)
    a13a:	4798      	blx	r3
		testBuffer[5] = 'V';
		testBuffer[6] = CONFIGDB_VER0;
		testBuffer[7] = '.';
		testBuffer[8] = CONFIGDB_VER1;
		testBuffer[9] = CONFIGDB_VER2; 					
		for (n=0;n<10;n++)
    a13c:	1c3b      	adds	r3, r7, #0
    a13e:	3317      	adds	r3, #23
    a140:	781a      	ldrb	r2, [r3, #0]
    a142:	1c3b      	adds	r3, r7, #0
    a144:	3317      	adds	r3, #23
    a146:	3201      	adds	r2, #1
    a148:	701a      	strb	r2, [r3, #0]
    a14a:	1c3b      	adds	r3, r7, #0
    a14c:	3317      	adds	r3, #23
    a14e:	781b      	ldrb	r3, [r3, #0]
    a150:	2b09      	cmp	r3, #9
    a152:	d9e3      	bls.n	a11c <ConfigInit+0xc8>
			}		
		}
		//----------------------------------------
		// place in defaults
		//---------------------------------------
		testBuffer[0] = 0x5A; 
    a154:	1c3b      	adds	r3, r7, #0
    a156:	330c      	adds	r3, #12
    a158:	225a      	movs	r2, #90	; 0x5a
    a15a:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Key_Setting,1);
    a15c:	1c3b      	adds	r3, r7, #0
    a15e:	330c      	adds	r3, #12
    a160:	1c18      	adds	r0, r3, #0
    a162:	2128      	movs	r1, #40	; 0x28
    a164:	2201      	movs	r2, #1
    a166:	4ba0      	ldr	r3, [pc, #640]	; (a3e8 <ConfigInit+0x394>)
    a168:	4798      	blx	r3
		testBuffer[0] = 0x01; 
    a16a:	1c3b      	adds	r3, r7, #0
    a16c:	330c      	adds	r3, #12
    a16e:	2201      	movs	r2, #1
    a170:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Mode_Setting,1);
    a172:	1c3b      	adds	r3, r7, #0
    a174:	330c      	adds	r3, #12
    a176:	1c18      	adds	r0, r3, #0
    a178:	2129      	movs	r1, #41	; 0x29
    a17a:	2201      	movs	r2, #1
    a17c:	4b9a      	ldr	r3, [pc, #616]	; (a3e8 <ConfigInit+0x394>)
    a17e:	4798      	blx	r3
		testBuffer[0] = 0x05; 
    a180:	1c3b      	adds	r3, r7, #0
    a182:	330c      	adds	r3, #12
    a184:	2205      	movs	r2, #5
    a186:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,MaxForce_Setting,1);		
    a188:	1c3b      	adds	r3, r7, #0
    a18a:	330c      	adds	r3, #12
    a18c:	1c18      	adds	r0, r3, #0
    a18e:	212a      	movs	r1, #42	; 0x2a
    a190:	2201      	movs	r2, #1
    a192:	4b95      	ldr	r3, [pc, #596]	; (a3e8 <ConfigInit+0x394>)
    a194:	4798      	blx	r3
		
		//------------run time counters
		testBuffer[0] = 0x00; 
    a196:	1c3b      	adds	r3, r7, #0
    a198:	330c      	adds	r3, #12
    a19a:	2200      	movs	r2, #0
    a19c:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_X_Setting,1);
    a19e:	1c3b      	adds	r3, r7, #0
    a1a0:	330c      	adds	r3, #12
    a1a2:	1c18      	adds	r0, r3, #0
    a1a4:	212b      	movs	r1, #43	; 0x2b
    a1a6:	2201      	movs	r2, #1
    a1a8:	4b8f      	ldr	r3, [pc, #572]	; (a3e8 <ConfigInit+0x394>)
    a1aa:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    a1ac:	1c3b      	adds	r3, r7, #0
    a1ae:	330c      	adds	r3, #12
    a1b0:	2200      	movs	r2, #0
    a1b2:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_H_Setting,1);
    a1b4:	1c3b      	adds	r3, r7, #0
    a1b6:	330c      	adds	r3, #12
    a1b8:	1c18      	adds	r0, r3, #0
    a1ba:	212c      	movs	r1, #44	; 0x2c
    a1bc:	2201      	movs	r2, #1
    a1be:	4b8a      	ldr	r3, [pc, #552]	; (a3e8 <ConfigInit+0x394>)
    a1c0:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    a1c2:	1c3b      	adds	r3, r7, #0
    a1c4:	330c      	adds	r3, #12
    a1c6:	2200      	movs	r2, #0
    a1c8:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_M_Setting,1);	
    a1ca:	1c3b      	adds	r3, r7, #0
    a1cc:	330c      	adds	r3, #12
    a1ce:	1c18      	adds	r0, r3, #0
    a1d0:	212d      	movs	r1, #45	; 0x2d
    a1d2:	2201      	movs	r2, #1
    a1d4:	4b84      	ldr	r3, [pc, #528]	; (a3e8 <ConfigInit+0x394>)
    a1d6:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    a1d8:	1c3b      	adds	r3, r7, #0
    a1da:	330c      	adds	r3, #12
    a1dc:	2200      	movs	r2, #0
    a1de:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_L_Setting,1);	 		 
    a1e0:	1c3b      	adds	r3, r7, #0
    a1e2:	330c      	adds	r3, #12
    a1e4:	1c18      	adds	r0, r3, #0
    a1e6:	212e      	movs	r1, #46	; 0x2e
    a1e8:	2201      	movs	r2, #1
    a1ea:	4b7f      	ldr	r3, [pc, #508]	; (a3e8 <ConfigInit+0x394>)
    a1ec:	4798      	blx	r3
		
		testBuffer[0] = 0x00;
    a1ee:	1c3b      	adds	r3, r7, #0
    a1f0:	330c      	adds	r3, #12
    a1f2:	2200      	movs	r2, #0
    a1f4:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressMSB,1);
    a1f6:	1c3b      	adds	r3, r7, #0
    a1f8:	330c      	adds	r3, #12
    a1fa:	1c18      	adds	r0, r3, #0
    a1fc:	2139      	movs	r1, #57	; 0x39
    a1fe:	2201      	movs	r2, #1
    a200:	4b79      	ldr	r3, [pc, #484]	; (a3e8 <ConfigInit+0x394>)
    a202:	4798      	blx	r3
		testBuffer[0] = 0x00;
    a204:	1c3b      	adds	r3, r7, #0
    a206:	330c      	adds	r3, #12
    a208:	2200      	movs	r2, #0
    a20a:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressLSB,1);		
    a20c:	1c3b      	adds	r3, r7, #0
    a20e:	330c      	adds	r3, #12
    a210:	1c18      	adds	r0, r3, #0
    a212:	213a      	movs	r1, #58	; 0x3a
    a214:	2201      	movs	r2, #1
    a216:	4b74      	ldr	r3, [pc, #464]	; (a3e8 <ConfigInit+0x394>)
    a218:	4798      	blx	r3
		
		testBuffer[0] = 0x07;
    a21a:	1c3b      	adds	r3, r7, #0
    a21c:	330c      	adds	r3, #12
    a21e:	2207      	movs	r2, #7
    a220:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ScreenColorSetting,1);
    a222:	1c3b      	adds	r3, r7, #0
    a224:	330c      	adds	r3, #12
    a226:	1c18      	adds	r0, r3, #0
    a228:	213b      	movs	r1, #59	; 0x3b
    a22a:	2201      	movs	r2, #1
    a22c:	4b6e      	ldr	r3, [pc, #440]	; (a3e8 <ConfigInit+0x394>)
    a22e:	4798      	blx	r3
		testBuffer[0] = FALSE;
    a230:	1c3b      	adds	r3, r7, #0
    a232:	330c      	adds	r3, #12
    a234:	2200      	movs	r2, #0
    a236:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,BackLightOnSetting,1);		
    a238:	1c3b      	adds	r3, r7, #0
    a23a:	330c      	adds	r3, #12
    a23c:	1c18      	adds	r0, r3, #0
    a23e:	213c      	movs	r1, #60	; 0x3c
    a240:	2201      	movs	r2, #1
    a242:	4b69      	ldr	r3, [pc, #420]	; (a3e8 <ConfigInit+0x394>)
    a244:	4798      	blx	r3
		testBuffer[0] = TRUE;
    a246:	1c3b      	adds	r3, r7, #0
    a248:	330c      	adds	r3, #12
    a24a:	2201      	movs	r2, #1
    a24c:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TempFarenheitOnSetting,1);		
    a24e:	1c3b      	adds	r3, r7, #0
    a250:	330c      	adds	r3, #12
    a252:	1c18      	adds	r0, r3, #0
    a254:	213d      	movs	r1, #61	; 0x3d
    a256:	2201      	movs	r2, #1
    a258:	4b63      	ldr	r3, [pc, #396]	; (a3e8 <ConfigInit+0x394>)
    a25a:	4798      	blx	r3

		testBuffer[0] = 0x07;
    a25c:	1c3b      	adds	r3, r7, #0
    a25e:	330c      	adds	r3, #12
    a260:	2207      	movs	r2, #7
    a262:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ForceMaxSetting,1);
    a264:	1c3b      	adds	r3, r7, #0
    a266:	330c      	adds	r3, #12
    a268:	1c18      	adds	r0, r3, #0
    a26a:	213e      	movs	r1, #62	; 0x3e
    a26c:	2201      	movs	r2, #1
    a26e:	4b5e      	ldr	r3, [pc, #376]	; (a3e8 <ConfigInit+0x394>)
    a270:	4798      	blx	r3
		testBuffer[0] = FALSE;
    a272:	1c3b      	adds	r3, r7, #0
    a274:	330c      	adds	r3, #12
    a276:	2200      	movs	r2, #0
    a278:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,HybridSetting,1);		
    a27a:	1c3b      	adds	r3, r7, #0
    a27c:	330c      	adds	r3, #12
    a27e:	1c18      	adds	r0, r3, #0
    a280:	2141      	movs	r1, #65	; 0x41
    a282:	2201      	movs	r2, #1
    a284:	4b58      	ldr	r3, [pc, #352]	; (a3e8 <ConfigInit+0x394>)
    a286:	4798      	blx	r3
		testBuffer[0] = FALSE;
    a288:	1c3b      	adds	r3, r7, #0
    a28a:	330c      	adds	r3, #12
    a28c:	2200      	movs	r2, #0
    a28e:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ActiveBrakeEnableSetting,1);
    a290:	1c3b      	adds	r3, r7, #0
    a292:	330c      	adds	r3, #12
    a294:	1c18      	adds	r0, r3, #0
    a296:	213f      	movs	r1, #63	; 0x3f
    a298:	2201      	movs	r2, #1
    a29a:	4b53      	ldr	r3, [pc, #332]	; (a3e8 <ConfigInit+0x394>)
    a29c:	4798      	blx	r3
		testBuffer[0] = FALSE;
    a29e:	1c3b      	adds	r3, r7, #0
    a2a0:	330c      	adds	r3, #12
    a2a2:	2200      	movs	r2, #0
    a2a4:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TPMSEnableSetting,1);		
    a2a6:	1c3b      	adds	r3, r7, #0
    a2a8:	330c      	adds	r3, #12
    a2aa:	1c18      	adds	r0, r3, #0
    a2ac:	2140      	movs	r1, #64	; 0x40
    a2ae:	2201      	movs	r2, #1
    a2b0:	4b4d      	ldr	r3, [pc, #308]	; (a3e8 <ConfigInit+0x394>)
    a2b2:	4798      	blx	r3
		testBuffer[0] = 0x00;
    a2b4:	1c3b      	adds	r3, r7, #0
    a2b6:	330c      	adds	r3, #12
    a2b8:	2200      	movs	r2, #0
    a2ba:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
    a2bc:	1c3b      	adds	r3, r7, #0
    a2be:	330c      	adds	r3, #12
    a2c0:	1c18      	adds	r0, r3, #0
    a2c2:	2143      	movs	r1, #67	; 0x43
    a2c4:	2201      	movs	r2, #1
    a2c6:	4b48      	ldr	r3, [pc, #288]	; (a3e8 <ConfigInit+0x394>)
    a2c8:	4798      	blx	r3
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    a2ca:	1c3b      	adds	r3, r7, #0
    a2cc:	3317      	adds	r3, #23
    a2ce:	2200      	movs	r2, #0
    a2d0:	701a      	strb	r2, [r3, #0]
    a2d2:	e01a      	b.n	a30a <ConfigInit+0x2b6>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
    a2d4:	1c3b      	adds	r3, r7, #0
    a2d6:	3317      	adds	r3, #23
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	3328      	adds	r3, #40	; 0x28
    a2dc:	b2db      	uxtb	r3, r3
    a2de:	1c3a      	adds	r2, r7, #0
    a2e0:	320b      	adds	r2, #11
    a2e2:	1c10      	adds	r0, r2, #0
    a2e4:	1c19      	adds	r1, r3, #0
    a2e6:	2201      	movs	r2, #1
    a2e8:	4b3e      	ldr	r3, [pc, #248]	; (a3e4 <ConfigInit+0x390>)
    a2ea:	4798      	blx	r3
		table0.Index[n] = value;   
    a2ec:	1c3b      	adds	r3, r7, #0
    a2ee:	3317      	adds	r3, #23
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	1c3a      	adds	r2, r7, #0
    a2f4:	320b      	adds	r2, #11
    a2f6:	7811      	ldrb	r1, [r2, #0]
    a2f8:	4a3c      	ldr	r2, [pc, #240]	; (a3ec <ConfigInit+0x398>)
    a2fa:	54d1      	strb	r1, [r2, r3]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    a2fc:	1c3b      	adds	r3, r7, #0
    a2fe:	3317      	adds	r3, #23
    a300:	781a      	ldrb	r2, [r3, #0]
    a302:	1c3b      	adds	r3, r7, #0
    a304:	3317      	adds	r3, #23
    a306:	3201      	adds	r2, #1
    a308:	701a      	strb	r2, [r3, #0]
    a30a:	1c3b      	adds	r3, r7, #0
    a30c:	3317      	adds	r3, #23
    a30e:	781b      	ldrb	r3, [r3, #0]
    a310:	2b1b      	cmp	r3, #27
    a312:	d9df      	bls.n	a2d4 <ConfigInit+0x280>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    a314:	1c3b      	adds	r3, r7, #0
    a316:	3317      	adds	r3, #23
    a318:	2200      	movs	r2, #0
    a31a:	701a      	strb	r2, [r3, #0]
    a31c:	e00c      	b.n	a338 <ConfigInit+0x2e4>
	{
		eepromManDevSerial[n] = 0; 
    a31e:	1c3b      	adds	r3, r7, #0
    a320:	3317      	adds	r3, #23
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	1d3a      	adds	r2, r7, #4
    a326:	2100      	movs	r1, #0
    a328:	54d1      	strb	r1, [r2, r3]
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    a32a:	1c3b      	adds	r3, r7, #0
    a32c:	3317      	adds	r3, #23
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	1c3b      	adds	r3, r7, #0
    a332:	3317      	adds	r3, #23
    a334:	3201      	adds	r2, #1
    a336:	701a      	strb	r2, [r3, #0]
    a338:	1c3b      	adds	r3, r7, #0
    a33a:	3317      	adds	r3, #23
    a33c:	781b      	ldrb	r3, [r3, #0]
    a33e:	2b05      	cmp	r3, #5
    a340:	d9ed      	bls.n	a31e <ConfigInit+0x2ca>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    a342:	1d3b      	adds	r3, r7, #4
    a344:	1c18      	adds	r0, r3, #0
    a346:	21fa      	movs	r1, #250	; 0xfa
    a348:	2206      	movs	r2, #6
    a34a:	4b26      	ldr	r3, [pc, #152]	; (a3e4 <ConfigInit+0x390>)
    a34c:	4798      	blx	r3
    a34e:	1c03      	adds	r3, r0, #0
    a350:	2b00      	cmp	r3, #0
    a352:	d020      	beq.n	a396 <ConfigInit+0x342>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    a354:	2003      	movs	r0, #3
    a356:	2101      	movs	r1, #1
    a358:	2201      	movs	r2, #1
    a35a:	4b25      	ldr	r3, [pc, #148]	; (a3f0 <ConfigInit+0x39c>)
    a35c:	4798      	blx	r3
		for (n=0;n<6;n++)
    a35e:	1c3b      	adds	r3, r7, #0
    a360:	3317      	adds	r3, #23
    a362:	2200      	movs	r2, #0
    a364:	701a      	strb	r2, [r3, #0]
    a366:	e011      	b.n	a38c <ConfigInit+0x338>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    a368:	1c3b      	adds	r3, r7, #0
    a36a:	3317      	adds	r3, #23
    a36c:	781b      	ldrb	r3, [r3, #0]
    a36e:	1c3a      	adds	r2, r7, #0
    a370:	3217      	adds	r2, #23
    a372:	7812      	ldrb	r2, [r2, #0]
    a374:	1d39      	adds	r1, r7, #4
    a376:	5c8a      	ldrb	r2, [r1, r2]
    a378:	491c      	ldr	r1, [pc, #112]	; (a3ec <ConfigInit+0x398>)
    a37a:	18cb      	adds	r3, r1, r3
    a37c:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    a37e:	1c3b      	adds	r3, r7, #0
    a380:	3317      	adds	r3, #23
    a382:	781a      	ldrb	r2, [r3, #0]
    a384:	1c3b      	adds	r3, r7, #0
    a386:	3317      	adds	r3, #23
    a388:	3201      	adds	r2, #1
    a38a:	701a      	strb	r2, [r3, #0]
    a38c:	1c3b      	adds	r3, r7, #0
    a38e:	3317      	adds	r3, #23
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	2b05      	cmp	r3, #5
    a394:	d9e8      	bls.n	a368 <ConfigInit+0x314>
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    a396:	1c3b      	adds	r3, r7, #0
    a398:	3316      	adds	r3, #22
    a39a:	2200      	movs	r2, #0
    a39c:	701a      	strb	r2, [r3, #0]
    a39e:	e018      	b.n	a3d2 <ConfigInit+0x37e>
	{
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
    a3a0:	1c3b      	adds	r3, r7, #0
    a3a2:	3316      	adds	r3, #22
    a3a4:	781b      	ldrb	r3, [r3, #0]
    a3a6:	009a      	lsls	r2, r3, #2
    a3a8:	4b12      	ldr	r3, [pc, #72]	; (a3f4 <ConfigInit+0x3a0>)
    a3aa:	18d2      	adds	r2, r2, r3
    a3ac:	1c3b      	adds	r3, r7, #0
    a3ae:	3316      	adds	r3, #22
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	3314      	adds	r3, #20
    a3b4:	b2db      	uxtb	r3, r3
    a3b6:	009b      	lsls	r3, r3, #2
    a3b8:	b2db      	uxtb	r3, r3
    a3ba:	1c10      	adds	r0, r2, #0
    a3bc:	1c19      	adds	r1, r3, #0
    a3be:	2204      	movs	r2, #4
    a3c0:	4b08      	ldr	r3, [pc, #32]	; (a3e4 <ConfigInit+0x390>)
    a3c2:	4798      	blx	r3
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    a3c4:	1c3b      	adds	r3, r7, #0
    a3c6:	3316      	adds	r3, #22
    a3c8:	781a      	ldrb	r2, [r3, #0]
    a3ca:	1c3b      	adds	r3, r7, #0
    a3cc:	3316      	adds	r3, #22
    a3ce:	3201      	adds	r2, #1
    a3d0:	701a      	strb	r2, [r3, #0]
    a3d2:	1c3b      	adds	r3, r7, #0
    a3d4:	3316      	adds	r3, #22
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	2b0b      	cmp	r3, #11
    a3da:	d9e1      	bls.n	a3a0 <ConfigInit+0x34c>
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
		{ 
	  
		}
	}
}
    a3dc:	46bd      	mov	sp, r7
    a3de:	b006      	add	sp, #24
    a3e0:	bd80      	pop	{r7, pc}
    a3e2:	46c0      	nop			; (mov r8, r8)
    a3e4:	0000b5d1 	.word	0x0000b5d1
    a3e8:	0000b751 	.word	0x0000b751
    a3ec:	20002f98 	.word	0x20002f98
    a3f0:	0000e595 	.word	0x0000e595
    a3f4:	20002fb8 	.word	0x20002fb8

0000a3f8 <ConfigUpdate>:

void ConfigUpdate(uint8_t value,uint8_t settingAddress)
{
    a3f8:	b580      	push	{r7, lr}
    a3fa:	b082      	sub	sp, #8
    a3fc:	af00      	add	r7, sp, #0
    a3fe:	1c0a      	adds	r2, r1, #0
    a400:	1dfb      	adds	r3, r7, #7
    a402:	1c01      	adds	r1, r0, #0
    a404:	7019      	strb	r1, [r3, #0]
    a406:	1dbb      	adds	r3, r7, #6
    a408:	701a      	strb	r2, [r3, #0]
	I2CEEPROMBufferWrite(&value,settingAddress,1);	 
    a40a:	1dfa      	adds	r2, r7, #7
    a40c:	1dbb      	adds	r3, r7, #6
    a40e:	781b      	ldrb	r3, [r3, #0]
    a410:	1c10      	adds	r0, r2, #0
    a412:	1c19      	adds	r1, r3, #0
    a414:	2201      	movs	r2, #1
    a416:	4b02      	ldr	r3, [pc, #8]	; (a420 <ConfigUpdate+0x28>)
    a418:	4798      	blx	r3
}
    a41a:	46bd      	mov	sp, r7
    a41c:	b002      	add	sp, #8
    a41e:	bd80      	pop	{r7, pc}
    a420:	0000b751 	.word	0x0000b751

0000a424 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a424:	b580      	push	{r7, lr}
    a426:	b082      	sub	sp, #8
    a428:	af00      	add	r7, sp, #0
    a42a:	1c02      	adds	r2, r0, #0
    a42c:	1dfb      	adds	r3, r7, #7
    a42e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a430:	4b06      	ldr	r3, [pc, #24]	; (a44c <system_interrupt_enable+0x28>)
    a432:	1dfa      	adds	r2, r7, #7
    a434:	7812      	ldrb	r2, [r2, #0]
    a436:	1c11      	adds	r1, r2, #0
    a438:	221f      	movs	r2, #31
    a43a:	400a      	ands	r2, r1
    a43c:	2101      	movs	r1, #1
    a43e:	1c08      	adds	r0, r1, #0
    a440:	4090      	lsls	r0, r2
    a442:	1c02      	adds	r2, r0, #0
    a444:	601a      	str	r2, [r3, #0]
}
    a446:	46bd      	mov	sp, r7
    a448:	b002      	add	sp, #8
    a44a:	bd80      	pop	{r7, pc}
    a44c:	e000e100 	.word	0xe000e100

0000a450 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    a450:	b580      	push	{r7, lr}
    a452:	b084      	sub	sp, #16
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	681b      	ldr	r3, [r3, #0]
    a45c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    a45e:	68fb      	ldr	r3, [r7, #12]
    a460:	7e5b      	ldrb	r3, [r3, #25]
    a462:	b2db      	uxtb	r3, r3
    a464:	b2db      	uxtb	r3, r3
    a466:	b25b      	sxtb	r3, r3
    a468:	2b00      	cmp	r3, #0
    a46a:	da01      	bge.n	a470 <adc_is_syncing+0x20>
		return true;
    a46c:	2301      	movs	r3, #1
    a46e:	e000      	b.n	a472 <adc_is_syncing+0x22>
	}

	return false;
    a470:	2300      	movs	r3, #0
}
    a472:	1c18      	adds	r0, r3, #0
    a474:	46bd      	mov	sp, r7
    a476:	b004      	add	sp, #16
    a478:	bd80      	pop	{r7, pc}
    a47a:	46c0      	nop			; (mov r8, r8)

0000a47c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    a47c:	b580      	push	{r7, lr}
    a47e:	b084      	sub	sp, #16
    a480:	af00      	add	r7, sp, #0
    a482:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	681b      	ldr	r3, [r3, #0]
    a488:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    a48a:	46c0      	nop			; (mov r8, r8)
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	1c18      	adds	r0, r3, #0
    a490:	4b0e      	ldr	r3, [pc, #56]	; (a4cc <adc_enable+0x50>)
    a492:	4798      	blx	r3
    a494:	1c03      	adds	r3, r0, #0
    a496:	2b00      	cmp	r3, #0
    a498:	d1f8      	bne.n	a48c <adc_enable+0x10>
		/* Wait for synchronization */
	}

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    a49a:	2015      	movs	r0, #21
    a49c:	4b0c      	ldr	r3, [pc, #48]	; (a4d0 <adc_enable+0x54>)
    a49e:	4798      	blx	r3
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    a4a0:	68fb      	ldr	r3, [r7, #12]
    a4a2:	781b      	ldrb	r3, [r3, #0]
    a4a4:	b2db      	uxtb	r3, r3
    a4a6:	2202      	movs	r2, #2
    a4a8:	4313      	orrs	r3, r2
    a4aa:	b2da      	uxtb	r2, r3
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    a4b0:	46c0      	nop			; (mov r8, r8)
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	1c18      	adds	r0, r3, #0
    a4b6:	4b05      	ldr	r3, [pc, #20]	; (a4cc <adc_enable+0x50>)
    a4b8:	4798      	blx	r3
    a4ba:	1c03      	adds	r3, r0, #0
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d1f8      	bne.n	a4b2 <adc_enable+0x36>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    a4c0:	2300      	movs	r3, #0
}
    a4c2:	1c18      	adds	r0, r3, #0
    a4c4:	46bd      	mov	sp, r7
    a4c6:	b004      	add	sp, #16
    a4c8:	bd80      	pop	{r7, pc}
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	0000a451 	.word	0x0000a451
    a4d0:	0000a425 	.word	0x0000a425

0000a4d4 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    a4d4:	b580      	push	{r7, lr}
    a4d6:	b084      	sub	sp, #16
    a4d8:	af00      	add	r7, sp, #0
    a4da:	6078      	str	r0, [r7, #4]
    a4dc:	1c0a      	adds	r2, r1, #0
    a4de:	1cfb      	adds	r3, r7, #3
    a4e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    a4e8:	46c0      	nop			; (mov r8, r8)
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	1c18      	adds	r0, r3, #0
    a4ee:	4b0d      	ldr	r3, [pc, #52]	; (a524 <adc_set_positive_input+0x50>)
    a4f0:	4798      	blx	r3
    a4f2:	1c03      	adds	r3, r0, #0
    a4f4:	2b00      	cmp	r3, #0
    a4f6:	d1f8      	bne.n	a4ea <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    a4f8:	68fb      	ldr	r3, [r7, #12]
    a4fa:	691b      	ldr	r3, [r3, #16]
    a4fc:	221f      	movs	r2, #31
    a4fe:	1c19      	adds	r1, r3, #0
    a500:	4391      	bics	r1, r2
    a502:	1c0a      	adds	r2, r1, #0
    a504:	1cfb      	adds	r3, r7, #3
    a506:	781b      	ldrb	r3, [r3, #0]
    a508:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    a50a:	68fb      	ldr	r3, [r7, #12]
    a50c:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    a50e:	46c0      	nop			; (mov r8, r8)
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	1c18      	adds	r0, r3, #0
    a514:	4b03      	ldr	r3, [pc, #12]	; (a524 <adc_set_positive_input+0x50>)
    a516:	4798      	blx	r3
    a518:	1c03      	adds	r3, r0, #0
    a51a:	2b00      	cmp	r3, #0
    a51c:	d1f8      	bne.n	a510 <adc_set_positive_input+0x3c>
		/* Wait for synchronization */
	}
}
    a51e:	46bd      	mov	sp, r7
    a520:	b004      	add	sp, #16
    a522:	bd80      	pop	{r7, pc}
    a524:	0000a451 	.word	0x0000a451

0000a528 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    a528:	b580      	push	{r7, lr}
    a52a:	b084      	sub	sp, #16
    a52c:	af00      	add	r7, sp, #0
    a52e:	6078      	str	r0, [r7, #4]
    a530:	1c0a      	adds	r2, r1, #0
    a532:	1cfb      	adds	r3, r7, #3
    a534:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	681b      	ldr	r3, [r3, #0]
    a53a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    a53c:	68fb      	ldr	r3, [r7, #12]
    a53e:	1cfa      	adds	r2, r7, #3
    a540:	7812      	ldrb	r2, [r2, #0]
    a542:	75da      	strb	r2, [r3, #23]
}
    a544:	46bd      	mov	sp, r7
    a546:	b004      	add	sp, #16
    a548:	bd80      	pop	{r7, pc}
    a54a:	46c0      	nop			; (mov r8, r8)

0000a54c <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    a54c:	b580      	push	{r7, lr}
    a54e:	b082      	sub	sp, #8
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
    a554:	1c0a      	adds	r2, r1, #0
    a556:	1cfb      	adds	r3, r7, #3
    a558:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	7edb      	ldrb	r3, [r3, #27]
    a55e:	b2da      	uxtb	r2, r3
    a560:	1cfb      	adds	r3, r7, #3
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	2101      	movs	r1, #1
    a566:	1c08      	adds	r0, r1, #0
    a568:	4098      	lsls	r0, r3
    a56a:	1c03      	adds	r3, r0, #0
    a56c:	b2db      	uxtb	r3, r3
    a56e:	4313      	orrs	r3, r2
    a570:	b2db      	uxtb	r3, r3
    a572:	b2da      	uxtb	r2, r3
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    a578:	1cfb      	adds	r3, r7, #3
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	2b01      	cmp	r3, #1
    a57e:	d104      	bne.n	a58a <adc_enable_callback+0x3e>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	1c18      	adds	r0, r3, #0
    a584:	2104      	movs	r1, #4
    a586:	4b07      	ldr	r3, [pc, #28]	; (a5a4 <adc_enable_callback+0x58>)
    a588:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    a58a:	1cfb      	adds	r3, r7, #3
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	2b02      	cmp	r3, #2
    a590:	d104      	bne.n	a59c <adc_enable_callback+0x50>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    a592:	687b      	ldr	r3, [r7, #4]
    a594:	1c18      	adds	r0, r3, #0
    a596:	2102      	movs	r1, #2
    a598:	4b02      	ldr	r3, [pc, #8]	; (a5a4 <adc_enable_callback+0x58>)
    a59a:	4798      	blx	r3
	}
}
    a59c:	46bd      	mov	sp, r7
    a59e:	b002      	add	sp, #8
    a5a0:	bd80      	pop	{r7, pc}
    a5a2:	46c0      	nop			; (mov r8, r8)
    a5a4:	0000a529 	.word	0x0000a529

0000a5a8 <ADCGetReading>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
 uint16_t ADCGetReading(uint8_t which)
 {
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b084      	sub	sp, #16
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	1c02      	adds	r2, r0, #0
    a5b0:	1dfb      	adds	r3, r7, #7
    a5b2:	701a      	strb	r2, [r3, #0]
	 uint16_t valueRead; 
	 valueRead = 0; 
    a5b4:	1c3b      	adds	r3, r7, #0
    a5b6:	330e      	adds	r3, #14
    a5b8:	2200      	movs	r2, #0
    a5ba:	801a      	strh	r2, [r3, #0]
	 switch(which)
    a5bc:	1dfb      	adds	r3, r7, #7
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d002      	beq.n	a5ca <ADCGetReading+0x22>
    a5c4:	2b01      	cmp	r3, #1
    a5c6:	d006      	beq.n	a5d6 <ADCGetReading+0x2e>
    a5c8:	e00b      	b.n	a5e2 <ADCGetReading+0x3a>
	 {
		 case ADC_INPUT_VOLTAGE:
		 {
			 valueRead = adcAverageReadings[0]; 
    a5ca:	1c3b      	adds	r3, r7, #0
    a5cc:	330e      	adds	r3, #14
    a5ce:	4a08      	ldr	r2, [pc, #32]	; (a5f0 <ADCGetReading+0x48>)
    a5d0:	8812      	ldrh	r2, [r2, #0]
    a5d2:	801a      	strh	r2, [r3, #0]
			 break;
    a5d4:	e005      	b.n	a5e2 <ADCGetReading+0x3a>
		 }
		 case ADC_INPUT_CURRENT:
		 {
			 valueRead = adcAverageReadings[1]; 
    a5d6:	1c3b      	adds	r3, r7, #0
    a5d8:	330e      	adds	r3, #14
    a5da:	4a05      	ldr	r2, [pc, #20]	; (a5f0 <ADCGetReading+0x48>)
    a5dc:	8852      	ldrh	r2, [r2, #2]
    a5de:	801a      	strh	r2, [r3, #0]
			 break;
    a5e0:	46c0      	nop			; (mov r8, r8)
		 }
	 }
	 return valueRead; 
    a5e2:	1c3b      	adds	r3, r7, #0
    a5e4:	330e      	adds	r3, #14
    a5e6:	881b      	ldrh	r3, [r3, #0]
 }
    a5e8:	1c18      	adds	r0, r3, #0
    a5ea:	46bd      	mov	sp, r7
    a5ec:	b004      	add	sp, #16
    a5ee:	bd80      	pop	{r7, pc}
    a5f0:	20003010 	.word	0x20003010

0000a5f4 <adc_complete_callback>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void adc_complete_callback(const struct adc_module *const module)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b082      	sub	sp, #8
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint16_t averageRead;	
	adc_read_done = true;
    a5fc:	4b1c      	ldr	r3, [pc, #112]	; (a670 <adc_complete_callback+0x7c>)
    a5fe:	2201      	movs	r2, #1
    a600:	701a      	strb	r2, [r3, #0]

#if BRAKEBOARD	
	if (motorOn == TRUE)
    a602:	4b1c      	ldr	r3, [pc, #112]	; (a674 <adc_complete_callback+0x80>)
    a604:	781b      	ldrb	r3, [r3, #0]
    a606:	2b01      	cmp	r3, #1
    a608:	d129      	bne.n	a65e <adc_complete_callback+0x6a>
			averageRead += adc_result_buffer[i+1];
		}
		averageRead = averageRead/(ADC_SAMPLES-1-1);
		adcAverageReadings[adcOffset] = averageRead;	
*/		
		adcAverageReadings[adcOffset] = adc_result_buffer[1];
    a60a:	4b1b      	ldr	r3, [pc, #108]	; (a678 <adc_complete_callback+0x84>)
    a60c:	781b      	ldrb	r3, [r3, #0]
    a60e:	1c1a      	adds	r2, r3, #0
    a610:	4b1a      	ldr	r3, [pc, #104]	; (a67c <adc_complete_callback+0x88>)
    a612:	8859      	ldrh	r1, [r3, #2]
    a614:	4b1a      	ldr	r3, [pc, #104]	; (a680 <adc_complete_callback+0x8c>)
    a616:	0052      	lsls	r2, r2, #1
    a618:	52d1      	strh	r1, [r2, r3]
		adcOffset=1;
    a61a:	4b17      	ldr	r3, [pc, #92]	; (a678 <adc_complete_callback+0x84>)
    a61c:	2201      	movs	r2, #1
    a61e:	701a      	strb	r2, [r3, #0]
		adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);	
    a620:	4b18      	ldr	r3, [pc, #96]	; (a684 <adc_complete_callback+0x90>)
    a622:	1c18      	adds	r0, r3, #0
    a624:	2101      	movs	r1, #1
    a626:	4b18      	ldr	r3, [pc, #96]	; (a688 <adc_complete_callback+0x94>)
    a628:	4798      	blx	r3
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    a62a:	4a16      	ldr	r2, [pc, #88]	; (a684 <adc_complete_callback+0x90>)
    a62c:	4b13      	ldr	r3, [pc, #76]	; (a67c <adc_complete_callback+0x88>)
    a62e:	1c10      	adds	r0, r2, #0
    a630:	1c19      	adds	r1, r3, #0
    a632:	2204      	movs	r2, #4
    a634:	4b15      	ldr	r3, [pc, #84]	; (a68c <adc_complete_callback+0x98>)
    a636:	4798      	blx	r3
		if (motorRunTime > 0)
    a638:	4b15      	ldr	r3, [pc, #84]	; (a690 <adc_complete_callback+0x9c>)
    a63a:	881b      	ldrh	r3, [r3, #0]
    a63c:	2b00      	cmp	r3, #0
    a63e:	d003      	beq.n	a648 <adc_complete_callback+0x54>
		{
			maxCurrentRead = 0;
    a640:	4b14      	ldr	r3, [pc, #80]	; (a694 <adc_complete_callback+0xa0>)
    a642:	2200      	movs	r2, #0
    a644:	801a      	strh	r2, [r3, #0]
    a646:	e010      	b.n	a66a <adc_complete_callback+0x76>
		}	
		else
		{
			if (maxCurrentRead < adcAverageReadings[1])
    a648:	4b0d      	ldr	r3, [pc, #52]	; (a680 <adc_complete_callback+0x8c>)
    a64a:	885a      	ldrh	r2, [r3, #2]
    a64c:	4b11      	ldr	r3, [pc, #68]	; (a694 <adc_complete_callback+0xa0>)
    a64e:	881b      	ldrh	r3, [r3, #0]
    a650:	429a      	cmp	r2, r3
    a652:	d90a      	bls.n	a66a <adc_complete_callback+0x76>
			{
				maxCurrentRead = adcAverageReadings[1]; 
    a654:	4b0a      	ldr	r3, [pc, #40]	; (a680 <adc_complete_callback+0x8c>)
    a656:	885a      	ldrh	r2, [r3, #2]
    a658:	4b0e      	ldr	r3, [pc, #56]	; (a694 <adc_complete_callback+0xa0>)
    a65a:	801a      	strh	r2, [r3, #0]
    a65c:	e005      	b.n	a66a <adc_complete_callback+0x76>
			}
		}
	}
	else
	{
		schedByte |= SCHEDBYTE_ADC;
    a65e:	4b0e      	ldr	r3, [pc, #56]	; (a698 <adc_complete_callback+0xa4>)
    a660:	681b      	ldr	r3, [r3, #0]
    a662:	2220      	movs	r2, #32
    a664:	431a      	orrs	r2, r3
    a666:	4b0c      	ldr	r3, [pc, #48]	; (a698 <adc_complete_callback+0xa4>)
    a668:	601a      	str	r2, [r3, #0]
	}
#else
	schedByte |= SCHEDBYTE_ADC;	
#endif
}
    a66a:	46bd      	mov	sp, r7
    a66c:	b002      	add	sp, #8
    a66e:	bd80      	pop	{r7, pc}
    a670:	200004ba 	.word	0x200004ba
    a674:	200004ac 	.word	0x200004ac
    a678:	2000300c 	.word	0x2000300c
    a67c:	20003004 	.word	0x20003004
    a680:	20003010 	.word	0x20003010
    a684:	20003014 	.word	0x20003014
    a688:	0000a4d5 	.word	0x0000a4d5
    a68c:	00003cb1 	.word	0x00003cb1
    a690:	20002e9e 	.word	0x20002e9e
    a694:	200004b8 	.word	0x200004b8
    a698:	20003668 	.word	0x20003668

0000a69c <configure_adc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================  
void configure_adc(uint8_t which)
{
    a69c:	b580      	push	{r7, lr}
    a69e:	b08e      	sub	sp, #56	; 0x38
    a6a0:	af00      	add	r7, sp, #0
    a6a2:	1c02      	adds	r2, r0, #0
    a6a4:	1dfb      	adds	r3, r7, #7
    a6a6:	701a      	strb	r2, [r3, #0]
	struct adc_config config_adc;
	
 	adc_get_config_defaults(&config_adc);
    a6a8:	1c3b      	adds	r3, r7, #0
    a6aa:	3308      	adds	r3, #8
    a6ac:	1c18      	adds	r0, r3, #0
    a6ae:	4b2f      	ldr	r3, [pc, #188]	; (a76c <configure_adc+0xd0>)
    a6b0:	4798      	blx	r3
 
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;  //ADC_GAIN_FACTOR_DIV2;
    a6b2:	1c3b      	adds	r3, r7, #0
    a6b4:	3308      	adds	r3, #8
    a6b6:	2200      	movs	r2, #0
    a6b8:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;  //8;
    a6ba:	1c3b      	adds	r3, r7, #0
    a6bc:	3308      	adds	r3, #8
    a6be:	2280      	movs	r2, #128	; 0x80
    a6c0:	0052      	lsls	r2, r2, #1
    a6c2:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INT1V; //ADC_REFERENCE_INTVCC0;  //ADC_REFERENCE_INTVCC1;
    a6c4:	1c3b      	adds	r3, r7, #0
    a6c6:	3308      	adds	r3, #8
    a6c8:	2200      	movs	r2, #0
    a6ca:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;
    a6cc:	1c3b      	adds	r3, r7, #0
    a6ce:	3308      	adds	r3, #8
    a6d0:	2201      	movs	r2, #1
    a6d2:	731a      	strb	r2, [r3, #12]
#endif	
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
    a6d4:	1c3b      	adds	r3, r7, #0
    a6d6:	3308      	adds	r3, #8
    a6d8:	2200      	movs	r2, #0
    a6da:	711a      	strb	r2, [r3, #4]
//    config_adc.correction.correction_enable = true;
//    config_adc.correction.offset_correction = 512;
//	config_adc.correction.gain_correction = 0x0800;
	config_adc.negative_input     =ADC_NEGATIVE_INPUT_GND;
    a6dc:	1c3b      	adds	r3, r7, #0
    a6de:	3308      	adds	r3, #8
    a6e0:	22c0      	movs	r2, #192	; 0xc0
    a6e2:	0152      	lsls	r2, r2, #5
    a6e4:	81da      	strh	r2, [r3, #14]
	config_adc.sample_length                 = 1;
    a6e6:	1c3b      	adds	r3, r7, #0
    a6e8:	3308      	adds	r3, #8
    a6ea:	2201      	movs	r2, #1
    a6ec:	75da      	strb	r2, [r3, #23]
	config_adc.resolution         = ADC_RESOLUTION_CUSTOM;
    a6ee:	1c3b      	adds	r3, r7, #0
    a6f0:	3308      	adds	r3, #8
    a6f2:	2234      	movs	r2, #52	; 0x34
    a6f4:	711a      	strb	r2, [r3, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_16;
    a6f6:	1c3b      	adds	r3, r7, #0
    a6f8:	3308      	adds	r3, #8
    a6fa:	2204      	movs	r2, #4
    a6fc:	745a      	strb	r2, [r3, #17]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
    a6fe:	1c3b      	adds	r3, r7, #0
    a700:	3308      	adds	r3, #8
    a702:	2204      	movs	r2, #4
    a704:	741a      	strb	r2, [r3, #16]

#if BRAKEBOARD	
	switch (which)
    a706:	1dfb      	adds	r3, r7, #7
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	2b04      	cmp	r3, #4
    a70c:	d81d      	bhi.n	a74a <configure_adc+0xae>
    a70e:	009a      	lsls	r2, r3, #2
    a710:	4b17      	ldr	r3, [pc, #92]	; (a770 <configure_adc+0xd4>)
    a712:	18d3      	adds	r3, r2, r3
    a714:	681b      	ldr	r3, [r3, #0]
    a716:	469f      	mov	pc, r3
	{
		case 0:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
    a718:	1c3b      	adds	r3, r7, #0
    a71a:	3308      	adds	r3, #8
    a71c:	2200      	movs	r2, #0
    a71e:	731a      	strb	r2, [r3, #12]
			break;
    a720:	e013      	b.n	a74a <configure_adc+0xae>
		}	
		case 1:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
    a722:	1c3b      	adds	r3, r7, #0
    a724:	3308      	adds	r3, #8
    a726:	2201      	movs	r2, #1
    a728:	731a      	strb	r2, [r3, #12]
			break;
    a72a:	e00e      	b.n	a74a <configure_adc+0xae>
		}
		case 2:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN12;			
    a72c:	1c3b      	adds	r3, r7, #0
    a72e:	3308      	adds	r3, #8
    a730:	220c      	movs	r2, #12
    a732:	731a      	strb	r2, [r3, #12]
			break;
    a734:	e009      	b.n	a74a <configure_adc+0xae>
		}	
		case 3:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;			
    a736:	1c3b      	adds	r3, r7, #0
    a738:	3308      	adds	r3, #8
    a73a:	220e      	movs	r2, #14
    a73c:	731a      	strb	r2, [r3, #12]
			break;
    a73e:	e004      	b.n	a74a <configure_adc+0xae>
		}
		case 4:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
    a740:	1c3b      	adds	r3, r7, #0
    a742:	3308      	adds	r3, #8
    a744:	220f      	movs	r2, #15
    a746:	731a      	strb	r2, [r3, #12]
			break;
    a748:	46c0      	nop			; (mov r8, r8)
		}				
	}
#endif 

	adc_init(&adc_instance, ADC, &config_adc);
    a74a:	490a      	ldr	r1, [pc, #40]	; (a774 <configure_adc+0xd8>)
    a74c:	4a0a      	ldr	r2, [pc, #40]	; (a778 <configure_adc+0xdc>)
    a74e:	1c3b      	adds	r3, r7, #0
    a750:	3308      	adds	r3, #8
    a752:	1c08      	adds	r0, r1, #0
    a754:	1c11      	adds	r1, r2, #0
    a756:	1c1a      	adds	r2, r3, #0
    a758:	4b08      	ldr	r3, [pc, #32]	; (a77c <configure_adc+0xe0>)
    a75a:	4798      	blx	r3
	adc_enable(&adc_instance);
    a75c:	4b05      	ldr	r3, [pc, #20]	; (a774 <configure_adc+0xd8>)
    a75e:	1c18      	adds	r0, r3, #0
    a760:	4b07      	ldr	r3, [pc, #28]	; (a780 <configure_adc+0xe4>)
    a762:	4798      	blx	r3
 
}
    a764:	46bd      	mov	sp, r7
    a766:	b00e      	add	sp, #56	; 0x38
    a768:	bd80      	pop	{r7, pc}
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	00003309 	.word	0x00003309
    a770:	00017288 	.word	0x00017288
    a774:	20003014 	.word	0x20003014
    a778:	42004000 	.word	0x42004000
    a77c:	0000398d 	.word	0x0000398d
    a780:	0000a47d 	.word	0x0000a47d

0000a784 <configure_adc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_adc_callbacks(void)
{
    a784:	b580      	push	{r7, lr}
    a786:	af00      	add	r7, sp, #0
 
	adc_register_callback(&adc_instance,
    a788:	4a06      	ldr	r2, [pc, #24]	; (a7a4 <configure_adc_callbacks+0x20>)
    a78a:	4b07      	ldr	r3, [pc, #28]	; (a7a8 <configure_adc_callbacks+0x24>)
    a78c:	1c10      	adds	r0, r2, #0
    a78e:	1c19      	adds	r1, r3, #0
    a790:	2200      	movs	r2, #0
    a792:	4b06      	ldr	r3, [pc, #24]	; (a7ac <configure_adc_callbacks+0x28>)
    a794:	4798      	blx	r3
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
 
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
    a796:	4b03      	ldr	r3, [pc, #12]	; (a7a4 <configure_adc_callbacks+0x20>)
    a798:	1c18      	adds	r0, r3, #0
    a79a:	2100      	movs	r1, #0
    a79c:	4b04      	ldr	r3, [pc, #16]	; (a7b0 <configure_adc_callbacks+0x2c>)
    a79e:	4798      	blx	r3
 
}
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd80      	pop	{r7, pc}
    a7a4:	20003014 	.word	0x20003014
    a7a8:	0000a5f5 	.word	0x0000a5f5
    a7ac:	00003c71 	.word	0x00003c71
    a7b0:	0000a54d 	.word	0x0000a54d

0000a7b4 <ADCTask>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
void ADCTask(void)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
	uint16_t averageRead; 
	//----------------------
	// load in the readings for the current channel 
	// start the next reading of the next channel
	//-----------------------
	if (adc_read_done != FALSE)
    a7ba:	4b64      	ldr	r3, [pc, #400]	; (a94c <ADCTask+0x198>)
    a7bc:	781b      	ldrb	r3, [r3, #0]
    a7be:	b2db      	uxtb	r3, r3
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d100      	bne.n	a7c6 <ADCTask+0x12>
    a7c4:	e086      	b.n	a8d4 <ADCTask+0x120>
	{
		adc_read_done = 0; 
    a7c6:	4b61      	ldr	r3, [pc, #388]	; (a94c <ADCTask+0x198>)
    a7c8:	2200      	movs	r2, #0
    a7ca:	701a      	strb	r2, [r3, #0]
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    a7cc:	1dfb      	adds	r3, r7, #7
    a7ce:	2200      	movs	r2, #0
    a7d0:	701a      	strb	r2, [r3, #0]
    a7d2:	e018      	b.n	a806 <ADCTask+0x52>
		{
			if (adcOffset < MAX_ADC_CHANNELS)
    a7d4:	4b5e      	ldr	r3, [pc, #376]	; (a950 <ADCTask+0x19c>)
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	2b01      	cmp	r3, #1
    a7da:	d80f      	bhi.n	a7fc <ADCTask+0x48>
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
    a7dc:	4b5c      	ldr	r3, [pc, #368]	; (a950 <ADCTask+0x19c>)
    a7de:	781b      	ldrb	r3, [r3, #0]
    a7e0:	1c18      	adds	r0, r3, #0
    a7e2:	1dfb      	adds	r3, r7, #7
    a7e4:	781a      	ldrb	r2, [r3, #0]
    a7e6:	1dfb      	adds	r3, r7, #7
    a7e8:	781b      	ldrb	r3, [r3, #0]
    a7ea:	1c59      	adds	r1, r3, #1
    a7ec:	4b59      	ldr	r3, [pc, #356]	; (a954 <ADCTask+0x1a0>)
    a7ee:	0049      	lsls	r1, r1, #1
    a7f0:	5ac9      	ldrh	r1, [r1, r3]
    a7f2:	4b59      	ldr	r3, [pc, #356]	; (a958 <ADCTask+0x1a4>)
    a7f4:	0080      	lsls	r0, r0, #2
    a7f6:	1882      	adds	r2, r0, r2
    a7f8:	0052      	lsls	r2, r2, #1
    a7fa:	52d1      	strh	r1, [r2, r3]
	if (adc_read_done != FALSE)
	{
		adc_read_done = 0; 
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    a7fc:	1dfb      	adds	r3, r7, #7
    a7fe:	781a      	ldrb	r2, [r3, #0]
    a800:	1dfb      	adds	r3, r7, #7
    a802:	3201      	adds	r2, #1
    a804:	701a      	strb	r2, [r3, #0]
    a806:	1dfb      	adds	r3, r7, #7
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	2b02      	cmp	r3, #2
    a80c:	d9e2      	bls.n	a7d4 <ADCTask+0x20>
			if (adcOffset < MAX_ADC_CHANNELS)
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
    a80e:	1d3b      	adds	r3, r7, #4
    a810:	2200      	movs	r2, #0
    a812:	801a      	strh	r2, [r3, #0]
		for (i=1;i<(ADC_SAMPLES-1);i++)
    a814:	1dfb      	adds	r3, r7, #7
    a816:	2201      	movs	r2, #1
    a818:	701a      	strb	r2, [r3, #0]
    a81a:	e00f      	b.n	a83c <ADCTask+0x88>
		{
			averageRead += adc_result_buffer[i+1];
    a81c:	1dfb      	adds	r3, r7, #7
    a81e:	781b      	ldrb	r3, [r3, #0]
    a820:	1c5a      	adds	r2, r3, #1
    a822:	4b4c      	ldr	r3, [pc, #304]	; (a954 <ADCTask+0x1a0>)
    a824:	0052      	lsls	r2, r2, #1
    a826:	5ad1      	ldrh	r1, [r2, r3]
    a828:	1d3b      	adds	r3, r7, #4
    a82a:	1d3a      	adds	r2, r7, #4
    a82c:	8812      	ldrh	r2, [r2, #0]
    a82e:	188a      	adds	r2, r1, r2
    a830:	801a      	strh	r2, [r3, #0]
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
		for (i=1;i<(ADC_SAMPLES-1);i++)
    a832:	1dfb      	adds	r3, r7, #7
    a834:	781a      	ldrb	r2, [r3, #0]
    a836:	1dfb      	adds	r3, r7, #7
    a838:	3201      	adds	r2, #1
    a83a:	701a      	strb	r2, [r3, #0]
    a83c:	1dfb      	adds	r3, r7, #7
    a83e:	781b      	ldrb	r3, [r3, #0]
    a840:	2b02      	cmp	r3, #2
    a842:	d9eb      	bls.n	a81c <ADCTask+0x68>
		{
			averageRead += adc_result_buffer[i+1];
		}
		averageRead = averageRead/(ADC_SAMPLES-1-1);
    a844:	1d3b      	adds	r3, r7, #4
    a846:	1d3a      	adds	r2, r7, #4
    a848:	8812      	ldrh	r2, [r2, #0]
    a84a:	0852      	lsrs	r2, r2, #1
    a84c:	801a      	strh	r2, [r3, #0]
		adcAverageReadings[adcOffset] = averageRead;		
    a84e:	4b40      	ldr	r3, [pc, #256]	; (a950 <ADCTask+0x19c>)
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	1c1a      	adds	r2, r3, #0
    a854:	4b41      	ldr	r3, [pc, #260]	; (a95c <ADCTask+0x1a8>)
    a856:	0052      	lsls	r2, r2, #1
    a858:	1d39      	adds	r1, r7, #4
    a85a:	8809      	ldrh	r1, [r1, #0]
    a85c:	52d1      	strh	r1, [r2, r3]
		//----------------------
		// testing grab maximum current sense 
		//----------------------
		if (adcOffset == 1)
    a85e:	4b3c      	ldr	r3, [pc, #240]	; (a950 <ADCTask+0x19c>)
    a860:	781b      	ldrb	r3, [r3, #0]
    a862:	2b01      	cmp	r3, #1
    a864:	d109      	bne.n	a87a <ADCTask+0xc6>
		{
			
			//----------------------
			// Get an average. 
			if (averageRead>maxCurrentRead)
    a866:	4b3e      	ldr	r3, [pc, #248]	; (a960 <ADCTask+0x1ac>)
    a868:	881b      	ldrh	r3, [r3, #0]
    a86a:	1d3a      	adds	r2, r7, #4
    a86c:	8812      	ldrh	r2, [r2, #0]
    a86e:	429a      	cmp	r2, r3
    a870:	d903      	bls.n	a87a <ADCTask+0xc6>
			{
				maxCurrentRead = averageRead;
    a872:	4b3b      	ldr	r3, [pc, #236]	; (a960 <ADCTask+0x1ac>)
    a874:	1d3a      	adds	r2, r7, #4
    a876:	8812      	ldrh	r2, [r2, #0]
    a878:	801a      	strh	r2, [r3, #0]
			}
		}		
		adcOffset++;
    a87a:	4b35      	ldr	r3, [pc, #212]	; (a950 <ADCTask+0x19c>)
    a87c:	781b      	ldrb	r3, [r3, #0]
    a87e:	3301      	adds	r3, #1
    a880:	b2da      	uxtb	r2, r3
    a882:	4b33      	ldr	r3, [pc, #204]	; (a950 <ADCTask+0x19c>)
    a884:	701a      	strb	r2, [r3, #0]
		if (adcOffset >= MAX_ADC_CHANNELS)
    a886:	4b32      	ldr	r3, [pc, #200]	; (a950 <ADCTask+0x19c>)
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	2b01      	cmp	r3, #1
    a88c:	d912      	bls.n	a8b4 <ADCTask+0x100>
		{
			adcOffset = 0;
    a88e:	4b30      	ldr	r3, [pc, #192]	; (a950 <ADCTask+0x19c>)
    a890:	2200      	movs	r2, #0
    a892:	701a      	strb	r2, [r3, #0]
			adcFirstPassDone = 1;  
    a894:	4b33      	ldr	r3, [pc, #204]	; (a964 <ADCTask+0x1b0>)
    a896:	2201      	movs	r2, #1
    a898:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD			
			brakeChange |= BRAKECHANGE_ADCDONE; 
    a89a:	4b33      	ldr	r3, [pc, #204]	; (a968 <ADCTask+0x1b4>)
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	2201      	movs	r2, #1
    a8a0:	4313      	orrs	r3, r2
    a8a2:	b2da      	uxtb	r2, r3
    a8a4:	4b30      	ldr	r3, [pc, #192]	; (a968 <ADCTask+0x1b4>)
    a8a6:	701a      	strb	r2, [r3, #0]
			schedByte|= SCHEDBYTE_BRAKETASK; 
    a8a8:	4b30      	ldr	r3, [pc, #192]	; (a96c <ADCTask+0x1b8>)
    a8aa:	681b      	ldr	r3, [r3, #0]
    a8ac:	2240      	movs	r2, #64	; 0x40
    a8ae:	431a      	orrs	r2, r3
    a8b0:	4b2e      	ldr	r3, [pc, #184]	; (a96c <ADCTask+0x1b8>)
    a8b2:	601a      	str	r2, [r3, #0]
			//-----------------------
			// set a timer to do the ADC stuff
			
		}
#if BRAKEBOARD		
		if (motorOn == TRUE)
    a8b4:	4b2e      	ldr	r3, [pc, #184]	; (a970 <ADCTask+0x1bc>)
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	2b01      	cmp	r3, #1
    a8ba:	d102      	bne.n	a8c2 <ADCTask+0x10e>
		{
			adcOffset = 1; 
    a8bc:	4b24      	ldr	r3, [pc, #144]	; (a950 <ADCTask+0x19c>)
    a8be:	2201      	movs	r2, #1
    a8c0:	701a      	strb	r2, [r3, #0]
		}
		adcTimeout = 1; //04-11-16
    a8c2:	4b2c      	ldr	r3, [pc, #176]	; (a974 <ADCTask+0x1c0>)
    a8c4:	2201      	movs	r2, #1
    a8c6:	701a      	strb	r2, [r3, #0]
#endif
 		adcTimer = ADCTIME; 
    a8c8:	4b2b      	ldr	r3, [pc, #172]	; (a978 <ADCTask+0x1c4>)
    a8ca:	2203      	movs	r2, #3
    a8cc:	801a      	strh	r2, [r3, #0]
		adcTimeout = 0; 
    a8ce:	4b29      	ldr	r3, [pc, #164]	; (a974 <ADCTask+0x1c0>)
    a8d0:	2200      	movs	r2, #0
    a8d2:	701a      	strb	r2, [r3, #0]
	}
	if (adcTimeout != 0)
    a8d4:	4b27      	ldr	r3, [pc, #156]	; (a974 <ADCTask+0x1c0>)
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d033      	beq.n	a944 <ADCTask+0x190>
	{
		adcTimeout = 0;
    a8dc:	4b25      	ldr	r3, [pc, #148]	; (a974 <ADCTask+0x1c0>)
    a8de:	2200      	movs	r2, #0
    a8e0:	701a      	strb	r2, [r3, #0]
		adcTimer = 0; 
    a8e2:	4b25      	ldr	r3, [pc, #148]	; (a978 <ADCTask+0x1c4>)
    a8e4:	2200      	movs	r2, #0
    a8e6:	801a      	strh	r2, [r3, #0]
		switch (adcOffset)
    a8e8:	4b19      	ldr	r3, [pc, #100]	; (a950 <ADCTask+0x19c>)
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	2b04      	cmp	r3, #4
    a8ee:	d822      	bhi.n	a936 <ADCTask+0x182>
    a8f0:	009a      	lsls	r2, r3, #2
    a8f2:	4b22      	ldr	r3, [pc, #136]	; (a97c <ADCTask+0x1c8>)
    a8f4:	18d3      	adds	r3, r2, r3
    a8f6:	681b      	ldr	r3, [r3, #0]
    a8f8:	469f      	mov	pc, r3
		{
			case 0:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN0);
    a8fa:	4b21      	ldr	r3, [pc, #132]	; (a980 <ADCTask+0x1cc>)
    a8fc:	1c18      	adds	r0, r3, #0
    a8fe:	2100      	movs	r1, #0
    a900:	4b20      	ldr	r3, [pc, #128]	; (a984 <ADCTask+0x1d0>)
    a902:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
				break;
    a904:	e017      	b.n	a936 <ADCTask+0x182>
			}	
			case 1:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);			
    a906:	4b1e      	ldr	r3, [pc, #120]	; (a980 <ADCTask+0x1cc>)
    a908:	1c18      	adds	r0, r3, #0
    a90a:	2101      	movs	r1, #1
    a90c:	4b1d      	ldr	r3, [pc, #116]	; (a984 <ADCTask+0x1d0>)
    a90e:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
				break;
    a910:	e011      	b.n	a936 <ADCTask+0x182>
			}
			case 2:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN12);
    a912:	4b1b      	ldr	r3, [pc, #108]	; (a980 <ADCTask+0x1cc>)
    a914:	1c18      	adds	r0, r3, #0
    a916:	210c      	movs	r1, #12
    a918:	4b1a      	ldr	r3, [pc, #104]	; (a984 <ADCTask+0x1d0>)
    a91a:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN2;			
				break;
    a91c:	e00b      	b.n	a936 <ADCTask+0x182>
			}	
			case 3:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN14);			
    a91e:	4b18      	ldr	r3, [pc, #96]	; (a980 <ADCTask+0x1cc>)
    a920:	1c18      	adds	r0, r3, #0
    a922:	210e      	movs	r1, #14
    a924:	4b17      	ldr	r3, [pc, #92]	; (a984 <ADCTask+0x1d0>)
    a926:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;			
				break;
    a928:	e005      	b.n	a936 <ADCTask+0x182>
			}
			case 4:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN15);			
    a92a:	4b15      	ldr	r3, [pc, #84]	; (a980 <ADCTask+0x1cc>)
    a92c:	1c18      	adds	r0, r3, #0
    a92e:	210f      	movs	r1, #15
    a930:	4b14      	ldr	r3, [pc, #80]	; (a984 <ADCTask+0x1d0>)
    a932:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
				break;
    a934:	46c0      	nop			; (mov r8, r8)
			}				
		}
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    a936:	4a12      	ldr	r2, [pc, #72]	; (a980 <ADCTask+0x1cc>)
    a938:	4b06      	ldr	r3, [pc, #24]	; (a954 <ADCTask+0x1a0>)
    a93a:	1c10      	adds	r0, r2, #0
    a93c:	1c19      	adds	r1, r3, #0
    a93e:	2204      	movs	r2, #4
    a940:	4b11      	ldr	r3, [pc, #68]	; (a988 <ADCTask+0x1d4>)
    a942:	4798      	blx	r3
	}
}
    a944:	46bd      	mov	sp, r7
    a946:	b002      	add	sp, #8
    a948:	bd80      	pop	{r7, pc}
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	200004ba 	.word	0x200004ba
    a950:	2000300c 	.word	0x2000300c
    a954:	20003004 	.word	0x20003004
    a958:	20002ff0 	.word	0x20002ff0
    a95c:	20003010 	.word	0x20003010
    a960:	200004b8 	.word	0x200004b8
    a964:	200004b6 	.word	0x200004b6
    a968:	20002ecc 	.word	0x20002ecc
    a96c:	20003668 	.word	0x20003668
    a970:	200004ac 	.word	0x200004ac
    a974:	20002fec 	.word	0x20002fec
    a978:	20003000 	.word	0x20003000
    a97c:	0001729c 	.word	0x0001729c
    a980:	20003014 	.word	0x20003014
    a984:	0000a4d5 	.word	0x0000a4d5
    a988:	00003cb1 	.word	0x00003cb1

0000a98c <ADCInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCInit(void)
{
    a98c:	b580      	push	{r7, lr}
    a98e:	b082      	sub	sp, #8
    a990:	af00      	add	r7, sp, #0
	uint8_t i,j; 
	
	adcOffset = 0; 
    a992:	4b1d      	ldr	r3, [pc, #116]	; (aa08 <ADCInit+0x7c>)
    a994:	2200      	movs	r2, #0
    a996:	701a      	strb	r2, [r3, #0]
	adcFirstPassDone = 0; 
    a998:	4b1c      	ldr	r3, [pc, #112]	; (aa0c <ADCInit+0x80>)
    a99a:	2200      	movs	r2, #0
    a99c:	701a      	strb	r2, [r3, #0]
	 
	configure_adc(adcOffset);	
    a99e:	4b1a      	ldr	r3, [pc, #104]	; (aa08 <ADCInit+0x7c>)
    a9a0:	781b      	ldrb	r3, [r3, #0]
    a9a2:	1c18      	adds	r0, r3, #0
    a9a4:	4b1a      	ldr	r3, [pc, #104]	; (aa10 <ADCInit+0x84>)
    a9a6:	4798      	blx	r3
	configure_adc_callbacks();	
    a9a8:	4b1a      	ldr	r3, [pc, #104]	; (aa14 <ADCInit+0x88>)
    a9aa:	4798      	blx	r3
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    a9ac:	1dfb      	adds	r3, r7, #7
    a9ae:	2200      	movs	r2, #0
    a9b0:	701a      	strb	r2, [r3, #0]
    a9b2:	e021      	b.n	a9f8 <ADCInit+0x6c>
	{
		for (j=0;j<ADC_SAMPLES;j++)
    a9b4:	1dbb      	adds	r3, r7, #6
    a9b6:	2200      	movs	r2, #0
    a9b8:	701a      	strb	r2, [r3, #0]
    a9ba:	e00e      	b.n	a9da <ADCInit+0x4e>
		{
			adcReadings[i][j]=0;
    a9bc:	1dfb      	adds	r3, r7, #7
    a9be:	7819      	ldrb	r1, [r3, #0]
    a9c0:	1dbb      	adds	r3, r7, #6
    a9c2:	781a      	ldrb	r2, [r3, #0]
    a9c4:	4b14      	ldr	r3, [pc, #80]	; (aa18 <ADCInit+0x8c>)
    a9c6:	0089      	lsls	r1, r1, #2
    a9c8:	188a      	adds	r2, r1, r2
    a9ca:	0052      	lsls	r2, r2, #1
    a9cc:	2100      	movs	r1, #0
    a9ce:	52d1      	strh	r1, [r2, r3]
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
	{
		for (j=0;j<ADC_SAMPLES;j++)
    a9d0:	1dbb      	adds	r3, r7, #6
    a9d2:	781a      	ldrb	r2, [r3, #0]
    a9d4:	1dbb      	adds	r3, r7, #6
    a9d6:	3201      	adds	r2, #1
    a9d8:	701a      	strb	r2, [r3, #0]
    a9da:	1dbb      	adds	r3, r7, #6
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2b03      	cmp	r3, #3
    a9e0:	d9ec      	bls.n	a9bc <ADCInit+0x30>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
    a9e2:	1dfb      	adds	r3, r7, #7
    a9e4:	781a      	ldrb	r2, [r3, #0]
    a9e6:	4b0d      	ldr	r3, [pc, #52]	; (aa1c <ADCInit+0x90>)
    a9e8:	0052      	lsls	r2, r2, #1
    a9ea:	2100      	movs	r1, #0
    a9ec:	52d1      	strh	r1, [r2, r3]
	adcFirstPassDone = 0; 
	 
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    a9ee:	1dfb      	adds	r3, r7, #7
    a9f0:	781a      	ldrb	r2, [r3, #0]
    a9f2:	1dfb      	adds	r3, r7, #7
    a9f4:	3201      	adds	r2, #1
    a9f6:	701a      	strb	r2, [r3, #0]
    a9f8:	1dfb      	adds	r3, r7, #7
    a9fa:	781b      	ldrb	r3, [r3, #0]
    a9fc:	2b01      	cmp	r3, #1
    a9fe:	d9d9      	bls.n	a9b4 <ADCInit+0x28>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
	}
}
    aa00:	46bd      	mov	sp, r7
    aa02:	b002      	add	sp, #8
    aa04:	bd80      	pop	{r7, pc}
    aa06:	46c0      	nop			; (mov r8, r8)
    aa08:	2000300c 	.word	0x2000300c
    aa0c:	200004b6 	.word	0x200004b6
    aa10:	0000a69d 	.word	0x0000a69d
    aa14:	0000a785 	.word	0x0000a785
    aa18:	20002ff0 	.word	0x20002ff0
    aa1c:	20003010 	.word	0x20003010

0000aa20 <ADCStart>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCStart(void)
{
    aa20:	b580      	push	{r7, lr}
    aa22:	b082      	sub	sp, #8
    aa24:	af00      	add	r7, sp, #0
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    aa26:	1dfb      	adds	r3, r7, #7
    aa28:	2200      	movs	r2, #0
    aa2a:	701a      	strb	r2, [r3, #0]
    aa2c:	e020      	b.n	aa70 <ADCStart+0x50>
	{
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    aa2e:	4a14      	ldr	r2, [pc, #80]	; (aa80 <ADCStart+0x60>)
    aa30:	4b14      	ldr	r3, [pc, #80]	; (aa84 <ADCStart+0x64>)
    aa32:	1c10      	adds	r0, r2, #0
    aa34:	1c19      	adds	r1, r3, #0
    aa36:	2204      	movs	r2, #4
    aa38:	4b13      	ldr	r3, [pc, #76]	; (aa88 <ADCStart+0x68>)
    aa3a:	4798      	blx	r3
		while ((schedByte&SCHEDBYTE_ADC)==0);
    aa3c:	46c0      	nop			; (mov r8, r8)
    aa3e:	4b13      	ldr	r3, [pc, #76]	; (aa8c <ADCStart+0x6c>)
    aa40:	681a      	ldr	r2, [r3, #0]
    aa42:	2320      	movs	r3, #32
    aa44:	4013      	ands	r3, r2
    aa46:	d0fa      	beq.n	aa3e <ADCStart+0x1e>
		schedByte &= ~SCHEDBYTE_ADC; 
    aa48:	4b10      	ldr	r3, [pc, #64]	; (aa8c <ADCStart+0x6c>)
    aa4a:	681b      	ldr	r3, [r3, #0]
    aa4c:	2220      	movs	r2, #32
    aa4e:	1c19      	adds	r1, r3, #0
    aa50:	4391      	bics	r1, r2
    aa52:	1c0a      	adds	r2, r1, #0
    aa54:	4b0d      	ldr	r3, [pc, #52]	; (aa8c <ADCStart+0x6c>)
    aa56:	601a      	str	r2, [r3, #0]
		ADCTask();
    aa58:	4b0d      	ldr	r3, [pc, #52]	; (aa90 <ADCStart+0x70>)
    aa5a:	4798      	blx	r3
		adcTimeout = 1; 
    aa5c:	4b0d      	ldr	r3, [pc, #52]	; (aa94 <ADCStart+0x74>)
    aa5e:	2201      	movs	r2, #1
    aa60:	701a      	strb	r2, [r3, #0]
		ADCTask();
    aa62:	4b0b      	ldr	r3, [pc, #44]	; (aa90 <ADCStart+0x70>)
    aa64:	4798      	blx	r3
//==============================================================================
void ADCStart(void)
{
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    aa66:	1dfb      	adds	r3, r7, #7
    aa68:	781a      	ldrb	r2, [r3, #0]
    aa6a:	1dfb      	adds	r3, r7, #7
    aa6c:	3201      	adds	r2, #1
    aa6e:	701a      	strb	r2, [r3, #0]
    aa70:	1dfb      	adds	r3, r7, #7
    aa72:	781b      	ldrb	r3, [r3, #0]
    aa74:	2b01      	cmp	r3, #1
    aa76:	d9da      	bls.n	aa2e <ADCStart+0xe>
		schedByte &= ~SCHEDBYTE_ADC; 
		ADCTask();
		adcTimeout = 1; 
		ADCTask();
	}
}
    aa78:	46bd      	mov	sp, r7
    aa7a:	b002      	add	sp, #8
    aa7c:	bd80      	pop	{r7, pc}
    aa7e:	46c0      	nop			; (mov r8, r8)
    aa80:	20003014 	.word	0x20003014
    aa84:	20003004 	.word	0x20003004
    aa88:	00003cb1 	.word	0x00003cb1
    aa8c:	20003668 	.word	0x20003668
    aa90:	0000a7b5 	.word	0x0000a7b5
    aa94:	20002fec 	.word	0x20002fec

0000aa98 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    aa98:	b580      	push	{r7, lr}
    aa9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    aa9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    aaa0:	4b02      	ldr	r3, [pc, #8]	; (aaac <NVIC_SystemReset+0x14>)
    aaa2:	4a03      	ldr	r2, [pc, #12]	; (aab0 <NVIC_SystemReset+0x18>)
    aaa4:	60da      	str	r2, [r3, #12]
    aaa6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    aaaa:	e7fe      	b.n	aaaa <NVIC_SystemReset+0x12>
    aaac:	e000ed00 	.word	0xe000ed00
    aab0:	05fa0004 	.word	0x05fa0004

0000aab4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    aab4:	b580      	push	{r7, lr}
    aab6:	b084      	sub	sp, #16
    aab8:	af00      	add	r7, sp, #0
    aaba:	1c02      	adds	r2, r0, #0
    aabc:	1dfb      	adds	r3, r7, #7
    aabe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    aac0:	1c3b      	adds	r3, r7, #0
    aac2:	330f      	adds	r3, #15
    aac4:	1dfa      	adds	r2, r7, #7
    aac6:	7812      	ldrb	r2, [r2, #0]
    aac8:	09d2      	lsrs	r2, r2, #7
    aaca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    aacc:	1c3b      	adds	r3, r7, #0
    aace:	330e      	adds	r3, #14
    aad0:	1dfa      	adds	r2, r7, #7
    aad2:	7812      	ldrb	r2, [r2, #0]
    aad4:	0952      	lsrs	r2, r2, #5
    aad6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    aad8:	4b0d      	ldr	r3, [pc, #52]	; (ab10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    aada:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    aadc:	1c3b      	adds	r3, r7, #0
    aade:	330f      	adds	r3, #15
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	2b00      	cmp	r3, #0
    aae4:	d10e      	bne.n	ab04 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    aae6:	1c3b      	adds	r3, r7, #0
    aae8:	330f      	adds	r3, #15
    aaea:	781b      	ldrb	r3, [r3, #0]
    aaec:	009b      	lsls	r3, r3, #2
    aaee:	2210      	movs	r2, #16
    aaf0:	19d2      	adds	r2, r2, r7
    aaf2:	18d3      	adds	r3, r2, r3
    aaf4:	3b08      	subs	r3, #8
    aaf6:	681a      	ldr	r2, [r3, #0]
    aaf8:	1c3b      	adds	r3, r7, #0
    aafa:	330e      	adds	r3, #14
    aafc:	781b      	ldrb	r3, [r3, #0]
    aafe:	01db      	lsls	r3, r3, #7
    ab00:	18d3      	adds	r3, r2, r3
    ab02:	e000      	b.n	ab06 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    ab04:	2300      	movs	r3, #0
	}
}
    ab06:	1c18      	adds	r0, r3, #0
    ab08:	46bd      	mov	sp, r7
    ab0a:	b004      	add	sp, #16
    ab0c:	bd80      	pop	{r7, pc}
    ab0e:	46c0      	nop			; (mov r8, r8)
    ab10:	41004400 	.word	0x41004400

0000ab14 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    ab14:	b580      	push	{r7, lr}
    ab16:	b082      	sub	sp, #8
    ab18:	af00      	add	r7, sp, #0
    ab1a:	1c02      	adds	r2, r0, #0
    ab1c:	1dfb      	adds	r3, r7, #7
    ab1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ab20:	1dfb      	adds	r3, r7, #7
    ab22:	781b      	ldrb	r3, [r3, #0]
    ab24:	1c18      	adds	r0, r3, #0
    ab26:	4b03      	ldr	r3, [pc, #12]	; (ab34 <port_get_group_from_gpio_pin+0x20>)
    ab28:	4798      	blx	r3
    ab2a:	1c03      	adds	r3, r0, #0
}
    ab2c:	1c18      	adds	r0, r3, #0
    ab2e:	46bd      	mov	sp, r7
    ab30:	b002      	add	sp, #8
    ab32:	bd80      	pop	{r7, pc}
    ab34:	0000aab5 	.word	0x0000aab5

0000ab38 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    ab38:	b580      	push	{r7, lr}
    ab3a:	b084      	sub	sp, #16
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	1c02      	adds	r2, r0, #0
    ab40:	1dfb      	adds	r3, r7, #7
    ab42:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ab44:	1dfb      	adds	r3, r7, #7
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	1c18      	adds	r0, r3, #0
    ab4a:	4b0c      	ldr	r3, [pc, #48]	; (ab7c <port_pin_get_input_level+0x44>)
    ab4c:	4798      	blx	r3
    ab4e:	1c03      	adds	r3, r0, #0
    ab50:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ab52:	1dfb      	adds	r3, r7, #7
    ab54:	781a      	ldrb	r2, [r3, #0]
    ab56:	231f      	movs	r3, #31
    ab58:	4013      	ands	r3, r2
    ab5a:	2201      	movs	r2, #1
    ab5c:	1c11      	adds	r1, r2, #0
    ab5e:	4099      	lsls	r1, r3
    ab60:	1c0b      	adds	r3, r1, #0
    ab62:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    ab64:	68fb      	ldr	r3, [r7, #12]
    ab66:	6a1b      	ldr	r3, [r3, #32]
    ab68:	68ba      	ldr	r2, [r7, #8]
    ab6a:	4013      	ands	r3, r2
    ab6c:	1e5a      	subs	r2, r3, #1
    ab6e:	4193      	sbcs	r3, r2
    ab70:	b2db      	uxtb	r3, r3
}
    ab72:	1c18      	adds	r0, r3, #0
    ab74:	46bd      	mov	sp, r7
    ab76:	b004      	add	sp, #16
    ab78:	bd80      	pop	{r7, pc}
    ab7a:	46c0      	nop			; (mov r8, r8)
    ab7c:	0000ab15 	.word	0x0000ab15

0000ab80 <FCCSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void FCCSample(void)
{
    ab80:	b598      	push	{r3, r4, r7, lr}
    ab82:	af00      	add	r7, sp, #0
	 
	//------------------------
	//check pins
	constantTX_hist = (constantTX_hist << 1) + port_pin_get_input_level(CONSTANTTX);
    ab84:	4b26      	ldr	r3, [pc, #152]	; (ac20 <FCCSample+0xa0>)
    ab86:	881b      	ldrh	r3, [r3, #0]
    ab88:	18db      	adds	r3, r3, r3
    ab8a:	b29c      	uxth	r4, r3
    ab8c:	2000      	movs	r0, #0
    ab8e:	4b25      	ldr	r3, [pc, #148]	; (ac24 <FCCSample+0xa4>)
    ab90:	4798      	blx	r3
    ab92:	1c03      	adds	r3, r0, #0
    ab94:	18e3      	adds	r3, r4, r3
    ab96:	b29a      	uxth	r2, r3
    ab98:	4b21      	ldr	r3, [pc, #132]	; (ac20 <FCCSample+0xa0>)
    ab9a:	801a      	strh	r2, [r3, #0]
	constantRX_hist = (constantRX_hist << 1) + port_pin_get_input_level(CONSTANTRX);
    ab9c:	4b22      	ldr	r3, [pc, #136]	; (ac28 <FCCSample+0xa8>)
    ab9e:	881b      	ldrh	r3, [r3, #0]
    aba0:	18db      	adds	r3, r3, r3
    aba2:	b29c      	uxth	r4, r3
    aba4:	2001      	movs	r0, #1
    aba6:	4b1f      	ldr	r3, [pc, #124]	; (ac24 <FCCSample+0xa4>)
    aba8:	4798      	blx	r3
    abaa:	1c03      	adds	r3, r0, #0
    abac:	18e3      	adds	r3, r4, r3
    abae:	b29a      	uxth	r2, r3
    abb0:	4b1d      	ldr	r3, [pc, #116]	; (ac28 <FCCSample+0xa8>)
    abb2:	801a      	strh	r2, [r3, #0]
	constantCW_hist = (constantCW_hist << 1) + port_pin_get_input_level(CONSTANTCW);
    abb4:	4b1d      	ldr	r3, [pc, #116]	; (ac2c <FCCSample+0xac>)
    abb6:	881b      	ldrh	r3, [r3, #0]
    abb8:	18db      	adds	r3, r3, r3
    abba:	b29c      	uxth	r4, r3
    abbc:	2036      	movs	r0, #54	; 0x36
    abbe:	4b19      	ldr	r3, [pc, #100]	; (ac24 <FCCSample+0xa4>)
    abc0:	4798      	blx	r3
    abc2:	1c03      	adds	r3, r0, #0
    abc4:	18e3      	adds	r3, r4, r3
    abc6:	b29a      	uxth	r2, r3
    abc8:	4b18      	ldr	r3, [pc, #96]	; (ac2c <FCCSample+0xac>)
    abca:	801a      	strh	r2, [r3, #0]
	 	
	//update vars
 
	if ((constantTX_hist & 7) == 0)
    abcc:	4b14      	ldr	r3, [pc, #80]	; (ac20 <FCCSample+0xa0>)
    abce:	881b      	ldrh	r3, [r3, #0]
    abd0:	1c1a      	adds	r2, r3, #0
    abd2:	2307      	movs	r3, #7
    abd4:	4013      	ands	r3, r2
    abd6:	d103      	bne.n	abe0 <FCCSample+0x60>
	constantTX_pressed = 1;
    abd8:	4b15      	ldr	r3, [pc, #84]	; (ac30 <FCCSample+0xb0>)
    abda:	2201      	movs	r2, #1
    abdc:	801a      	strh	r2, [r3, #0]
    abde:	e002      	b.n	abe6 <FCCSample+0x66>
	else
	constantTX_pressed = 0;
    abe0:	4b13      	ldr	r3, [pc, #76]	; (ac30 <FCCSample+0xb0>)
    abe2:	2200      	movs	r2, #0
    abe4:	801a      	strh	r2, [r3, #0]

	 
	if ((constantRX_hist & 7) == 0)
    abe6:	4b10      	ldr	r3, [pc, #64]	; (ac28 <FCCSample+0xa8>)
    abe8:	881b      	ldrh	r3, [r3, #0]
    abea:	1c1a      	adds	r2, r3, #0
    abec:	2307      	movs	r3, #7
    abee:	4013      	ands	r3, r2
    abf0:	d103      	bne.n	abfa <FCCSample+0x7a>
	constantRX_pressed = 1;
    abf2:	4b10      	ldr	r3, [pc, #64]	; (ac34 <FCCSample+0xb4>)
    abf4:	2201      	movs	r2, #1
    abf6:	801a      	strh	r2, [r3, #0]
    abf8:	e002      	b.n	ac00 <FCCSample+0x80>
	else
	constantRX_pressed = 0;
    abfa:	4b0e      	ldr	r3, [pc, #56]	; (ac34 <FCCSample+0xb4>)
    abfc:	2200      	movs	r2, #0
    abfe:	801a      	strh	r2, [r3, #0]
	
	 
	if ((constantCW_hist & 7) == 0)
    ac00:	4b0a      	ldr	r3, [pc, #40]	; (ac2c <FCCSample+0xac>)
    ac02:	881b      	ldrh	r3, [r3, #0]
    ac04:	1c1a      	adds	r2, r3, #0
    ac06:	2307      	movs	r3, #7
    ac08:	4013      	ands	r3, r2
    ac0a:	d103      	bne.n	ac14 <FCCSample+0x94>
	constantCW_pressed = 1;
    ac0c:	4b0a      	ldr	r3, [pc, #40]	; (ac38 <FCCSample+0xb8>)
    ac0e:	2201      	movs	r2, #1
    ac10:	801a      	strh	r2, [r3, #0]
    ac12:	e002      	b.n	ac1a <FCCSample+0x9a>
	else
	constantCW_pressed = 0;	
    ac14:	4b08      	ldr	r3, [pc, #32]	; (ac38 <FCCSample+0xb8>)
    ac16:	2200      	movs	r2, #0
    ac18:	801a      	strh	r2, [r3, #0]
}
    ac1a:	46bd      	mov	sp, r7
    ac1c:	bd98      	pop	{r3, r4, r7, pc}
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	200004c2 	.word	0x200004c2
    ac24:	0000ab39 	.word	0x0000ab39
    ac28:	200004c4 	.word	0x200004c4
    ac2c:	200004c6 	.word	0x200004c6
    ac30:	200004bc 	.word	0x200004bc
    ac34:	200004be 	.word	0x200004be
    ac38:	200004c0 	.word	0x200004c0

0000ac3c <ButtonChanged>:
 

uint8_t ButtonChanged(void)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
	uint8_t which; 
	which = keyChanged; 
    ac42:	1dfb      	adds	r3, r7, #7
    ac44:	4a05      	ldr	r2, [pc, #20]	; (ac5c <ButtonChanged+0x20>)
    ac46:	7812      	ldrb	r2, [r2, #0]
    ac48:	701a      	strb	r2, [r3, #0]
	keyChanged = 0;	
    ac4a:	4b04      	ldr	r3, [pc, #16]	; (ac5c <ButtonChanged+0x20>)
    ac4c:	2200      	movs	r2, #0
    ac4e:	701a      	strb	r2, [r3, #0]
	return which;
    ac50:	1dfb      	adds	r3, r7, #7
    ac52:	781b      	ldrb	r3, [r3, #0]
	
}
    ac54:	1c18      	adds	r0, r3, #0
    ac56:	46bd      	mov	sp, r7
    ac58:	b002      	add	sp, #8
    ac5a:	bd80      	pop	{r7, pc}
    ac5c:	20003035 	.word	0x20003035

0000ac60 <ButtonSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void ButtonSample(void)
{
    ac60:	b590      	push	{r4, r7, lr}
    ac62:	b083      	sub	sp, #12
    ac64:	af00      	add	r7, sp, #0
  
#endif	
#if BRAKEBOARD
	//------------------------
	//check pins
	setup_hist = (setup_hist << 1) + port_pin_get_input_level(BUTTON_SETUP);
    ac66:	4b6f      	ldr	r3, [pc, #444]	; (ae24 <ButtonSample+0x1c4>)
    ac68:	881b      	ldrh	r3, [r3, #0]
    ac6a:	18db      	adds	r3, r3, r3
    ac6c:	b29c      	uxth	r4, r3
    ac6e:	200f      	movs	r0, #15
    ac70:	4b6d      	ldr	r3, [pc, #436]	; (ae28 <ButtonSample+0x1c8>)
    ac72:	4798      	blx	r3
    ac74:	1c03      	adds	r3, r0, #0
    ac76:	18e3      	adds	r3, r4, r3
    ac78:	b29a      	uxth	r2, r3
    ac7a:	4b6a      	ldr	r3, [pc, #424]	; (ae24 <ButtonSample+0x1c4>)
    ac7c:	801a      	strh	r2, [r3, #0]
	power_hist = (power_hist << 1) + port_pin_get_input_level(BUTTON_POWER);
    ac7e:	4b6b      	ldr	r3, [pc, #428]	; (ae2c <ButtonSample+0x1cc>)
    ac80:	881b      	ldrh	r3, [r3, #0]
    ac82:	18db      	adds	r3, r3, r3
    ac84:	b29c      	uxth	r4, r3
    ac86:	200e      	movs	r0, #14
    ac88:	4b67      	ldr	r3, [pc, #412]	; (ae28 <ButtonSample+0x1c8>)
    ac8a:	4798      	blx	r3
    ac8c:	1c03      	adds	r3, r0, #0
    ac8e:	18e3      	adds	r3, r4, r3
    ac90:	b29a      	uxth	r2, r3
    ac92:	4b66      	ldr	r3, [pc, #408]	; (ae2c <ButtonSample+0x1cc>)
    ac94:	801a      	strh	r2, [r3, #0]
	breakawayRing_hist = (breakawayRing_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_RING);	
    ac96:	4b66      	ldr	r3, [pc, #408]	; (ae30 <ButtonSample+0x1d0>)
    ac98:	881b      	ldrh	r3, [r3, #0]
    ac9a:	18db      	adds	r3, r3, r3
    ac9c:	b29c      	uxth	r4, r3
    ac9e:	2016      	movs	r0, #22
    aca0:	4b61      	ldr	r3, [pc, #388]	; (ae28 <ButtonSample+0x1c8>)
    aca2:	4798      	blx	r3
    aca4:	1c03      	adds	r3, r0, #0
    aca6:	18e3      	adds	r3, r4, r3
    aca8:	b29a      	uxth	r2, r3
    acaa:	4b61      	ldr	r3, [pc, #388]	; (ae30 <ButtonSample+0x1d0>)
    acac:	801a      	strh	r2, [r3, #0]
	breakawayTip_hist = (breakawayTip_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_TIP);		
    acae:	4b61      	ldr	r3, [pc, #388]	; (ae34 <ButtonSample+0x1d4>)
    acb0:	881b      	ldrh	r3, [r3, #0]
    acb2:	18db      	adds	r3, r3, r3
    acb4:	b29c      	uxth	r4, r3
    acb6:	2017      	movs	r0, #23
    acb8:	4b5b      	ldr	r3, [pc, #364]	; (ae28 <ButtonSample+0x1c8>)
    acba:	4798      	blx	r3
    acbc:	1c03      	adds	r3, r0, #0
    acbe:	18e3      	adds	r3, r4, r3
    acc0:	b29a      	uxth	r2, r3
    acc2:	4b5c      	ldr	r3, [pc, #368]	; (ae34 <ButtonSample+0x1d4>)
    acc4:	801a      	strh	r2, [r3, #0]
	 
	//update vars
	prevKey = setup_pressed;
    acc6:	1dbb      	adds	r3, r7, #6
    acc8:	4a5b      	ldr	r2, [pc, #364]	; (ae38 <ButtonSample+0x1d8>)
    acca:	8812      	ldrh	r2, [r2, #0]
    accc:	801a      	strh	r2, [r3, #0]
	if ((setup_hist & 7) == 0)
    acce:	4b55      	ldr	r3, [pc, #340]	; (ae24 <ButtonSample+0x1c4>)
    acd0:	881b      	ldrh	r3, [r3, #0]
    acd2:	1c1a      	adds	r2, r3, #0
    acd4:	2307      	movs	r3, #7
    acd6:	4013      	ands	r3, r2
    acd8:	d103      	bne.n	ace2 <ButtonSample+0x82>
	setup_pressed = 1;
    acda:	4b57      	ldr	r3, [pc, #348]	; (ae38 <ButtonSample+0x1d8>)
    acdc:	2201      	movs	r2, #1
    acde:	801a      	strh	r2, [r3, #0]
    ace0:	e002      	b.n	ace8 <ButtonSample+0x88>
	else
	setup_pressed = 0;
    ace2:	4b55      	ldr	r3, [pc, #340]	; (ae38 <ButtonSample+0x1d8>)
    ace4:	2200      	movs	r2, #0
    ace6:	801a      	strh	r2, [r3, #0]
	if (prevKey != setup_pressed)
    ace8:	4b53      	ldr	r3, [pc, #332]	; (ae38 <ButtonSample+0x1d8>)
    acea:	881b      	ldrh	r3, [r3, #0]
    acec:	1dba      	adds	r2, r7, #6
    acee:	2100      	movs	r1, #0
    acf0:	5e52      	ldrsh	r2, [r2, r1]
    acf2:	b21b      	sxth	r3, r3
    acf4:	429a      	cmp	r2, r3
    acf6:	d006      	beq.n	ad06 <ButtonSample+0xa6>
	{
		keyChanged |= KEY_SETUP;
    acf8:	4b50      	ldr	r3, [pc, #320]	; (ae3c <ButtonSample+0x1dc>)
    acfa:	781b      	ldrb	r3, [r3, #0]
    acfc:	2201      	movs	r2, #1
    acfe:	4313      	orrs	r3, r2
    ad00:	b2da      	uxtb	r2, r3
    ad02:	4b4e      	ldr	r3, [pc, #312]	; (ae3c <ButtonSample+0x1dc>)
    ad04:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	
	}

	prevKey = power_pressed;
    ad06:	1dbb      	adds	r3, r7, #6
    ad08:	4a4d      	ldr	r2, [pc, #308]	; (ae40 <ButtonSample+0x1e0>)
    ad0a:	8812      	ldrh	r2, [r2, #0]
    ad0c:	801a      	strh	r2, [r3, #0]
	if ((power_hist & 7) == 0)
    ad0e:	4b47      	ldr	r3, [pc, #284]	; (ae2c <ButtonSample+0x1cc>)
    ad10:	881b      	ldrh	r3, [r3, #0]
    ad12:	1c1a      	adds	r2, r3, #0
    ad14:	2307      	movs	r3, #7
    ad16:	4013      	ands	r3, r2
    ad18:	d103      	bne.n	ad22 <ButtonSample+0xc2>
	power_pressed = 1;
    ad1a:	4b49      	ldr	r3, [pc, #292]	; (ae40 <ButtonSample+0x1e0>)
    ad1c:	2201      	movs	r2, #1
    ad1e:	801a      	strh	r2, [r3, #0]
    ad20:	e002      	b.n	ad28 <ButtonSample+0xc8>
	else
	power_pressed = 0;
    ad22:	4b47      	ldr	r3, [pc, #284]	; (ae40 <ButtonSample+0x1e0>)
    ad24:	2200      	movs	r2, #0
    ad26:	801a      	strh	r2, [r3, #0]
	if (prevKey != power_pressed)
    ad28:	4b45      	ldr	r3, [pc, #276]	; (ae40 <ButtonSample+0x1e0>)
    ad2a:	881b      	ldrh	r3, [r3, #0]
    ad2c:	1dba      	adds	r2, r7, #6
    ad2e:	2100      	movs	r1, #0
    ad30:	5e52      	ldrsh	r2, [r2, r1]
    ad32:	b21b      	sxth	r3, r3
    ad34:	429a      	cmp	r2, r3
    ad36:	d006      	beq.n	ad46 <ButtonSample+0xe6>
	{
		keyChanged |= KEY_POWER;
    ad38:	4b40      	ldr	r3, [pc, #256]	; (ae3c <ButtonSample+0x1dc>)
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	2202      	movs	r2, #2
    ad3e:	4313      	orrs	r3, r2
    ad40:	b2da      	uxtb	r2, r3
    ad42:	4b3e      	ldr	r3, [pc, #248]	; (ae3c <ButtonSample+0x1dc>)
    ad44:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}
	
	prevKey = breakawayRing_pressed;
    ad46:	1dbb      	adds	r3, r7, #6
    ad48:	4a3e      	ldr	r2, [pc, #248]	; (ae44 <ButtonSample+0x1e4>)
    ad4a:	8812      	ldrh	r2, [r2, #0]
    ad4c:	801a      	strh	r2, [r3, #0]
	if ((breakawayRing_hist & 7) == 0)
    ad4e:	4b38      	ldr	r3, [pc, #224]	; (ae30 <ButtonSample+0x1d0>)
    ad50:	881b      	ldrh	r3, [r3, #0]
    ad52:	1c1a      	adds	r2, r3, #0
    ad54:	2307      	movs	r3, #7
    ad56:	4013      	ands	r3, r2
    ad58:	d103      	bne.n	ad62 <ButtonSample+0x102>
	breakawayRing_pressed = 1;
    ad5a:	4b3a      	ldr	r3, [pc, #232]	; (ae44 <ButtonSample+0x1e4>)
    ad5c:	2201      	movs	r2, #1
    ad5e:	801a      	strh	r2, [r3, #0]
    ad60:	e002      	b.n	ad68 <ButtonSample+0x108>
	else
	breakawayRing_pressed = 0;	
    ad62:	4b38      	ldr	r3, [pc, #224]	; (ae44 <ButtonSample+0x1e4>)
    ad64:	2200      	movs	r2, #0
    ad66:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayRing_pressed)
    ad68:	4b36      	ldr	r3, [pc, #216]	; (ae44 <ButtonSample+0x1e4>)
    ad6a:	881b      	ldrh	r3, [r3, #0]
    ad6c:	1dba      	adds	r2, r7, #6
    ad6e:	2100      	movs	r1, #0
    ad70:	5e52      	ldrsh	r2, [r2, r1]
    ad72:	b21b      	sxth	r3, r3
    ad74:	429a      	cmp	r2, r3
    ad76:	d006      	beq.n	ad86 <ButtonSample+0x126>
	{
		keyChanged |= KEY_BREAKAWAYRING;
    ad78:	4b30      	ldr	r3, [pc, #192]	; (ae3c <ButtonSample+0x1dc>)
    ad7a:	781b      	ldrb	r3, [r3, #0]
    ad7c:	2204      	movs	r2, #4
    ad7e:	4313      	orrs	r3, r2
    ad80:	b2da      	uxtb	r2, r3
    ad82:	4b2e      	ldr	r3, [pc, #184]	; (ae3c <ButtonSample+0x1dc>)
    ad84:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
	
	prevKey = breakawayTip_pressed;
    ad86:	1dbb      	adds	r3, r7, #6
    ad88:	4a2f      	ldr	r2, [pc, #188]	; (ae48 <ButtonSample+0x1e8>)
    ad8a:	8812      	ldrh	r2, [r2, #0]
    ad8c:	801a      	strh	r2, [r3, #0]
	if ((breakawayTip_hist & 7) == 0)
    ad8e:	4b29      	ldr	r3, [pc, #164]	; (ae34 <ButtonSample+0x1d4>)
    ad90:	881b      	ldrh	r3, [r3, #0]
    ad92:	1c1a      	adds	r2, r3, #0
    ad94:	2307      	movs	r3, #7
    ad96:	4013      	ands	r3, r2
    ad98:	d103      	bne.n	ada2 <ButtonSample+0x142>
	breakawayTip_pressed = 1;
    ad9a:	4b2b      	ldr	r3, [pc, #172]	; (ae48 <ButtonSample+0x1e8>)
    ad9c:	2201      	movs	r2, #1
    ad9e:	801a      	strh	r2, [r3, #0]
    ada0:	e002      	b.n	ada8 <ButtonSample+0x148>
	else
	breakawayTip_pressed = 0;	
    ada2:	4b29      	ldr	r3, [pc, #164]	; (ae48 <ButtonSample+0x1e8>)
    ada4:	2200      	movs	r2, #0
    ada6:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayTip_pressed)
    ada8:	4b27      	ldr	r3, [pc, #156]	; (ae48 <ButtonSample+0x1e8>)
    adaa:	881b      	ldrh	r3, [r3, #0]
    adac:	1dba      	adds	r2, r7, #6
    adae:	2100      	movs	r1, #0
    adb0:	5e52      	ldrsh	r2, [r2, r1]
    adb2:	b21b      	sxth	r3, r3
    adb4:	429a      	cmp	r2, r3
    adb6:	d006      	beq.n	adc6 <ButtonSample+0x166>
	{
		keyChanged |= KEY_BREAKAWAYTIP;
    adb8:	4b20      	ldr	r3, [pc, #128]	; (ae3c <ButtonSample+0x1dc>)
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	2208      	movs	r2, #8
    adbe:	4313      	orrs	r3, r2
    adc0:	b2da      	uxtb	r2, r3
    adc2:	4b1e      	ldr	r3, [pc, #120]	; (ae3c <ButtonSample+0x1dc>)
    adc4:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
		
	flimitState = port_pin_get_input_level(FLIMIT);	
    adc6:	2015      	movs	r0, #21
    adc8:	4b17      	ldr	r3, [pc, #92]	; (ae28 <ButtonSample+0x1c8>)
    adca:	4798      	blx	r3
    adcc:	1c03      	adds	r3, r0, #0
    adce:	1c1a      	adds	r2, r3, #0
    add0:	4b1e      	ldr	r3, [pc, #120]	; (ae4c <ButtonSample+0x1ec>)
    add2:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    add4:	2014      	movs	r0, #20
    add6:	4b14      	ldr	r3, [pc, #80]	; (ae28 <ButtonSample+0x1c8>)
    add8:	4798      	blx	r3
    adda:	1c03      	adds	r3, r0, #0
    addc:	1c1a      	adds	r2, r3, #0
    adde:	4b1c      	ldr	r3, [pc, #112]	; (ae50 <ButtonSample+0x1f0>)
    ade0:	701a      	strb	r2, [r3, #0]
//V01_11							deconfigure_wdt();
//V01_11							NVIC_SystemReset();					
						}		
				}	
*/				
				if (((keyChanged & KEY_POWER)!= 0)&&(power_pressed != 0))
    ade2:	4b16      	ldr	r3, [pc, #88]	; (ae3c <ButtonSample+0x1dc>)
    ade4:	781b      	ldrb	r3, [r3, #0]
    ade6:	1c1a      	adds	r2, r3, #0
    ade8:	2302      	movs	r3, #2
    adea:	4013      	ands	r3, r2
    adec:	d017      	beq.n	ae1e <ButtonSample+0x1be>
    adee:	4b14      	ldr	r3, [pc, #80]	; (ae40 <ButtonSample+0x1e0>)
    adf0:	881b      	ldrh	r3, [r3, #0]
    adf2:	2b00      	cmp	r3, #0
    adf4:	d013      	beq.n	ae1e <ButtonSample+0x1be>
				{
					if (poweredUp == 0)
    adf6:	4b17      	ldr	r3, [pc, #92]	; (ae54 <ButtonSample+0x1f4>)
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d108      	bne.n	ae10 <ButtonSample+0x1b0>
					{
						poweredUp = 1;
    adfe:	4b15      	ldr	r3, [pc, #84]	; (ae54 <ButtonSample+0x1f4>)
    ae00:	2201      	movs	r2, #1
    ae02:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_RESET;
    ae04:	4b14      	ldr	r3, [pc, #80]	; (ae58 <ButtonSample+0x1f8>)
    ae06:	2200      	movs	r2, #0
    ae08:	701a      	strb	r2, [r3, #0]
						BrakeBoardStateMachineTask();	
    ae0a:	4b14      	ldr	r3, [pc, #80]	; (ae5c <ButtonSample+0x1fc>)
    ae0c:	4798      	blx	r3
    ae0e:	e006      	b.n	ae1e <ButtonSample+0x1be>
					}
					else
					{
							poweredUp = 0;
    ae10:	4b10      	ldr	r3, [pc, #64]	; (ae54 <ButtonSample+0x1f4>)
    ae12:	2200      	movs	r2, #0
    ae14:	701a      	strb	r2, [r3, #0]
							deconfigure_wdt();
    ae16:	4b12      	ldr	r3, [pc, #72]	; (ae60 <ButtonSample+0x200>)
    ae18:	4798      	blx	r3
							NVIC_SystemReset();								
    ae1a:	4b12      	ldr	r3, [pc, #72]	; (ae64 <ButtonSample+0x204>)
    ae1c:	4798      	blx	r3
					}
				}	
	
#endif		
}
    ae1e:	46bd      	mov	sp, r7
    ae20:	b003      	add	sp, #12
    ae22:	bd90      	pop	{r4, r7, pc}
    ae24:	200004c8 	.word	0x200004c8
    ae28:	0000ab39 	.word	0x0000ab39
    ae2c:	200004ca 	.word	0x200004ca
    ae30:	200004cc 	.word	0x200004cc
    ae34:	200004ce 	.word	0x200004ce
    ae38:	2000303a 	.word	0x2000303a
    ae3c:	20003035 	.word	0x20003035
    ae40:	20003038 	.word	0x20003038
    ae44:	20003036 	.word	0x20003036
    ae48:	2000303c 	.word	0x2000303c
    ae4c:	2000303e 	.word	0x2000303e
    ae50:	20003034 	.word	0x20003034
    ae54:	20003681 	.word	0x20003681
    ae58:	20002eaa 	.word	0x20002eaa
    ae5c:	00006c75 	.word	0x00006c75
    ae60:	0000dc81 	.word	0x0000dc81
    ae64:	0000aa99 	.word	0x0000aa99

0000ae68 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ae68:	b580      	push	{r7, lr}
    ae6a:	af00      	add	r7, sp, #0
    ae6c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ae70:	4b02      	ldr	r3, [pc, #8]	; (ae7c <NVIC_SystemReset+0x14>)
    ae72:	4a03      	ldr	r2, [pc, #12]	; (ae80 <NVIC_SystemReset+0x18>)
    ae74:	60da      	str	r2, [r3, #12]
    ae76:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    ae7a:	e7fe      	b.n	ae7a <NVIC_SystemReset+0x12>
    ae7c:	e000ed00 	.word	0xe000ed00
    ae80:	05fa0004 	.word	0x05fa0004

0000ae84 <GetAppInfo>:
// FUNCTION: GetAppInfo
//------------------------------------------------------------------------------
// This function parses app info starting at the given addr (failure returns 0)
//==============================================================================
uint8_t GetAppInfo(uint32_t startAddress, AppInfo* info)
{
    ae84:	b580      	push	{r7, lr}
    ae86:	b084      	sub	sp, #16
    ae88:	af00      	add	r7, sp, #0
    ae8a:	6078      	str	r0, [r7, #4]
    ae8c:	6039      	str	r1, [r7, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
    ae8e:	1c3b      	adds	r3, r7, #0
    ae90:	330e      	adds	r3, #14
    ae92:	2200      	movs	r2, #0
    ae94:	701a      	strb	r2, [r3, #0]
	
	success = 0;
    ae96:	1c3b      	adds	r3, r7, #0
    ae98:	330f      	adds	r3, #15
    ae9a:	2200      	movs	r2, #0
    ae9c:	701a      	strb	r2, [r3, #0]
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    ae9e:	687b      	ldr	r3, [r7, #4]
    aea0:	60bb      	str	r3, [r7, #8]
    aea2:	e03c      	b.n	af1e <GetAppInfo+0x9a>
	{
		if (*((uint32_t*)addr) == APP_INFO_START)
    aea4:	68bb      	ldr	r3, [r7, #8]
    aea6:	681a      	ldr	r2, [r3, #0]
    aea8:	4b24      	ldr	r3, [pc, #144]	; (af3c <GetAppInfo+0xb8>)
    aeaa:	429a      	cmp	r2, r3
    aeac:	d120      	bne.n	aef0 <GetAppInfo+0x6c>
		{
			info->checksum = *(uint32_t*)(addr + 4);
    aeae:	68bb      	ldr	r3, [r7, #8]
    aeb0:	3304      	adds	r3, #4
    aeb2:	681a      	ldr	r2, [r3, #0]
    aeb4:	683b      	ldr	r3, [r7, #0]
    aeb6:	601a      	str	r2, [r3, #0]
			info->appLength = *(uint32_t*)(addr + 8);
    aeb8:	68bb      	ldr	r3, [r7, #8]
    aeba:	3308      	adds	r3, #8
    aebc:	681a      	ldr	r2, [r3, #0]
    aebe:	683b      	ldr	r3, [r7, #0]
    aec0:	605a      	str	r2, [r3, #4]
			info->version = *(uint32_t*)(addr + 12);
    aec2:	68bb      	ldr	r3, [r7, #8]
    aec4:	330c      	adds	r3, #12
    aec6:	681a      	ldr	r2, [r3, #0]
    aec8:	683b      	ldr	r3, [r7, #0]
    aeca:	60da      	str	r2, [r3, #12]
			info->filetype1 = *(uint32_t*)(addr + 32);
    aecc:	68bb      	ldr	r3, [r7, #8]
    aece:	3320      	adds	r3, #32
    aed0:	681a      	ldr	r2, [r3, #0]
    aed2:	683b      	ldr	r3, [r7, #0]
    aed4:	611a      	str	r2, [r3, #16]
			info->filetype2 = *(uint32_t*)(addr + 36);
    aed6:	68bb      	ldr	r3, [r7, #8]
    aed8:	3324      	adds	r3, #36	; 0x24
    aeda:	681a      	ldr	r2, [r3, #0]
    aedc:	683b      	ldr	r3, [r7, #0]
    aede:	615a      	str	r2, [r3, #20]
			appInfoStarted = 1;
    aee0:	1c3b      	adds	r3, r7, #0
    aee2:	330e      	adds	r3, #14
    aee4:	2201      	movs	r2, #1
    aee6:	701a      	strb	r2, [r3, #0]
			addr += 16;
    aee8:	68bb      	ldr	r3, [r7, #8]
    aeea:	3310      	adds	r3, #16
    aeec:	60bb      	str	r3, [r7, #8]
    aeee:	e013      	b.n	af18 <GetAppInfo+0x94>
		}
		else if (appInfoStarted)
    aef0:	1c3b      	adds	r3, r7, #0
    aef2:	330e      	adds	r3, #14
    aef4:	781b      	ldrb	r3, [r3, #0]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d00e      	beq.n	af18 <GetAppInfo+0x94>
		{
			if (*((uint32_t*)addr) == APP_INFO_END)
    aefa:	68bb      	ldr	r3, [r7, #8]
    aefc:	681a      	ldr	r2, [r3, #0]
    aefe:	4b10      	ldr	r3, [pc, #64]	; (af40 <GetAppInfo+0xbc>)
    af00:	429a      	cmp	r2, r3
    af02:	d109      	bne.n	af18 <GetAppInfo+0x94>
			{
				//save address to start checksum at
				info->checksumStartOffset = addr + 4 - startAddress;
    af04:	68ba      	ldr	r2, [r7, #8]
    af06:	687b      	ldr	r3, [r7, #4]
    af08:	1ad3      	subs	r3, r2, r3
    af0a:	1d1a      	adds	r2, r3, #4
    af0c:	683b      	ldr	r3, [r7, #0]
    af0e:	609a      	str	r2, [r3, #8]
				
				//success
				success = 1;
    af10:	1c3b      	adds	r3, r7, #0
    af12:	330f      	adds	r3, #15
    af14:	2201      	movs	r2, #1
    af16:	701a      	strb	r2, [r3, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
	
	success = 0;
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    af18:	68bb      	ldr	r3, [r7, #8]
    af1a:	3304      	adds	r3, #4
    af1c:	60bb      	str	r3, [r7, #8]
    af1e:	687b      	ldr	r3, [r7, #4]
    af20:	2180      	movs	r1, #128	; 0x80
    af22:	0089      	lsls	r1, r1, #2
    af24:	185a      	adds	r2, r3, r1
    af26:	68bb      	ldr	r3, [r7, #8]
    af28:	429a      	cmp	r2, r3
    af2a:	d8bb      	bhi.n	aea4 <GetAppInfo+0x20>
		}
		//else we haven't found the app info start marker yet
	}
	
	//we didn't find both a start and end marker
	return success;
    af2c:	1c3b      	adds	r3, r7, #0
    af2e:	330f      	adds	r3, #15
    af30:	781b      	ldrb	r3, [r3, #0]
} 
    af32:	1c18      	adds	r0, r3, #0
    af34:	46bd      	mov	sp, r7
    af36:	b004      	add	sp, #16
    af38:	bd80      	pop	{r7, pc}
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	89abcdef 	.word	0x89abcdef
    af40:	fedcba98 	.word	0xfedcba98

0000af44 <CheckScratch>:
#if BRAKEBOARD 

void CheckScratch(void)
{
    af44:	b580      	push	{r7, lr}
    af46:	af00      	add	r7, sp, #0
	uint32_t ltemp,ltemp2; 
	
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    af48:	2384      	movs	r3, #132	; 0x84
    af4a:	029a      	lsls	r2, r3, #10
    af4c:	4b08      	ldr	r3, [pc, #32]	; (af70 <CheckScratch+0x2c>)
    af4e:	1c10      	adds	r0, r2, #0
    af50:	1c19      	adds	r1, r3, #0
    af52:	4b08      	ldr	r3, [pc, #32]	; (af74 <CheckScratch+0x30>)
    af54:	4798      	blx	r3
    af56:	1c03      	adds	r3, r0, #0
    af58:	2b00      	cmp	r3, #0
    af5a:	d006      	beq.n	af6a <CheckScratch+0x26>
    af5c:	4b04      	ldr	r3, [pc, #16]	; (af70 <CheckScratch+0x2c>)
    af5e:	691b      	ldr	r3, [r3, #16]
    af60:	2b35      	cmp	r3, #53	; 0x35
    af62:	d102      	bne.n	af6a <CheckScratch+0x26>
		{
			newRemoteDownloadNeeded = TRUE; 
    af64:	4b04      	ldr	r3, [pc, #16]	; (af78 <CheckScratch+0x34>)
    af66:	2201      	movs	r2, #1
    af68:	701a      	strb	r2, [r3, #0]
		}			
}
    af6a:	46bd      	mov	sp, r7
    af6c:	bd80      	pop	{r7, pc}
    af6e:	46c0      	nop			; (mov r8, r8)
    af70:	20003058 	.word	0x20003058
    af74:	0000ae85 	.word	0x0000ae85
    af78:	200004b5 	.word	0x200004b5

0000af7c <DownloadDoneTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void DownloadDoneTask(void)
{
    af7c:	b580      	push	{r7, lr}
    af7e:	af00      	add	r7, sp, #0
	//	uint32_t version;
	//}AppInfo;
	//
	// extern AppInfo brakeApp;
	// extern AppInfo remoteApp;	
	if ((GetAppInfo(APP_SCRATCH_BASE, &newBrakeInfo)!= 0)&&(newBrakeInfo.filetype1==0x34))
    af80:	2384      	movs	r3, #132	; 0x84
    af82:	029a      	lsls	r2, r3, #10
    af84:	4b14      	ldr	r3, [pc, #80]	; (afd8 <DownloadDoneTask+0x5c>)
    af86:	1c10      	adds	r0, r2, #0
    af88:	1c19      	adds	r1, r3, #0
    af8a:	4b14      	ldr	r3, [pc, #80]	; (afdc <DownloadDoneTask+0x60>)
    af8c:	4798      	blx	r3
    af8e:	1c03      	adds	r3, r0, #0
    af90:	2b00      	cmp	r3, #0
    af92:	d006      	beq.n	afa2 <DownloadDoneTask+0x26>
    af94:	4b10      	ldr	r3, [pc, #64]	; (afd8 <DownloadDoneTask+0x5c>)
    af96:	691b      	ldr	r3, [r3, #16]
    af98:	2b34      	cmp	r3, #52	; 0x34
    af9a:	d102      	bne.n	afa2 <DownloadDoneTask+0x26>
	{
		//---------------BRAKE DOWNLOAD .... 
		// Force a reset. 
		//----------------------------------
		/* Reset module and boot into application */
		NVIC_SystemReset();
    af9c:	4b10      	ldr	r3, [pc, #64]	; (afe0 <DownloadDoneTask+0x64>)
    af9e:	4798      	blx	r3
    afa0:	e018      	b.n	afd4 <DownloadDoneTask+0x58>
	}	
	else
	{
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    afa2:	2384      	movs	r3, #132	; 0x84
    afa4:	029a      	lsls	r2, r3, #10
    afa6:	4b0f      	ldr	r3, [pc, #60]	; (afe4 <DownloadDoneTask+0x68>)
    afa8:	1c10      	adds	r0, r2, #0
    afaa:	1c19      	adds	r1, r3, #0
    afac:	4b0b      	ldr	r3, [pc, #44]	; (afdc <DownloadDoneTask+0x60>)
    afae:	4798      	blx	r3
    afb0:	1c03      	adds	r3, r0, #0
    afb2:	2b00      	cmp	r3, #0
    afb4:	d00e      	beq.n	afd4 <DownloadDoneTask+0x58>
    afb6:	4b0b      	ldr	r3, [pc, #44]	; (afe4 <DownloadDoneTask+0x68>)
    afb8:	691b      	ldr	r3, [r3, #16]
    afba:	2b35      	cmp	r3, #53	; 0x35
    afbc:	d10a      	bne.n	afd4 <DownloadDoneTask+0x58>
		{
			//---------------REMOTE DOWNLOAD .... 
			// Download to remote
			//----------------------------------
			newRemoteDownloadNeeded = TRUE; 
    afbe:	4b0a      	ldr	r3, [pc, #40]	; (afe8 <DownloadDoneTask+0x6c>)
    afc0:	2201      	movs	r2, #1
    afc2:	701a      	strb	r2, [r3, #0]
			//01_10
			whichRadio = WHICHRADIO_LORA;
    afc4:	4b09      	ldr	r3, [pc, #36]	; (afec <DownloadDoneTask+0x70>)
    afc6:	2299      	movs	r2, #153	; 0x99
    afc8:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE;
    afca:	4b09      	ldr	r3, [pc, #36]	; (aff0 <DownloadDoneTask+0x74>)
    afcc:	2200      	movs	r2, #0
    afce:	701a      	strb	r2, [r3, #0]
			CommInit();			
    afd0:	4b08      	ldr	r3, [pc, #32]	; (aff4 <DownloadDoneTask+0x78>)
    afd2:	4798      	blx	r3
		}			
	}
 
}
    afd4:	46bd      	mov	sp, r7
    afd6:	bd80      	pop	{r7, pc}
    afd8:	20003040 	.word	0x20003040
    afdc:	0000ae85 	.word	0x0000ae85
    afe0:	0000ae69 	.word	0x0000ae69
    afe4:	20003058 	.word	0x20003058
    afe8:	200004b5 	.word	0x200004b5
    afec:	2000369a 	.word	0x2000369a
    aff0:	200004b4 	.word	0x200004b4
    aff4:	0000e45d 	.word	0x0000e45d

0000aff8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    aff8:	b580      	push	{r7, lr}
    affa:	b084      	sub	sp, #16
    affc:	af00      	add	r7, sp, #0
    affe:	1c02      	adds	r2, r0, #0
    b000:	1dfb      	adds	r3, r7, #7
    b002:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b004:	1c3b      	adds	r3, r7, #0
    b006:	330f      	adds	r3, #15
    b008:	1dfa      	adds	r2, r7, #7
    b00a:	7812      	ldrb	r2, [r2, #0]
    b00c:	09d2      	lsrs	r2, r2, #7
    b00e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b010:	1c3b      	adds	r3, r7, #0
    b012:	330e      	adds	r3, #14
    b014:	1dfa      	adds	r2, r7, #7
    b016:	7812      	ldrb	r2, [r2, #0]
    b018:	0952      	lsrs	r2, r2, #5
    b01a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b01c:	4b0d      	ldr	r3, [pc, #52]	; (b054 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b01e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    b020:	1c3b      	adds	r3, r7, #0
    b022:	330f      	adds	r3, #15
    b024:	781b      	ldrb	r3, [r3, #0]
    b026:	2b00      	cmp	r3, #0
    b028:	d10e      	bne.n	b048 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    b02a:	1c3b      	adds	r3, r7, #0
    b02c:	330f      	adds	r3, #15
    b02e:	781b      	ldrb	r3, [r3, #0]
    b030:	009b      	lsls	r3, r3, #2
    b032:	2210      	movs	r2, #16
    b034:	19d2      	adds	r2, r2, r7
    b036:	18d3      	adds	r3, r2, r3
    b038:	3b08      	subs	r3, #8
    b03a:	681a      	ldr	r2, [r3, #0]
    b03c:	1c3b      	adds	r3, r7, #0
    b03e:	330e      	adds	r3, #14
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	01db      	lsls	r3, r3, #7
    b044:	18d3      	adds	r3, r2, r3
    b046:	e000      	b.n	b04a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    b048:	2300      	movs	r3, #0
	}
}
    b04a:	1c18      	adds	r0, r3, #0
    b04c:	46bd      	mov	sp, r7
    b04e:	b004      	add	sp, #16
    b050:	bd80      	pop	{r7, pc}
    b052:	46c0      	nop			; (mov r8, r8)
    b054:	41004400 	.word	0x41004400

0000b058 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    b058:	b580      	push	{r7, lr}
    b05a:	b082      	sub	sp, #8
    b05c:	af00      	add	r7, sp, #0
    b05e:	1c02      	adds	r2, r0, #0
    b060:	1dfb      	adds	r3, r7, #7
    b062:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b064:	1dfb      	adds	r3, r7, #7
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	1c18      	adds	r0, r3, #0
    b06a:	4b03      	ldr	r3, [pc, #12]	; (b078 <port_get_group_from_gpio_pin+0x20>)
    b06c:	4798      	blx	r3
    b06e:	1c03      	adds	r3, r0, #0
}
    b070:	1c18      	adds	r0, r3, #0
    b072:	46bd      	mov	sp, r7
    b074:	b002      	add	sp, #8
    b076:	bd80      	pop	{r7, pc}
    b078:	0000aff9 	.word	0x0000aff9

0000b07c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b082      	sub	sp, #8
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	2200      	movs	r2, #0
    b088:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b08a:	687b      	ldr	r3, [r7, #4]
    b08c:	2201      	movs	r2, #1
    b08e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	2200      	movs	r2, #0
    b094:	709a      	strb	r2, [r3, #2]
}
    b096:	46bd      	mov	sp, r7
    b098:	b002      	add	sp, #8
    b09a:	bd80      	pop	{r7, pc}

0000b09c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    b09c:	b580      	push	{r7, lr}
    b09e:	b084      	sub	sp, #16
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	1c0a      	adds	r2, r1, #0
    b0a4:	1dfb      	adds	r3, r7, #7
    b0a6:	1c01      	adds	r1, r0, #0
    b0a8:	7019      	strb	r1, [r3, #0]
    b0aa:	1dbb      	adds	r3, r7, #6
    b0ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b0ae:	1dfb      	adds	r3, r7, #7
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	1c18      	adds	r0, r3, #0
    b0b4:	4b0d      	ldr	r3, [pc, #52]	; (b0ec <port_pin_set_output_level+0x50>)
    b0b6:	4798      	blx	r3
    b0b8:	1c03      	adds	r3, r0, #0
    b0ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b0bc:	1dfb      	adds	r3, r7, #7
    b0be:	781a      	ldrb	r2, [r3, #0]
    b0c0:	231f      	movs	r3, #31
    b0c2:	4013      	ands	r3, r2
    b0c4:	2201      	movs	r2, #1
    b0c6:	1c11      	adds	r1, r2, #0
    b0c8:	4099      	lsls	r1, r3
    b0ca:	1c0b      	adds	r3, r1, #0
    b0cc:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    b0ce:	1dbb      	adds	r3, r7, #6
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d003      	beq.n	b0de <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    b0d6:	68fb      	ldr	r3, [r7, #12]
    b0d8:	68ba      	ldr	r2, [r7, #8]
    b0da:	619a      	str	r2, [r3, #24]
    b0dc:	e002      	b.n	b0e4 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    b0de:	68fb      	ldr	r3, [r7, #12]
    b0e0:	68ba      	ldr	r2, [r7, #8]
    b0e2:	615a      	str	r2, [r3, #20]
	}
}
    b0e4:	46bd      	mov	sp, r7
    b0e6:	b004      	add	sp, #16
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	0000b059 	.word	0x0000b059

0000b0f0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    b0f0:	b580      	push	{r7, lr}
    b0f2:	b084      	sub	sp, #16
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	681b      	ldr	r3, [r3, #0]
    b0fc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    b0fe:	68fb      	ldr	r3, [r7, #12]
    b100:	8a1b      	ldrh	r3, [r3, #16]
    b102:	b29b      	uxth	r3, r3
    b104:	1c1a      	adds	r2, r3, #0
    b106:	2380      	movs	r3, #128	; 0x80
    b108:	021b      	lsls	r3, r3, #8
    b10a:	4013      	ands	r3, r2
    b10c:	1e5a      	subs	r2, r3, #1
    b10e:	4193      	sbcs	r3, r2
    b110:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    b112:	1c18      	adds	r0, r3, #0
    b114:	46bd      	mov	sp, r7
    b116:	b004      	add	sp, #16
    b118:	bd80      	pop	{r7, pc}
    b11a:	46c0      	nop			; (mov r8, r8)

0000b11c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    b11c:	b580      	push	{r7, lr}
    b11e:	b082      	sub	sp, #8
    b120:	af00      	add	r7, sp, #0
    b122:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    b124:	46c0      	nop			; (mov r8, r8)
    b126:	687b      	ldr	r3, [r7, #4]
    b128:	1c18      	adds	r0, r3, #0
    b12a:	4b04      	ldr	r3, [pc, #16]	; (b13c <_i2c_master_wait_for_sync+0x20>)
    b12c:	4798      	blx	r3
    b12e:	1c03      	adds	r3, r0, #0
    b130:	2b00      	cmp	r3, #0
    b132:	d1f8      	bne.n	b126 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    b134:	46bd      	mov	sp, r7
    b136:	b002      	add	sp, #8
    b138:	bd80      	pop	{r7, pc}
    b13a:	46c0      	nop			; (mov r8, r8)
    b13c:	0000b0f1 	.word	0x0000b0f1

0000b140 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    b140:	b580      	push	{r7, lr}
    b142:	b082      	sub	sp, #8
    b144:	af00      	add	r7, sp, #0
    b146:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = 300;   //I2C_MASTER_BAUD_RATE_100KHZ;
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	2296      	movs	r2, #150	; 0x96
    b14c:	0052      	lsls	r2, r2, #1
    b14e:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    b150:	687b      	ldr	r3, [r7, #4]
    b152:	2200      	movs	r2, #0
    b154:	711a      	strb	r2, [r3, #4]
	config->run_in_standby   = false;
    b156:	687b      	ldr	r3, [r7, #4]
    b158:	2200      	movs	r2, #0
    b15a:	741a      	strb	r2, [r3, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	2280      	movs	r2, #128	; 0x80
    b160:	0392      	lsls	r2, r2, #14
    b162:	609a      	str	r2, [r3, #8]
	config->buffer_timeout   = 65535;
    b164:	687b      	ldr	r3, [r7, #4]
    b166:	2201      	movs	r2, #1
    b168:	4252      	negs	r2, r2
    b16a:	81da      	strh	r2, [r3, #14]
	config->unknown_bus_state_timeout = 65535;
    b16c:	687b      	ldr	r3, [r7, #4]
    b16e:	2201      	movs	r2, #1
    b170:	4252      	negs	r2, r2
    b172:	819a      	strh	r2, [r3, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	2200      	movs	r2, #0
    b178:	615a      	str	r2, [r3, #20]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    b17a:	687b      	ldr	r3, [r7, #4]
    b17c:	2200      	movs	r2, #0
    b17e:	619a      	str	r2, [r3, #24]
	config->scl_low_timeout  = false;
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	2200      	movs	r2, #0
    b184:	771a      	strb	r2, [r3, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	2200      	movs	r2, #0
    b18a:	621a      	str	r2, [r3, #32]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
}
    b18c:	46bd      	mov	sp, r7
    b18e:	b002      	add	sp, #8
    b190:	bd80      	pop	{r7, pc}
    b192:	46c0      	nop			; (mov r8, r8)

0000b194 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    b194:	b580      	push	{r7, lr}
    b196:	b084      	sub	sp, #16
    b198:	af00      	add	r7, sp, #0
    b19a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	681b      	ldr	r3, [r3, #0]
    b1a0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    b1a2:	2300      	movs	r3, #0
    b1a4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    b1a6:	687b      	ldr	r3, [r7, #4]
    b1a8:	1c18      	adds	r0, r3, #0
    b1aa:	4b10      	ldr	r3, [pc, #64]	; (b1ec <i2c_master_enable+0x58>)
    b1ac:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    b1ae:	68bb      	ldr	r3, [r7, #8]
    b1b0:	681b      	ldr	r3, [r3, #0]
    b1b2:	2202      	movs	r2, #2
    b1b4:	431a      	orrs	r2, r3
    b1b6:	68bb      	ldr	r3, [r7, #8]
    b1b8:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    b1ba:	e00c      	b.n	b1d6 <i2c_master_enable+0x42>
		timeout_counter++;
    b1bc:	68fb      	ldr	r3, [r7, #12]
    b1be:	3301      	adds	r3, #1
    b1c0:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    b1c2:	687b      	ldr	r3, [r7, #4]
    b1c4:	88db      	ldrh	r3, [r3, #6]
    b1c6:	1c1a      	adds	r2, r3, #0
    b1c8:	68fb      	ldr	r3, [r7, #12]
    b1ca:	429a      	cmp	r2, r3
    b1cc:	d803      	bhi.n	b1d6 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    b1ce:	68bb      	ldr	r3, [r7, #8]
    b1d0:	2210      	movs	r2, #16
    b1d2:	821a      	strh	r2, [r3, #16]
			/* Workaround #1 */
			return;
    b1d4:	e006      	b.n	b1e4 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    b1d6:	68bb      	ldr	r3, [r7, #8]
    b1d8:	8a1b      	ldrh	r3, [r3, #16]
    b1da:	b29b      	uxth	r3, r3
    b1dc:	1c1a      	adds	r2, r3, #0
    b1de:	2310      	movs	r3, #16
    b1e0:	4013      	ands	r3, r2
    b1e2:	d0eb      	beq.n	b1bc <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    b1e4:	46bd      	mov	sp, r7
    b1e6:	b004      	add	sp, #16
    b1e8:	bd80      	pop	{r7, pc}
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	0000b11d 	.word	0x0000b11d

0000b1f0 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b084      	sub	sp, #16
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b1f8:	687b      	ldr	r3, [r7, #4]
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    b1fe:	687b      	ldr	r3, [r7, #4]
    b200:	1c18      	adds	r0, r3, #0
    b202:	4b06      	ldr	r3, [pc, #24]	; (b21c <i2c_master_disable+0x2c>)
    b204:	4798      	blx	r3

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    b206:	68fb      	ldr	r3, [r7, #12]
    b208:	681b      	ldr	r3, [r3, #0]
    b20a:	2202      	movs	r2, #2
    b20c:	1c19      	adds	r1, r3, #0
    b20e:	4391      	bics	r1, r2
    b210:	1c0a      	adds	r2, r1, #0
    b212:	68fb      	ldr	r3, [r7, #12]
    b214:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Disable module interrupts */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif
}
    b216:	46bd      	mov	sp, r7
    b218:	b004      	add	sp, #16
    b21a:	bd80      	pop	{r7, pc}
    b21c:	0000b11d 	.word	0x0000b11d

0000b220 <RecoverI2C>:
	
//---------------------LOCAL FUNCTION PROTOTYPES--------------------------   
void configure_i2c_master(void);

void RecoverI2C(void)
{
    b220:	b580      	push	{r7, lr}
    b222:	b082      	sub	sp, #8
    b224:	af00      	add	r7, sp, #0
	uint8_t i; 
	struct port_config pin_conf;
 
	i2c_master_disable(&i2c_master_instance);
    b226:	4b33      	ldr	r3, [pc, #204]	; (b2f4 <RecoverI2C+0xd4>)
    b228:	1c18      	adds	r0, r3, #0
    b22a:	4b33      	ldr	r3, [pc, #204]	; (b2f8 <RecoverI2C+0xd8>)
    b22c:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    b22e:	1d3b      	adds	r3, r7, #4
    b230:	1c18      	adds	r0, r3, #0
    b232:	4b32      	ldr	r3, [pc, #200]	; (b2fc <RecoverI2C+0xdc>)
    b234:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b236:	1d3b      	adds	r3, r7, #4
    b238:	2201      	movs	r2, #1
    b23a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    b23c:	1d3b      	adds	r3, r7, #4
    b23e:	200c      	movs	r0, #12
    b240:	1c19      	adds	r1, r3, #0
    b242:	4b2f      	ldr	r3, [pc, #188]	; (b300 <RecoverI2C+0xe0>)
    b244:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    b246:	200c      	movs	r0, #12
    b248:	2100      	movs	r1, #0
    b24a:	4b2e      	ldr	r3, [pc, #184]	; (b304 <RecoverI2C+0xe4>)
    b24c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b24e:	1d3b      	adds	r3, r7, #4
    b250:	2201      	movs	r2, #1
    b252:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    b254:	1d3b      	adds	r3, r7, #4
    b256:	200d      	movs	r0, #13
    b258:	1c19      	adds	r1, r3, #0
    b25a:	4b29      	ldr	r3, [pc, #164]	; (b300 <RecoverI2C+0xe0>)
    b25c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    b25e:	200d      	movs	r0, #13
    b260:	2100      	movs	r1, #0
    b262:	4b28      	ldr	r3, [pc, #160]	; (b304 <RecoverI2C+0xe4>)
    b264:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b266:	1d3b      	adds	r3, r7, #4
    b268:	2201      	movs	r2, #1
    b26a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    b26c:	1d3b      	adds	r3, r7, #4
    b26e:	200d      	movs	r0, #13
    b270:	1c19      	adds	r1, r3, #0
    b272:	4b23      	ldr	r3, [pc, #140]	; (b300 <RecoverI2C+0xe0>)
    b274:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    b276:	200d      	movs	r0, #13
    b278:	2101      	movs	r1, #1
    b27a:	4b22      	ldr	r3, [pc, #136]	; (b304 <RecoverI2C+0xe4>)
    b27c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b27e:	1d3b      	adds	r3, r7, #4
    b280:	2201      	movs	r2, #1
    b282:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    b284:	1d3b      	adds	r3, r7, #4
    b286:	200c      	movs	r0, #12
    b288:	1c19      	adds	r1, r3, #0
    b28a:	4b1d      	ldr	r3, [pc, #116]	; (b300 <RecoverI2C+0xe0>)
    b28c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    b28e:	200c      	movs	r0, #12
    b290:	2101      	movs	r1, #1
    b292:	4b1c      	ldr	r3, [pc, #112]	; (b304 <RecoverI2C+0xe4>)
    b294:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    b296:	1dfb      	adds	r3, r7, #7
    b298:	2200      	movs	r2, #0
    b29a:	701a      	strb	r2, [r3, #0]
    b29c:	e020      	b.n	b2e0 <RecoverI2C+0xc0>
	{
		HardDelay();
    b29e:	4b1a      	ldr	r3, [pc, #104]	; (b308 <RecoverI2C+0xe8>)
    b2a0:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b2a2:	1d3b      	adds	r3, r7, #4
    b2a4:	2201      	movs	r2, #1
    b2a6:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    b2a8:	1d3b      	adds	r3, r7, #4
    b2aa:	200d      	movs	r0, #13
    b2ac:	1c19      	adds	r1, r3, #0
    b2ae:	4b14      	ldr	r3, [pc, #80]	; (b300 <RecoverI2C+0xe0>)
    b2b0:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    b2b2:	200d      	movs	r0, #13
    b2b4:	2100      	movs	r1, #0
    b2b6:	4b13      	ldr	r3, [pc, #76]	; (b304 <RecoverI2C+0xe4>)
    b2b8:	4798      	blx	r3
		HardDelay();
    b2ba:	4b13      	ldr	r3, [pc, #76]	; (b308 <RecoverI2C+0xe8>)
    b2bc:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b2be:	1d3b      	adds	r3, r7, #4
    b2c0:	2201      	movs	r2, #1
    b2c2:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    b2c4:	1d3b      	adds	r3, r7, #4
    b2c6:	200d      	movs	r0, #13
    b2c8:	1c19      	adds	r1, r3, #0
    b2ca:	4b0d      	ldr	r3, [pc, #52]	; (b300 <RecoverI2C+0xe0>)
    b2cc:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    b2ce:	200d      	movs	r0, #13
    b2d0:	2101      	movs	r1, #1
    b2d2:	4b0c      	ldr	r3, [pc, #48]	; (b304 <RecoverI2C+0xe4>)
    b2d4:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    b2d6:	1dfb      	adds	r3, r7, #7
    b2d8:	781a      	ldrb	r2, [r3, #0]
    b2da:	1dfb      	adds	r3, r7, #7
    b2dc:	3201      	adds	r2, #1
    b2de:	701a      	strb	r2, [r3, #0]
    b2e0:	1dfb      	adds	r3, r7, #7
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	2b0f      	cmp	r3, #15
    b2e6:	d9da      	bls.n	b29e <RecoverI2C+0x7e>
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
		port_pin_set_config(PIN_PA13, &pin_conf);
		port_pin_set_output_level(PIN_PA13, TRUE);		
	}
	
	configure_i2c_master();
    b2e8:	4b08      	ldr	r3, [pc, #32]	; (b30c <RecoverI2C+0xec>)
    b2ea:	4798      	blx	r3
}
    b2ec:	46bd      	mov	sp, r7
    b2ee:	b002      	add	sp, #8
    b2f0:	bd80      	pop	{r7, pc}
    b2f2:	46c0      	nop			; (mov r8, r8)
    b2f4:	20003074 	.word	0x20003074
    b2f8:	0000b1f1 	.word	0x0000b1f1
    b2fc:	0000b07d 	.word	0x0000b07d
    b300:	00010c95 	.word	0x00010c95
    b304:	0000b09d 	.word	0x0000b09d
    b308:	0000dcbd 	.word	0x0000dcbd
    b30c:	0000b891 	.word	0x0000b891

0000b310 <I2CAccelBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    b310:	b580      	push	{r7, lr}
    b312:	b084      	sub	sp, #16
    b314:	af00      	add	r7, sp, #0
    b316:	6078      	str	r0, [r7, #4]
    b318:	1cfb      	adds	r3, r7, #3
    b31a:	7019      	strb	r1, [r3, #0]
    b31c:	1cbb      	adds	r3, r7, #2
    b31e:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    b320:	1c3b      	adds	r3, r7, #0
    b322:	330f      	adds	r3, #15
    b324:	2200      	movs	r2, #0
    b326:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    b328:	4b52      	ldr	r3, [pc, #328]	; (b474 <I2CAccelBufferRead+0x164>)
    b32a:	2219      	movs	r2, #25
    b32c:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    b32e:	4b51      	ldr	r3, [pc, #324]	; (b474 <I2CAccelBufferRead+0x164>)
    b330:	4a51      	ldr	r2, [pc, #324]	; (b478 <I2CAccelBufferRead+0x168>)
    b332:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    b334:	4b4f      	ldr	r3, [pc, #316]	; (b474 <I2CAccelBufferRead+0x164>)
    b336:	2200      	movs	r2, #0
    b338:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    b33a:	4b4e      	ldr	r3, [pc, #312]	; (b474 <I2CAccelBufferRead+0x164>)
    b33c:	2200      	movs	r2, #0
    b33e:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    b340:	4b4c      	ldr	r3, [pc, #304]	; (b474 <I2CAccelBufferRead+0x164>)
    b342:	2200      	movs	r2, #0
    b344:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    b346:	4b4b      	ldr	r3, [pc, #300]	; (b474 <I2CAccelBufferRead+0x164>)
    b348:	2201      	movs	r2, #1
    b34a:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    b34c:	4b4a      	ldr	r3, [pc, #296]	; (b478 <I2CAccelBufferRead+0x168>)
    b34e:	1cfa      	adds	r2, r7, #3
    b350:	7812      	ldrb	r2, [r2, #0]
    b352:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    b354:	1c3b      	adds	r3, r7, #0
    b356:	330e      	adds	r3, #14
    b358:	2200      	movs	r2, #0
    b35a:	701a      	strb	r2, [r3, #0]
	done = 0; 
    b35c:	1c3b      	adds	r3, r7, #0
    b35e:	330d      	adds	r3, #13
    b360:	2200      	movs	r2, #0
    b362:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    b364:	e020      	b.n	b3a8 <I2CAccelBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    b366:	4a45      	ldr	r2, [pc, #276]	; (b47c <I2CAccelBufferRead+0x16c>)
    b368:	4b42      	ldr	r3, [pc, #264]	; (b474 <I2CAccelBufferRead+0x164>)
    b36a:	1c10      	adds	r0, r2, #0
    b36c:	1c19      	adds	r1, r3, #0
    b36e:	4b44      	ldr	r3, [pc, #272]	; (b480 <I2CAccelBufferRead+0x170>)
    b370:	4798      	blx	r3
    b372:	1c03      	adds	r3, r0, #0
    b374:	2b00      	cmp	r3, #0
    b376:	d10a      	bne.n	b38e <I2CAccelBufferRead+0x7e>
		{
			done = 1; 
    b378:	1c3b      	adds	r3, r7, #0
    b37a:	330d      	adds	r3, #13
    b37c:	2201      	movs	r2, #1
    b37e:	701a      	strb	r2, [r3, #0]
    b380:	1c3b      	adds	r3, r7, #0
    b382:	330e      	adds	r3, #14
    b384:	1c3a      	adds	r2, r7, #0
    b386:	320e      	adds	r2, #14
    b388:	7812      	ldrb	r2, [r2, #0]
    b38a:	701a      	strb	r2, [r3, #0]
    b38c:	e00c      	b.n	b3a8 <I2CAccelBufferRead+0x98>
		}
		else
		{
			tries++;
    b38e:	1c3b      	adds	r3, r7, #0
    b390:	330e      	adds	r3, #14
    b392:	781a      	ldrb	r2, [r3, #0]
    b394:	1c3b      	adds	r3, r7, #0
    b396:	330e      	adds	r3, #14
    b398:	3201      	adds	r2, #1
    b39a:	701a      	strb	r2, [r3, #0]
    b39c:	1c3b      	adds	r3, r7, #0
    b39e:	330d      	adds	r3, #13
    b3a0:	1c3a      	adds	r2, r7, #0
    b3a2:	320d      	adds	r2, #13
    b3a4:	7812      	ldrb	r2, [r2, #0]
    b3a6:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    b3a8:	1c3b      	adds	r3, r7, #0
    b3aa:	330d      	adds	r3, #13
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d104      	bne.n	b3bc <I2CAccelBufferRead+0xac>
    b3b2:	1c3b      	adds	r3, r7, #0
    b3b4:	330e      	adds	r3, #14
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	2bc7      	cmp	r3, #199	; 0xc7
    b3ba:	d9d4      	bls.n	b366 <I2CAccelBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    b3bc:	1c3b      	adds	r3, r7, #0
    b3be:	330d      	adds	r3, #13
    b3c0:	781b      	ldrb	r3, [r3, #0]
    b3c2:	2b01      	cmp	r3, #1
    b3c4:	d144      	bne.n	b450 <I2CAccelBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    b3c6:	1cbb      	adds	r3, r7, #2
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	b29a      	uxth	r2, r3
    b3cc:	4b29      	ldr	r3, [pc, #164]	; (b474 <I2CAccelBufferRead+0x164>)
    b3ce:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    b3d0:	4b28      	ldr	r3, [pc, #160]	; (b474 <I2CAccelBufferRead+0x164>)
    b3d2:	687a      	ldr	r2, [r7, #4]
    b3d4:	605a      	str	r2, [r3, #4]
		tries = 0;
    b3d6:	1c3b      	adds	r3, r7, #0
    b3d8:	330e      	adds	r3, #14
    b3da:	2200      	movs	r2, #0
    b3dc:	701a      	strb	r2, [r3, #0]
		done = 0;
    b3de:	1c3b      	adds	r3, r7, #0
    b3e0:	330d      	adds	r3, #13
    b3e2:	2200      	movs	r2, #0
    b3e4:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    b3e6:	e020      	b.n	b42a <I2CAccelBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    b3e8:	4a24      	ldr	r2, [pc, #144]	; (b47c <I2CAccelBufferRead+0x16c>)
    b3ea:	4b22      	ldr	r3, [pc, #136]	; (b474 <I2CAccelBufferRead+0x164>)
    b3ec:	1c10      	adds	r0, r2, #0
    b3ee:	1c19      	adds	r1, r3, #0
    b3f0:	4b24      	ldr	r3, [pc, #144]	; (b484 <I2CAccelBufferRead+0x174>)
    b3f2:	4798      	blx	r3
    b3f4:	1c03      	adds	r3, r0, #0
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d10a      	bne.n	b410 <I2CAccelBufferRead+0x100>
			{
				done = 1;
    b3fa:	1c3b      	adds	r3, r7, #0
    b3fc:	330d      	adds	r3, #13
    b3fe:	2201      	movs	r2, #1
    b400:	701a      	strb	r2, [r3, #0]
    b402:	1c3b      	adds	r3, r7, #0
    b404:	330e      	adds	r3, #14
    b406:	1c3a      	adds	r2, r7, #0
    b408:	320e      	adds	r2, #14
    b40a:	7812      	ldrb	r2, [r2, #0]
    b40c:	701a      	strb	r2, [r3, #0]
    b40e:	e00c      	b.n	b42a <I2CAccelBufferRead+0x11a>
			}
			else
			{
				tries++;
    b410:	1c3b      	adds	r3, r7, #0
    b412:	330e      	adds	r3, #14
    b414:	781a      	ldrb	r2, [r3, #0]
    b416:	1c3b      	adds	r3, r7, #0
    b418:	330e      	adds	r3, #14
    b41a:	3201      	adds	r2, #1
    b41c:	701a      	strb	r2, [r3, #0]
    b41e:	1c3b      	adds	r3, r7, #0
    b420:	330d      	adds	r3, #13
    b422:	1c3a      	adds	r2, r7, #0
    b424:	320d      	adds	r2, #13
    b426:	7812      	ldrb	r2, [r2, #0]
    b428:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    b42a:	1c3b      	adds	r3, r7, #0
    b42c:	330d      	adds	r3, #13
    b42e:	781b      	ldrb	r3, [r3, #0]
    b430:	2b00      	cmp	r3, #0
    b432:	d104      	bne.n	b43e <I2CAccelBufferRead+0x12e>
    b434:	1c3b      	adds	r3, r7, #0
    b436:	330e      	adds	r3, #14
    b438:	781b      	ldrb	r3, [r3, #0]
    b43a:	2bc7      	cmp	r3, #199	; 0xc7
    b43c:	d9d4      	bls.n	b3e8 <I2CAccelBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    b43e:	1c3b      	adds	r3, r7, #0
    b440:	330d      	adds	r3, #13
    b442:	781b      	ldrb	r3, [r3, #0]
    b444:	2b01      	cmp	r3, #1
    b446:	d103      	bne.n	b450 <I2CAccelBufferRead+0x140>
		{
			status = 1; 
    b448:	1c3b      	adds	r3, r7, #0
    b44a:	330f      	adds	r3, #15
    b44c:	2201      	movs	r2, #1
    b44e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    b450:	1c3b      	adds	r3, r7, #0
    b452:	330f      	adds	r3, #15
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	2b00      	cmp	r3, #0
    b458:	d104      	bne.n	b464 <I2CAccelBufferRead+0x154>
	{
		i2cError = 1; 
    b45a:	4b0b      	ldr	r3, [pc, #44]	; (b488 <I2CAccelBufferRead+0x178>)
    b45c:	2201      	movs	r2, #1
    b45e:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    b460:	4b0a      	ldr	r3, [pc, #40]	; (b48c <I2CAccelBufferRead+0x17c>)
    b462:	4798      	blx	r3
	}
	return status; 	
    b464:	1c3b      	adds	r3, r7, #0
    b466:	330f      	adds	r3, #15
    b468:	781b      	ldrb	r3, [r3, #0]
}; 
    b46a:	1c18      	adds	r0, r3, #0
    b46c:	46bd      	mov	sp, r7
    b46e:	b004      	add	sp, #16
    b470:	bd80      	pop	{r7, pc}
    b472:	46c0      	nop			; (mov r8, r8)
    b474:	2000309c 	.word	0x2000309c
    b478:	200030a8 	.word	0x200030a8
    b47c:	20003074 	.word	0x20003074
    b480:	000113d5 	.word	0x000113d5
    b484:	00011289 	.word	0x00011289
    b488:	20003070 	.word	0x20003070
    b48c:	0000b221 	.word	0x0000b221

0000b490 <I2CAccelBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    b490:	b580      	push	{r7, lr}
    b492:	b086      	sub	sp, #24
    b494:	af00      	add	r7, sp, #0
    b496:	6078      	str	r0, [r7, #4]
    b498:	1cfb      	adds	r3, r7, #3
    b49a:	7019      	strb	r1, [r3, #0]
    b49c:	1cbb      	adds	r3, r7, #2
    b49e:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    b4a0:	1c3b      	adds	r3, r7, #0
    b4a2:	3317      	adds	r3, #23
    b4a4:	2200      	movs	r2, #0
    b4a6:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    b4a8:	687b      	ldr	r3, [r7, #4]
    b4aa:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    b4ac:	4b42      	ldr	r3, [pc, #264]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4ae:	2219      	movs	r2, #25
    b4b0:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    b4b2:	4b41      	ldr	r3, [pc, #260]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4b4:	4a41      	ldr	r2, [pc, #260]	; (b5bc <I2CAccelBufferWrite+0x12c>)
    b4b6:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    b4b8:	4b3f      	ldr	r3, [pc, #252]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4ba:	2200      	movs	r2, #0
    b4bc:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    b4be:	4b3e      	ldr	r3, [pc, #248]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4c0:	2200      	movs	r2, #0
    b4c2:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    b4c4:	4b3c      	ldr	r3, [pc, #240]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4c6:	2200      	movs	r2, #0
    b4c8:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    b4ca:	1cbb      	adds	r3, r7, #2
    b4cc:	781b      	ldrb	r3, [r3, #0]
    b4ce:	b29b      	uxth	r3, r3
    b4d0:	3301      	adds	r3, #1
    b4d2:	b29a      	uxth	r2, r3
    b4d4:	4b38      	ldr	r3, [pc, #224]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b4d6:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    b4d8:	4b38      	ldr	r3, [pc, #224]	; (b5bc <I2CAccelBufferWrite+0x12c>)
    b4da:	1cfa      	adds	r2, r7, #3
    b4dc:	7812      	ldrb	r2, [r2, #0]
    b4de:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    b4e0:	1c3b      	adds	r3, r7, #0
    b4e2:	330f      	adds	r3, #15
    b4e4:	2200      	movs	r2, #0
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	e010      	b.n	b50c <I2CAccelBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    b4ea:	1c3b      	adds	r3, r7, #0
    b4ec:	330f      	adds	r3, #15
    b4ee:	781b      	ldrb	r3, [r3, #0]
    b4f0:	1c5a      	adds	r2, r3, #1
    b4f2:	693b      	ldr	r3, [r7, #16]
    b4f4:	1c59      	adds	r1, r3, #1
    b4f6:	6139      	str	r1, [r7, #16]
    b4f8:	7819      	ldrb	r1, [r3, #0]
    b4fa:	4b30      	ldr	r3, [pc, #192]	; (b5bc <I2CAccelBufferWrite+0x12c>)
    b4fc:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    b4fe:	1c3b      	adds	r3, r7, #0
    b500:	330f      	adds	r3, #15
    b502:	781a      	ldrb	r2, [r3, #0]
    b504:	1c3b      	adds	r3, r7, #0
    b506:	330f      	adds	r3, #15
    b508:	3201      	adds	r2, #1
    b50a:	701a      	strb	r2, [r3, #0]
    b50c:	1c3a      	adds	r2, r7, #0
    b50e:	320f      	adds	r2, #15
    b510:	1cbb      	adds	r3, r7, #2
    b512:	7812      	ldrb	r2, [r2, #0]
    b514:	781b      	ldrb	r3, [r3, #0]
    b516:	429a      	cmp	r2, r3
    b518:	d3e7      	bcc.n	b4ea <I2CAccelBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    b51a:	1c3b      	adds	r3, r7, #0
    b51c:	3316      	adds	r3, #22
    b51e:	2200      	movs	r2, #0
    b520:	701a      	strb	r2, [r3, #0]
	done = 0;
    b522:	1c3b      	adds	r3, r7, #0
    b524:	3315      	adds	r3, #21
    b526:	2200      	movs	r2, #0
    b528:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    b52a:	e020      	b.n	b56e <I2CAccelBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    b52c:	4a24      	ldr	r2, [pc, #144]	; (b5c0 <I2CAccelBufferWrite+0x130>)
    b52e:	4b22      	ldr	r3, [pc, #136]	; (b5b8 <I2CAccelBufferWrite+0x128>)
    b530:	1c10      	adds	r0, r2, #0
    b532:	1c19      	adds	r1, r3, #0
    b534:	4b23      	ldr	r3, [pc, #140]	; (b5c4 <I2CAccelBufferWrite+0x134>)
    b536:	4798      	blx	r3
    b538:	1c03      	adds	r3, r0, #0
    b53a:	2b00      	cmp	r3, #0
    b53c:	d10a      	bne.n	b554 <I2CAccelBufferWrite+0xc4>
		{
			done = 1;
    b53e:	1c3b      	adds	r3, r7, #0
    b540:	3315      	adds	r3, #21
    b542:	2201      	movs	r2, #1
    b544:	701a      	strb	r2, [r3, #0]
    b546:	1c3b      	adds	r3, r7, #0
    b548:	3316      	adds	r3, #22
    b54a:	1c3a      	adds	r2, r7, #0
    b54c:	3216      	adds	r2, #22
    b54e:	7812      	ldrb	r2, [r2, #0]
    b550:	701a      	strb	r2, [r3, #0]
    b552:	e00c      	b.n	b56e <I2CAccelBufferWrite+0xde>
		}
		else
		{
			tries++;
    b554:	1c3b      	adds	r3, r7, #0
    b556:	3316      	adds	r3, #22
    b558:	781a      	ldrb	r2, [r3, #0]
    b55a:	1c3b      	adds	r3, r7, #0
    b55c:	3316      	adds	r3, #22
    b55e:	3201      	adds	r2, #1
    b560:	701a      	strb	r2, [r3, #0]
    b562:	1c3b      	adds	r3, r7, #0
    b564:	3315      	adds	r3, #21
    b566:	1c3a      	adds	r2, r7, #0
    b568:	3215      	adds	r2, #21
    b56a:	7812      	ldrb	r2, [r2, #0]
    b56c:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    b56e:	1c3b      	adds	r3, r7, #0
    b570:	3315      	adds	r3, #21
    b572:	781b      	ldrb	r3, [r3, #0]
    b574:	2b00      	cmp	r3, #0
    b576:	d104      	bne.n	b582 <I2CAccelBufferWrite+0xf2>
    b578:	1c3b      	adds	r3, r7, #0
    b57a:	3316      	adds	r3, #22
    b57c:	781b      	ldrb	r3, [r3, #0]
    b57e:	2bc7      	cmp	r3, #199	; 0xc7
    b580:	d9d4      	bls.n	b52c <I2CAccelBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    b582:	1c3b      	adds	r3, r7, #0
    b584:	3315      	adds	r3, #21
    b586:	781b      	ldrb	r3, [r3, #0]
    b588:	2b01      	cmp	r3, #1
    b58a:	d103      	bne.n	b594 <I2CAccelBufferWrite+0x104>
	{
		status = 1;
    b58c:	1c3b      	adds	r3, r7, #0
    b58e:	3317      	adds	r3, #23
    b590:	2201      	movs	r2, #1
    b592:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    b594:	1c3b      	adds	r3, r7, #0
    b596:	3317      	adds	r3, #23
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	2b00      	cmp	r3, #0
    b59c:	d104      	bne.n	b5a8 <I2CAccelBufferWrite+0x118>
	{
		i2cError = 1; 
    b59e:	4b0a      	ldr	r3, [pc, #40]	; (b5c8 <I2CAccelBufferWrite+0x138>)
    b5a0:	2201      	movs	r2, #1
    b5a2:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    b5a4:	4b09      	ldr	r3, [pc, #36]	; (b5cc <I2CAccelBufferWrite+0x13c>)
    b5a6:	4798      	blx	r3
	}	
	return status;
    b5a8:	1c3b      	adds	r3, r7, #0
    b5aa:	3317      	adds	r3, #23
    b5ac:	781b      	ldrb	r3, [r3, #0]
};
    b5ae:	1c18      	adds	r0, r3, #0
    b5b0:	46bd      	mov	sp, r7
    b5b2:	b006      	add	sp, #24
    b5b4:	bd80      	pop	{r7, pc}
    b5b6:	46c0      	nop			; (mov r8, r8)
    b5b8:	2000309c 	.word	0x2000309c
    b5bc:	200030a8 	.word	0x200030a8
    b5c0:	20003074 	.word	0x20003074
    b5c4:	000113d5 	.word	0x000113d5
    b5c8:	20003070 	.word	0x20003070
    b5cc:	0000b221 	.word	0x0000b221

0000b5d0 <I2CEEPROMBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    b5d0:	b580      	push	{r7, lr}
    b5d2:	b084      	sub	sp, #16
    b5d4:	af00      	add	r7, sp, #0
    b5d6:	6078      	str	r0, [r7, #4]
    b5d8:	1cfb      	adds	r3, r7, #3
    b5da:	7019      	strb	r1, [r3, #0]
    b5dc:	1cbb      	adds	r3, r7, #2
    b5de:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    b5e0:	1c3b      	adds	r3, r7, #0
    b5e2:	330f      	adds	r3, #15
    b5e4:	2200      	movs	r2, #0
    b5e6:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    b5e8:	4b52      	ldr	r3, [pc, #328]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b5ea:	2250      	movs	r2, #80	; 0x50
    b5ec:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    b5ee:	4b51      	ldr	r3, [pc, #324]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b5f0:	4a51      	ldr	r2, [pc, #324]	; (b738 <I2CEEPROMBufferRead+0x168>)
    b5f2:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    b5f4:	4b4f      	ldr	r3, [pc, #316]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b5f6:	2200      	movs	r2, #0
    b5f8:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    b5fa:	4b4e      	ldr	r3, [pc, #312]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b5fc:	2200      	movs	r2, #0
    b5fe:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    b600:	4b4c      	ldr	r3, [pc, #304]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b602:	2200      	movs	r2, #0
    b604:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    b606:	4b4b      	ldr	r3, [pc, #300]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b608:	2201      	movs	r2, #1
    b60a:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    b60c:	4b4a      	ldr	r3, [pc, #296]	; (b738 <I2CEEPROMBufferRead+0x168>)
    b60e:	1cfa      	adds	r2, r7, #3
    b610:	7812      	ldrb	r2, [r2, #0]
    b612:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    b614:	1c3b      	adds	r3, r7, #0
    b616:	330e      	adds	r3, #14
    b618:	2200      	movs	r2, #0
    b61a:	701a      	strb	r2, [r3, #0]
	done = 0; 
    b61c:	1c3b      	adds	r3, r7, #0
    b61e:	330d      	adds	r3, #13
    b620:	2200      	movs	r2, #0
    b622:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    b624:	e020      	b.n	b668 <I2CEEPROMBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    b626:	4a45      	ldr	r2, [pc, #276]	; (b73c <I2CEEPROMBufferRead+0x16c>)
    b628:	4b42      	ldr	r3, [pc, #264]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b62a:	1c10      	adds	r0, r2, #0
    b62c:	1c19      	adds	r1, r3, #0
    b62e:	4b44      	ldr	r3, [pc, #272]	; (b740 <I2CEEPROMBufferRead+0x170>)
    b630:	4798      	blx	r3
    b632:	1c03      	adds	r3, r0, #0
    b634:	2b00      	cmp	r3, #0
    b636:	d10a      	bne.n	b64e <I2CEEPROMBufferRead+0x7e>
		{
			done = 1; 
    b638:	1c3b      	adds	r3, r7, #0
    b63a:	330d      	adds	r3, #13
    b63c:	2201      	movs	r2, #1
    b63e:	701a      	strb	r2, [r3, #0]
    b640:	1c3b      	adds	r3, r7, #0
    b642:	330e      	adds	r3, #14
    b644:	1c3a      	adds	r2, r7, #0
    b646:	320e      	adds	r2, #14
    b648:	7812      	ldrb	r2, [r2, #0]
    b64a:	701a      	strb	r2, [r3, #0]
    b64c:	e00c      	b.n	b668 <I2CEEPROMBufferRead+0x98>
		}
		else
		{
			tries++;
    b64e:	1c3b      	adds	r3, r7, #0
    b650:	330e      	adds	r3, #14
    b652:	781a      	ldrb	r2, [r3, #0]
    b654:	1c3b      	adds	r3, r7, #0
    b656:	330e      	adds	r3, #14
    b658:	3201      	adds	r2, #1
    b65a:	701a      	strb	r2, [r3, #0]
    b65c:	1c3b      	adds	r3, r7, #0
    b65e:	330d      	adds	r3, #13
    b660:	1c3a      	adds	r2, r7, #0
    b662:	320d      	adds	r2, #13
    b664:	7812      	ldrb	r2, [r2, #0]
    b666:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    b668:	1c3b      	adds	r3, r7, #0
    b66a:	330d      	adds	r3, #13
    b66c:	781b      	ldrb	r3, [r3, #0]
    b66e:	2b00      	cmp	r3, #0
    b670:	d104      	bne.n	b67c <I2CEEPROMBufferRead+0xac>
    b672:	1c3b      	adds	r3, r7, #0
    b674:	330e      	adds	r3, #14
    b676:	781b      	ldrb	r3, [r3, #0]
    b678:	2bc7      	cmp	r3, #199	; 0xc7
    b67a:	d9d4      	bls.n	b626 <I2CEEPROMBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    b67c:	1c3b      	adds	r3, r7, #0
    b67e:	330d      	adds	r3, #13
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	2b01      	cmp	r3, #1
    b684:	d144      	bne.n	b710 <I2CEEPROMBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    b686:	1cbb      	adds	r3, r7, #2
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	b29a      	uxth	r2, r3
    b68c:	4b29      	ldr	r3, [pc, #164]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b68e:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    b690:	4b28      	ldr	r3, [pc, #160]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b692:	687a      	ldr	r2, [r7, #4]
    b694:	605a      	str	r2, [r3, #4]
		tries = 0;
    b696:	1c3b      	adds	r3, r7, #0
    b698:	330e      	adds	r3, #14
    b69a:	2200      	movs	r2, #0
    b69c:	701a      	strb	r2, [r3, #0]
		done = 0;
    b69e:	1c3b      	adds	r3, r7, #0
    b6a0:	330d      	adds	r3, #13
    b6a2:	2200      	movs	r2, #0
    b6a4:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    b6a6:	e020      	b.n	b6ea <I2CEEPROMBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    b6a8:	4a24      	ldr	r2, [pc, #144]	; (b73c <I2CEEPROMBufferRead+0x16c>)
    b6aa:	4b22      	ldr	r3, [pc, #136]	; (b734 <I2CEEPROMBufferRead+0x164>)
    b6ac:	1c10      	adds	r0, r2, #0
    b6ae:	1c19      	adds	r1, r3, #0
    b6b0:	4b24      	ldr	r3, [pc, #144]	; (b744 <I2CEEPROMBufferRead+0x174>)
    b6b2:	4798      	blx	r3
    b6b4:	1c03      	adds	r3, r0, #0
    b6b6:	2b00      	cmp	r3, #0
    b6b8:	d10a      	bne.n	b6d0 <I2CEEPROMBufferRead+0x100>
			{
				done = 1;
    b6ba:	1c3b      	adds	r3, r7, #0
    b6bc:	330d      	adds	r3, #13
    b6be:	2201      	movs	r2, #1
    b6c0:	701a      	strb	r2, [r3, #0]
    b6c2:	1c3b      	adds	r3, r7, #0
    b6c4:	330e      	adds	r3, #14
    b6c6:	1c3a      	adds	r2, r7, #0
    b6c8:	320e      	adds	r2, #14
    b6ca:	7812      	ldrb	r2, [r2, #0]
    b6cc:	701a      	strb	r2, [r3, #0]
    b6ce:	e00c      	b.n	b6ea <I2CEEPROMBufferRead+0x11a>
			}
			else
			{
				tries++;
    b6d0:	1c3b      	adds	r3, r7, #0
    b6d2:	330e      	adds	r3, #14
    b6d4:	781a      	ldrb	r2, [r3, #0]
    b6d6:	1c3b      	adds	r3, r7, #0
    b6d8:	330e      	adds	r3, #14
    b6da:	3201      	adds	r2, #1
    b6dc:	701a      	strb	r2, [r3, #0]
    b6de:	1c3b      	adds	r3, r7, #0
    b6e0:	330d      	adds	r3, #13
    b6e2:	1c3a      	adds	r2, r7, #0
    b6e4:	320d      	adds	r2, #13
    b6e6:	7812      	ldrb	r2, [r2, #0]
    b6e8:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    b6ea:	1c3b      	adds	r3, r7, #0
    b6ec:	330d      	adds	r3, #13
    b6ee:	781b      	ldrb	r3, [r3, #0]
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d104      	bne.n	b6fe <I2CEEPROMBufferRead+0x12e>
    b6f4:	1c3b      	adds	r3, r7, #0
    b6f6:	330e      	adds	r3, #14
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	2bc7      	cmp	r3, #199	; 0xc7
    b6fc:	d9d4      	bls.n	b6a8 <I2CEEPROMBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    b6fe:	1c3b      	adds	r3, r7, #0
    b700:	330d      	adds	r3, #13
    b702:	781b      	ldrb	r3, [r3, #0]
    b704:	2b01      	cmp	r3, #1
    b706:	d103      	bne.n	b710 <I2CEEPROMBufferRead+0x140>
		{
			status = 1; 
    b708:	1c3b      	adds	r3, r7, #0
    b70a:	330f      	adds	r3, #15
    b70c:	2201      	movs	r2, #1
    b70e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    b710:	1c3b      	adds	r3, r7, #0
    b712:	330f      	adds	r3, #15
    b714:	781b      	ldrb	r3, [r3, #0]
    b716:	2b00      	cmp	r3, #0
    b718:	d104      	bne.n	b724 <I2CEEPROMBufferRead+0x154>
	{
		i2cError = 1; 
    b71a:	4b0b      	ldr	r3, [pc, #44]	; (b748 <I2CEEPROMBufferRead+0x178>)
    b71c:	2201      	movs	r2, #1
    b71e:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    b720:	4b0a      	ldr	r3, [pc, #40]	; (b74c <I2CEEPROMBufferRead+0x17c>)
    b722:	4798      	blx	r3
	}
	return status; 	
    b724:	1c3b      	adds	r3, r7, #0
    b726:	330f      	adds	r3, #15
    b728:	781b      	ldrb	r3, [r3, #0]
}; 
    b72a:	1c18      	adds	r0, r3, #0
    b72c:	46bd      	mov	sp, r7
    b72e:	b004      	add	sp, #16
    b730:	bd80      	pop	{r7, pc}
    b732:	46c0      	nop			; (mov r8, r8)
    b734:	2000309c 	.word	0x2000309c
    b738:	200030a8 	.word	0x200030a8
    b73c:	20003074 	.word	0x20003074
    b740:	000113d5 	.word	0x000113d5
    b744:	00011289 	.word	0x00011289
    b748:	20003070 	.word	0x20003070
    b74c:	0000b221 	.word	0x0000b221

0000b750 <I2CEEPROMBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    b750:	b580      	push	{r7, lr}
    b752:	b086      	sub	sp, #24
    b754:	af00      	add	r7, sp, #0
    b756:	6078      	str	r0, [r7, #4]
    b758:	1cfb      	adds	r3, r7, #3
    b75a:	7019      	strb	r1, [r3, #0]
    b75c:	1cbb      	adds	r3, r7, #2
    b75e:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    b760:	1c3b      	adds	r3, r7, #0
    b762:	3317      	adds	r3, #23
    b764:	2200      	movs	r2, #0
    b766:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    b76c:	4b42      	ldr	r3, [pc, #264]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b76e:	2250      	movs	r2, #80	; 0x50
    b770:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    b772:	4b41      	ldr	r3, [pc, #260]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b774:	4a41      	ldr	r2, [pc, #260]	; (b87c <I2CEEPROMBufferWrite+0x12c>)
    b776:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    b778:	4b3f      	ldr	r3, [pc, #252]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b77a:	2200      	movs	r2, #0
    b77c:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    b77e:	4b3e      	ldr	r3, [pc, #248]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b780:	2200      	movs	r2, #0
    b782:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    b784:	4b3c      	ldr	r3, [pc, #240]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b786:	2200      	movs	r2, #0
    b788:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    b78a:	1cbb      	adds	r3, r7, #2
    b78c:	781b      	ldrb	r3, [r3, #0]
    b78e:	b29b      	uxth	r3, r3
    b790:	3301      	adds	r3, #1
    b792:	b29a      	uxth	r2, r3
    b794:	4b38      	ldr	r3, [pc, #224]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b796:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    b798:	4b38      	ldr	r3, [pc, #224]	; (b87c <I2CEEPROMBufferWrite+0x12c>)
    b79a:	1cfa      	adds	r2, r7, #3
    b79c:	7812      	ldrb	r2, [r2, #0]
    b79e:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    b7a0:	1c3b      	adds	r3, r7, #0
    b7a2:	330f      	adds	r3, #15
    b7a4:	2200      	movs	r2, #0
    b7a6:	701a      	strb	r2, [r3, #0]
    b7a8:	e010      	b.n	b7cc <I2CEEPROMBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    b7aa:	1c3b      	adds	r3, r7, #0
    b7ac:	330f      	adds	r3, #15
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	1c5a      	adds	r2, r3, #1
    b7b2:	693b      	ldr	r3, [r7, #16]
    b7b4:	1c59      	adds	r1, r3, #1
    b7b6:	6139      	str	r1, [r7, #16]
    b7b8:	7819      	ldrb	r1, [r3, #0]
    b7ba:	4b30      	ldr	r3, [pc, #192]	; (b87c <I2CEEPROMBufferWrite+0x12c>)
    b7bc:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    b7be:	1c3b      	adds	r3, r7, #0
    b7c0:	330f      	adds	r3, #15
    b7c2:	781a      	ldrb	r2, [r3, #0]
    b7c4:	1c3b      	adds	r3, r7, #0
    b7c6:	330f      	adds	r3, #15
    b7c8:	3201      	adds	r2, #1
    b7ca:	701a      	strb	r2, [r3, #0]
    b7cc:	1c3a      	adds	r2, r7, #0
    b7ce:	320f      	adds	r2, #15
    b7d0:	1cbb      	adds	r3, r7, #2
    b7d2:	7812      	ldrb	r2, [r2, #0]
    b7d4:	781b      	ldrb	r3, [r3, #0]
    b7d6:	429a      	cmp	r2, r3
    b7d8:	d3e7      	bcc.n	b7aa <I2CEEPROMBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    b7da:	1c3b      	adds	r3, r7, #0
    b7dc:	3316      	adds	r3, #22
    b7de:	2200      	movs	r2, #0
    b7e0:	701a      	strb	r2, [r3, #0]
	done = 0;
    b7e2:	1c3b      	adds	r3, r7, #0
    b7e4:	3315      	adds	r3, #21
    b7e6:	2200      	movs	r2, #0
    b7e8:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    b7ea:	e020      	b.n	b82e <I2CEEPROMBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    b7ec:	4a24      	ldr	r2, [pc, #144]	; (b880 <I2CEEPROMBufferWrite+0x130>)
    b7ee:	4b22      	ldr	r3, [pc, #136]	; (b878 <I2CEEPROMBufferWrite+0x128>)
    b7f0:	1c10      	adds	r0, r2, #0
    b7f2:	1c19      	adds	r1, r3, #0
    b7f4:	4b23      	ldr	r3, [pc, #140]	; (b884 <I2CEEPROMBufferWrite+0x134>)
    b7f6:	4798      	blx	r3
    b7f8:	1c03      	adds	r3, r0, #0
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d10a      	bne.n	b814 <I2CEEPROMBufferWrite+0xc4>
		{
			done = 1;
    b7fe:	1c3b      	adds	r3, r7, #0
    b800:	3315      	adds	r3, #21
    b802:	2201      	movs	r2, #1
    b804:	701a      	strb	r2, [r3, #0]
    b806:	1c3b      	adds	r3, r7, #0
    b808:	3316      	adds	r3, #22
    b80a:	1c3a      	adds	r2, r7, #0
    b80c:	3216      	adds	r2, #22
    b80e:	7812      	ldrb	r2, [r2, #0]
    b810:	701a      	strb	r2, [r3, #0]
    b812:	e00c      	b.n	b82e <I2CEEPROMBufferWrite+0xde>
		}
		else
		{
			tries++;
    b814:	1c3b      	adds	r3, r7, #0
    b816:	3316      	adds	r3, #22
    b818:	781a      	ldrb	r2, [r3, #0]
    b81a:	1c3b      	adds	r3, r7, #0
    b81c:	3316      	adds	r3, #22
    b81e:	3201      	adds	r2, #1
    b820:	701a      	strb	r2, [r3, #0]
    b822:	1c3b      	adds	r3, r7, #0
    b824:	3315      	adds	r3, #21
    b826:	1c3a      	adds	r2, r7, #0
    b828:	3215      	adds	r2, #21
    b82a:	7812      	ldrb	r2, [r2, #0]
    b82c:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    b82e:	1c3b      	adds	r3, r7, #0
    b830:	3315      	adds	r3, #21
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	2b00      	cmp	r3, #0
    b836:	d104      	bne.n	b842 <I2CEEPROMBufferWrite+0xf2>
    b838:	1c3b      	adds	r3, r7, #0
    b83a:	3316      	adds	r3, #22
    b83c:	781b      	ldrb	r3, [r3, #0]
    b83e:	2bc7      	cmp	r3, #199	; 0xc7
    b840:	d9d4      	bls.n	b7ec <I2CEEPROMBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    b842:	1c3b      	adds	r3, r7, #0
    b844:	3315      	adds	r3, #21
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	2b01      	cmp	r3, #1
    b84a:	d103      	bne.n	b854 <I2CEEPROMBufferWrite+0x104>
	{
		status = 1;
    b84c:	1c3b      	adds	r3, r7, #0
    b84e:	3317      	adds	r3, #23
    b850:	2201      	movs	r2, #1
    b852:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    b854:	1c3b      	adds	r3, r7, #0
    b856:	3317      	adds	r3, #23
    b858:	781b      	ldrb	r3, [r3, #0]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d104      	bne.n	b868 <I2CEEPROMBufferWrite+0x118>
	{
		i2cError = 1; 
    b85e:	4b0a      	ldr	r3, [pc, #40]	; (b888 <I2CEEPROMBufferWrite+0x138>)
    b860:	2201      	movs	r2, #1
    b862:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    b864:	4b09      	ldr	r3, [pc, #36]	; (b88c <I2CEEPROMBufferWrite+0x13c>)
    b866:	4798      	blx	r3
	}	
	return status;
    b868:	1c3b      	adds	r3, r7, #0
    b86a:	3317      	adds	r3, #23
    b86c:	781b      	ldrb	r3, [r3, #0]
};
    b86e:	1c18      	adds	r0, r3, #0
    b870:	46bd      	mov	sp, r7
    b872:	b006      	add	sp, #24
    b874:	bd80      	pop	{r7, pc}
    b876:	46c0      	nop			; (mov r8, r8)
    b878:	2000309c 	.word	0x2000309c
    b87c:	200030a8 	.word	0x200030a8
    b880:	20003074 	.word	0x20003074
    b884:	000113d5 	.word	0x000113d5
    b888:	20003070 	.word	0x20003070
    b88c:	0000b221 	.word	0x0000b221

0000b890 <configure_i2c_master>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_i2c_master(void)
{
    b890:	b580      	push	{r7, lr}
    b892:	b08a      	sub	sp, #40	; 0x28
    b894:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	
	//---------------------------------------
	// Initialize config structure and software module.
	//---------------------------------------	
	i2c_master_get_config_defaults(&config_i2c_master);
    b896:	1d3b      	adds	r3, r7, #4
    b898:	1c18      	adds	r0, r3, #0
    b89a:	4b0d      	ldr	r3, [pc, #52]	; (b8d0 <configure_i2c_master+0x40>)
    b89c:	4798      	blx	r3
	
	//--------------------------------------- 
	// Change buffer timeout to something longer. 
	//---------------------------------------
	config_i2c_master.buffer_timeout = 100;  //was 10000
    b89e:	1d3b      	adds	r3, r7, #4
    b8a0:	2264      	movs	r2, #100	; 0x64
    b8a2:	81da      	strh	r2, [r3, #14]
	
	//---------------------------------------
	//  
	//---------------------------------------
	config_i2c_master.pinmux_pad0 = EXT2_I2C_SERCOM_PINMUX_PAD0;
    b8a4:	1d3b      	adds	r3, r7, #4
    b8a6:	4a0b      	ldr	r2, [pc, #44]	; (b8d4 <configure_i2c_master+0x44>)
    b8a8:	615a      	str	r2, [r3, #20]
	config_i2c_master.pinmux_pad1 = EXT2_I2C_SERCOM_PINMUX_PAD1;
    b8aa:	1d3b      	adds	r3, r7, #4
    b8ac:	4a0a      	ldr	r2, [pc, #40]	; (b8d8 <configure_i2c_master+0x48>)
    b8ae:	619a      	str	r2, [r3, #24]
	//---------------------------------------
	// Initialize and enable device with config
	//---------------------------------------	
	i2c_master_init(&i2c_master_instance, SERCOM4, &config_i2c_master);
    b8b0:	490a      	ldr	r1, [pc, #40]	; (b8dc <configure_i2c_master+0x4c>)
    b8b2:	4a0b      	ldr	r2, [pc, #44]	; (b8e0 <configure_i2c_master+0x50>)
    b8b4:	1d3b      	adds	r3, r7, #4
    b8b6:	1c08      	adds	r0, r1, #0
    b8b8:	1c11      	adds	r1, r2, #0
    b8ba:	1c1a      	adds	r2, r3, #0
    b8bc:	4b09      	ldr	r3, [pc, #36]	; (b8e4 <configure_i2c_master+0x54>)
    b8be:	4798      	blx	r3
	//---------------------------------------
	//
	//---------------------------------------
	i2c_master_enable(&i2c_master_instance);
    b8c0:	4b06      	ldr	r3, [pc, #24]	; (b8dc <configure_i2c_master+0x4c>)
    b8c2:	1c18      	adds	r0, r3, #0
    b8c4:	4b08      	ldr	r3, [pc, #32]	; (b8e8 <configure_i2c_master+0x58>)
    b8c6:	4798      	blx	r3
	 
}
    b8c8:	46bd      	mov	sp, r7
    b8ca:	b00a      	add	sp, #40	; 0x28
    b8cc:	bd80      	pop	{r7, pc}
    b8ce:	46c0      	nop			; (mov r8, r8)
    b8d0:	0000b141 	.word	0x0000b141
    b8d4:	000c0003 	.word	0x000c0003
    b8d8:	000d0003 	.word	0x000d0003
    b8dc:	20003074 	.word	0x20003074
    b8e0:	42001800 	.word	0x42001800
    b8e4:	00010fa5 	.word	0x00010fa5
    b8e8:	0000b195 	.word	0x0000b195

0000b8ec <I2Cmain>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void I2Cmain(void)
{
    b8ec:	b580      	push	{r7, lr}
    b8ee:	b084      	sub	sp, #16
    b8f0:	af00      	add	r7, sp, #0
	uint8_t testBuffer[10],n; 
	//---------------------------------------
	// Configure device and enable.
	//---------------------------------------
	configure_i2c_master();
    b8f2:	4b66      	ldr	r3, [pc, #408]	; (ba8c <I2Cmain+0x1a0>)
    b8f4:	4798      	blx	r3
	//--------------------------------------
	// read in the EEPROM header and see if CREED 
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,0);	
    b8f6:	2003      	movs	r0, #3
    b8f8:	2102      	movs	r1, #2
    b8fa:	2200      	movs	r2, #0
    b8fc:	4b64      	ldr	r3, [pc, #400]	; (ba90 <I2Cmain+0x1a4>)
    b8fe:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    b900:	2003      	movs	r0, #3
    b902:	2101      	movs	r1, #1
    b904:	2200      	movs	r2, #0
    b906:	4b62      	ldr	r3, [pc, #392]	; (ba90 <I2Cmain+0x1a4>)
    b908:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
    b90a:	2003      	movs	r0, #3
    b90c:	2104      	movs	r1, #4
    b90e:	2200      	movs	r2, #0
    b910:	4b5f      	ldr	r3, [pc, #380]	; (ba90 <I2Cmain+0x1a4>)
    b912:	4798      	blx	r3
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    b914:	1c3b      	adds	r3, r7, #0
    b916:	330f      	adds	r3, #15
    b918:	2200      	movs	r2, #0
    b91a:	701a      	strb	r2, [r3, #0]
    b91c:	e00c      	b.n	b938 <I2Cmain+0x4c>
	{
		eepromManDevSerial[n] = 0; 
    b91e:	1c3b      	adds	r3, r7, #0
    b920:	330f      	adds	r3, #15
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	4a5b      	ldr	r2, [pc, #364]	; (ba94 <I2Cmain+0x1a8>)
    b926:	2100      	movs	r1, #0
    b928:	54d1      	strb	r1, [r2, r3]
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    b92a:	1c3b      	adds	r3, r7, #0
    b92c:	330f      	adds	r3, #15
    b92e:	781a      	ldrb	r2, [r3, #0]
    b930:	1c3b      	adds	r3, r7, #0
    b932:	330f      	adds	r3, #15
    b934:	3201      	adds	r2, #1
    b936:	701a      	strb	r2, [r3, #0]
    b938:	1c3b      	adds	r3, r7, #0
    b93a:	330f      	adds	r3, #15
    b93c:	781b      	ldrb	r3, [r3, #0]
    b93e:	2b05      	cmp	r3, #5
    b940:	d9ed      	bls.n	b91e <I2Cmain+0x32>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    b942:	4b54      	ldr	r3, [pc, #336]	; (ba94 <I2Cmain+0x1a8>)
    b944:	1c18      	adds	r0, r3, #0
    b946:	21fa      	movs	r1, #250	; 0xfa
    b948:	2206      	movs	r2, #6
    b94a:	4b53      	ldr	r3, [pc, #332]	; (ba98 <I2Cmain+0x1ac>)
    b94c:	4798      	blx	r3
    b94e:	1c03      	adds	r3, r0, #0
    b950:	2b00      	cmp	r3, #0
    b952:	d020      	beq.n	b996 <I2Cmain+0xaa>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    b954:	2003      	movs	r0, #3
    b956:	2101      	movs	r1, #1
    b958:	2201      	movs	r2, #1
    b95a:	4b4d      	ldr	r3, [pc, #308]	; (ba90 <I2Cmain+0x1a4>)
    b95c:	4798      	blx	r3
		for (n=0;n<6;n++)
    b95e:	1c3b      	adds	r3, r7, #0
    b960:	330f      	adds	r3, #15
    b962:	2200      	movs	r2, #0
    b964:	701a      	strb	r2, [r3, #0]
    b966:	e011      	b.n	b98c <I2Cmain+0xa0>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    b968:	1c3b      	adds	r3, r7, #0
    b96a:	330f      	adds	r3, #15
    b96c:	781b      	ldrb	r3, [r3, #0]
    b96e:	1c3a      	adds	r2, r7, #0
    b970:	320f      	adds	r2, #15
    b972:	7812      	ldrb	r2, [r2, #0]
    b974:	4947      	ldr	r1, [pc, #284]	; (ba94 <I2Cmain+0x1a8>)
    b976:	5c8a      	ldrb	r2, [r1, r2]
    b978:	4948      	ldr	r1, [pc, #288]	; (ba9c <I2Cmain+0x1b0>)
    b97a:	18cb      	adds	r3, r1, r3
    b97c:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    b97e:	1c3b      	adds	r3, r7, #0
    b980:	330f      	adds	r3, #15
    b982:	781a      	ldrb	r2, [r3, #0]
    b984:	1c3b      	adds	r3, r7, #0
    b986:	330f      	adds	r3, #15
    b988:	3201      	adds	r2, #1
    b98a:	701a      	strb	r2, [r3, #0]
    b98c:	1c3b      	adds	r3, r7, #0
    b98e:	330f      	adds	r3, #15
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	2b05      	cmp	r3, #5
    b994:	d9e8      	bls.n	b968 <I2Cmain+0x7c>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
		}	
	}
	if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    b996:	1d3b      	adds	r3, r7, #4
    b998:	1c18      	adds	r0, r3, #0
    b99a:	2102      	movs	r1, #2
    b99c:	220a      	movs	r2, #10
    b99e:	4b3e      	ldr	r3, [pc, #248]	; (ba98 <I2Cmain+0x1ac>)
    b9a0:	4798      	blx	r3
    b9a2:	1c03      	adds	r3, r0, #0
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d03f      	beq.n	ba28 <I2Cmain+0x13c>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    b9a8:	2003      	movs	r0, #3
    b9aa:	2101      	movs	r1, #1
    b9ac:	2201      	movs	r2, #1
    b9ae:	4b38      	ldr	r3, [pc, #224]	; (ba90 <I2Cmain+0x1a4>)
    b9b0:	4798      	blx	r3
		//------------------------
		// check the HEADER
		if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E'))
    b9b2:	1d3b      	adds	r3, r7, #4
    b9b4:	781b      	ldrb	r3, [r3, #0]
    b9b6:	2b43      	cmp	r3, #67	; 0x43
    b9b8:	d112      	bne.n	b9e0 <I2Cmain+0xf4>
    b9ba:	1d3b      	adds	r3, r7, #4
    b9bc:	785b      	ldrb	r3, [r3, #1]
    b9be:	2b52      	cmp	r3, #82	; 0x52
    b9c0:	d10e      	bne.n	b9e0 <I2Cmain+0xf4>
    b9c2:	1d3b      	adds	r3, r7, #4
    b9c4:	789b      	ldrb	r3, [r3, #2]
    b9c6:	2b45      	cmp	r3, #69	; 0x45
    b9c8:	d10a      	bne.n	b9e0 <I2Cmain+0xf4>
		{
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);	
    b9ca:	2003      	movs	r0, #3
    b9cc:	2102      	movs	r1, #2
    b9ce:	2201      	movs	r2, #1
    b9d0:	4b2f      	ldr	r3, [pc, #188]	; (ba90 <I2Cmain+0x1a4>)
    b9d2:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,1);	
    b9d4:	2003      	movs	r0, #3
    b9d6:	2104      	movs	r1, #4
    b9d8:	2201      	movs	r2, #1
    b9da:	4b2d      	ldr	r3, [pc, #180]	; (ba90 <I2Cmain+0x1a4>)
    b9dc:	4798      	blx	r3
    b9de:	e051      	b.n	ba84 <I2Cmain+0x198>
		}	
		else
		{
			//-----------------------
			// do a simple test. 
			testBuffer[0] = 0x46;
    b9e0:	1d3b      	adds	r3, r7, #4
    b9e2:	2246      	movs	r2, #70	; 0x46
    b9e4:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0x72; 
    b9e6:	1d3b      	adds	r3, r7, #4
    b9e8:	2272      	movs	r2, #114	; 0x72
    b9ea:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    b9ec:	1d3b      	adds	r3, r7, #4
    b9ee:	1c18      	adds	r0, r3, #0
    b9f0:	2100      	movs	r1, #0
    b9f2:	2202      	movs	r2, #2
    b9f4:	4b2a      	ldr	r3, [pc, #168]	; (baa0 <I2Cmain+0x1b4>)
    b9f6:	4798      	blx	r3
    b9f8:	1c03      	adds	r3, r0, #0
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d042      	beq.n	ba84 <I2Cmain+0x198>
			{
				testBuffer[0] = 0;
    b9fe:	1d3b      	adds	r3, r7, #4
    ba00:	2200      	movs	r2, #0
    ba02:	701a      	strb	r2, [r3, #0]
				testBuffer[1] = 0; 
    ba04:	1d3b      	adds	r3, r7, #4
    ba06:	2200      	movs	r2, #0
    ba08:	705a      	strb	r2, [r3, #1]
				if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    ba0a:	1d3b      	adds	r3, r7, #4
    ba0c:	1c18      	adds	r0, r3, #0
    ba0e:	2100      	movs	r1, #0
    ba10:	2202      	movs	r2, #2
    ba12:	4b21      	ldr	r3, [pc, #132]	; (ba98 <I2Cmain+0x1ac>)
    ba14:	4798      	blx	r3
    ba16:	1c03      	adds	r3, r0, #0
    ba18:	2b00      	cmp	r3, #0
    ba1a:	d033      	beq.n	ba84 <I2Cmain+0x198>
				{
					//-----------------------------
					// it worked!!
					AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);					
    ba1c:	2003      	movs	r0, #3
    ba1e:	2102      	movs	r1, #2
    ba20:	2201      	movs	r2, #1
    ba22:	4b1b      	ldr	r3, [pc, #108]	; (ba90 <I2Cmain+0x1a4>)
    ba24:	4798      	blx	r3
    ba26:	e02d      	b.n	ba84 <I2Cmain+0x198>
			}			
		}
	}
	else
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    ba28:	2003      	movs	r0, #3
    ba2a:	2101      	movs	r1, #1
    ba2c:	2201      	movs	r2, #1
    ba2e:	4b18      	ldr	r3, [pc, #96]	; (ba90 <I2Cmain+0x1a4>)
    ba30:	4798      	blx	r3
		//-----------------------
		// do a simple test. 
		testBuffer[0] = 0x46;
    ba32:	1d3b      	adds	r3, r7, #4
    ba34:	2246      	movs	r2, #70	; 0x46
    ba36:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 0x72; 
    ba38:	1d3b      	adds	r3, r7, #4
    ba3a:	2272      	movs	r2, #114	; 0x72
    ba3c:	705a      	strb	r2, [r3, #1]
		if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    ba3e:	1d3b      	adds	r3, r7, #4
    ba40:	1c18      	adds	r0, r3, #0
    ba42:	2100      	movs	r1, #0
    ba44:	2202      	movs	r2, #2
    ba46:	4b16      	ldr	r3, [pc, #88]	; (baa0 <I2Cmain+0x1b4>)
    ba48:	4798      	blx	r3
    ba4a:	1c03      	adds	r3, r0, #0
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	d014      	beq.n	ba7a <I2Cmain+0x18e>
		{
			testBuffer[0] = 0;
    ba50:	1d3b      	adds	r3, r7, #4
    ba52:	2200      	movs	r2, #0
    ba54:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0; 
    ba56:	1d3b      	adds	r3, r7, #4
    ba58:	2200      	movs	r2, #0
    ba5a:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    ba5c:	1d3b      	adds	r3, r7, #4
    ba5e:	1c18      	adds	r0, r3, #0
    ba60:	2100      	movs	r1, #0
    ba62:	2202      	movs	r2, #2
    ba64:	4b0c      	ldr	r3, [pc, #48]	; (ba98 <I2Cmain+0x1ac>)
    ba66:	4798      	blx	r3
    ba68:	1c03      	adds	r3, r0, #0
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d00a      	beq.n	ba84 <I2Cmain+0x198>
			{
				//-----------------------------
				// it worked!!
				AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);
    ba6e:	2003      	movs	r0, #3
    ba70:	2102      	movs	r1, #2
    ba72:	2201      	movs	r2, #1
    ba74:	4b06      	ldr	r3, [pc, #24]	; (ba90 <I2Cmain+0x1a4>)
    ba76:	4798      	blx	r3
    ba78:	e004      	b.n	ba84 <I2Cmain+0x198>
			}
		}
		else
		{
			//----------real failure	
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    ba7a:	2003      	movs	r0, #3
    ba7c:	2101      	movs	r1, #1
    ba7e:	2200      	movs	r2, #0
    ba80:	4b03      	ldr	r3, [pc, #12]	; (ba90 <I2Cmain+0x1a4>)
    ba82:	4798      	blx	r3
		}
	}
}
    ba84:	46bd      	mov	sp, r7
    ba86:	b004      	add	sp, #16
    ba88:	bd80      	pop	{r7, pc}
    ba8a:	46c0      	nop			; (mov r8, r8)
    ba8c:	0000b891 	.word	0x0000b891
    ba90:	0000e595 	.word	0x0000e595
    ba94:	20003094 	.word	0x20003094
    ba98:	0000b5d1 	.word	0x0000b5d1
    ba9c:	20002f98 	.word	0x20002f98
    baa0:	0000b751 	.word	0x0000b751

0000baa4 <ProgramMemory>:
 */
extern unsigned char programming; 
void deconfigure_wdt(void);
void configure_wdt(void);
void ProgramMemory(uint32_t address, uint8_t *buffer, uint16_t len)
{
    baa4:	b580      	push	{r7, lr}
    baa6:	b086      	sub	sp, #24
    baa8:	af00      	add	r7, sp, #0
    baaa:	60f8      	str	r0, [r7, #12]
    baac:	60b9      	str	r1, [r7, #8]
    baae:	1dbb      	adds	r3, r7, #6
    bab0:	801a      	strh	r2, [r3, #0]
	 programming = 1; 
    bab2:	4b2b      	ldr	r3, [pc, #172]	; (bb60 <ProgramMemory+0xbc>)
    bab4:	2201      	movs	r2, #1
    bab6:	701a      	strb	r2, [r3, #0]
	 deconfigure_wdt();
    bab8:	4b2a      	ldr	r3, [pc, #168]	; (bb64 <ProgramMemory+0xc0>)
    baba:	4798      	blx	r3
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
    babc:	1dbb      	adds	r3, r7, #6
    babe:	881b      	ldrh	r3, [r3, #0]
    bac0:	2b40      	cmp	r3, #64	; 0x40
    bac2:	d933      	bls.n	bb2c <ProgramMemory+0x88>
		uint32_t offset = 0;
    bac4:	2300      	movs	r3, #0
    bac6:	617b      	str	r3, [r7, #20]

		while (len > NVMCTRL_PAGE_SIZE) {
    bac8:	e01b      	b.n	bb02 <ProgramMemory+0x5e>
			/* Check if it is first page of a row */
			if ((address & 0xFF) == 0) {
    baca:	68fa      	ldr	r2, [r7, #12]
    bacc:	23ff      	movs	r3, #255	; 0xff
    bace:	4013      	ands	r3, r2
    bad0:	d103      	bne.n	bada <ProgramMemory+0x36>
				/* Erase row */
				nvm_erase_row(address);
    bad2:	68fb      	ldr	r3, [r7, #12]
    bad4:	1c18      	adds	r0, r3, #0
    bad6:	4b24      	ldr	r3, [pc, #144]	; (bb68 <ProgramMemory+0xc4>)
    bad8:	4798      	blx	r3
			}
			/* Write one page data to flash */
			nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    bada:	68ba      	ldr	r2, [r7, #8]
    badc:	697b      	ldr	r3, [r7, #20]
    bade:	18d3      	adds	r3, r2, r3
    bae0:	68fa      	ldr	r2, [r7, #12]
    bae2:	1c10      	adds	r0, r2, #0
    bae4:	1c19      	adds	r1, r3, #0
    bae6:	2240      	movs	r2, #64	; 0x40
    bae8:	4b20      	ldr	r3, [pc, #128]	; (bb6c <ProgramMemory+0xc8>)
    baea:	4798      	blx	r3
			/* Increment the address to be programmed */
			address += NVMCTRL_PAGE_SIZE;
    baec:	68fb      	ldr	r3, [r7, #12]
    baee:	3340      	adds	r3, #64	; 0x40
    baf0:	60fb      	str	r3, [r7, #12]
			/* Increment the offset of the buffer containing data */
			offset += NVMCTRL_PAGE_SIZE;
    baf2:	697b      	ldr	r3, [r7, #20]
    baf4:	3340      	adds	r3, #64	; 0x40
    baf6:	617b      	str	r3, [r7, #20]
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
    baf8:	1dbb      	adds	r3, r7, #6
    bafa:	1dba      	adds	r2, r7, #6
    bafc:	8812      	ldrh	r2, [r2, #0]
    bafe:	3a40      	subs	r2, #64	; 0x40
    bb00:	801a      	strh	r2, [r3, #0]
	 deconfigure_wdt();
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
		uint32_t offset = 0;

		while (len > NVMCTRL_PAGE_SIZE) {
    bb02:	1dbb      	adds	r3, r7, #6
    bb04:	881b      	ldrh	r3, [r3, #0]
    bb06:	2b40      	cmp	r3, #64	; 0x40
    bb08:	d8df      	bhi.n	baca <ProgramMemory+0x26>
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
		}

		/* Check if there is data remaining to be programmed */
		if (len > 0) {
    bb0a:	1dbb      	adds	r3, r7, #6
    bb0c:	881b      	ldrh	r3, [r3, #0]
    bb0e:	2b00      	cmp	r3, #0
    bb10:	d00b      	beq.n	bb2a <ProgramMemory+0x86>
			/* Write the data to flash */
			nvm_write_buffer(address, buffer + offset, len);
    bb12:	68ba      	ldr	r2, [r7, #8]
    bb14:	697b      	ldr	r3, [r7, #20]
    bb16:	18d2      	adds	r2, r2, r3
    bb18:	68f9      	ldr	r1, [r7, #12]
    bb1a:	1dbb      	adds	r3, r7, #6
    bb1c:	881b      	ldrh	r3, [r3, #0]
    bb1e:	1c08      	adds	r0, r1, #0
    bb20:	1c11      	adds	r1, r2, #0
    bb22:	1c1a      	adds	r2, r3, #0
    bb24:	4b11      	ldr	r3, [pc, #68]	; (bb6c <ProgramMemory+0xc8>)
    bb26:	4798      	blx	r3
    bb28:	e011      	b.n	bb4e <ProgramMemory+0xaa>
    bb2a:	e010      	b.n	bb4e <ProgramMemory+0xaa>
		}
	} else {
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) {
    bb2c:	68fa      	ldr	r2, [r7, #12]
    bb2e:	23ff      	movs	r3, #255	; 0xff
    bb30:	4013      	ands	r3, r2
    bb32:	d103      	bne.n	bb3c <ProgramMemory+0x98>
			/* Erase row */
			nvm_erase_row(address);
    bb34:	68fb      	ldr	r3, [r7, #12]
    bb36:	1c18      	adds	r0, r3, #0
    bb38:	4b0b      	ldr	r3, [pc, #44]	; (bb68 <ProgramMemory+0xc4>)
    bb3a:	4798      	blx	r3
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
    bb3c:	68f9      	ldr	r1, [r7, #12]
    bb3e:	68ba      	ldr	r2, [r7, #8]
    bb40:	1dbb      	adds	r3, r7, #6
    bb42:	881b      	ldrh	r3, [r3, #0]
    bb44:	1c08      	adds	r0, r1, #0
    bb46:	1c11      	adds	r1, r2, #0
    bb48:	1c1a      	adds	r2, r3, #0
    bb4a:	4b08      	ldr	r3, [pc, #32]	; (bb6c <ProgramMemory+0xc8>)
    bb4c:	4798      	blx	r3
	}
	programming = 0; 
    bb4e:	4b04      	ldr	r3, [pc, #16]	; (bb60 <ProgramMemory+0xbc>)
    bb50:	2200      	movs	r2, #0
    bb52:	701a      	strb	r2, [r3, #0]
	configure_wdt(); 
    bb54:	4b06      	ldr	r3, [pc, #24]	; (bb70 <ProgramMemory+0xcc>)
    bb56:	4798      	blx	r3
}
    bb58:	46bd      	mov	sp, r7
    bb5a:	b006      	add	sp, #24
    bb5c:	bd80      	pop	{r7, pc}
    bb5e:	46c0      	nop			; (mov r8, r8)
    bb60:	200004d2 	.word	0x200004d2
    bb64:	0000dc81 	.word	0x0000dc81
    bb68:	000046e1 	.word	0x000046e1
    bb6c:	000045a5 	.word	0x000045a5
    bb70:	0000dc49 	.word	0x0000dc49

0000bb74 <PressureUpdateTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 	
void PressureUpdateTask(void)
{
    bb74:	b580      	push	{r7, lr}
    bb76:	b084      	sub	sp, #16
    bb78:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    bb7a:	1c3b      	adds	r3, r7, #0
    bb7c:	330f      	adds	r3, #15
    bb7e:	2200      	movs	r2, #0
    bb80:	701a      	strb	r2, [r3, #0]
    bb82:	e0b7      	b.n	bcf4 <PressureUpdateTask+0x180>
	{
		if ((sensorDynamic[i].Change != 0)&&(sensorDynamic[i].ID[0]!= 0))
    bb84:	1c3b      	adds	r3, r7, #0
    bb86:	330f      	adds	r3, #15
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	4a5f      	ldr	r2, [pc, #380]	; (bd08 <PressureUpdateTask+0x194>)
    bb8c:	011b      	lsls	r3, r3, #4
    bb8e:	18d3      	adds	r3, r2, r3
    bb90:	791b      	ldrb	r3, [r3, #4]
    bb92:	2b00      	cmp	r3, #0
    bb94:	d100      	bne.n	bb98 <PressureUpdateTask+0x24>
    bb96:	e0a6      	b.n	bce6 <PressureUpdateTask+0x172>
    bb98:	1c3b      	adds	r3, r7, #0
    bb9a:	330f      	adds	r3, #15
    bb9c:	781a      	ldrb	r2, [r3, #0]
    bb9e:	4b5a      	ldr	r3, [pc, #360]	; (bd08 <PressureUpdateTask+0x194>)
    bba0:	0112      	lsls	r2, r2, #4
    bba2:	5cd3      	ldrb	r3, [r2, r3]
    bba4:	2b00      	cmp	r3, #0
    bba6:	d100      	bne.n	bbaa <PressureUpdateTask+0x36>
    bba8:	e09d      	b.n	bce6 <PressureUpdateTask+0x172>
		{
			//------------------------
			// following for testing status values on the sensors
			// usually this should be disabled. 
			if (nextTestStatus >= MAX_TEST_STATUS)
    bbaa:	4b58      	ldr	r3, [pc, #352]	; (bd0c <PressureUpdateTask+0x198>)
    bbac:	781b      	ldrb	r3, [r3, #0]
    bbae:	2b07      	cmp	r3, #7
    bbb0:	d902      	bls.n	bbb8 <PressureUpdateTask+0x44>
			{
				nextTestStatus= 0; 
    bbb2:	4b56      	ldr	r3, [pc, #344]	; (bd0c <PressureUpdateTask+0x198>)
    bbb4:	2200      	movs	r2, #0
    bbb6:	701a      	strb	r2, [r3, #0]
			}			
			testStatus[nextTestStatus++] = sensorDynamic[i].LastPacket[5]; 
    bbb8:	4b54      	ldr	r3, [pc, #336]	; (bd0c <PressureUpdateTask+0x198>)
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	1c5a      	adds	r2, r3, #1
    bbbe:	b2d1      	uxtb	r1, r2
    bbc0:	4a52      	ldr	r2, [pc, #328]	; (bd0c <PressureUpdateTask+0x198>)
    bbc2:	7011      	strb	r1, [r2, #0]
    bbc4:	1c3a      	adds	r2, r7, #0
    bbc6:	320f      	adds	r2, #15
    bbc8:	7812      	ldrb	r2, [r2, #0]
    bbca:	494f      	ldr	r1, [pc, #316]	; (bd08 <PressureUpdateTask+0x194>)
    bbcc:	0112      	lsls	r2, r2, #4
    bbce:	188a      	adds	r2, r1, r2
    bbd0:	3205      	adds	r2, #5
    bbd2:	7951      	ldrb	r1, [r2, #5]
    bbd4:	4a4e      	ldr	r2, [pc, #312]	; (bd10 <PressureUpdateTask+0x19c>)
    bbd6:	54d1      	strb	r1, [r2, r3]
			//-------------------------------- 				
			sensorDynamic[i].Change = 0;
    bbd8:	1c3b      	adds	r3, r7, #0
    bbda:	330f      	adds	r3, #15
    bbdc:	781b      	ldrb	r3, [r3, #0]
    bbde:	4a4a      	ldr	r2, [pc, #296]	; (bd08 <PressureUpdateTask+0x194>)
    bbe0:	011b      	lsls	r3, r3, #4
    bbe2:	18d3      	adds	r3, r2, r3
    bbe4:	2200      	movs	r2, #0
    bbe6:	711a      	strb	r2, [r3, #4]
			//--------------------------
			// handle the temperature 
			// * subtract 40 and you get the Celcius
			sensorDynamic[i].Temperature = sensorDynamic[i].LastPacket[4];
    bbe8:	1c3b      	adds	r3, r7, #0
    bbea:	330f      	adds	r3, #15
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	1c3a      	adds	r2, r7, #0
    bbf0:	320f      	adds	r2, #15
    bbf2:	7812      	ldrb	r2, [r2, #0]
    bbf4:	4944      	ldr	r1, [pc, #272]	; (bd08 <PressureUpdateTask+0x194>)
    bbf6:	0112      	lsls	r2, r2, #4
    bbf8:	188a      	adds	r2, r1, r2
    bbfa:	3204      	adds	r2, #4
    bbfc:	7952      	ldrb	r2, [r2, #5]
    bbfe:	4942      	ldr	r1, [pc, #264]	; (bd08 <PressureUpdateTask+0x194>)
    bc00:	011b      	lsls	r3, r3, #4
    bc02:	18cb      	adds	r3, r1, r3
    bc04:	3308      	adds	r3, #8
    bc06:	719a      	strb	r2, [r3, #6]
			sensorDynamic[i].Temperature -= 40; 
    bc08:	1c3b      	adds	r3, r7, #0
    bc0a:	330f      	adds	r3, #15
    bc0c:	781b      	ldrb	r3, [r3, #0]
    bc0e:	1c3a      	adds	r2, r7, #0
    bc10:	320f      	adds	r2, #15
    bc12:	7812      	ldrb	r2, [r2, #0]
    bc14:	493c      	ldr	r1, [pc, #240]	; (bd08 <PressureUpdateTask+0x194>)
    bc16:	0112      	lsls	r2, r2, #4
    bc18:	188a      	adds	r2, r1, r2
    bc1a:	3208      	adds	r2, #8
    bc1c:	7992      	ldrb	r2, [r2, #6]
    bc1e:	3a28      	subs	r2, #40	; 0x28
    bc20:	b2d2      	uxtb	r2, r2
    bc22:	4939      	ldr	r1, [pc, #228]	; (bd08 <PressureUpdateTask+0x194>)
    bc24:	011b      	lsls	r3, r3, #4
    bc26:	18cb      	adds	r3, r1, r3
    bc28:	3308      	adds	r3, #8
    bc2a:	719a      	strb	r2, [r3, #6]
			//---------------------------
			// handle the Pressure 
			// 
			sensorDynamic[i].Pressure = 0;
    bc2c:	1c3b      	adds	r3, r7, #0
    bc2e:	330f      	adds	r3, #15
    bc30:	781b      	ldrb	r3, [r3, #0]
    bc32:	4a35      	ldr	r2, [pc, #212]	; (bd08 <PressureUpdateTask+0x194>)
    bc34:	011b      	lsls	r3, r3, #4
    bc36:	18d3      	adds	r3, r2, r3
    bc38:	3308      	adds	r3, #8
    bc3a:	2200      	movs	r2, #0
    bc3c:	809a      	strh	r2, [r3, #4]
			itemp = sensorDynamic[i].LastPacket[5]<<4;
    bc3e:	1c3b      	adds	r3, r7, #0
    bc40:	330f      	adds	r3, #15
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	4a30      	ldr	r2, [pc, #192]	; (bd08 <PressureUpdateTask+0x194>)
    bc46:	011b      	lsls	r3, r3, #4
    bc48:	18d3      	adds	r3, r2, r3
    bc4a:	3305      	adds	r3, #5
    bc4c:	795b      	ldrb	r3, [r3, #5]
    bc4e:	1c1a      	adds	r2, r3, #0
    bc50:	1c3b      	adds	r3, r7, #0
    bc52:	330c      	adds	r3, #12
    bc54:	0112      	lsls	r2, r2, #4
    bc56:	801a      	strh	r2, [r3, #0]
			itemp &= 0x0700;
    bc58:	1c3b      	adds	r3, r7, #0
    bc5a:	330c      	adds	r3, #12
    bc5c:	1c3a      	adds	r2, r7, #0
    bc5e:	320c      	adds	r2, #12
    bc60:	8811      	ldrh	r1, [r2, #0]
    bc62:	22e0      	movs	r2, #224	; 0xe0
    bc64:	00d2      	lsls	r2, r2, #3
    bc66:	400a      	ands	r2, r1
    bc68:	801a      	strh	r2, [r3, #0]
			itemp2 = sensorDynamic[i].LastPacket[3];
    bc6a:	1c3b      	adds	r3, r7, #0
    bc6c:	330f      	adds	r3, #15
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	4a25      	ldr	r2, [pc, #148]	; (bd08 <PressureUpdateTask+0x194>)
    bc72:	011b      	lsls	r3, r3, #4
    bc74:	18d3      	adds	r3, r2, r3
    bc76:	3303      	adds	r3, #3
    bc78:	795a      	ldrb	r2, [r3, #5]
    bc7a:	1c3b      	adds	r3, r7, #0
    bc7c:	330a      	adds	r3, #10
    bc7e:	801a      	strh	r2, [r3, #0]
			itemp |= itemp2; 
    bc80:	1c3b      	adds	r3, r7, #0
    bc82:	330c      	adds	r3, #12
    bc84:	1c39      	adds	r1, r7, #0
    bc86:	310c      	adds	r1, #12
    bc88:	1c3a      	adds	r2, r7, #0
    bc8a:	320a      	adds	r2, #10
    bc8c:	8809      	ldrh	r1, [r1, #0]
    bc8e:	8812      	ldrh	r2, [r2, #0]
    bc90:	430a      	orrs	r2, r1
    bc92:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp;
    bc94:	1c3b      	adds	r3, r7, #0
    bc96:	330f      	adds	r3, #15
    bc98:	781b      	ldrb	r3, [r3, #0]
    bc9a:	4a1b      	ldr	r2, [pc, #108]	; (bd08 <PressureUpdateTask+0x194>)
    bc9c:	011b      	lsls	r3, r3, #4
    bc9e:	18d3      	adds	r3, r2, r3
    bca0:	3308      	adds	r3, #8
    bca2:	1c3a      	adds	r2, r7, #0
    bca4:	320c      	adds	r2, #12
    bca6:	8812      	ldrh	r2, [r2, #0]
    bca8:	809a      	strh	r2, [r3, #4]
			ltemp = itemp; 
    bcaa:	1c3b      	adds	r3, r7, #0
    bcac:	330c      	adds	r3, #12
    bcae:	881b      	ldrh	r3, [r3, #0]
    bcb0:	607b      	str	r3, [r7, #4]
			ltemp = ltemp * 145038;
    bcb2:	687b      	ldr	r3, [r7, #4]
    bcb4:	4a17      	ldr	r2, [pc, #92]	; (bd14 <PressureUpdateTask+0x1a0>)
    bcb6:	4353      	muls	r3, r2
    bcb8:	607b      	str	r3, [r7, #4]
			ltemp = ltemp/1000000;
    bcba:	687a      	ldr	r2, [r7, #4]
    bcbc:	4b16      	ldr	r3, [pc, #88]	; (bd18 <PressureUpdateTask+0x1a4>)
    bcbe:	1c10      	adds	r0, r2, #0
    bcc0:	4916      	ldr	r1, [pc, #88]	; (bd1c <PressureUpdateTask+0x1a8>)
    bcc2:	4798      	blx	r3
    bcc4:	1c03      	adds	r3, r0, #0
    bcc6:	607b      	str	r3, [r7, #4]
			itemp = ltemp;
    bcc8:	1c3b      	adds	r3, r7, #0
    bcca:	330c      	adds	r3, #12
    bccc:	687a      	ldr	r2, [r7, #4]
    bcce:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp; 	
    bcd0:	1c3b      	adds	r3, r7, #0
    bcd2:	330f      	adds	r3, #15
    bcd4:	781b      	ldrb	r3, [r3, #0]
    bcd6:	4a0c      	ldr	r2, [pc, #48]	; (bd08 <PressureUpdateTask+0x194>)
    bcd8:	011b      	lsls	r3, r3, #4
    bcda:	18d3      	adds	r3, r2, r3
    bcdc:	3308      	adds	r3, #8
    bcde:	1c3a      	adds	r2, r7, #0
    bce0:	320c      	adds	r2, #12
    bce2:	8812      	ldrh	r2, [r2, #0]
    bce4:	809a      	strh	r2, [r3, #4]
{
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    bce6:	1c3b      	adds	r3, r7, #0
    bce8:	330f      	adds	r3, #15
    bcea:	781a      	ldrb	r2, [r3, #0]
    bcec:	1c3b      	adds	r3, r7, #0
    bcee:	330f      	adds	r3, #15
    bcf0:	3201      	adds	r2, #1
    bcf2:	701a      	strb	r2, [r3, #0]
    bcf4:	1c3b      	adds	r3, r7, #0
    bcf6:	330f      	adds	r3, #15
    bcf8:	781b      	ldrb	r3, [r3, #0]
    bcfa:	2b0b      	cmp	r3, #11
    bcfc:	d800      	bhi.n	bd00 <PressureUpdateTask+0x18c>
    bcfe:	e741      	b.n	bb84 <PressureUpdateTask+0x10>
#if BRAKEBOARD 
//			AppRadioCarRadioReadingIn(i,TRUE);
#endif				
		}
	}		
}
    bd00:	46bd      	mov	sp, r7
    bd02:	b004      	add	sp, #16
    bd04:	bd80      	pop	{r7, pc}
    bd06:	46c0      	nop			; (mov r8, r8)
    bd08:	20003380 	.word	0x20003380
    bd0c:	200004d0 	.word	0x200004d0
    bd10:	2000345c 	.word	0x2000345c
    bd14:	0002368e 	.word	0x0002368e
    bd18:	00014639 	.word	0x00014639
    bd1c:	000f4240 	.word	0x000f4240

0000bd20 <RF433Task>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433Task(void)
{	
    bd20:	b580      	push	{r7, lr}
    bd22:	af00      	add	r7, sp, #0
		RF433ReadEvents();
    bd24:	4b28      	ldr	r3, [pc, #160]	; (bdc8 <RF433Task+0xa8>)
    bd26:	4798      	blx	r3
		
		systemChange = 0;
    bd28:	4b28      	ldr	r3, [pc, #160]	; (bdcc <RF433Task+0xac>)
    bd2a:	2200      	movs	r2, #0
    bd2c:	701a      	strb	r2, [r3, #0]
		eventsChange = 0;
    bd2e:	4b28      	ldr	r3, [pc, #160]	; (bdd0 <RF433Task+0xb0>)
    bd30:	2200      	movs	r2, #0
    bd32:	701a      	strb	r2, [r3, #0]
		powerChange = 0;
    bd34:	4b27      	ldr	r3, [pc, #156]	; (bdd4 <RF433Task+0xb4>)
    bd36:	2200      	movs	r2, #0
    bd38:	701a      	strb	r2, [r3, #0]
		if (tpsEvents[0] != 0)
    bd3a:	4b27      	ldr	r3, [pc, #156]	; (bdd8 <RF433Task+0xb8>)
    bd3c:	781b      	ldrb	r3, [r3, #0]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d002      	beq.n	bd48 <RF433Task+0x28>
		{
			systemChange = 1;
    bd42:	4b22      	ldr	r3, [pc, #136]	; (bdcc <RF433Task+0xac>)
    bd44:	2201      	movs	r2, #1
    bd46:	701a      	strb	r2, [r3, #0]
				}				
				rssiBuffer[rssiOffset++] = tempBuffer[4];
*/				
			}
		}
		if (tpsEvents[1] != 0)
    bd48:	4b23      	ldr	r3, [pc, #140]	; (bdd8 <RF433Task+0xb8>)
    bd4a:	785b      	ldrb	r3, [r3, #1]
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d031      	beq.n	bdb4 <RF433Task+0x94>
		{
			eventsChange = 1;
    bd50:	4b1f      	ldr	r3, [pc, #124]	; (bdd0 <RF433Task+0xb0>)
    bd52:	2201      	movs	r2, #1
    bd54:	701a      	strb	r2, [r3, #0]
			if ((tpsEvents[1] & 0x10)!= 0)
    bd56:	4b20      	ldr	r3, [pc, #128]	; (bdd8 <RF433Task+0xb8>)
    bd58:	785b      	ldrb	r3, [r3, #1]
    bd5a:	1c1a      	adds	r2, r3, #0
    bd5c:	2310      	movs	r3, #16
    bd5e:	4013      	ands	r3, r2
    bd60:	d028      	beq.n	bdb4 <RF433Task+0x94>
			{
				RF433ReadRXLevel();
    bd62:	4b1e      	ldr	r3, [pc, #120]	; (bddc <RF433Task+0xbc>)
    bd64:	4798      	blx	r3
				while (tpsRXLevel >0)
    bd66:	e021      	b.n	bdac <RF433Task+0x8c>
				{
					if (tpsRXLevel >10)
    bd68:	4b1d      	ldr	r3, [pc, #116]	; (bde0 <RF433Task+0xc0>)
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	2b0a      	cmp	r3, #10
    bd6e:	d90e      	bls.n	bd8e <RF433Task+0x6e>
					{
						RF433ReadRXBuffer(tempBuffer,10);
    bd70:	4b1c      	ldr	r3, [pc, #112]	; (bde4 <RF433Task+0xc4>)
    bd72:	1c18      	adds	r0, r3, #0
    bd74:	210a      	movs	r1, #10
    bd76:	4b1c      	ldr	r3, [pc, #112]	; (bde8 <RF433Task+0xc8>)
    bd78:	4798      	blx	r3
						RF433ProcessPacket(10);
    bd7a:	200a      	movs	r0, #10
    bd7c:	4b1b      	ldr	r3, [pc, #108]	; (bdec <RF433Task+0xcc>)
    bd7e:	4798      	blx	r3
						tpsRXLevel -= 10;
    bd80:	4b17      	ldr	r3, [pc, #92]	; (bde0 <RF433Task+0xc0>)
    bd82:	781b      	ldrb	r3, [r3, #0]
    bd84:	3b0a      	subs	r3, #10
    bd86:	b2da      	uxtb	r2, r3
    bd88:	4b15      	ldr	r3, [pc, #84]	; (bde0 <RF433Task+0xc0>)
    bd8a:	701a      	strb	r2, [r3, #0]
    bd8c:	e00e      	b.n	bdac <RF433Task+0x8c>
					}
					else
					{
						RF433ReadRXBuffer(tempBuffer,tpsRXLevel);
    bd8e:	4b14      	ldr	r3, [pc, #80]	; (bde0 <RF433Task+0xc0>)
    bd90:	781b      	ldrb	r3, [r3, #0]
    bd92:	4a14      	ldr	r2, [pc, #80]	; (bde4 <RF433Task+0xc4>)
    bd94:	1c10      	adds	r0, r2, #0
    bd96:	1c19      	adds	r1, r3, #0
    bd98:	4b13      	ldr	r3, [pc, #76]	; (bde8 <RF433Task+0xc8>)
    bd9a:	4798      	blx	r3
						RF433ProcessPacket(tpsRXLevel);
    bd9c:	4b10      	ldr	r3, [pc, #64]	; (bde0 <RF433Task+0xc0>)
    bd9e:	781b      	ldrb	r3, [r3, #0]
    bda0:	1c18      	adds	r0, r3, #0
    bda2:	4b12      	ldr	r3, [pc, #72]	; (bdec <RF433Task+0xcc>)
    bda4:	4798      	blx	r3
						tpsRXLevel = 0;
    bda6:	4b0e      	ldr	r3, [pc, #56]	; (bde0 <RF433Task+0xc0>)
    bda8:	2200      	movs	r2, #0
    bdaa:	701a      	strb	r2, [r3, #0]
		{
			eventsChange = 1;
			if ((tpsEvents[1] & 0x10)!= 0)
			{
				RF433ReadRXLevel();
				while (tpsRXLevel >0)
    bdac:	4b0c      	ldr	r3, [pc, #48]	; (bde0 <RF433Task+0xc0>)
    bdae:	781b      	ldrb	r3, [r3, #0]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d1d9      	bne.n	bd68 <RF433Task+0x48>
						tpsRXLevel = 0;
					}
				}
			}
		}
		if (tpsEvents[2] != 0)
    bdb4:	4b08      	ldr	r3, [pc, #32]	; (bdd8 <RF433Task+0xb8>)
    bdb6:	789b      	ldrb	r3, [r3, #2]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d002      	beq.n	bdc2 <RF433Task+0xa2>
		{
			powerChange = 1;
    bdbc:	4b05      	ldr	r3, [pc, #20]	; (bdd4 <RF433Task+0xb4>)
    bdbe:	2201      	movs	r2, #1
    bdc0:	701a      	strb	r2, [r3, #0]
		}	
}
    bdc2:	46bd      	mov	sp, r7
    bdc4:	bd80      	pop	{r7, pc}
    bdc6:	46c0      	nop			; (mov r8, r8)
    bdc8:	0000c3a9 	.word	0x0000c3a9
    bdcc:	20003440 	.word	0x20003440
    bdd0:	200030f0 	.word	0x200030f0
    bdd4:	200030bc 	.word	0x200030bc
    bdd8:	200030c0 	.word	0x200030c0
    bddc:	0000c371 	.word	0x0000c371
    bde0:	20003360 	.word	0x20003360
    bde4:	200030dc 	.word	0x200030dc
    bde8:	0000c2c1 	.word	0x0000c2c1
    bdec:	0000bdf1 	.word	0x0000bdf1

0000bdf0 <RF433ProcessPacket>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433ProcessPacket(uint8_t length)
{
    bdf0:	b580      	push	{r7, lr}
    bdf2:	b084      	sub	sp, #16
    bdf4:	af00      	add	r7, sp, #0
    bdf6:	1c02      	adds	r2, r0, #0
    bdf8:	1dfb      	adds	r3, r7, #7
    bdfa:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,j;
	//----------------------------
	// add the bytes to the end of the 
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
    bdfc:	4bc1      	ldr	r3, [pc, #772]	; (c104 <RF433ProcessPacket+0x314>)
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	1c1a      	adds	r2, r3, #0
    be02:	1dfb      	adds	r3, r7, #7
    be04:	781b      	ldrb	r3, [r3, #0]
    be06:	18d3      	adds	r3, r2, r3
    be08:	2b13      	cmp	r3, #19
    be0a:	dd02      	ble.n	be12 <RF433ProcessPacket+0x22>
	{
		rf433BuildOffset = 0;
    be0c:	4bbd      	ldr	r3, [pc, #756]	; (c104 <RF433ProcessPacket+0x314>)
    be0e:	2200      	movs	r2, #0
    be10:	701a      	strb	r2, [r3, #0]
	}
	for (i=0;i<length;i++)
    be12:	1c3b      	adds	r3, r7, #0
    be14:	330e      	adds	r3, #14
    be16:	2200      	movs	r2, #0
    be18:	701a      	strb	r2, [r3, #0]
    be1a:	e013      	b.n	be44 <RF433ProcessPacket+0x54>
	{
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
    be1c:	4bb9      	ldr	r3, [pc, #740]	; (c104 <RF433ProcessPacket+0x314>)
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	1c5a      	adds	r2, r3, #1
    be22:	b2d1      	uxtb	r1, r2
    be24:	4ab7      	ldr	r2, [pc, #732]	; (c104 <RF433ProcessPacket+0x314>)
    be26:	7011      	strb	r1, [r2, #0]
    be28:	1c3a      	adds	r2, r7, #0
    be2a:	320e      	adds	r2, #14
    be2c:	7812      	ldrb	r2, [r2, #0]
    be2e:	49b6      	ldr	r1, [pc, #728]	; (c108 <RF433ProcessPacket+0x318>)
    be30:	5c89      	ldrb	r1, [r1, r2]
    be32:	4ab6      	ldr	r2, [pc, #728]	; (c10c <RF433ProcessPacket+0x31c>)
    be34:	54d1      	strb	r1, [r2, r3]
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
	{
		rf433BuildOffset = 0;
	}
	for (i=0;i<length;i++)
    be36:	1c3b      	adds	r3, r7, #0
    be38:	330e      	adds	r3, #14
    be3a:	781a      	ldrb	r2, [r3, #0]
    be3c:	1c3b      	adds	r3, r7, #0
    be3e:	330e      	adds	r3, #14
    be40:	3201      	adds	r2, #1
    be42:	701a      	strb	r2, [r3, #0]
    be44:	1c3a      	adds	r2, r7, #0
    be46:	320e      	adds	r2, #14
    be48:	1dfb      	adds	r3, r7, #7
    be4a:	7812      	ldrb	r2, [r2, #0]
    be4c:	781b      	ldrb	r3, [r3, #0]
    be4e:	429a      	cmp	r2, r3
    be50:	d3e4      	bcc.n	be1c <RF433ProcessPacket+0x2c>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    be52:	e14e      	b.n	c0f2 <RF433ProcessPacket+0x302>
	{
		tpsCRC = CRC8 (&rf433BuildBuffer[0],6);
    be54:	4bad      	ldr	r3, [pc, #692]	; (c10c <RF433ProcessPacket+0x31c>)
    be56:	1c18      	adds	r0, r3, #0
    be58:	2106      	movs	r1, #6
    be5a:	4bad      	ldr	r3, [pc, #692]	; (c110 <RF433ProcessPacket+0x320>)
    be5c:	4798      	blx	r3
    be5e:	1c03      	adds	r3, r0, #0
    be60:	1c1a      	adds	r2, r3, #0
    be62:	4bac      	ldr	r3, [pc, #688]	; (c114 <RF433ProcessPacket+0x324>)
    be64:	701a      	strb	r2, [r3, #0]
		if (tpsCRC == rf433BuildBuffer[6])
    be66:	4ba9      	ldr	r3, [pc, #676]	; (c10c <RF433ProcessPacket+0x31c>)
    be68:	799a      	ldrb	r2, [r3, #6]
    be6a:	4baa      	ldr	r3, [pc, #680]	; (c114 <RF433ProcessPacket+0x324>)
    be6c:	781b      	ldrb	r3, [r3, #0]
    be6e:	429a      	cmp	r2, r3
    be70:	d000      	beq.n	be74 <RF433ProcessPacket+0x84>
    be72:	e11a      	b.n	c0aa <RF433ProcessPacket+0x2ba>
		{
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_RXPACKET,1);
    be74:	2001      	movs	r0, #1
    be76:	2102      	movs	r1, #2
    be78:	2201      	movs	r2, #1
    be7a:	4ba7      	ldr	r3, [pc, #668]	; (c118 <RF433ProcessPacket+0x328>)
    be7c:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_COMMGOOD,1);
    be7e:	2001      	movs	r0, #1
    be80:	2104      	movs	r1, #4
    be82:	2201      	movs	r2, #1
    be84:	4ba4      	ldr	r3, [pc, #656]	; (c118 <RF433ProcessPacket+0x328>)
    be86:	4798      	blx	r3
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
    be88:	1c3b      	adds	r3, r7, #0
    be8a:	330e      	adds	r3, #14
    be8c:	2200      	movs	r2, #0
    be8e:	701a      	strb	r2, [r3, #0]
			done = 0; 
    be90:	1c3b      	adds	r3, r7, #0
    be92:	330f      	adds	r3, #15
    be94:	2200      	movs	r2, #0
    be96:	701a      	strb	r2, [r3, #0]
			while ((i<MAXSENSORS)&&(done==0))
    be98:	e077      	b.n	bf8a <RF433ProcessPacket+0x19a>
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    be9a:	1c3b      	adds	r3, r7, #0
    be9c:	330e      	adds	r3, #14
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	4a9e      	ldr	r2, [pc, #632]	; (c11c <RF433ProcessPacket+0x32c>)
    bea2:	011b      	lsls	r3, r3, #4
    bea4:	18d3      	adds	r3, r2, r3
    bea6:	3301      	adds	r3, #1
    bea8:	781a      	ldrb	r2, [r3, #0]
    beaa:	4b98      	ldr	r3, [pc, #608]	; (c10c <RF433ProcessPacket+0x31c>)
    beac:	785b      	ldrb	r3, [r3, #1]
    beae:	429a      	cmp	r2, r3
    beb0:	d164      	bne.n	bf7c <RF433ProcessPacket+0x18c>
    beb2:	1c3b      	adds	r3, r7, #0
    beb4:	330e      	adds	r3, #14
    beb6:	781a      	ldrb	r2, [r3, #0]
    beb8:	4b98      	ldr	r3, [pc, #608]	; (c11c <RF433ProcessPacket+0x32c>)
    beba:	0112      	lsls	r2, r2, #4
    bebc:	5cd2      	ldrb	r2, [r2, r3]
    bebe:	4b93      	ldr	r3, [pc, #588]	; (c10c <RF433ProcessPacket+0x31c>)
    bec0:	781b      	ldrb	r3, [r3, #0]
    bec2:	429a      	cmp	r2, r3
    bec4:	d15a      	bne.n	bf7c <RF433ProcessPacket+0x18c>
					(sensorDynamic[i].ID[2] == rf433BuildBuffer[2]))
    bec6:	1c3b      	adds	r3, r7, #0
    bec8:	330e      	adds	r3, #14
    beca:	781b      	ldrb	r3, [r3, #0]
    becc:	4a93      	ldr	r2, [pc, #588]	; (c11c <RF433ProcessPacket+0x32c>)
    bece:	011b      	lsls	r3, r3, #4
    bed0:	18d3      	adds	r3, r2, r3
    bed2:	3302      	adds	r3, #2
    bed4:	781a      	ldrb	r2, [r3, #0]
    bed6:	4b8d      	ldr	r3, [pc, #564]	; (c10c <RF433ProcessPacket+0x31c>)
    bed8:	789b      	ldrb	r3, [r3, #2]
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    beda:	429a      	cmp	r2, r3
    bedc:	d14e      	bne.n	bf7c <RF433ProcessPacket+0x18c>
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    bede:	1c3b      	adds	r3, r7, #0
    bee0:	330d      	adds	r3, #13
    bee2:	2200      	movs	r2, #0
    bee4:	701a      	strb	r2, [r3, #0]
    bee6:	e031      	b.n	bf4c <RF433ProcessPacket+0x15c>
					{
						if (sensorDynamic[i].LastPacket[j] != rf433BuildBuffer[j])
    bee8:	1c3b      	adds	r3, r7, #0
    beea:	330e      	adds	r3, #14
    beec:	7819      	ldrb	r1, [r3, #0]
    beee:	1c3b      	adds	r3, r7, #0
    bef0:	330d      	adds	r3, #13
    bef2:	781b      	ldrb	r3, [r3, #0]
    bef4:	4a89      	ldr	r2, [pc, #548]	; (c11c <RF433ProcessPacket+0x32c>)
    bef6:	0109      	lsls	r1, r1, #4
    bef8:	18cb      	adds	r3, r1, r3
    befa:	18d3      	adds	r3, r2, r3
    befc:	795a      	ldrb	r2, [r3, #5]
    befe:	1c3b      	adds	r3, r7, #0
    bf00:	330d      	adds	r3, #13
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	4981      	ldr	r1, [pc, #516]	; (c10c <RF433ProcessPacket+0x31c>)
    bf06:	5ccb      	ldrb	r3, [r1, r3]
    bf08:	429a      	cmp	r2, r3
    bf0a:	d008      	beq.n	bf1e <RF433ProcessPacket+0x12e>
						{
							sensorDynamic[i].NewValue =1; 
    bf0c:	1c3b      	adds	r3, r7, #0
    bf0e:	330e      	adds	r3, #14
    bf10:	781b      	ldrb	r3, [r3, #0]
    bf12:	4a82      	ldr	r2, [pc, #520]	; (c11c <RF433ProcessPacket+0x32c>)
    bf14:	011b      	lsls	r3, r3, #4
    bf16:	18d3      	adds	r3, r2, r3
    bf18:	3308      	adds	r3, #8
    bf1a:	2201      	movs	r2, #1
    bf1c:	71da      	strb	r2, [r3, #7]
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    bf1e:	1c3b      	adds	r3, r7, #0
    bf20:	330e      	adds	r3, #14
    bf22:	7818      	ldrb	r0, [r3, #0]
    bf24:	1c3b      	adds	r3, r7, #0
    bf26:	330d      	adds	r3, #13
    bf28:	781b      	ldrb	r3, [r3, #0]
    bf2a:	1c3a      	adds	r2, r7, #0
    bf2c:	320d      	adds	r2, #13
    bf2e:	7812      	ldrb	r2, [r2, #0]
    bf30:	4976      	ldr	r1, [pc, #472]	; (c10c <RF433ProcessPacket+0x31c>)
    bf32:	5c8a      	ldrb	r2, [r1, r2]
    bf34:	4979      	ldr	r1, [pc, #484]	; (c11c <RF433ProcessPacket+0x32c>)
    bf36:	0100      	lsls	r0, r0, #4
    bf38:	18c3      	adds	r3, r0, r3
    bf3a:	18cb      	adds	r3, r1, r3
    bf3c:	715a      	strb	r2, [r3, #5]
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    bf3e:	1c3b      	adds	r3, r7, #0
    bf40:	330d      	adds	r3, #13
    bf42:	781a      	ldrb	r2, [r3, #0]
    bf44:	1c3b      	adds	r3, r7, #0
    bf46:	330d      	adds	r3, #13
    bf48:	3201      	adds	r2, #1
    bf4a:	701a      	strb	r2, [r3, #0]
    bf4c:	1c3b      	adds	r3, r7, #0
    bf4e:	330d      	adds	r3, #13
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	2b06      	cmp	r3, #6
    bf54:	d9c8      	bls.n	bee8 <RF433ProcessPacket+0xf8>
						{
							sensorDynamic[i].NewValue =1; 
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
					}
					sensorDynamic[i].Change = 1; 
    bf56:	1c3b      	adds	r3, r7, #0
    bf58:	330e      	adds	r3, #14
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	4a6f      	ldr	r2, [pc, #444]	; (c11c <RF433ProcessPacket+0x32c>)
    bf5e:	011b      	lsls	r3, r3, #4
    bf60:	18d3      	adds	r3, r2, r3
    bf62:	2201      	movs	r2, #1
    bf64:	711a      	strb	r2, [r3, #4]
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    bf66:	4b6e      	ldr	r3, [pc, #440]	; (c120 <RF433ProcessPacket+0x330>)
    bf68:	681b      	ldr	r3, [r3, #0]
    bf6a:	2280      	movs	r2, #128	; 0x80
    bf6c:	0052      	lsls	r2, r2, #1
    bf6e:	431a      	orrs	r2, r3
    bf70:	4b6b      	ldr	r3, [pc, #428]	; (c120 <RF433ProcessPacket+0x330>)
    bf72:	601a      	str	r2, [r3, #0]
					done = 1; 
    bf74:	1c3b      	adds	r3, r7, #0
    bf76:	330f      	adds	r3, #15
    bf78:	2201      	movs	r2, #1
    bf7a:	701a      	strb	r2, [r3, #0]
				}
				i++;
    bf7c:	1c3b      	adds	r3, r7, #0
    bf7e:	330e      	adds	r3, #14
    bf80:	781a      	ldrb	r2, [r3, #0]
    bf82:	1c3b      	adds	r3, r7, #0
    bf84:	330e      	adds	r3, #14
    bf86:	3201      	adds	r2, #1
    bf88:	701a      	strb	r2, [r3, #0]
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
    bf8a:	1c3b      	adds	r3, r7, #0
    bf8c:	330e      	adds	r3, #14
    bf8e:	781b      	ldrb	r3, [r3, #0]
    bf90:	2b0b      	cmp	r3, #11
    bf92:	d805      	bhi.n	bfa0 <RF433ProcessPacket+0x1b0>
    bf94:	1c3b      	adds	r3, r7, #0
    bf96:	330f      	adds	r3, #15
    bf98:	781b      	ldrb	r3, [r3, #0]
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d100      	bne.n	bfa0 <RF433ProcessPacket+0x1b0>
    bf9e:	e77c      	b.n	be9a <RF433ProcessPacket+0xaa>
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
					done = 1; 
				}
				i++;
			}
			if (done == 0)
    bfa0:	1c3b      	adds	r3, r7, #0
    bfa2:	330f      	adds	r3, #15
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d000      	beq.n	bfac <RF433ProcessPacket+0x1bc>
    bfaa:	e077      	b.n	c09c <RF433ProcessPacket+0x2ac>
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
    bfac:	1c3b      	adds	r3, r7, #0
    bfae:	330e      	adds	r3, #14
    bfb0:	2200      	movs	r2, #0
    bfb2:	701a      	strb	r2, [r3, #0]
				while ((i<MAXSENSORS)&&(done==0))
    bfb4:	e068      	b.n	c088 <RF433ProcessPacket+0x298>
				{
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
    bfb6:	1c3b      	adds	r3, r7, #0
    bfb8:	330e      	adds	r3, #14
    bfba:	781a      	ldrb	r2, [r3, #0]
    bfbc:	4b57      	ldr	r3, [pc, #348]	; (c11c <RF433ProcessPacket+0x32c>)
    bfbe:	0112      	lsls	r2, r2, #4
    bfc0:	5cd3      	ldrb	r3, [r2, r3]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d159      	bne.n	c07a <RF433ProcessPacket+0x28a>
    bfc6:	1c3b      	adds	r3, r7, #0
    bfc8:	330e      	adds	r3, #14
    bfca:	781b      	ldrb	r3, [r3, #0]
    bfcc:	4a53      	ldr	r2, [pc, #332]	; (c11c <RF433ProcessPacket+0x32c>)
    bfce:	011b      	lsls	r3, r3, #4
    bfd0:	18d3      	adds	r3, r2, r3
    bfd2:	3301      	adds	r3, #1
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	d14f      	bne.n	c07a <RF433ProcessPacket+0x28a>
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    bfda:	1c3b      	adds	r3, r7, #0
    bfdc:	330d      	adds	r3, #13
    bfde:	2200      	movs	r2, #0
    bfe0:	701a      	strb	r2, [r3, #0]
    bfe2:	e016      	b.n	c012 <RF433ProcessPacket+0x222>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    bfe4:	1c3b      	adds	r3, r7, #0
    bfe6:	330e      	adds	r3, #14
    bfe8:	7818      	ldrb	r0, [r3, #0]
    bfea:	1c3b      	adds	r3, r7, #0
    bfec:	330d      	adds	r3, #13
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	1c3a      	adds	r2, r7, #0
    bff2:	320d      	adds	r2, #13
    bff4:	7812      	ldrb	r2, [r2, #0]
    bff6:	4945      	ldr	r1, [pc, #276]	; (c10c <RF433ProcessPacket+0x31c>)
    bff8:	5c8a      	ldrb	r2, [r1, r2]
    bffa:	4948      	ldr	r1, [pc, #288]	; (c11c <RF433ProcessPacket+0x32c>)
    bffc:	0100      	lsls	r0, r0, #4
    bffe:	18c3      	adds	r3, r0, r3
    c000:	18cb      	adds	r3, r1, r3
    c002:	715a      	strb	r2, [r3, #5]
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    c004:	1c3b      	adds	r3, r7, #0
    c006:	330d      	adds	r3, #13
    c008:	781a      	ldrb	r2, [r3, #0]
    c00a:	1c3b      	adds	r3, r7, #0
    c00c:	330d      	adds	r3, #13
    c00e:	3201      	adds	r2, #1
    c010:	701a      	strb	r2, [r3, #0]
    c012:	1c3b      	adds	r3, r7, #0
    c014:	330d      	adds	r3, #13
    c016:	781b      	ldrb	r3, [r3, #0]
    c018:	2b06      	cmp	r3, #6
    c01a:	d9e3      	bls.n	bfe4 <RF433ProcessPacket+0x1f4>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
						}
						sensorDynamic[i].Change = 1;
    c01c:	1c3b      	adds	r3, r7, #0
    c01e:	330e      	adds	r3, #14
    c020:	781b      	ldrb	r3, [r3, #0]
    c022:	4a3e      	ldr	r2, [pc, #248]	; (c11c <RF433ProcessPacket+0x32c>)
    c024:	011b      	lsls	r3, r3, #4
    c026:	18d3      	adds	r3, r2, r3
    c028:	2201      	movs	r2, #1
    c02a:	711a      	strb	r2, [r3, #4]
						sensorDynamic[i].ID[0] = rf433BuildBuffer[0]; 
    c02c:	1c3b      	adds	r3, r7, #0
    c02e:	330e      	adds	r3, #14
    c030:	781a      	ldrb	r2, [r3, #0]
    c032:	4b36      	ldr	r3, [pc, #216]	; (c10c <RF433ProcessPacket+0x31c>)
    c034:	7819      	ldrb	r1, [r3, #0]
    c036:	4b39      	ldr	r3, [pc, #228]	; (c11c <RF433ProcessPacket+0x32c>)
    c038:	0112      	lsls	r2, r2, #4
    c03a:	54d1      	strb	r1, [r2, r3]
						sensorDynamic[i].ID[1] = rf433BuildBuffer[1]; 
    c03c:	1c3b      	adds	r3, r7, #0
    c03e:	330e      	adds	r3, #14
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	4a32      	ldr	r2, [pc, #200]	; (c10c <RF433ProcessPacket+0x31c>)
    c044:	7852      	ldrb	r2, [r2, #1]
    c046:	4935      	ldr	r1, [pc, #212]	; (c11c <RF433ProcessPacket+0x32c>)
    c048:	011b      	lsls	r3, r3, #4
    c04a:	18cb      	adds	r3, r1, r3
    c04c:	3301      	adds	r3, #1
    c04e:	701a      	strb	r2, [r3, #0]
						sensorDynamic[i].ID[2] = rf433BuildBuffer[2]; 												
    c050:	1c3b      	adds	r3, r7, #0
    c052:	330e      	adds	r3, #14
    c054:	781b      	ldrb	r3, [r3, #0]
    c056:	4a2d      	ldr	r2, [pc, #180]	; (c10c <RF433ProcessPacket+0x31c>)
    c058:	7892      	ldrb	r2, [r2, #2]
    c05a:	4930      	ldr	r1, [pc, #192]	; (c11c <RF433ProcessPacket+0x32c>)
    c05c:	011b      	lsls	r3, r3, #4
    c05e:	18cb      	adds	r3, r1, r3
    c060:	3302      	adds	r3, #2
    c062:	701a      	strb	r2, [r3, #0]
						schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    c064:	4b2e      	ldr	r3, [pc, #184]	; (c120 <RF433ProcessPacket+0x330>)
    c066:	681b      	ldr	r3, [r3, #0]
    c068:	2280      	movs	r2, #128	; 0x80
    c06a:	0052      	lsls	r2, r2, #1
    c06c:	431a      	orrs	r2, r3
    c06e:	4b2c      	ldr	r3, [pc, #176]	; (c120 <RF433ProcessPacket+0x330>)
    c070:	601a      	str	r2, [r3, #0]
						done = 1; 
    c072:	1c3b      	adds	r3, r7, #0
    c074:	330f      	adds	r3, #15
    c076:	2201      	movs	r2, #1
    c078:	701a      	strb	r2, [r3, #0]
					}
					i++;
    c07a:	1c3b      	adds	r3, r7, #0
    c07c:	330e      	adds	r3, #14
    c07e:	781a      	ldrb	r2, [r3, #0]
    c080:	1c3b      	adds	r3, r7, #0
    c082:	330e      	adds	r3, #14
    c084:	3201      	adds	r2, #1
    c086:	701a      	strb	r2, [r3, #0]
			if (done == 0)
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
				while ((i<MAXSENSORS)&&(done==0))
    c088:	1c3b      	adds	r3, r7, #0
    c08a:	330e      	adds	r3, #14
    c08c:	781b      	ldrb	r3, [r3, #0]
    c08e:	2b0b      	cmp	r3, #11
    c090:	d804      	bhi.n	c09c <RF433ProcessPacket+0x2ac>
    c092:	1c3b      	adds	r3, r7, #0
    c094:	330f      	adds	r3, #15
    c096:	781b      	ldrb	r3, [r3, #0]
    c098:	2b00      	cmp	r3, #0
    c09a:	d08c      	beq.n	bfb6 <RF433ProcessPacket+0x1c6>
					}
					i++;
				}				 
				
			}
			rf433BuildOffset = rf433BuildOffset-7;
    c09c:	4b19      	ldr	r3, [pc, #100]	; (c104 <RF433ProcessPacket+0x314>)
    c09e:	781b      	ldrb	r3, [r3, #0]
    c0a0:	3b07      	subs	r3, #7
    c0a2:	b2da      	uxtb	r2, r3
    c0a4:	4b17      	ldr	r3, [pc, #92]	; (c104 <RF433ProcessPacket+0x314>)
    c0a6:	701a      	strb	r2, [r3, #0]
    c0a8:	e023      	b.n	c0f2 <RF433ProcessPacket+0x302>
		}	
		else
		{
			rf433BuildOffset--;
    c0aa:	4b16      	ldr	r3, [pc, #88]	; (c104 <RF433ProcessPacket+0x314>)
    c0ac:	781b      	ldrb	r3, [r3, #0]
    c0ae:	3b01      	subs	r3, #1
    c0b0:	b2da      	uxtb	r2, r3
    c0b2:	4b14      	ldr	r3, [pc, #80]	; (c104 <RF433ProcessPacket+0x314>)
    c0b4:	701a      	strb	r2, [r3, #0]
			for (i=0;i<rf433BuildOffset;i++)
    c0b6:	1c3b      	adds	r3, r7, #0
    c0b8:	330e      	adds	r3, #14
    c0ba:	2200      	movs	r2, #0
    c0bc:	701a      	strb	r2, [r3, #0]
    c0be:	e011      	b.n	c0e4 <RF433ProcessPacket+0x2f4>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
    c0c0:	1c3b      	adds	r3, r7, #0
    c0c2:	330e      	adds	r3, #14
    c0c4:	781b      	ldrb	r3, [r3, #0]
    c0c6:	1c3a      	adds	r2, r7, #0
    c0c8:	320e      	adds	r2, #14
    c0ca:	7812      	ldrb	r2, [r2, #0]
    c0cc:	3201      	adds	r2, #1
    c0ce:	490f      	ldr	r1, [pc, #60]	; (c10c <RF433ProcessPacket+0x31c>)
    c0d0:	5c89      	ldrb	r1, [r1, r2]
    c0d2:	4a0e      	ldr	r2, [pc, #56]	; (c10c <RF433ProcessPacket+0x31c>)
    c0d4:	54d1      	strb	r1, [r2, r3]
			rf433BuildOffset = rf433BuildOffset-7;
		}	
		else
		{
			rf433BuildOffset--;
			for (i=0;i<rf433BuildOffset;i++)
    c0d6:	1c3b      	adds	r3, r7, #0
    c0d8:	330e      	adds	r3, #14
    c0da:	781a      	ldrb	r2, [r3, #0]
    c0dc:	1c3b      	adds	r3, r7, #0
    c0de:	330e      	adds	r3, #14
    c0e0:	3201      	adds	r2, #1
    c0e2:	701a      	strb	r2, [r3, #0]
    c0e4:	4b07      	ldr	r3, [pc, #28]	; (c104 <RF433ProcessPacket+0x314>)
    c0e6:	781b      	ldrb	r3, [r3, #0]
    c0e8:	1c3a      	adds	r2, r7, #0
    c0ea:	320e      	adds	r2, #14
    c0ec:	7812      	ldrb	r2, [r2, #0]
    c0ee:	429a      	cmp	r2, r3
    c0f0:	d3e6      	bcc.n	c0c0 <RF433ProcessPacket+0x2d0>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    c0f2:	4b04      	ldr	r3, [pc, #16]	; (c104 <RF433ProcessPacket+0x314>)
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	2b06      	cmp	r3, #6
    c0f8:	d900      	bls.n	c0fc <RF433ProcessPacket+0x30c>
    c0fa:	e6ab      	b.n	be54 <RF433ProcessPacket+0x64>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
			}	
		}		
	}
}
    c0fc:	46bd      	mov	sp, r7
    c0fe:	b004      	add	sp, #16
    c100:	bd80      	pop	{r7, pc}
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	20003367 	.word	0x20003367
    c108:	20003464 	.word	0x20003464
    c10c:	20003444 	.word	0x20003444
    c110:	0000c209 	.word	0x0000c209
    c114:	20003361 	.word	0x20003361
    c118:	0000e595 	.word	0x0000e595
    c11c:	20003380 	.word	0x20003380
    c120:	20003668 	.word	0x20003668

0000c124 <SPITInOut>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 int SPITInOut(uint8_t *buffer,uint8_t size)
 {
    c124:	b590      	push	{r4, r7, lr}
    c126:	b087      	sub	sp, #28
    c128:	af00      	add	r7, sp, #0
    c12a:	6078      	str	r0, [r7, #4]
    c12c:	1c0a      	adds	r2, r1, #0
    c12e:	1cfb      	adds	r3, r7, #3
    c130:	701a      	strb	r2, [r3, #0]
	 uint8_t i,*ptr; 
	 ptr = buffer; 
    c132:	687b      	ldr	r3, [r7, #4]
    c134:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    c136:	2300      	movs	r3, #0
    c138:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
    c13a:	1cfb      	adds	r3, r7, #3
    c13c:	781b      	ldrb	r3, [r3, #0]
    c13e:	2b0d      	cmp	r3, #13
    c140:	d851      	bhi.n	c1e6 <SPITInOut+0xc2>
	 {
		 success = 1; 
    c142:	2301      	movs	r3, #1
    c144:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spit_master_instance, &slavet, true);
    c146:	4a2a      	ldr	r2, [pc, #168]	; (c1f0 <SPITInOut+0xcc>)
    c148:	4b2a      	ldr	r3, [pc, #168]	; (c1f4 <SPITInOut+0xd0>)
    c14a:	1c10      	adds	r0, r2, #0
    c14c:	1c19      	adds	r1, r3, #0
    c14e:	2201      	movs	r2, #1
    c150:	4b29      	ldr	r3, [pc, #164]	; (c1f8 <SPITInOut+0xd4>)
    c152:	4798      	blx	r3
		 for (i=0;i<size;i++)
    c154:	1c3b      	adds	r3, r7, #0
    c156:	3317      	adds	r3, #23
    c158:	2200      	movs	r2, #0
    c15a:	701a      	strb	r2, [r3, #0]
    c15c:	e00f      	b.n	c17e <SPITInOut+0x5a>
		 {
			txBuffT[i] = *ptr++;
    c15e:	1c3b      	adds	r3, r7, #0
    c160:	3317      	adds	r3, #23
    c162:	781a      	ldrb	r2, [r3, #0]
    c164:	693b      	ldr	r3, [r7, #16]
    c166:	1c59      	adds	r1, r3, #1
    c168:	6139      	str	r1, [r7, #16]
    c16a:	7819      	ldrb	r1, [r3, #0]
    c16c:	4b23      	ldr	r3, [pc, #140]	; (c1fc <SPITInOut+0xd8>)
    c16e:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spit_master_instance, &slavet, true);
		 for (i=0;i<size;i++)
    c170:	1c3b      	adds	r3, r7, #0
    c172:	3317      	adds	r3, #23
    c174:	781a      	ldrb	r2, [r3, #0]
    c176:	1c3b      	adds	r3, r7, #0
    c178:	3317      	adds	r3, #23
    c17a:	3201      	adds	r2, #1
    c17c:	701a      	strb	r2, [r3, #0]
    c17e:	1c3a      	adds	r2, r7, #0
    c180:	3217      	adds	r2, #23
    c182:	1cfb      	adds	r3, r7, #3
    c184:	7812      	ldrb	r2, [r2, #0]
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	429a      	cmp	r2, r3
    c18a:	d3e8      	bcc.n	c15e <SPITInOut+0x3a>
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
    c18c:	1cfb      	adds	r3, r7, #3
    c18e:	781b      	ldrb	r3, [r3, #0]
    c190:	b29b      	uxth	r3, r3
    c192:	4817      	ldr	r0, [pc, #92]	; (c1f0 <SPITInOut+0xcc>)
    c194:	4919      	ldr	r1, [pc, #100]	; (c1fc <SPITInOut+0xd8>)
    c196:	4a1a      	ldr	r2, [pc, #104]	; (c200 <SPITInOut+0xdc>)
    c198:	4c1a      	ldr	r4, [pc, #104]	; (c204 <SPITInOut+0xe0>)
    c19a:	47a0      	blx	r4
		 ptr = buffer; 
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	613b      	str	r3, [r7, #16]
		 for (i=0;i<size;i++)
    c1a0:	1c3b      	adds	r3, r7, #0
    c1a2:	3317      	adds	r3, #23
    c1a4:	2200      	movs	r2, #0
    c1a6:	701a      	strb	r2, [r3, #0]
    c1a8:	e00f      	b.n	c1ca <SPITInOut+0xa6>
		 {
			 *ptr++ = rxBuffT[i]; 
    c1aa:	693b      	ldr	r3, [r7, #16]
    c1ac:	1c5a      	adds	r2, r3, #1
    c1ae:	613a      	str	r2, [r7, #16]
    c1b0:	1c3a      	adds	r2, r7, #0
    c1b2:	3217      	adds	r2, #23
    c1b4:	7812      	ldrb	r2, [r2, #0]
    c1b6:	4912      	ldr	r1, [pc, #72]	; (c200 <SPITInOut+0xdc>)
    c1b8:	5c8a      	ldrb	r2, [r1, r2]
    c1ba:	701a      	strb	r2, [r3, #0]
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
		 ptr = buffer; 
		 for (i=0;i<size;i++)
    c1bc:	1c3b      	adds	r3, r7, #0
    c1be:	3317      	adds	r3, #23
    c1c0:	781a      	ldrb	r2, [r3, #0]
    c1c2:	1c3b      	adds	r3, r7, #0
    c1c4:	3317      	adds	r3, #23
    c1c6:	3201      	adds	r2, #1
    c1c8:	701a      	strb	r2, [r3, #0]
    c1ca:	1c3a      	adds	r2, r7, #0
    c1cc:	3217      	adds	r2, #23
    c1ce:	1cfb      	adds	r3, r7, #3
    c1d0:	7812      	ldrb	r2, [r2, #0]
    c1d2:	781b      	ldrb	r3, [r3, #0]
    c1d4:	429a      	cmp	r2, r3
    c1d6:	d3e8      	bcc.n	c1aa <SPITInOut+0x86>
		 {
			 *ptr++ = rxBuffT[i]; 
		 }
		 
		 spi_select_slave(&spit_master_instance, &slavet, false);
    c1d8:	4a05      	ldr	r2, [pc, #20]	; (c1f0 <SPITInOut+0xcc>)
    c1da:	4b06      	ldr	r3, [pc, #24]	; (c1f4 <SPITInOut+0xd0>)
    c1dc:	1c10      	adds	r0, r2, #0
    c1de:	1c19      	adds	r1, r3, #0
    c1e0:	2200      	movs	r2, #0
    c1e2:	4b05      	ldr	r3, [pc, #20]	; (c1f8 <SPITInOut+0xd4>)
    c1e4:	4798      	blx	r3
	 } 
	 return success; 
    c1e6:	68fb      	ldr	r3, [r7, #12]
 }
    c1e8:	1c18      	adds	r0, r3, #0
    c1ea:	46bd      	mov	sp, r7
    c1ec:	b007      	add	sp, #28
    c1ee:	bd90      	pop	{r4, r7, pc}
    c1f0:	20003378 	.word	0x20003378
    c1f4:	20003364 	.word	0x20003364
    c1f8:	000121e9 	.word	0x000121e9
    c1fc:	200030cc 	.word	0x200030cc
    c200:	20003368 	.word	0x20003368
    c204:	000122c5 	.word	0x000122c5

0000c208 <CRC8>:
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
    c208:	b580      	push	{r7, lr}
    c20a:	b084      	sub	sp, #16
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
    c210:	1c0a      	adds	r2, r1, #0
    c212:	1cfb      	adds	r3, r7, #3
    c214:	701a      	strb	r2, [r3, #0]
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
    c216:	1c3b      	adds	r3, r7, #0
    c218:	330a      	adds	r3, #10
    c21a:	2200      	movs	r2, #0
    c21c:	801a      	strh	r2, [r3, #0]
	 while (len--) {
    c21e:	e03f      	b.n	c2a0 <CRC8+0x98>
		 extract = *data++;
    c220:	687b      	ldr	r3, [r7, #4]
    c222:	1c5a      	adds	r2, r3, #1
    c224:	607a      	str	r2, [r7, #4]
    c226:	781a      	ldrb	r2, [r3, #0]
    c228:	1c3b      	adds	r3, r7, #0
    c22a:	330c      	adds	r3, #12
    c22c:	801a      	strh	r2, [r3, #0]
		 for (tempI = 8; tempI; tempI--) {
    c22e:	1c3b      	adds	r3, r7, #0
    c230:	330e      	adds	r3, #14
    c232:	2208      	movs	r2, #8
    c234:	801a      	strh	r2, [r3, #0]
    c236:	e02e      	b.n	c296 <CRC8+0x8e>
			 sum = (crc ^ extract) & 0x80; //01;
    c238:	1c3a      	adds	r2, r7, #0
    c23a:	320a      	adds	r2, #10
    c23c:	1c3b      	adds	r3, r7, #0
    c23e:	330c      	adds	r3, #12
    c240:	8812      	ldrh	r2, [r2, #0]
    c242:	881b      	ldrh	r3, [r3, #0]
    c244:	4053      	eors	r3, r2
    c246:	b299      	uxth	r1, r3
    c248:	1c3b      	adds	r3, r7, #0
    c24a:	3308      	adds	r3, #8
    c24c:	2280      	movs	r2, #128	; 0x80
    c24e:	400a      	ands	r2, r1
    c250:	801a      	strh	r2, [r3, #0]
			 crc <<=1;  //>>= 1;
    c252:	1c3a      	adds	r2, r7, #0
    c254:	320a      	adds	r2, #10
    c256:	1c3b      	adds	r3, r7, #0
    c258:	330a      	adds	r3, #10
    c25a:	881b      	ldrh	r3, [r3, #0]
    c25c:	18db      	adds	r3, r3, r3
    c25e:	8013      	strh	r3, [r2, #0]
			 if (sum) {
    c260:	1c3b      	adds	r3, r7, #0
    c262:	3308      	adds	r3, #8
    c264:	881b      	ldrh	r3, [r3, #0]
    c266:	2b00      	cmp	r3, #0
    c268:	d007      	beq.n	c27a <CRC8+0x72>
				 crc ^= 0x31;  //8C;
    c26a:	1c3b      	adds	r3, r7, #0
    c26c:	330a      	adds	r3, #10
    c26e:	1c3a      	adds	r2, r7, #0
    c270:	320a      	adds	r2, #10
    c272:	8812      	ldrh	r2, [r2, #0]
    c274:	2131      	movs	r1, #49	; 0x31
    c276:	404a      	eors	r2, r1
    c278:	801a      	strh	r2, [r3, #0]
			 }
			 extract <<=1; //>>= 1;
    c27a:	1c3a      	adds	r2, r7, #0
    c27c:	320c      	adds	r2, #12
    c27e:	1c3b      	adds	r3, r7, #0
    c280:	330c      	adds	r3, #12
    c282:	881b      	ldrh	r3, [r3, #0]
    c284:	18db      	adds	r3, r3, r3
    c286:	8013      	strh	r3, [r2, #0]
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
		 extract = *data++;
		 for (tempI = 8; tempI; tempI--) {
    c288:	1c3b      	adds	r3, r7, #0
    c28a:	330e      	adds	r3, #14
    c28c:	881a      	ldrh	r2, [r3, #0]
    c28e:	1c3b      	adds	r3, r7, #0
    c290:	330e      	adds	r3, #14
    c292:	3a01      	subs	r2, #1
    c294:	801a      	strh	r2, [r3, #0]
    c296:	1c3b      	adds	r3, r7, #0
    c298:	330e      	adds	r3, #14
    c29a:	881b      	ldrh	r3, [r3, #0]
    c29c:	2b00      	cmp	r3, #0
    c29e:	d1cb      	bne.n	c238 <CRC8+0x30>
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
    c2a0:	1cfb      	adds	r3, r7, #3
    c2a2:	781b      	ldrb	r3, [r3, #0]
    c2a4:	1cfa      	adds	r2, r7, #3
    c2a6:	1e59      	subs	r1, r3, #1
    c2a8:	7011      	strb	r1, [r2, #0]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	d1b8      	bne.n	c220 <CRC8+0x18>
				 crc ^= 0x31;  //8C;
			 }
			 extract <<=1; //>>= 1;
		 }
	 }
	 return crc;
    c2ae:	1c3b      	adds	r3, r7, #0
    c2b0:	330a      	adds	r3, #10
    c2b2:	881b      	ldrh	r3, [r3, #0]
    c2b4:	b2db      	uxtb	r3, r3
 }
    c2b6:	1c18      	adds	r0, r3, #0
    c2b8:	46bd      	mov	sp, r7
    c2ba:	b004      	add	sp, #16
    c2bc:	bd80      	pop	{r7, pc}
    c2be:	46c0      	nop			; (mov r8, r8)

0000c2c0 <RF433ReadRXBuffer>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
    c2c0:	b580      	push	{r7, lr}
    c2c2:	b084      	sub	sp, #16
    c2c4:	af00      	add	r7, sp, #0
    c2c6:	6078      	str	r0, [r7, #4]
    c2c8:	1c0a      	adds	r2, r1, #0
    c2ca:	1cfb      	adds	r3, r7, #3
    c2cc:	701a      	strb	r2, [r3, #0]
	uint8_t i; 
	
	for (i=0;i<length;i++)
    c2ce:	1c3b      	adds	r3, r7, #0
    c2d0:	330f      	adds	r3, #15
    c2d2:	2200      	movs	r2, #0
    c2d4:	701a      	strb	r2, [r3, #0]
    c2d6:	e00d      	b.n	c2f4 <RF433ReadRXBuffer+0x34>
	{
		buffer[i] = 0x00;
    c2d8:	1c3b      	adds	r3, r7, #0
    c2da:	330f      	adds	r3, #15
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	687a      	ldr	r2, [r7, #4]
    c2e0:	18d3      	adds	r3, r2, r3
    c2e2:	2200      	movs	r2, #0
    c2e4:	701a      	strb	r2, [r3, #0]
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
	uint8_t i; 
	
	for (i=0;i<length;i++)
    c2e6:	1c3b      	adds	r3, r7, #0
    c2e8:	330f      	adds	r3, #15
    c2ea:	781a      	ldrb	r2, [r3, #0]
    c2ec:	1c3b      	adds	r3, r7, #0
    c2ee:	330f      	adds	r3, #15
    c2f0:	3201      	adds	r2, #1
    c2f2:	701a      	strb	r2, [r3, #0]
    c2f4:	1c3a      	adds	r2, r7, #0
    c2f6:	320f      	adds	r2, #15
    c2f8:	1cfb      	adds	r3, r7, #3
    c2fa:	7812      	ldrb	r2, [r2, #0]
    c2fc:	781b      	ldrb	r3, [r3, #0]
    c2fe:	429a      	cmp	r2, r3
    c300:	d3ea      	bcc.n	c2d8 <RF433ReadRXBuffer+0x18>
	{
		buffer[i] = 0x00;
	}
	buffer[0] = 0x06;
    c302:	687b      	ldr	r3, [r7, #4]
    c304:	2206      	movs	r2, #6
    c306:	701a      	strb	r2, [r3, #0]
	buffer[1] = length;
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	3301      	adds	r3, #1
    c30c:	1cfa      	adds	r2, r7, #3
    c30e:	7812      	ldrb	r2, [r2, #0]
    c310:	701a      	strb	r2, [r3, #0]
	SPITInOut(buffer,length+3);
    c312:	1cfb      	adds	r3, r7, #3
    c314:	781b      	ldrb	r3, [r3, #0]
    c316:	3303      	adds	r3, #3
    c318:	b2db      	uxtb	r3, r3
    c31a:	687a      	ldr	r2, [r7, #4]
    c31c:	1c10      	adds	r0, r2, #0
    c31e:	1c19      	adds	r1, r3, #0
    c320:	4b11      	ldr	r3, [pc, #68]	; (c368 <RF433ReadRXBuffer+0xa8>)
    c322:	4798      	blx	r3
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    c324:	1c3b      	adds	r3, r7, #0
    c326:	330f      	adds	r3, #15
    c328:	2200      	movs	r2, #0
    c32a:	701a      	strb	r2, [r3, #0]
    c32c:	e012      	b.n	c354 <RF433ReadRXBuffer+0x94>
	{
		tpsRXBuffer[i] = buffer[i+3];
    c32e:	1c3b      	adds	r3, r7, #0
    c330:	330f      	adds	r3, #15
    c332:	781b      	ldrb	r3, [r3, #0]
    c334:	1c3a      	adds	r2, r7, #0
    c336:	320f      	adds	r2, #15
    c338:	7812      	ldrb	r2, [r2, #0]
    c33a:	3203      	adds	r2, #3
    c33c:	6879      	ldr	r1, [r7, #4]
    c33e:	188a      	adds	r2, r1, r2
    c340:	7811      	ldrb	r1, [r2, #0]
    c342:	4a0a      	ldr	r2, [pc, #40]	; (c36c <RF433ReadRXBuffer+0xac>)
    c344:	54d1      	strb	r1, [r2, r3]
	buffer[1] = length;
	SPITInOut(buffer,length+3);
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    c346:	1c3b      	adds	r3, r7, #0
    c348:	330f      	adds	r3, #15
    c34a:	781a      	ldrb	r2, [r3, #0]
    c34c:	1c3b      	adds	r3, r7, #0
    c34e:	330f      	adds	r3, #15
    c350:	3201      	adds	r2, #1
    c352:	701a      	strb	r2, [r3, #0]
    c354:	1c3a      	adds	r2, r7, #0
    c356:	320f      	adds	r2, #15
    c358:	1cfb      	adds	r3, r7, #3
    c35a:	7812      	ldrb	r2, [r2, #0]
    c35c:	781b      	ldrb	r3, [r3, #0]
    c35e:	429a      	cmp	r2, r3
    c360:	d3e5      	bcc.n	c32e <RF433ReadRXBuffer+0x6e>
	{
		tpsRXBuffer[i] = buffer[i+3];
	}  
}  
    c362:	46bd      	mov	sp, r7
    c364:	b004      	add	sp, #16
    c366:	bd80      	pop	{r7, pc}
    c368:	0000c125 	.word	0x0000c125
    c36c:	20003464 	.word	0x20003464

0000c370 <RF433ReadRXLevel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXLevel(void)
{
    c370:	b580      	push	{r7, lr}
    c372:	b082      	sub	sp, #8
    c374:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[3];
	
	commandBuffer[0] = 0x01;
    c376:	1d3b      	adds	r3, r7, #4
    c378:	2201      	movs	r2, #1
    c37a:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;
    c37c:	1d3b      	adds	r3, r7, #4
    c37e:	2200      	movs	r2, #0
    c380:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00;
    c382:	1d3b      	adds	r3, r7, #4
    c384:	2200      	movs	r2, #0
    c386:	709a      	strb	r2, [r3, #2]
	SPITInOut(commandBuffer,3);
    c388:	1d3b      	adds	r3, r7, #4
    c38a:	1c18      	adds	r0, r3, #0
    c38c:	2103      	movs	r1, #3
    c38e:	4b04      	ldr	r3, [pc, #16]	; (c3a0 <RF433ReadRXLevel+0x30>)
    c390:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte
	//--------------------------
 	tpsRXLevel = commandBuffer[2];
    c392:	1d3b      	adds	r3, r7, #4
    c394:	789a      	ldrb	r2, [r3, #2]
    c396:	4b03      	ldr	r3, [pc, #12]	; (c3a4 <RF433ReadRXLevel+0x34>)
    c398:	701a      	strb	r2, [r3, #0]
} 
    c39a:	46bd      	mov	sp, r7
    c39c:	b002      	add	sp, #8
    c39e:	bd80      	pop	{r7, pc}
    c3a0:	0000c125 	.word	0x0000c125
    c3a4:	20003360 	.word	0x20003360

0000c3a8 <RF433ReadEvents>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadEvents(void)
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b082      	sub	sp, #8
    c3ac:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[5];
	uint8_t i; 
	
	commandBuffer[0] = 0x04;
    c3ae:	1c3b      	adds	r3, r7, #0
    c3b0:	2204      	movs	r2, #4
    c3b2:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;  	
    c3b4:	1c3b      	adds	r3, r7, #0
    c3b6:	2200      	movs	r2, #0
    c3b8:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00; 
    c3ba:	1c3b      	adds	r3, r7, #0
    c3bc:	2200      	movs	r2, #0
    c3be:	709a      	strb	r2, [r3, #2]
	commandBuffer[3] = 0x00;
    c3c0:	1c3b      	adds	r3, r7, #0
    c3c2:	2200      	movs	r2, #0
    c3c4:	70da      	strb	r2, [r3, #3]
	commandBuffer[4] = 0x00; 
    c3c6:	1c3b      	adds	r3, r7, #0
    c3c8:	2200      	movs	r2, #0
    c3ca:	711a      	strb	r2, [r3, #4]
	SPITInOut(commandBuffer,4);
    c3cc:	1c3b      	adds	r3, r7, #0
    c3ce:	1c18      	adds	r0, r3, #0
    c3d0:	2104      	movs	r1, #4
    c3d2:	4b0d      	ldr	r3, [pc, #52]	; (c408 <RF433ReadEvents+0x60>)
    c3d4:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    c3d6:	1dfb      	adds	r3, r7, #7
    c3d8:	2200      	movs	r2, #0
    c3da:	701a      	strb	r2, [r3, #0]
    c3dc:	e00c      	b.n	c3f8 <RF433ReadEvents+0x50>
	{
		tpsEvents[i] = commandBuffer[i];
    c3de:	1dfb      	adds	r3, r7, #7
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	1dfa      	adds	r2, r7, #7
    c3e4:	7812      	ldrb	r2, [r2, #0]
    c3e6:	1c39      	adds	r1, r7, #0
    c3e8:	5c89      	ldrb	r1, [r1, r2]
    c3ea:	4a08      	ldr	r2, [pc, #32]	; (c40c <RF433ReadEvents+0x64>)
    c3ec:	54d1      	strb	r1, [r2, r3]
	commandBuffer[4] = 0x00; 
	SPITInOut(commandBuffer,4);
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    c3ee:	1dfb      	adds	r3, r7, #7
    c3f0:	781a      	ldrb	r2, [r3, #0]
    c3f2:	1dfb      	adds	r3, r7, #7
    c3f4:	3201      	adds	r2, #1
    c3f6:	701a      	strb	r2, [r3, #0]
    c3f8:	1dfb      	adds	r3, r7, #7
    c3fa:	781b      	ldrb	r3, [r3, #0]
    c3fc:	2b03      	cmp	r3, #3
    c3fe:	d9ee      	bls.n	c3de <RF433ReadEvents+0x36>
	{
		tpsEvents[i] = commandBuffer[i];
	}
}
    c400:	46bd      	mov	sp, r7
    c402:	b002      	add	sp, #8
    c404:	bd80      	pop	{r7, pc}
    c406:	46c0      	nop			; (mov r8, r8)
    c408:	0000c125 	.word	0x0000c125
    c40c:	200030c0 	.word	0x200030c0

0000c410 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    c410:	b580      	push	{r7, lr}
    c412:	b082      	sub	sp, #8
    c414:	af00      	add	r7, sp, #0
    c416:	1c02      	adds	r2, r0, #0
    c418:	1dfb      	adds	r3, r7, #7
    c41a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c41c:	4b06      	ldr	r3, [pc, #24]	; (c438 <system_interrupt_enable+0x28>)
    c41e:	1dfa      	adds	r2, r7, #7
    c420:	7812      	ldrb	r2, [r2, #0]
    c422:	1c11      	adds	r1, r2, #0
    c424:	221f      	movs	r2, #31
    c426:	400a      	ands	r2, r1
    c428:	2101      	movs	r1, #1
    c42a:	1c08      	adds	r0, r1, #0
    c42c:	4090      	lsls	r0, r2
    c42e:	1c02      	adds	r2, r0, #0
    c430:	601a      	str	r2, [r3, #0]
}
    c432:	46bd      	mov	sp, r7
    c434:	b002      	add	sp, #8
    c436:	bd80      	pop	{r7, pc}
    c438:	e000e100 	.word	0xe000e100

0000c43c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    c43c:	b580      	push	{r7, lr}
    c43e:	b082      	sub	sp, #8
    c440:	af00      	add	r7, sp, #0
    c442:	1c02      	adds	r2, r0, #0
    c444:	1dfb      	adds	r3, r7, #7
    c446:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c448:	4a07      	ldr	r2, [pc, #28]	; (c468 <system_interrupt_disable+0x2c>)
    c44a:	1dfb      	adds	r3, r7, #7
    c44c:	781b      	ldrb	r3, [r3, #0]
    c44e:	1c19      	adds	r1, r3, #0
    c450:	231f      	movs	r3, #31
    c452:	400b      	ands	r3, r1
    c454:	2101      	movs	r1, #1
    c456:	1c08      	adds	r0, r1, #0
    c458:	4098      	lsls	r0, r3
    c45a:	1c03      	adds	r3, r0, #0
    c45c:	1c19      	adds	r1, r3, #0
    c45e:	2380      	movs	r3, #128	; 0x80
    c460:	50d1      	str	r1, [r2, r3]
}
    c462:	46bd      	mov	sp, r7
    c464:	b002      	add	sp, #8
    c466:	bd80      	pop	{r7, pc}
    c468:	e000e100 	.word	0xe000e100

0000c46c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    c46c:	b580      	push	{r7, lr}
    c46e:	b084      	sub	sp, #16
    c470:	af00      	add	r7, sp, #0
    c472:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    c474:	687b      	ldr	r3, [r7, #4]
    c476:	681b      	ldr	r3, [r3, #0]
    c478:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    c47a:	68fb      	ldr	r3, [r7, #12]
    c47c:	8a1b      	ldrh	r3, [r3, #16]
    c47e:	b29b      	uxth	r3, r3
    c480:	1c1a      	adds	r2, r3, #0
    c482:	2380      	movs	r3, #128	; 0x80
    c484:	021b      	lsls	r3, r3, #8
    c486:	4013      	ands	r3, r2
    c488:	1e5a      	subs	r2, r3, #1
    c48a:	4193      	sbcs	r3, r2
    c48c:	b2db      	uxtb	r3, r3
#endif
}
    c48e:	1c18      	adds	r0, r3, #0
    c490:	46bd      	mov	sp, r7
    c492:	b004      	add	sp, #16
    c494:	bd80      	pop	{r7, pc}
    c496:	46c0      	nop			; (mov r8, r8)

0000c498 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    c498:	b580      	push	{r7, lr}
    c49a:	b082      	sub	sp, #8
    c49c:	af00      	add	r7, sp, #0
    c49e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    c4a0:	46c0      	nop			; (mov r8, r8)
    c4a2:	687b      	ldr	r3, [r7, #4]
    c4a4:	1c18      	adds	r0, r3, #0
    c4a6:	4b04      	ldr	r3, [pc, #16]	; (c4b8 <_usart_wait_for_sync+0x20>)
    c4a8:	4798      	blx	r3
    c4aa:	1c03      	adds	r3, r0, #0
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d1f8      	bne.n	c4a2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    c4b0:	46bd      	mov	sp, r7
    c4b2:	b002      	add	sp, #8
    c4b4:	bd80      	pop	{r7, pc}
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	0000c46d 	.word	0x0000c46d

0000c4bc <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    c4bc:	b580      	push	{r7, lr}
    c4be:	b082      	sub	sp, #8
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c4c4:	687b      	ldr	r3, [r7, #4]
    c4c6:	2280      	movs	r2, #128	; 0x80
    c4c8:	05d2      	lsls	r2, r2, #23
    c4ca:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c4cc:	687b      	ldr	r3, [r7, #4]
    c4ce:	2200      	movs	r2, #0
    c4d0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    c4d2:	687b      	ldr	r3, [r7, #4]
    c4d4:	22ff      	movs	r2, #255	; 0xff
    c4d6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	2200      	movs	r2, #0
    c4dc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c4de:	687b      	ldr	r3, [r7, #4]
    c4e0:	2200      	movs	r2, #0
    c4e2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	2296      	movs	r2, #150	; 0x96
    c4e8:	0192      	lsls	r2, r2, #6
    c4ea:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
    c4ec:	687b      	ldr	r3, [r7, #4]
    c4ee:	2201      	movs	r2, #1
    c4f0:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
    c4f2:	687b      	ldr	r3, [r7, #4]
    c4f4:	2201      	movs	r2, #1
    c4f6:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
    c4f8:	687b      	ldr	r3, [r7, #4]
    c4fa:	2200      	movs	r2, #0
    c4fc:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    c4fe:	687b      	ldr	r3, [r7, #4]
    c500:	2200      	movs	r2, #0
    c502:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	2200      	movs	r2, #0
    c508:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	2288      	movs	r2, #136	; 0x88
    c50e:	0352      	lsls	r2, r2, #13
    c510:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    c512:	687b      	ldr	r3, [r7, #4]
    c514:	2200      	movs	r2, #0
    c516:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    c518:	687b      	ldr	r3, [r7, #4]
    c51a:	2200      	movs	r2, #0
    c51c:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    c51e:	687b      	ldr	r3, [r7, #4]
    c520:	2200      	movs	r2, #0
    c522:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    c524:	687b      	ldr	r3, [r7, #4]
    c526:	2200      	movs	r2, #0
    c528:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
    c52a:	687b      	ldr	r3, [r7, #4]
    c52c:	2200      	movs	r2, #0
    c52e:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	2200      	movs	r2, #0
    c534:	62da      	str	r2, [r3, #44]	; 0x2c
	config->receive_pulse_length                        = 19;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
#endif
}
    c536:	46bd      	mov	sp, r7
    c538:	b002      	add	sp, #8
    c53a:	bd80      	pop	{r7, pc}

0000c53c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	b084      	sub	sp, #16
    c540:	af00      	add	r7, sp, #0
    c542:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c544:	687b      	ldr	r3, [r7, #4]
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c54a:	687b      	ldr	r3, [r7, #4]
    c54c:	681b      	ldr	r3, [r3, #0]
    c54e:	1c18      	adds	r0, r3, #0
    c550:	4b09      	ldr	r3, [pc, #36]	; (c578 <usart_enable+0x3c>)
    c552:	4798      	blx	r3
    c554:	1c03      	adds	r3, r0, #0
    c556:	1c18      	adds	r0, r3, #0
    c558:	4b08      	ldr	r3, [pc, #32]	; (c57c <usart_enable+0x40>)
    c55a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	1c18      	adds	r0, r3, #0
    c560:	4b07      	ldr	r3, [pc, #28]	; (c580 <usart_enable+0x44>)
    c562:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c564:	68fb      	ldr	r3, [r7, #12]
    c566:	681b      	ldr	r3, [r3, #0]
    c568:	2202      	movs	r2, #2
    c56a:	431a      	orrs	r2, r3
    c56c:	68fb      	ldr	r3, [r7, #12]
    c56e:	601a      	str	r2, [r3, #0]
}
    c570:	46bd      	mov	sp, r7
    c572:	b004      	add	sp, #16
    c574:	bd80      	pop	{r7, pc}
    c576:	46c0      	nop			; (mov r8, r8)
    c578:	0001193d 	.word	0x0001193d
    c57c:	0000c411 	.word	0x0000c411
    c580:	0000c499 	.word	0x0000c499

0000c584 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    c584:	b580      	push	{r7, lr}
    c586:	b084      	sub	sp, #16
    c588:	af00      	add	r7, sp, #0
    c58a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c58c:	687b      	ldr	r3, [r7, #4]
    c58e:	681b      	ldr	r3, [r3, #0]
    c590:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	681b      	ldr	r3, [r3, #0]
    c596:	1c18      	adds	r0, r3, #0
    c598:	4b0a      	ldr	r3, [pc, #40]	; (c5c4 <usart_disable+0x40>)
    c59a:	4798      	blx	r3
    c59c:	1c03      	adds	r3, r0, #0
    c59e:	1c18      	adds	r0, r3, #0
    c5a0:	4b09      	ldr	r3, [pc, #36]	; (c5c8 <usart_disable+0x44>)
    c5a2:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    c5a4:	687b      	ldr	r3, [r7, #4]
    c5a6:	1c18      	adds	r0, r3, #0
    c5a8:	4b08      	ldr	r3, [pc, #32]	; (c5cc <usart_disable+0x48>)
    c5aa:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    c5ac:	68fb      	ldr	r3, [r7, #12]
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	2202      	movs	r2, #2
    c5b2:	1c19      	adds	r1, r3, #0
    c5b4:	4391      	bics	r1, r2
    c5b6:	1c0a      	adds	r2, r1, #0
    c5b8:	68fb      	ldr	r3, [r7, #12]
    c5ba:	601a      	str	r2, [r3, #0]
}
    c5bc:	46bd      	mov	sp, r7
    c5be:	b004      	add	sp, #16
    c5c0:	bd80      	pop	{r7, pc}
    c5c2:	46c0      	nop			; (mov r8, r8)
    c5c4:	0001193d 	.word	0x0001193d
    c5c8:	0000c43d 	.word	0x0000c43d
    c5cc:	0000c499 	.word	0x0000c499

0000c5d0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	b082      	sub	sp, #8
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	6078      	str	r0, [r7, #4]
    c5d8:	1c0a      	adds	r2, r1, #0
    c5da:	1cfb      	adds	r3, r7, #3
    c5dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    c5de:	687a      	ldr	r2, [r7, #4]
    c5e0:	2321      	movs	r3, #33	; 0x21
    c5e2:	5cd3      	ldrb	r3, [r2, r3]
    c5e4:	b2da      	uxtb	r2, r3
    c5e6:	1cfb      	adds	r3, r7, #3
    c5e8:	781b      	ldrb	r3, [r3, #0]
    c5ea:	2101      	movs	r1, #1
    c5ec:	1c08      	adds	r0, r1, #0
    c5ee:	4098      	lsls	r0, r3
    c5f0:	1c03      	adds	r3, r0, #0
    c5f2:	b2db      	uxtb	r3, r3
    c5f4:	4313      	orrs	r3, r2
    c5f6:	b2db      	uxtb	r3, r3
    c5f8:	b2d9      	uxtb	r1, r3
    c5fa:	687a      	ldr	r2, [r7, #4]
    c5fc:	2321      	movs	r3, #33	; 0x21
    c5fe:	54d1      	strb	r1, [r2, r3]

}
    c600:	46bd      	mov	sp, r7
    c602:	b002      	add	sp, #8
    c604:	bd80      	pop	{r7, pc}
    c606:	46c0      	nop			; (mov r8, r8)

0000c608 <usart_read_callback>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void usart_read_callback(const struct usart_module *const usart_module)
{
    c608:	b580      	push	{r7, lr}
    c60a:	b086      	sub	sp, #24
    c60c:	af00      	add	r7, sp, #0
    c60e:	6078      	str	r0, [r7, #4]
	uint16_t itemp,itemp2;
	uint32_t ltemp,ltemp2; 
	 
//	usart_write_buffer_job(&usart_instance,
//			(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	receiveIntercharTimeout = TRUE; 
    c610:	4bd9      	ldr	r3, [pc, #868]	; (c978 <usart_read_callback+0x370>)
    c612:	2201      	movs	r2, #1
    c614:	701a      	strb	r2, [r3, #0]
	receiveLength = usart_instance.rxBufferCount;
    c616:	4bd9      	ldr	r3, [pc, #868]	; (c97c <usart_read_callback+0x374>)
    c618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    c61a:	b29a      	uxth	r2, r3
    c61c:	4bd8      	ldr	r3, [pc, #864]	; (c980 <usart_read_callback+0x378>)
    c61e:	801a      	strh	r2, [r3, #0]
	itemp = general_buffer[3];
    c620:	4bd8      	ldr	r3, [pc, #864]	; (c984 <usart_read_callback+0x37c>)
    c622:	78da      	ldrb	r2, [r3, #3]
    c624:	1c3b      	adds	r3, r7, #0
    c626:	3316      	adds	r3, #22
    c628:	801a      	strh	r2, [r3, #0]
	itemp = itemp<<8;
    c62a:	1c3b      	adds	r3, r7, #0
    c62c:	3316      	adds	r3, #22
    c62e:	1c3a      	adds	r2, r7, #0
    c630:	3216      	adds	r2, #22
    c632:	8812      	ldrh	r2, [r2, #0]
    c634:	0212      	lsls	r2, r2, #8
    c636:	801a      	strh	r2, [r3, #0]
	itemp2 = general_buffer[4];
    c638:	4bd2      	ldr	r3, [pc, #840]	; (c984 <usart_read_callback+0x37c>)
    c63a:	791a      	ldrb	r2, [r3, #4]
    c63c:	1c3b      	adds	r3, r7, #0
    c63e:	3314      	adds	r3, #20
    c640:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    c642:	1c3b      	adds	r3, r7, #0
    c644:	3316      	adds	r3, #22
    c646:	1c39      	adds	r1, r7, #0
    c648:	3116      	adds	r1, #22
    c64a:	1c3a      	adds	r2, r7, #0
    c64c:	3214      	adds	r2, #20
    c64e:	8809      	ldrh	r1, [r1, #0]
    c650:	8812      	ldrh	r2, [r2, #0]
    c652:	430a      	orrs	r2, r1
    c654:	801a      	strh	r2, [r3, #0]
	
	txBluetoothBuffer[0]='#';
    c656:	4bcc      	ldr	r3, [pc, #816]	; (c988 <usart_read_callback+0x380>)
    c658:	2223      	movs	r2, #35	; 0x23
    c65a:	701a      	strb	r2, [r3, #0]
	if (receiveLength >5)
    c65c:	4bc8      	ldr	r3, [pc, #800]	; (c980 <usart_read_callback+0x378>)
    c65e:	881b      	ldrh	r3, [r3, #0]
    c660:	2b05      	cmp	r3, #5
    c662:	d801      	bhi.n	c668 <usart_read_callback+0x60>
    c664:	f000 fd18 	bl	d098 <usart_read_callback+0xa90>
	{
		switch(itemp)
    c668:	1c3b      	adds	r3, r7, #0
    c66a:	3316      	adds	r3, #22
    c66c:	881b      	ldrh	r3, [r3, #0]
    c66e:	4ac7      	ldr	r2, [pc, #796]	; (c98c <usart_read_callback+0x384>)
    c670:	4293      	cmp	r3, r2
    c672:	d100      	bne.n	c676 <usart_read_callback+0x6e>
    c674:	e2c6      	b.n	cc04 <usart_read_callback+0x5fc>
    c676:	4ac5      	ldr	r2, [pc, #788]	; (c98c <usart_read_callback+0x384>)
    c678:	4293      	cmp	r3, r2
    c67a:	dc07      	bgt.n	c68c <usart_read_callback+0x84>
    c67c:	4ac4      	ldr	r2, [pc, #784]	; (c990 <usart_read_callback+0x388>)
    c67e:	4293      	cmp	r3, r2
    c680:	d03c      	beq.n	c6fc <usart_read_callback+0xf4>
    c682:	4ac4      	ldr	r2, [pc, #784]	; (c994 <usart_read_callback+0x38c>)
    c684:	4293      	cmp	r3, r2
    c686:	d05f      	beq.n	c748 <usart_read_callback+0x140>
    c688:	f000 fd06 	bl	d098 <usart_read_callback+0xa90>
    c68c:	4ac2      	ldr	r2, [pc, #776]	; (c998 <usart_read_callback+0x390>)
    c68e:	4293      	cmp	r3, r2
    c690:	d101      	bne.n	c696 <usart_read_callback+0x8e>
    c692:	f000 fbe9 	bl	ce68 <usart_read_callback+0x860>
    c696:	4ac1      	ldr	r2, [pc, #772]	; (c99c <usart_read_callback+0x394>)
    c698:	4293      	cmp	r3, r2
    c69a:	d005      	beq.n	c6a8 <usart_read_callback+0xa0>
    c69c:	4ac0      	ldr	r2, [pc, #768]	; (c9a0 <usart_read_callback+0x398>)
    c69e:	4293      	cmp	r3, r2
    c6a0:	d100      	bne.n	c6a4 <usart_read_callback+0x9c>
    c6a2:	e197      	b.n	c9d4 <usart_read_callback+0x3cc>
    c6a4:	f000 fcf8 	bl	d098 <usart_read_callback+0xa90>
		{
			case COMMAND_RV:
			{
				txBluetoothBuffer[1] = 0;
    c6a8:	4bb7      	ldr	r3, [pc, #732]	; (c988 <usart_read_callback+0x380>)
    c6aa:	2200      	movs	r2, #0
    c6ac:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    c6ae:	4bb6      	ldr	r3, [pc, #728]	; (c988 <usart_read_callback+0x380>)
    c6b0:	2209      	movs	r2, #9
    c6b2:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'r';
    c6b4:	4bb4      	ldr	r3, [pc, #720]	; (c988 <usart_read_callback+0x380>)
    c6b6:	2272      	movs	r2, #114	; 0x72
    c6b8:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    c6ba:	4bb3      	ldr	r3, [pc, #716]	; (c988 <usart_read_callback+0x380>)
    c6bc:	2276      	movs	r2, #118	; 0x76
    c6be:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = remoteVersionToReport[0];
    c6c0:	4bb8      	ldr	r3, [pc, #736]	; (c9a4 <usart_read_callback+0x39c>)
    c6c2:	781a      	ldrb	r2, [r3, #0]
    c6c4:	4bb0      	ldr	r3, [pc, #704]	; (c988 <usart_read_callback+0x380>)
    c6c6:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = remoteVersionToReport[1];
    c6c8:	4bb6      	ldr	r3, [pc, #728]	; (c9a4 <usart_read_callback+0x39c>)
    c6ca:	785a      	ldrb	r2, [r3, #1]
    c6cc:	4bae      	ldr	r3, [pc, #696]	; (c988 <usart_read_callback+0x380>)
    c6ce:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';		
    c6d0:	4bad      	ldr	r3, [pc, #692]	; (c988 <usart_read_callback+0x380>)
    c6d2:	222e      	movs	r2, #46	; 0x2e
    c6d4:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = remoteVersionToReport[2];
    c6d6:	4bb3      	ldr	r3, [pc, #716]	; (c9a4 <usart_read_callback+0x39c>)
    c6d8:	789a      	ldrb	r2, [r3, #2]
    c6da:	4bab      	ldr	r3, [pc, #684]	; (c988 <usart_read_callback+0x380>)
    c6dc:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = remoteVersionToReport[3];
    c6de:	4bb1      	ldr	r3, [pc, #708]	; (c9a4 <usart_read_callback+0x39c>)
    c6e0:	78da      	ldrb	r2, [r3, #3]
    c6e2:	4ba9      	ldr	r3, [pc, #676]	; (c988 <usart_read_callback+0x380>)
    c6e4:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    c6e6:	4ba8      	ldr	r3, [pc, #672]	; (c988 <usart_read_callback+0x380>)
    c6e8:	220d      	movs	r2, #13
    c6ea:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);												
    c6ec:	4ba6      	ldr	r3, [pc, #664]	; (c988 <usart_read_callback+0x380>)
    c6ee:	1c18      	adds	r0, r3, #0
    c6f0:	210b      	movs	r1, #11
    c6f2:	2201      	movs	r2, #1
    c6f4:	4bac      	ldr	r3, [pc, #688]	; (c9a8 <usart_read_callback+0x3a0>)
    c6f6:	4798      	blx	r3
				break;
    c6f8:	f000 fcce 	bl	d098 <usart_read_callback+0xa90>
			}
			case COMMAND_BV:
			{
				txBluetoothBuffer[1] = 0;
    c6fc:	4ba2      	ldr	r3, [pc, #648]	; (c988 <usart_read_callback+0x380>)
    c6fe:	2200      	movs	r2, #0
    c700:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    c702:	4ba1      	ldr	r3, [pc, #644]	; (c988 <usart_read_callback+0x380>)
    c704:	2209      	movs	r2, #9
    c706:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'b';
    c708:	4b9f      	ldr	r3, [pc, #636]	; (c988 <usart_read_callback+0x380>)
    c70a:	2262      	movs	r2, #98	; 0x62
    c70c:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    c70e:	4b9e      	ldr	r3, [pc, #632]	; (c988 <usart_read_callback+0x380>)
    c710:	2276      	movs	r2, #118	; 0x76
    c712:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    c714:	4b9c      	ldr	r3, [pc, #624]	; (c988 <usart_read_callback+0x380>)
    c716:	2230      	movs	r2, #48	; 0x30
    c718:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    c71a:	4b9b      	ldr	r3, [pc, #620]	; (c988 <usart_read_callback+0x380>)
    c71c:	2231      	movs	r2, #49	; 0x31
    c71e:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';
    c720:	4b99      	ldr	r3, [pc, #612]	; (c988 <usart_read_callback+0x380>)
    c722:	222e      	movs	r2, #46	; 0x2e
    c724:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = FWVER1;
    c726:	4b98      	ldr	r3, [pc, #608]	; (c988 <usart_read_callback+0x380>)
    c728:	2231      	movs	r2, #49	; 0x31
    c72a:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = FWVER0;
    c72c:	4b96      	ldr	r3, [pc, #600]	; (c988 <usart_read_callback+0x380>)
    c72e:	2234      	movs	r2, #52	; 0x34
    c730:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    c732:	4b95      	ldr	r3, [pc, #596]	; (c988 <usart_read_callback+0x380>)
    c734:	220d      	movs	r2, #13
    c736:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    c738:	4b93      	ldr	r3, [pc, #588]	; (c988 <usart_read_callback+0x380>)
    c73a:	1c18      	adds	r0, r3, #0
    c73c:	210b      	movs	r1, #11
    c73e:	2201      	movs	r2, #1
    c740:	4b99      	ldr	r3, [pc, #612]	; (c9a8 <usart_read_callback+0x3a0>)
    c742:	4798      	blx	r3
				break;
    c744:	f000 fca8 	bl	d098 <usart_read_callback+0xa90>
			}	
			case COMMAND_DB:
			{
				downloadPacketNumber = general_buffer[5];
    c748:	4b8e      	ldr	r3, [pc, #568]	; (c984 <usart_read_callback+0x37c>)
    c74a:	795a      	ldrb	r2, [r3, #5]
    c74c:	4b97      	ldr	r3, [pc, #604]	; (c9ac <usart_read_callback+0x3a4>)
    c74e:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    c750:	4b96      	ldr	r3, [pc, #600]	; (c9ac <usart_read_callback+0x3a4>)
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	2b00      	cmp	r3, #0
    c756:	d000      	beq.n	c75a <usart_read_callback+0x152>
    c758:	e08e      	b.n	c878 <usart_read_callback+0x270>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    c75a:	4b8a      	ldr	r3, [pc, #552]	; (c984 <usart_read_callback+0x37c>)
    c75c:	799b      	ldrb	r3, [r3, #6]
    c75e:	061b      	lsls	r3, r3, #24
    c760:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    c762:	4b88      	ldr	r3, [pc, #544]	; (c984 <usart_read_callback+0x37c>)
    c764:	79db      	ldrb	r3, [r3, #7]
    c766:	041b      	lsls	r3, r3, #16
    c768:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    c76a:	693a      	ldr	r2, [r7, #16]
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	4313      	orrs	r3, r2
    c770:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    c772:	4b84      	ldr	r3, [pc, #528]	; (c984 <usart_read_callback+0x37c>)
    c774:	7a1b      	ldrb	r3, [r3, #8]
    c776:	021b      	lsls	r3, r3, #8
    c778:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c77a:	693a      	ldr	r2, [r7, #16]
    c77c:	68fb      	ldr	r3, [r7, #12]
    c77e:	4313      	orrs	r3, r2
    c780:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    c782:	4b80      	ldr	r3, [pc, #512]	; (c984 <usart_read_callback+0x37c>)
    c784:	7a5b      	ldrb	r3, [r3, #9]
    c786:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    c788:	693a      	ldr	r2, [r7, #16]
    c78a:	68fb      	ldr	r3, [r7, #12]
    c78c:	4313      	orrs	r3, r2
    c78e:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp; 
    c790:	4b87      	ldr	r3, [pc, #540]	; (c9b0 <usart_read_callback+0x3a8>)
    c792:	693a      	ldr	r2, [r7, #16]
    c794:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    c796:	4b7b      	ldr	r3, [pc, #492]	; (c984 <usart_read_callback+0x37c>)
    c798:	7a9b      	ldrb	r3, [r3, #10]
    c79a:	061b      	lsls	r3, r3, #24
    c79c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    c79e:	4b79      	ldr	r3, [pc, #484]	; (c984 <usart_read_callback+0x37c>)
    c7a0:	7adb      	ldrb	r3, [r3, #11]
    c7a2:	041b      	lsls	r3, r3, #16
    c7a4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c7a6:	693a      	ldr	r2, [r7, #16]
    c7a8:	68fb      	ldr	r3, [r7, #12]
    c7aa:	4313      	orrs	r3, r2
    c7ac:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    c7ae:	4b75      	ldr	r3, [pc, #468]	; (c984 <usart_read_callback+0x37c>)
    c7b0:	7b1b      	ldrb	r3, [r3, #12]
    c7b2:	021b      	lsls	r3, r3, #8
    c7b4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c7b6:	693a      	ldr	r2, [r7, #16]
    c7b8:	68fb      	ldr	r3, [r7, #12]
    c7ba:	4313      	orrs	r3, r2
    c7bc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    c7be:	4b71      	ldr	r3, [pc, #452]	; (c984 <usart_read_callback+0x37c>)
    c7c0:	7b5b      	ldrb	r3, [r3, #13]
    c7c2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c7c4:	693a      	ldr	r2, [r7, #16]
    c7c6:	68fb      	ldr	r3, [r7, #12]
    c7c8:	4313      	orrs	r3, r2
    c7ca:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;					
    c7cc:	4b78      	ldr	r3, [pc, #480]	; (c9b0 <usart_read_callback+0x3a8>)
    c7ce:	693a      	ldr	r2, [r7, #16]
    c7d0:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    c7d2:	4b6c      	ldr	r3, [pc, #432]	; (c984 <usart_read_callback+0x37c>)
    c7d4:	7b9b      	ldrb	r3, [r3, #14]
    c7d6:	061b      	lsls	r3, r3, #24
    c7d8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    c7da:	4b6a      	ldr	r3, [pc, #424]	; (c984 <usart_read_callback+0x37c>)
    c7dc:	7bdb      	ldrb	r3, [r3, #15]
    c7de:	041b      	lsls	r3, r3, #16
    c7e0:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c7e2:	693a      	ldr	r2, [r7, #16]
    c7e4:	68fb      	ldr	r3, [r7, #12]
    c7e6:	4313      	orrs	r3, r2
    c7e8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    c7ea:	4b66      	ldr	r3, [pc, #408]	; (c984 <usart_read_callback+0x37c>)
    c7ec:	7c1b      	ldrb	r3, [r3, #16]
    c7ee:	021b      	lsls	r3, r3, #8
    c7f0:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c7f2:	693a      	ldr	r2, [r7, #16]
    c7f4:	68fb      	ldr	r3, [r7, #12]
    c7f6:	4313      	orrs	r3, r2
    c7f8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    c7fa:	4b62      	ldr	r3, [pc, #392]	; (c984 <usart_read_callback+0x37c>)
    c7fc:	7c5b      	ldrb	r3, [r3, #17]
    c7fe:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c800:	693a      	ldr	r2, [r7, #16]
    c802:	68fb      	ldr	r3, [r7, #12]
    c804:	4313      	orrs	r3, r2
    c806:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;	
    c808:	4b69      	ldr	r3, [pc, #420]	; (c9b0 <usart_read_callback+0x3a8>)
    c80a:	693a      	ldr	r2, [r7, #16]
    c80c:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    c80e:	4b5d      	ldr	r3, [pc, #372]	; (c984 <usart_read_callback+0x37c>)
    c810:	7c9b      	ldrb	r3, [r3, #18]
    c812:	061b      	lsls	r3, r3, #24
    c814:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    c816:	4b5b      	ldr	r3, [pc, #364]	; (c984 <usart_read_callback+0x37c>)
    c818:	7cdb      	ldrb	r3, [r3, #19]
    c81a:	041b      	lsls	r3, r3, #16
    c81c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c81e:	693a      	ldr	r2, [r7, #16]
    c820:	68fb      	ldr	r3, [r7, #12]
    c822:	4313      	orrs	r3, r2
    c824:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    c826:	4b57      	ldr	r3, [pc, #348]	; (c984 <usart_read_callback+0x37c>)
    c828:	7d1b      	ldrb	r3, [r3, #20]
    c82a:	021b      	lsls	r3, r3, #8
    c82c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c82e:	693a      	ldr	r2, [r7, #16]
    c830:	68fb      	ldr	r3, [r7, #12]
    c832:	4313      	orrs	r3, r2
    c834:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    c836:	4b53      	ldr	r3, [pc, #332]	; (c984 <usart_read_callback+0x37c>)
    c838:	7d5b      	ldrb	r3, [r3, #21]
    c83a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    c83c:	693a      	ldr	r2, [r7, #16]
    c83e:	68fb      	ldr	r3, [r7, #12]
    c840:	4313      	orrs	r3, r2
    c842:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;		
    c844:	4b5a      	ldr	r3, [pc, #360]	; (c9b0 <usart_read_callback+0x3a8>)
    c846:	693a      	ldr	r2, [r7, #16]
    c848:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    c84a:	4b4e      	ldr	r3, [pc, #312]	; (c984 <usart_read_callback+0x37c>)
    c84c:	7d9a      	ldrb	r2, [r3, #22]
    c84e:	4b59      	ldr	r3, [pc, #356]	; (c9b4 <usart_read_callback+0x3ac>)
    c850:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    c852:	4b59      	ldr	r3, [pc, #356]	; (c9b8 <usart_read_callback+0x3b0>)
    c854:	2200      	movs	r2, #0
    c856:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    c858:	4b58      	ldr	r3, [pc, #352]	; (c9bc <usart_read_callback+0x3b4>)
    c85a:	2201      	movs	r2, #1
    c85c:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    c85e:	4b58      	ldr	r3, [pc, #352]	; (c9c0 <usart_read_callback+0x3b8>)
    c860:	2200      	movs	r2, #0
    c862:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    c864:	4b57      	ldr	r3, [pc, #348]	; (c9c4 <usart_read_callback+0x3bc>)
    c866:	2200      	movs	r2, #0
    c868:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    c86a:	4b56      	ldr	r3, [pc, #344]	; (c9c4 <usart_read_callback+0x3bc>)
    c86c:	2200      	movs	r2, #0
    c86e:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0; 					
    c870:	4b54      	ldr	r3, [pc, #336]	; (c9c4 <usart_read_callback+0x3bc>)
    c872:	2200      	movs	r2, #0
    c874:	609a      	str	r2, [r3, #8]
    c876:	e058      	b.n	c92a <usart_read_callback+0x322>
				}
				else
				{
					itemp = general_buffer[1];
    c878:	4b42      	ldr	r3, [pc, #264]	; (c984 <usart_read_callback+0x37c>)
    c87a:	785a      	ldrb	r2, [r3, #1]
    c87c:	1c3b      	adds	r3, r7, #0
    c87e:	3316      	adds	r3, #22
    c880:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    c882:	1c3b      	adds	r3, r7, #0
    c884:	3316      	adds	r3, #22
    c886:	1c3a      	adds	r2, r7, #0
    c888:	3216      	adds	r2, #22
    c88a:	8812      	ldrh	r2, [r2, #0]
    c88c:	0212      	lsls	r2, r2, #8
    c88e:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    c890:	4b3c      	ldr	r3, [pc, #240]	; (c984 <usart_read_callback+0x37c>)
    c892:	789a      	ldrb	r2, [r3, #2]
    c894:	1c3b      	adds	r3, r7, #0
    c896:	3314      	adds	r3, #20
    c898:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    c89a:	1c3b      	adds	r3, r7, #0
    c89c:	3316      	adds	r3, #22
    c89e:	1c39      	adds	r1, r7, #0
    c8a0:	3116      	adds	r1, #22
    c8a2:	1c3a      	adds	r2, r7, #0
    c8a4:	3214      	adds	r2, #20
    c8a6:	8809      	ldrh	r1, [r1, #0]
    c8a8:	8812      	ldrh	r2, [r2, #0]
    c8aa:	430a      	orrs	r2, r1
    c8ac:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    c8ae:	1c3b      	adds	r3, r7, #0
    c8b0:	3316      	adds	r3, #22
    c8b2:	1c3a      	adds	r2, r7, #0
    c8b4:	3216      	adds	r2, #22
    c8b6:	8812      	ldrh	r2, [r2, #0]
    c8b8:	3a07      	subs	r2, #7
    c8ba:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    c8bc:	4b3b      	ldr	r3, [pc, #236]	; (c9ac <usart_read_callback+0x3a4>)
    c8be:	781a      	ldrb	r2, [r3, #0]
    c8c0:	4b3e      	ldr	r3, [pc, #248]	; (c9bc <usart_read_callback+0x3b4>)
    c8c2:	781b      	ldrb	r3, [r3, #0]
    c8c4:	429a      	cmp	r2, r3
    c8c6:	d130      	bne.n	c92a <usart_read_callback+0x322>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    c8c8:	4b38      	ldr	r3, [pc, #224]	; (c9ac <usart_read_callback+0x3a4>)
    c8ca:	781b      	ldrb	r3, [r3, #0]
    c8cc:	1c1a      	adds	r2, r3, #0
    c8ce:	4b39      	ldr	r3, [pc, #228]	; (c9b4 <usart_read_callback+0x3ac>)
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	3301      	adds	r3, #1
    c8d4:	429a      	cmp	r2, r3
    c8d6:	da0d      	bge.n	c8f4 <usart_read_callback+0x2ec>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    c8d8:	4b39      	ldr	r3, [pc, #228]	; (c9c0 <usart_read_callback+0x3b8>)
    c8da:	681b      	ldr	r3, [r3, #0]
    c8dc:	2284      	movs	r2, #132	; 0x84
    c8de:	0292      	lsls	r2, r2, #10
    c8e0:	1899      	adds	r1, r3, r2
    c8e2:	4a39      	ldr	r2, [pc, #228]	; (c9c8 <usart_read_callback+0x3c0>)
    c8e4:	1c3b      	adds	r3, r7, #0
    c8e6:	3316      	adds	r3, #22
    c8e8:	881b      	ldrh	r3, [r3, #0]
    c8ea:	1c08      	adds	r0, r1, #0
    c8ec:	1c11      	adds	r1, r2, #0
    c8ee:	1c1a      	adds	r2, r3, #0
    c8f0:	4b36      	ldr	r3, [pc, #216]	; (c9cc <usart_read_callback+0x3c4>)
    c8f2:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    c8f4:	4b2d      	ldr	r3, [pc, #180]	; (c9ac <usart_read_callback+0x3a4>)
    c8f6:	781a      	ldrb	r2, [r3, #0]
    c8f8:	4b2e      	ldr	r3, [pc, #184]	; (c9b4 <usart_read_callback+0x3ac>)
    c8fa:	781b      	ldrb	r3, [r3, #0]
    c8fc:	429a      	cmp	r2, r3
    c8fe:	d106      	bne.n	c90e <usart_read_callback+0x306>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    c900:	4b33      	ldr	r3, [pc, #204]	; (c9d0 <usart_read_callback+0x3c8>)
    c902:	681b      	ldr	r3, [r3, #0]
    c904:	2280      	movs	r2, #128	; 0x80
    c906:	01d2      	lsls	r2, r2, #7
    c908:	431a      	orrs	r2, r3
    c90a:	4b31      	ldr	r3, [pc, #196]	; (c9d0 <usart_read_callback+0x3c8>)
    c90c:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    c90e:	1c3b      	adds	r3, r7, #0
    c910:	3316      	adds	r3, #22
    c912:	881a      	ldrh	r2, [r3, #0]
    c914:	4b2a      	ldr	r3, [pc, #168]	; (c9c0 <usart_read_callback+0x3b8>)
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	18d2      	adds	r2, r2, r3
    c91a:	4b29      	ldr	r3, [pc, #164]	; (c9c0 <usart_read_callback+0x3b8>)
    c91c:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    c91e:	4b27      	ldr	r3, [pc, #156]	; (c9bc <usart_read_callback+0x3b4>)
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	3301      	adds	r3, #1
    c924:	b2da      	uxtb	r2, r3
    c926:	4b25      	ldr	r3, [pc, #148]	; (c9bc <usart_read_callback+0x3b4>)
    c928:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    c92a:	4b17      	ldr	r3, [pc, #92]	; (c988 <usart_read_callback+0x380>)
    c92c:	2200      	movs	r2, #0
    c92e:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    c930:	4b15      	ldr	r3, [pc, #84]	; (c988 <usart_read_callback+0x380>)
    c932:	2209      	movs	r2, #9
    c934:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    c936:	4b14      	ldr	r3, [pc, #80]	; (c988 <usart_read_callback+0x380>)
    c938:	2264      	movs	r2, #100	; 0x64
    c93a:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'b';
    c93c:	4b12      	ldr	r3, [pc, #72]	; (c988 <usart_read_callback+0x380>)
    c93e:	2262      	movs	r2, #98	; 0x62
    c940:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    c942:	4b11      	ldr	r3, [pc, #68]	; (c988 <usart_read_callback+0x380>)
    c944:	2230      	movs	r2, #48	; 0x30
    c946:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    c948:	4b0f      	ldr	r3, [pc, #60]	; (c988 <usart_read_callback+0x380>)
    c94a:	2231      	movs	r2, #49	; 0x31
    c94c:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    c94e:	4b17      	ldr	r3, [pc, #92]	; (c9ac <usart_read_callback+0x3a4>)
    c950:	781a      	ldrb	r2, [r3, #0]
    c952:	4b0d      	ldr	r3, [pc, #52]	; (c988 <usart_read_callback+0x380>)
    c954:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    c956:	4b17      	ldr	r3, [pc, #92]	; (c9b4 <usart_read_callback+0x3ac>)
    c958:	781a      	ldrb	r2, [r3, #0]
    c95a:	4b0b      	ldr	r3, [pc, #44]	; (c988 <usart_read_callback+0x380>)
    c95c:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    c95e:	4b0a      	ldr	r3, [pc, #40]	; (c988 <usart_read_callback+0x380>)
    c960:	2200      	movs	r2, #0
    c962:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    c964:	4b08      	ldr	r3, [pc, #32]	; (c988 <usart_read_callback+0x380>)
    c966:	220d      	movs	r2, #13
    c968:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    c96a:	4b07      	ldr	r3, [pc, #28]	; (c988 <usart_read_callback+0x380>)
    c96c:	1c18      	adds	r0, r3, #0
    c96e:	210b      	movs	r1, #11
    c970:	2201      	movs	r2, #1
    c972:	4b0d      	ldr	r3, [pc, #52]	; (c9a8 <usart_read_callback+0x3a0>)
    c974:	4798      	blx	r3
				break;
    c976:	e38f      	b.n	d098 <usart_read_callback+0xa90>
    c978:	2000065b 	.word	0x2000065b
    c97c:	20003488 	.word	0x20003488
    c980:	20003484 	.word	0x20003484
    c984:	20000a7c 	.word	0x20000a7c
    c988:	200034d8 	.word	0x200034d8
    c98c:	00004443 	.word	0x00004443
    c990:	00004256 	.word	0x00004256
    c994:	00004442 	.word	0x00004442
    c998:	00004453 	.word	0x00004453
    c99c:	00005256 	.word	0x00005256
    c9a0:	00004452 	.word	0x00004452
    c9a4:	20002edc 	.word	0x20002edc
    c9a8:	0000d25d 	.word	0x0000d25d
    c9ac:	20003505 	.word	0x20003505
    c9b0:	20003508 	.word	0x20003508
    c9b4:	200034d5 	.word	0x200034d5
    c9b8:	200034d6 	.word	0x200034d6
    c9bc:	20003504 	.word	0x20003504
    c9c0:	20003500 	.word	0x20003500
    c9c4:	200034b8 	.word	0x200034b8
    c9c8:	20000a82 	.word	0x20000a82
    c9cc:	0000baa5 	.word	0x0000baa5
    c9d0:	20003668 	.word	0x20003668
			}			
			case COMMAND_DR:
			{
				downloadPacketNumber = general_buffer[5];
    c9d4:	4bd7      	ldr	r3, [pc, #860]	; (cd34 <usart_read_callback+0x72c>)
    c9d6:	795a      	ldrb	r2, [r3, #5]
    c9d8:	4bd7      	ldr	r3, [pc, #860]	; (cd38 <usart_read_callback+0x730>)
    c9da:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    c9dc:	4bd6      	ldr	r3, [pc, #856]	; (cd38 <usart_read_callback+0x730>)
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d000      	beq.n	c9e6 <usart_read_callback+0x3de>
    c9e4:	e08e      	b.n	cb04 <usart_read_callback+0x4fc>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    c9e6:	4bd3      	ldr	r3, [pc, #844]	; (cd34 <usart_read_callback+0x72c>)
    c9e8:	799b      	ldrb	r3, [r3, #6]
    c9ea:	061b      	lsls	r3, r3, #24
    c9ec:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    c9ee:	4bd1      	ldr	r3, [pc, #836]	; (cd34 <usart_read_callback+0x72c>)
    c9f0:	79db      	ldrb	r3, [r3, #7]
    c9f2:	041b      	lsls	r3, r3, #16
    c9f4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    c9f6:	693a      	ldr	r2, [r7, #16]
    c9f8:	68fb      	ldr	r3, [r7, #12]
    c9fa:	4313      	orrs	r3, r2
    c9fc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    c9fe:	4bcd      	ldr	r3, [pc, #820]	; (cd34 <usart_read_callback+0x72c>)
    ca00:	7a1b      	ldrb	r3, [r3, #8]
    ca02:	021b      	lsls	r3, r3, #8
    ca04:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca06:	693a      	ldr	r2, [r7, #16]
    ca08:	68fb      	ldr	r3, [r7, #12]
    ca0a:	4313      	orrs	r3, r2
    ca0c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    ca0e:	4bc9      	ldr	r3, [pc, #804]	; (cd34 <usart_read_callback+0x72c>)
    ca10:	7a5b      	ldrb	r3, [r3, #9]
    ca12:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    ca14:	693a      	ldr	r2, [r7, #16]
    ca16:	68fb      	ldr	r3, [r7, #12]
    ca18:	4313      	orrs	r3, r2
    ca1a:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp; 
    ca1c:	4bc7      	ldr	r3, [pc, #796]	; (cd3c <usart_read_callback+0x734>)
    ca1e:	693a      	ldr	r2, [r7, #16]
    ca20:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    ca22:	4bc4      	ldr	r3, [pc, #784]	; (cd34 <usart_read_callback+0x72c>)
    ca24:	7a9b      	ldrb	r3, [r3, #10]
    ca26:	061b      	lsls	r3, r3, #24
    ca28:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    ca2a:	4bc2      	ldr	r3, [pc, #776]	; (cd34 <usart_read_callback+0x72c>)
    ca2c:	7adb      	ldrb	r3, [r3, #11]
    ca2e:	041b      	lsls	r3, r3, #16
    ca30:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca32:	693a      	ldr	r2, [r7, #16]
    ca34:	68fb      	ldr	r3, [r7, #12]
    ca36:	4313      	orrs	r3, r2
    ca38:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    ca3a:	4bbe      	ldr	r3, [pc, #760]	; (cd34 <usart_read_callback+0x72c>)
    ca3c:	7b1b      	ldrb	r3, [r3, #12]
    ca3e:	021b      	lsls	r3, r3, #8
    ca40:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca42:	693a      	ldr	r2, [r7, #16]
    ca44:	68fb      	ldr	r3, [r7, #12]
    ca46:	4313      	orrs	r3, r2
    ca48:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    ca4a:	4bba      	ldr	r3, [pc, #744]	; (cd34 <usart_read_callback+0x72c>)
    ca4c:	7b5b      	ldrb	r3, [r3, #13]
    ca4e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca50:	693a      	ldr	r2, [r7, #16]
    ca52:	68fb      	ldr	r3, [r7, #12]
    ca54:	4313      	orrs	r3, r2
    ca56:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;					
    ca58:	4bb8      	ldr	r3, [pc, #736]	; (cd3c <usart_read_callback+0x734>)
    ca5a:	693a      	ldr	r2, [r7, #16]
    ca5c:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    ca5e:	4bb5      	ldr	r3, [pc, #724]	; (cd34 <usart_read_callback+0x72c>)
    ca60:	7b9b      	ldrb	r3, [r3, #14]
    ca62:	061b      	lsls	r3, r3, #24
    ca64:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    ca66:	4bb3      	ldr	r3, [pc, #716]	; (cd34 <usart_read_callback+0x72c>)
    ca68:	7bdb      	ldrb	r3, [r3, #15]
    ca6a:	041b      	lsls	r3, r3, #16
    ca6c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca6e:	693a      	ldr	r2, [r7, #16]
    ca70:	68fb      	ldr	r3, [r7, #12]
    ca72:	4313      	orrs	r3, r2
    ca74:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    ca76:	4baf      	ldr	r3, [pc, #700]	; (cd34 <usart_read_callback+0x72c>)
    ca78:	7c1b      	ldrb	r3, [r3, #16]
    ca7a:	021b      	lsls	r3, r3, #8
    ca7c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca7e:	693a      	ldr	r2, [r7, #16]
    ca80:	68fb      	ldr	r3, [r7, #12]
    ca82:	4313      	orrs	r3, r2
    ca84:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    ca86:	4bab      	ldr	r3, [pc, #684]	; (cd34 <usart_read_callback+0x72c>)
    ca88:	7c5b      	ldrb	r3, [r3, #17]
    ca8a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ca8c:	693a      	ldr	r2, [r7, #16]
    ca8e:	68fb      	ldr	r3, [r7, #12]
    ca90:	4313      	orrs	r3, r2
    ca92:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;	
    ca94:	4ba9      	ldr	r3, [pc, #676]	; (cd3c <usart_read_callback+0x734>)
    ca96:	693a      	ldr	r2, [r7, #16]
    ca98:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    ca9a:	4ba6      	ldr	r3, [pc, #664]	; (cd34 <usart_read_callback+0x72c>)
    ca9c:	7c9b      	ldrb	r3, [r3, #18]
    ca9e:	061b      	lsls	r3, r3, #24
    caa0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    caa2:	4ba4      	ldr	r3, [pc, #656]	; (cd34 <usart_read_callback+0x72c>)
    caa4:	7cdb      	ldrb	r3, [r3, #19]
    caa6:	041b      	lsls	r3, r3, #16
    caa8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    caaa:	693a      	ldr	r2, [r7, #16]
    caac:	68fb      	ldr	r3, [r7, #12]
    caae:	4313      	orrs	r3, r2
    cab0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    cab2:	4ba0      	ldr	r3, [pc, #640]	; (cd34 <usart_read_callback+0x72c>)
    cab4:	7d1b      	ldrb	r3, [r3, #20]
    cab6:	021b      	lsls	r3, r3, #8
    cab8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    caba:	693a      	ldr	r2, [r7, #16]
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	4313      	orrs	r3, r2
    cac0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    cac2:	4b9c      	ldr	r3, [pc, #624]	; (cd34 <usart_read_callback+0x72c>)
    cac4:	7d5b      	ldrb	r3, [r3, #21]
    cac6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cac8:	693a      	ldr	r2, [r7, #16]
    caca:	68fb      	ldr	r3, [r7, #12]
    cacc:	4313      	orrs	r3, r2
    cace:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;		
    cad0:	4b9a      	ldr	r3, [pc, #616]	; (cd3c <usart_read_callback+0x734>)
    cad2:	693a      	ldr	r2, [r7, #16]
    cad4:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    cad6:	4b97      	ldr	r3, [pc, #604]	; (cd34 <usart_read_callback+0x72c>)
    cad8:	7d9a      	ldrb	r2, [r3, #22]
    cada:	4b99      	ldr	r3, [pc, #612]	; (cd40 <usart_read_callback+0x738>)
    cadc:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    cade:	4b99      	ldr	r3, [pc, #612]	; (cd44 <usart_read_callback+0x73c>)
    cae0:	2200      	movs	r2, #0
    cae2:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    cae4:	4b98      	ldr	r3, [pc, #608]	; (cd48 <usart_read_callback+0x740>)
    cae6:	2201      	movs	r2, #1
    cae8:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    caea:	4b98      	ldr	r3, [pc, #608]	; (cd4c <usart_read_callback+0x744>)
    caec:	2200      	movs	r2, #0
    caee:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    caf0:	4b97      	ldr	r3, [pc, #604]	; (cd50 <usart_read_callback+0x748>)
    caf2:	2200      	movs	r2, #0
    caf4:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    caf6:	4b96      	ldr	r3, [pc, #600]	; (cd50 <usart_read_callback+0x748>)
    caf8:	2200      	movs	r2, #0
    cafa:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0; 					
    cafc:	4b94      	ldr	r3, [pc, #592]	; (cd50 <usart_read_callback+0x748>)
    cafe:	2200      	movs	r2, #0
    cb00:	609a      	str	r2, [r3, #8]
    cb02:	e058      	b.n	cbb6 <usart_read_callback+0x5ae>
				}
				else
				{
					itemp = general_buffer[1];
    cb04:	4b8b      	ldr	r3, [pc, #556]	; (cd34 <usart_read_callback+0x72c>)
    cb06:	785a      	ldrb	r2, [r3, #1]
    cb08:	1c3b      	adds	r3, r7, #0
    cb0a:	3316      	adds	r3, #22
    cb0c:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    cb0e:	1c3b      	adds	r3, r7, #0
    cb10:	3316      	adds	r3, #22
    cb12:	1c3a      	adds	r2, r7, #0
    cb14:	3216      	adds	r2, #22
    cb16:	8812      	ldrh	r2, [r2, #0]
    cb18:	0212      	lsls	r2, r2, #8
    cb1a:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    cb1c:	4b85      	ldr	r3, [pc, #532]	; (cd34 <usart_read_callback+0x72c>)
    cb1e:	789a      	ldrb	r2, [r3, #2]
    cb20:	1c3b      	adds	r3, r7, #0
    cb22:	3314      	adds	r3, #20
    cb24:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    cb26:	1c3b      	adds	r3, r7, #0
    cb28:	3316      	adds	r3, #22
    cb2a:	1c39      	adds	r1, r7, #0
    cb2c:	3116      	adds	r1, #22
    cb2e:	1c3a      	adds	r2, r7, #0
    cb30:	3214      	adds	r2, #20
    cb32:	8809      	ldrh	r1, [r1, #0]
    cb34:	8812      	ldrh	r2, [r2, #0]
    cb36:	430a      	orrs	r2, r1
    cb38:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    cb3a:	1c3b      	adds	r3, r7, #0
    cb3c:	3316      	adds	r3, #22
    cb3e:	1c3a      	adds	r2, r7, #0
    cb40:	3216      	adds	r2, #22
    cb42:	8812      	ldrh	r2, [r2, #0]
    cb44:	3a07      	subs	r2, #7
    cb46:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    cb48:	4b7b      	ldr	r3, [pc, #492]	; (cd38 <usart_read_callback+0x730>)
    cb4a:	781a      	ldrb	r2, [r3, #0]
    cb4c:	4b7e      	ldr	r3, [pc, #504]	; (cd48 <usart_read_callback+0x740>)
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	429a      	cmp	r2, r3
    cb52:	d130      	bne.n	cbb6 <usart_read_callback+0x5ae>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    cb54:	4b78      	ldr	r3, [pc, #480]	; (cd38 <usart_read_callback+0x730>)
    cb56:	781b      	ldrb	r3, [r3, #0]
    cb58:	1c1a      	adds	r2, r3, #0
    cb5a:	4b79      	ldr	r3, [pc, #484]	; (cd40 <usart_read_callback+0x738>)
    cb5c:	781b      	ldrb	r3, [r3, #0]
    cb5e:	3301      	adds	r3, #1
    cb60:	429a      	cmp	r2, r3
    cb62:	da0d      	bge.n	cb80 <usart_read_callback+0x578>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    cb64:	4b79      	ldr	r3, [pc, #484]	; (cd4c <usart_read_callback+0x744>)
    cb66:	681b      	ldr	r3, [r3, #0]
    cb68:	2284      	movs	r2, #132	; 0x84
    cb6a:	0292      	lsls	r2, r2, #10
    cb6c:	1899      	adds	r1, r3, r2
    cb6e:	4a79      	ldr	r2, [pc, #484]	; (cd54 <usart_read_callback+0x74c>)
    cb70:	1c3b      	adds	r3, r7, #0
    cb72:	3316      	adds	r3, #22
    cb74:	881b      	ldrh	r3, [r3, #0]
    cb76:	1c08      	adds	r0, r1, #0
    cb78:	1c11      	adds	r1, r2, #0
    cb7a:	1c1a      	adds	r2, r3, #0
    cb7c:	4b76      	ldr	r3, [pc, #472]	; (cd58 <usart_read_callback+0x750>)
    cb7e:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    cb80:	4b6d      	ldr	r3, [pc, #436]	; (cd38 <usart_read_callback+0x730>)
    cb82:	781a      	ldrb	r2, [r3, #0]
    cb84:	4b6e      	ldr	r3, [pc, #440]	; (cd40 <usart_read_callback+0x738>)
    cb86:	781b      	ldrb	r3, [r3, #0]
    cb88:	429a      	cmp	r2, r3
    cb8a:	d106      	bne.n	cb9a <usart_read_callback+0x592>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    cb8c:	4b73      	ldr	r3, [pc, #460]	; (cd5c <usart_read_callback+0x754>)
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	2280      	movs	r2, #128	; 0x80
    cb92:	01d2      	lsls	r2, r2, #7
    cb94:	431a      	orrs	r2, r3
    cb96:	4b71      	ldr	r3, [pc, #452]	; (cd5c <usart_read_callback+0x754>)
    cb98:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    cb9a:	1c3b      	adds	r3, r7, #0
    cb9c:	3316      	adds	r3, #22
    cb9e:	881a      	ldrh	r2, [r3, #0]
    cba0:	4b6a      	ldr	r3, [pc, #424]	; (cd4c <usart_read_callback+0x744>)
    cba2:	681b      	ldr	r3, [r3, #0]
    cba4:	18d2      	adds	r2, r2, r3
    cba6:	4b69      	ldr	r3, [pc, #420]	; (cd4c <usart_read_callback+0x744>)
    cba8:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    cbaa:	4b67      	ldr	r3, [pc, #412]	; (cd48 <usart_read_callback+0x740>)
    cbac:	781b      	ldrb	r3, [r3, #0]
    cbae:	3301      	adds	r3, #1
    cbb0:	b2da      	uxtb	r2, r3
    cbb2:	4b65      	ldr	r3, [pc, #404]	; (cd48 <usart_read_callback+0x740>)
    cbb4:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    cbb6:	4b6a      	ldr	r3, [pc, #424]	; (cd60 <usart_read_callback+0x758>)
    cbb8:	2200      	movs	r2, #0
    cbba:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    cbbc:	4b68      	ldr	r3, [pc, #416]	; (cd60 <usart_read_callback+0x758>)
    cbbe:	2209      	movs	r2, #9
    cbc0:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    cbc2:	4b67      	ldr	r3, [pc, #412]	; (cd60 <usart_read_callback+0x758>)
    cbc4:	2264      	movs	r2, #100	; 0x64
    cbc6:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'r';
    cbc8:	4b65      	ldr	r3, [pc, #404]	; (cd60 <usart_read_callback+0x758>)
    cbca:	2272      	movs	r2, #114	; 0x72
    cbcc:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    cbce:	4b64      	ldr	r3, [pc, #400]	; (cd60 <usart_read_callback+0x758>)
    cbd0:	2230      	movs	r2, #48	; 0x30
    cbd2:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    cbd4:	4b62      	ldr	r3, [pc, #392]	; (cd60 <usart_read_callback+0x758>)
    cbd6:	2231      	movs	r2, #49	; 0x31
    cbd8:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    cbda:	4b57      	ldr	r3, [pc, #348]	; (cd38 <usart_read_callback+0x730>)
    cbdc:	781a      	ldrb	r2, [r3, #0]
    cbde:	4b60      	ldr	r3, [pc, #384]	; (cd60 <usart_read_callback+0x758>)
    cbe0:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    cbe2:	4b57      	ldr	r3, [pc, #348]	; (cd40 <usart_read_callback+0x738>)
    cbe4:	781a      	ldrb	r2, [r3, #0]
    cbe6:	4b5e      	ldr	r3, [pc, #376]	; (cd60 <usart_read_callback+0x758>)
    cbe8:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    cbea:	4b5d      	ldr	r3, [pc, #372]	; (cd60 <usart_read_callback+0x758>)
    cbec:	2200      	movs	r2, #0
    cbee:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    cbf0:	4b5b      	ldr	r3, [pc, #364]	; (cd60 <usart_read_callback+0x758>)
    cbf2:	220d      	movs	r2, #13
    cbf4:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    cbf6:	4b5a      	ldr	r3, [pc, #360]	; (cd60 <usart_read_callback+0x758>)
    cbf8:	1c18      	adds	r0, r3, #0
    cbfa:	210b      	movs	r1, #11
    cbfc:	2201      	movs	r2, #1
    cbfe:	4b59      	ldr	r3, [pc, #356]	; (cd64 <usart_read_callback+0x75c>)
    cc00:	4798      	blx	r3
				break;
    cc02:	e249      	b.n	d098 <usart_read_callback+0xa90>
			}		
//----------------------- second generation 
			case COMMAND_DC:
			{
				downloadPacketNumber = general_buffer[5];
    cc04:	4b4b      	ldr	r3, [pc, #300]	; (cd34 <usart_read_callback+0x72c>)
    cc06:	795a      	ldrb	r2, [r3, #5]
    cc08:	4b4b      	ldr	r3, [pc, #300]	; (cd38 <usart_read_callback+0x730>)
    cc0a:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    cc0c:	4b4a      	ldr	r3, [pc, #296]	; (cd38 <usart_read_callback+0x730>)
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	2b00      	cmp	r3, #0
    cc12:	d000      	beq.n	cc16 <usart_read_callback+0x60e>
    cc14:	e0a8      	b.n	cd68 <usart_read_callback+0x760>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    cc16:	4b47      	ldr	r3, [pc, #284]	; (cd34 <usart_read_callback+0x72c>)
    cc18:	799b      	ldrb	r3, [r3, #6]
    cc1a:	061b      	lsls	r3, r3, #24
    cc1c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    cc1e:	4b45      	ldr	r3, [pc, #276]	; (cd34 <usart_read_callback+0x72c>)
    cc20:	79db      	ldrb	r3, [r3, #7]
    cc22:	041b      	lsls	r3, r3, #16
    cc24:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc26:	693a      	ldr	r2, [r7, #16]
    cc28:	68fb      	ldr	r3, [r7, #12]
    cc2a:	4313      	orrs	r3, r2
    cc2c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    cc2e:	4b41      	ldr	r3, [pc, #260]	; (cd34 <usart_read_callback+0x72c>)
    cc30:	7a1b      	ldrb	r3, [r3, #8]
    cc32:	021b      	lsls	r3, r3, #8
    cc34:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc36:	693a      	ldr	r2, [r7, #16]
    cc38:	68fb      	ldr	r3, [r7, #12]
    cc3a:	4313      	orrs	r3, r2
    cc3c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    cc3e:	4b3d      	ldr	r3, [pc, #244]	; (cd34 <usart_read_callback+0x72c>)
    cc40:	7a5b      	ldrb	r3, [r3, #9]
    cc42:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc44:	693a      	ldr	r2, [r7, #16]
    cc46:	68fb      	ldr	r3, [r7, #12]
    cc48:	4313      	orrs	r3, r2
    cc4a:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp;
    cc4c:	4b40      	ldr	r3, [pc, #256]	; (cd50 <usart_read_callback+0x748>)
    cc4e:	693a      	ldr	r2, [r7, #16]
    cc50:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    cc52:	4b38      	ldr	r3, [pc, #224]	; (cd34 <usart_read_callback+0x72c>)
    cc54:	7a9b      	ldrb	r3, [r3, #10]
    cc56:	061b      	lsls	r3, r3, #24
    cc58:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    cc5a:	4b36      	ldr	r3, [pc, #216]	; (cd34 <usart_read_callback+0x72c>)
    cc5c:	7adb      	ldrb	r3, [r3, #11]
    cc5e:	041b      	lsls	r3, r3, #16
    cc60:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc62:	693a      	ldr	r2, [r7, #16]
    cc64:	68fb      	ldr	r3, [r7, #12]
    cc66:	4313      	orrs	r3, r2
    cc68:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    cc6a:	4b32      	ldr	r3, [pc, #200]	; (cd34 <usart_read_callback+0x72c>)
    cc6c:	7b1b      	ldrb	r3, [r3, #12]
    cc6e:	021b      	lsls	r3, r3, #8
    cc70:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc72:	693a      	ldr	r2, [r7, #16]
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	4313      	orrs	r3, r2
    cc78:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    cc7a:	4b2e      	ldr	r3, [pc, #184]	; (cd34 <usart_read_callback+0x72c>)
    cc7c:	7b5b      	ldrb	r3, [r3, #13]
    cc7e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc80:	693a      	ldr	r2, [r7, #16]
    cc82:	68fb      	ldr	r3, [r7, #12]
    cc84:	4313      	orrs	r3, r2
    cc86:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;
    cc88:	4b31      	ldr	r3, [pc, #196]	; (cd50 <usart_read_callback+0x748>)
    cc8a:	693a      	ldr	r2, [r7, #16]
    cc8c:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    cc8e:	4b29      	ldr	r3, [pc, #164]	; (cd34 <usart_read_callback+0x72c>)
    cc90:	7b9b      	ldrb	r3, [r3, #14]
    cc92:	061b      	lsls	r3, r3, #24
    cc94:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    cc96:	4b27      	ldr	r3, [pc, #156]	; (cd34 <usart_read_callback+0x72c>)
    cc98:	7bdb      	ldrb	r3, [r3, #15]
    cc9a:	041b      	lsls	r3, r3, #16
    cc9c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cc9e:	693a      	ldr	r2, [r7, #16]
    cca0:	68fb      	ldr	r3, [r7, #12]
    cca2:	4313      	orrs	r3, r2
    cca4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    cca6:	4b23      	ldr	r3, [pc, #140]	; (cd34 <usart_read_callback+0x72c>)
    cca8:	7c1b      	ldrb	r3, [r3, #16]
    ccaa:	021b      	lsls	r3, r3, #8
    ccac:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ccae:	693a      	ldr	r2, [r7, #16]
    ccb0:	68fb      	ldr	r3, [r7, #12]
    ccb2:	4313      	orrs	r3, r2
    ccb4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    ccb6:	4b1f      	ldr	r3, [pc, #124]	; (cd34 <usart_read_callback+0x72c>)
    ccb8:	7c5b      	ldrb	r3, [r3, #17]
    ccba:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ccbc:	693a      	ldr	r2, [r7, #16]
    ccbe:	68fb      	ldr	r3, [r7, #12]
    ccc0:	4313      	orrs	r3, r2
    ccc2:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;
    ccc4:	4b22      	ldr	r3, [pc, #136]	; (cd50 <usart_read_callback+0x748>)
    ccc6:	693a      	ldr	r2, [r7, #16]
    ccc8:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    ccca:	4b1a      	ldr	r3, [pc, #104]	; (cd34 <usart_read_callback+0x72c>)
    cccc:	7c9b      	ldrb	r3, [r3, #18]
    ccce:	061b      	lsls	r3, r3, #24
    ccd0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    ccd2:	4b18      	ldr	r3, [pc, #96]	; (cd34 <usart_read_callback+0x72c>)
    ccd4:	7cdb      	ldrb	r3, [r3, #19]
    ccd6:	041b      	lsls	r3, r3, #16
    ccd8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ccda:	693a      	ldr	r2, [r7, #16]
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	4313      	orrs	r3, r2
    cce0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    cce2:	4b14      	ldr	r3, [pc, #80]	; (cd34 <usart_read_callback+0x72c>)
    cce4:	7d1b      	ldrb	r3, [r3, #20]
    cce6:	021b      	lsls	r3, r3, #8
    cce8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ccea:	693a      	ldr	r2, [r7, #16]
    ccec:	68fb      	ldr	r3, [r7, #12]
    ccee:	4313      	orrs	r3, r2
    ccf0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    ccf2:	4b10      	ldr	r3, [pc, #64]	; (cd34 <usart_read_callback+0x72c>)
    ccf4:	7d5b      	ldrb	r3, [r3, #21]
    ccf6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ccf8:	693a      	ldr	r2, [r7, #16]
    ccfa:	68fb      	ldr	r3, [r7, #12]
    ccfc:	4313      	orrs	r3, r2
    ccfe:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;
    cd00:	4b13      	ldr	r3, [pc, #76]	; (cd50 <usart_read_callback+0x748>)
    cd02:	693a      	ldr	r2, [r7, #16]
    cd04:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    cd06:	4b0b      	ldr	r3, [pc, #44]	; (cd34 <usart_read_callback+0x72c>)
    cd08:	7d9a      	ldrb	r2, [r3, #22]
    cd0a:	4b0d      	ldr	r3, [pc, #52]	; (cd40 <usart_read_callback+0x738>)
    cd0c:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    cd0e:	4b0d      	ldr	r3, [pc, #52]	; (cd44 <usart_read_callback+0x73c>)
    cd10:	2200      	movs	r2, #0
    cd12:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    cd14:	4b0c      	ldr	r3, [pc, #48]	; (cd48 <usart_read_callback+0x740>)
    cd16:	2201      	movs	r2, #1
    cd18:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    cd1a:	4b0c      	ldr	r3, [pc, #48]	; (cd4c <usart_read_callback+0x744>)
    cd1c:	2200      	movs	r2, #0
    cd1e:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    cd20:	4b06      	ldr	r3, [pc, #24]	; (cd3c <usart_read_callback+0x734>)
    cd22:	2200      	movs	r2, #0
    cd24:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    cd26:	4b05      	ldr	r3, [pc, #20]	; (cd3c <usart_read_callback+0x734>)
    cd28:	2200      	movs	r2, #0
    cd2a:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0;
    cd2c:	4b03      	ldr	r3, [pc, #12]	; (cd3c <usart_read_callback+0x734>)
    cd2e:	2200      	movs	r2, #0
    cd30:	609a      	str	r2, [r3, #8]
    cd32:	e072      	b.n	ce1a <usart_read_callback+0x812>
    cd34:	20000a7c 	.word	0x20000a7c
    cd38:	20003505 	.word	0x20003505
    cd3c:	200034b8 	.word	0x200034b8
    cd40:	200034d5 	.word	0x200034d5
    cd44:	200034d6 	.word	0x200034d6
    cd48:	20003504 	.word	0x20003504
    cd4c:	20003500 	.word	0x20003500
    cd50:	20003508 	.word	0x20003508
    cd54:	20000a82 	.word	0x20000a82
    cd58:	0000baa5 	.word	0x0000baa5
    cd5c:	20003668 	.word	0x20003668
    cd60:	200034d8 	.word	0x200034d8
    cd64:	0000d25d 	.word	0x0000d25d
				}
				else
				{
					itemp = general_buffer[1];
    cd68:	4bce      	ldr	r3, [pc, #824]	; (d0a4 <usart_read_callback+0xa9c>)
    cd6a:	785a      	ldrb	r2, [r3, #1]
    cd6c:	1c3b      	adds	r3, r7, #0
    cd6e:	3316      	adds	r3, #22
    cd70:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    cd72:	1c3b      	adds	r3, r7, #0
    cd74:	3316      	adds	r3, #22
    cd76:	1c3a      	adds	r2, r7, #0
    cd78:	3216      	adds	r2, #22
    cd7a:	8812      	ldrh	r2, [r2, #0]
    cd7c:	0212      	lsls	r2, r2, #8
    cd7e:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    cd80:	4bc8      	ldr	r3, [pc, #800]	; (d0a4 <usart_read_callback+0xa9c>)
    cd82:	789a      	ldrb	r2, [r3, #2]
    cd84:	1c3b      	adds	r3, r7, #0
    cd86:	3314      	adds	r3, #20
    cd88:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    cd8a:	1c3b      	adds	r3, r7, #0
    cd8c:	3316      	adds	r3, #22
    cd8e:	1c39      	adds	r1, r7, #0
    cd90:	3116      	adds	r1, #22
    cd92:	1c3a      	adds	r2, r7, #0
    cd94:	3214      	adds	r2, #20
    cd96:	8809      	ldrh	r1, [r1, #0]
    cd98:	8812      	ldrh	r2, [r2, #0]
    cd9a:	430a      	orrs	r2, r1
    cd9c:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    cd9e:	1c3b      	adds	r3, r7, #0
    cda0:	3316      	adds	r3, #22
    cda2:	1c3a      	adds	r2, r7, #0
    cda4:	3216      	adds	r2, #22
    cda6:	8812      	ldrh	r2, [r2, #0]
    cda8:	3a07      	subs	r2, #7
    cdaa:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    cdac:	4bbe      	ldr	r3, [pc, #760]	; (d0a8 <usart_read_callback+0xaa0>)
    cdae:	781a      	ldrb	r2, [r3, #0]
    cdb0:	4bbe      	ldr	r3, [pc, #760]	; (d0ac <usart_read_callback+0xaa4>)
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	429a      	cmp	r2, r3
    cdb6:	d130      	bne.n	ce1a <usart_read_callback+0x812>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    cdb8:	4bbb      	ldr	r3, [pc, #748]	; (d0a8 <usart_read_callback+0xaa0>)
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	1c1a      	adds	r2, r3, #0
    cdbe:	4bbc      	ldr	r3, [pc, #752]	; (d0b0 <usart_read_callback+0xaa8>)
    cdc0:	781b      	ldrb	r3, [r3, #0]
    cdc2:	3301      	adds	r3, #1
    cdc4:	429a      	cmp	r2, r3
    cdc6:	da0d      	bge.n	cde4 <usart_read_callback+0x7dc>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    cdc8:	4bba      	ldr	r3, [pc, #744]	; (d0b4 <usart_read_callback+0xaac>)
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	2284      	movs	r2, #132	; 0x84
    cdce:	0292      	lsls	r2, r2, #10
    cdd0:	1899      	adds	r1, r3, r2
    cdd2:	4ab9      	ldr	r2, [pc, #740]	; (d0b8 <usart_read_callback+0xab0>)
    cdd4:	1c3b      	adds	r3, r7, #0
    cdd6:	3316      	adds	r3, #22
    cdd8:	881b      	ldrh	r3, [r3, #0]
    cdda:	1c08      	adds	r0, r1, #0
    cddc:	1c11      	adds	r1, r2, #0
    cdde:	1c1a      	adds	r2, r3, #0
    cde0:	4bb6      	ldr	r3, [pc, #728]	; (d0bc <usart_read_callback+0xab4>)
    cde2:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    cde4:	4bb0      	ldr	r3, [pc, #704]	; (d0a8 <usart_read_callback+0xaa0>)
    cde6:	781a      	ldrb	r2, [r3, #0]
    cde8:	4bb1      	ldr	r3, [pc, #708]	; (d0b0 <usart_read_callback+0xaa8>)
    cdea:	781b      	ldrb	r3, [r3, #0]
    cdec:	429a      	cmp	r2, r3
    cdee:	d106      	bne.n	cdfe <usart_read_callback+0x7f6>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    cdf0:	4bb3      	ldr	r3, [pc, #716]	; (d0c0 <usart_read_callback+0xab8>)
    cdf2:	681b      	ldr	r3, [r3, #0]
    cdf4:	2280      	movs	r2, #128	; 0x80
    cdf6:	01d2      	lsls	r2, r2, #7
    cdf8:	431a      	orrs	r2, r3
    cdfa:	4bb1      	ldr	r3, [pc, #708]	; (d0c0 <usart_read_callback+0xab8>)
    cdfc:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    cdfe:	1c3b      	adds	r3, r7, #0
    ce00:	3316      	adds	r3, #22
    ce02:	881a      	ldrh	r2, [r3, #0]
    ce04:	4bab      	ldr	r3, [pc, #684]	; (d0b4 <usart_read_callback+0xaac>)
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	18d2      	adds	r2, r2, r3
    ce0a:	4baa      	ldr	r3, [pc, #680]	; (d0b4 <usart_read_callback+0xaac>)
    ce0c:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    ce0e:	4ba7      	ldr	r3, [pc, #668]	; (d0ac <usart_read_callback+0xaa4>)
    ce10:	781b      	ldrb	r3, [r3, #0]
    ce12:	3301      	adds	r3, #1
    ce14:	b2da      	uxtb	r2, r3
    ce16:	4ba5      	ldr	r3, [pc, #660]	; (d0ac <usart_read_callback+0xaa4>)
    ce18:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    ce1a:	4baa      	ldr	r3, [pc, #680]	; (d0c4 <usart_read_callback+0xabc>)
    ce1c:	2200      	movs	r2, #0
    ce1e:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    ce20:	4ba8      	ldr	r3, [pc, #672]	; (d0c4 <usart_read_callback+0xabc>)
    ce22:	2209      	movs	r2, #9
    ce24:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    ce26:	4ba7      	ldr	r3, [pc, #668]	; (d0c4 <usart_read_callback+0xabc>)
    ce28:	2264      	movs	r2, #100	; 0x64
    ce2a:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'c';
    ce2c:	4ba5      	ldr	r3, [pc, #660]	; (d0c4 <usart_read_callback+0xabc>)
    ce2e:	2263      	movs	r2, #99	; 0x63
    ce30:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    ce32:	4ba4      	ldr	r3, [pc, #656]	; (d0c4 <usart_read_callback+0xabc>)
    ce34:	2230      	movs	r2, #48	; 0x30
    ce36:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    ce38:	4ba2      	ldr	r3, [pc, #648]	; (d0c4 <usart_read_callback+0xabc>)
    ce3a:	2231      	movs	r2, #49	; 0x31
    ce3c:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    ce3e:	4b9a      	ldr	r3, [pc, #616]	; (d0a8 <usart_read_callback+0xaa0>)
    ce40:	781a      	ldrb	r2, [r3, #0]
    ce42:	4ba0      	ldr	r3, [pc, #640]	; (d0c4 <usart_read_callback+0xabc>)
    ce44:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    ce46:	4b9a      	ldr	r3, [pc, #616]	; (d0b0 <usart_read_callback+0xaa8>)
    ce48:	781a      	ldrb	r2, [r3, #0]
    ce4a:	4b9e      	ldr	r3, [pc, #632]	; (d0c4 <usart_read_callback+0xabc>)
    ce4c:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    ce4e:	4b9d      	ldr	r3, [pc, #628]	; (d0c4 <usart_read_callback+0xabc>)
    ce50:	2200      	movs	r2, #0
    ce52:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    ce54:	4b9b      	ldr	r3, [pc, #620]	; (d0c4 <usart_read_callback+0xabc>)
    ce56:	220d      	movs	r2, #13
    ce58:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    ce5a:	4b9a      	ldr	r3, [pc, #616]	; (d0c4 <usart_read_callback+0xabc>)
    ce5c:	1c18      	adds	r0, r3, #0
    ce5e:	210b      	movs	r1, #11
    ce60:	2201      	movs	r2, #1
    ce62:	4b99      	ldr	r3, [pc, #612]	; (d0c8 <usart_read_callback+0xac0>)
    ce64:	4798      	blx	r3
				break;
    ce66:	e117      	b.n	d098 <usart_read_callback+0xa90>
			}
			case COMMAND_DS:
			{
				downloadPacketNumber = general_buffer[5];
    ce68:	4b8e      	ldr	r3, [pc, #568]	; (d0a4 <usart_read_callback+0xa9c>)
    ce6a:	795a      	ldrb	r2, [r3, #5]
    ce6c:	4b8e      	ldr	r3, [pc, #568]	; (d0a8 <usart_read_callback+0xaa0>)
    ce6e:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    ce70:	4b8d      	ldr	r3, [pc, #564]	; (d0a8 <usart_read_callback+0xaa0>)
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	2b00      	cmp	r3, #0
    ce76:	d000      	beq.n	ce7a <usart_read_callback+0x872>
    ce78:	e08e      	b.n	cf98 <usart_read_callback+0x990>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    ce7a:	4b8a      	ldr	r3, [pc, #552]	; (d0a4 <usart_read_callback+0xa9c>)
    ce7c:	799b      	ldrb	r3, [r3, #6]
    ce7e:	061b      	lsls	r3, r3, #24
    ce80:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    ce82:	4b88      	ldr	r3, [pc, #544]	; (d0a4 <usart_read_callback+0xa9c>)
    ce84:	79db      	ldrb	r3, [r3, #7]
    ce86:	041b      	lsls	r3, r3, #16
    ce88:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ce8a:	693a      	ldr	r2, [r7, #16]
    ce8c:	68fb      	ldr	r3, [r7, #12]
    ce8e:	4313      	orrs	r3, r2
    ce90:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    ce92:	4b84      	ldr	r3, [pc, #528]	; (d0a4 <usart_read_callback+0xa9c>)
    ce94:	7a1b      	ldrb	r3, [r3, #8]
    ce96:	021b      	lsls	r3, r3, #8
    ce98:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ce9a:	693a      	ldr	r2, [r7, #16]
    ce9c:	68fb      	ldr	r3, [r7, #12]
    ce9e:	4313      	orrs	r3, r2
    cea0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    cea2:	4b80      	ldr	r3, [pc, #512]	; (d0a4 <usart_read_callback+0xa9c>)
    cea4:	7a5b      	ldrb	r3, [r3, #9]
    cea6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cea8:	693a      	ldr	r2, [r7, #16]
    ceaa:	68fb      	ldr	r3, [r7, #12]
    ceac:	4313      	orrs	r3, r2
    ceae:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp;
    ceb0:	4b86      	ldr	r3, [pc, #536]	; (d0cc <usart_read_callback+0xac4>)
    ceb2:	693a      	ldr	r2, [r7, #16]
    ceb4:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    ceb6:	4b7b      	ldr	r3, [pc, #492]	; (d0a4 <usart_read_callback+0xa9c>)
    ceb8:	7a9b      	ldrb	r3, [r3, #10]
    ceba:	061b      	lsls	r3, r3, #24
    cebc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    cebe:	4b79      	ldr	r3, [pc, #484]	; (d0a4 <usart_read_callback+0xa9c>)
    cec0:	7adb      	ldrb	r3, [r3, #11]
    cec2:	041b      	lsls	r3, r3, #16
    cec4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cec6:	693a      	ldr	r2, [r7, #16]
    cec8:	68fb      	ldr	r3, [r7, #12]
    ceca:	4313      	orrs	r3, r2
    cecc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    cece:	4b75      	ldr	r3, [pc, #468]	; (d0a4 <usart_read_callback+0xa9c>)
    ced0:	7b1b      	ldrb	r3, [r3, #12]
    ced2:	021b      	lsls	r3, r3, #8
    ced4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    ced6:	693a      	ldr	r2, [r7, #16]
    ced8:	68fb      	ldr	r3, [r7, #12]
    ceda:	4313      	orrs	r3, r2
    cedc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    cede:	4b71      	ldr	r3, [pc, #452]	; (d0a4 <usart_read_callback+0xa9c>)
    cee0:	7b5b      	ldrb	r3, [r3, #13]
    cee2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cee4:	693a      	ldr	r2, [r7, #16]
    cee6:	68fb      	ldr	r3, [r7, #12]
    cee8:	4313      	orrs	r3, r2
    ceea:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;
    ceec:	4b77      	ldr	r3, [pc, #476]	; (d0cc <usart_read_callback+0xac4>)
    ceee:	693a      	ldr	r2, [r7, #16]
    cef0:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    cef2:	4b6c      	ldr	r3, [pc, #432]	; (d0a4 <usart_read_callback+0xa9c>)
    cef4:	7b9b      	ldrb	r3, [r3, #14]
    cef6:	061b      	lsls	r3, r3, #24
    cef8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    cefa:	4b6a      	ldr	r3, [pc, #424]	; (d0a4 <usart_read_callback+0xa9c>)
    cefc:	7bdb      	ldrb	r3, [r3, #15]
    cefe:	041b      	lsls	r3, r3, #16
    cf00:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf02:	693a      	ldr	r2, [r7, #16]
    cf04:	68fb      	ldr	r3, [r7, #12]
    cf06:	4313      	orrs	r3, r2
    cf08:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    cf0a:	4b66      	ldr	r3, [pc, #408]	; (d0a4 <usart_read_callback+0xa9c>)
    cf0c:	7c1b      	ldrb	r3, [r3, #16]
    cf0e:	021b      	lsls	r3, r3, #8
    cf10:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf12:	693a      	ldr	r2, [r7, #16]
    cf14:	68fb      	ldr	r3, [r7, #12]
    cf16:	4313      	orrs	r3, r2
    cf18:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    cf1a:	4b62      	ldr	r3, [pc, #392]	; (d0a4 <usart_read_callback+0xa9c>)
    cf1c:	7c5b      	ldrb	r3, [r3, #17]
    cf1e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf20:	693a      	ldr	r2, [r7, #16]
    cf22:	68fb      	ldr	r3, [r7, #12]
    cf24:	4313      	orrs	r3, r2
    cf26:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;
    cf28:	4b68      	ldr	r3, [pc, #416]	; (d0cc <usart_read_callback+0xac4>)
    cf2a:	693a      	ldr	r2, [r7, #16]
    cf2c:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    cf2e:	4b5d      	ldr	r3, [pc, #372]	; (d0a4 <usart_read_callback+0xa9c>)
    cf30:	7c9b      	ldrb	r3, [r3, #18]
    cf32:	061b      	lsls	r3, r3, #24
    cf34:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    cf36:	4b5b      	ldr	r3, [pc, #364]	; (d0a4 <usart_read_callback+0xa9c>)
    cf38:	7cdb      	ldrb	r3, [r3, #19]
    cf3a:	041b      	lsls	r3, r3, #16
    cf3c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf3e:	693a      	ldr	r2, [r7, #16]
    cf40:	68fb      	ldr	r3, [r7, #12]
    cf42:	4313      	orrs	r3, r2
    cf44:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    cf46:	4b57      	ldr	r3, [pc, #348]	; (d0a4 <usart_read_callback+0xa9c>)
    cf48:	7d1b      	ldrb	r3, [r3, #20]
    cf4a:	021b      	lsls	r3, r3, #8
    cf4c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf4e:	693a      	ldr	r2, [r7, #16]
    cf50:	68fb      	ldr	r3, [r7, #12]
    cf52:	4313      	orrs	r3, r2
    cf54:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    cf56:	4b53      	ldr	r3, [pc, #332]	; (d0a4 <usart_read_callback+0xa9c>)
    cf58:	7d5b      	ldrb	r3, [r3, #21]
    cf5a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    cf5c:	693a      	ldr	r2, [r7, #16]
    cf5e:	68fb      	ldr	r3, [r7, #12]
    cf60:	4313      	orrs	r3, r2
    cf62:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;
    cf64:	4b59      	ldr	r3, [pc, #356]	; (d0cc <usart_read_callback+0xac4>)
    cf66:	693a      	ldr	r2, [r7, #16]
    cf68:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    cf6a:	4b4e      	ldr	r3, [pc, #312]	; (d0a4 <usart_read_callback+0xa9c>)
    cf6c:	7d9a      	ldrb	r2, [r3, #22]
    cf6e:	4b50      	ldr	r3, [pc, #320]	; (d0b0 <usart_read_callback+0xaa8>)
    cf70:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    cf72:	4b57      	ldr	r3, [pc, #348]	; (d0d0 <usart_read_callback+0xac8>)
    cf74:	2200      	movs	r2, #0
    cf76:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    cf78:	4b4c      	ldr	r3, [pc, #304]	; (d0ac <usart_read_callback+0xaa4>)
    cf7a:	2201      	movs	r2, #1
    cf7c:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    cf7e:	4b4d      	ldr	r3, [pc, #308]	; (d0b4 <usart_read_callback+0xaac>)
    cf80:	2200      	movs	r2, #0
    cf82:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    cf84:	4b53      	ldr	r3, [pc, #332]	; (d0d4 <usart_read_callback+0xacc>)
    cf86:	2200      	movs	r2, #0
    cf88:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    cf8a:	4b52      	ldr	r3, [pc, #328]	; (d0d4 <usart_read_callback+0xacc>)
    cf8c:	2200      	movs	r2, #0
    cf8e:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0;
    cf90:	4b50      	ldr	r3, [pc, #320]	; (d0d4 <usart_read_callback+0xacc>)
    cf92:	2200      	movs	r2, #0
    cf94:	609a      	str	r2, [r3, #8]
    cf96:	e058      	b.n	d04a <usart_read_callback+0xa42>
				}
				else
				{
					itemp = general_buffer[1];
    cf98:	4b42      	ldr	r3, [pc, #264]	; (d0a4 <usart_read_callback+0xa9c>)
    cf9a:	785a      	ldrb	r2, [r3, #1]
    cf9c:	1c3b      	adds	r3, r7, #0
    cf9e:	3316      	adds	r3, #22
    cfa0:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    cfa2:	1c3b      	adds	r3, r7, #0
    cfa4:	3316      	adds	r3, #22
    cfa6:	1c3a      	adds	r2, r7, #0
    cfa8:	3216      	adds	r2, #22
    cfaa:	8812      	ldrh	r2, [r2, #0]
    cfac:	0212      	lsls	r2, r2, #8
    cfae:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    cfb0:	4b3c      	ldr	r3, [pc, #240]	; (d0a4 <usart_read_callback+0xa9c>)
    cfb2:	789a      	ldrb	r2, [r3, #2]
    cfb4:	1c3b      	adds	r3, r7, #0
    cfb6:	3314      	adds	r3, #20
    cfb8:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    cfba:	1c3b      	adds	r3, r7, #0
    cfbc:	3316      	adds	r3, #22
    cfbe:	1c39      	adds	r1, r7, #0
    cfc0:	3116      	adds	r1, #22
    cfc2:	1c3a      	adds	r2, r7, #0
    cfc4:	3214      	adds	r2, #20
    cfc6:	8809      	ldrh	r1, [r1, #0]
    cfc8:	8812      	ldrh	r2, [r2, #0]
    cfca:	430a      	orrs	r2, r1
    cfcc:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    cfce:	1c3b      	adds	r3, r7, #0
    cfd0:	3316      	adds	r3, #22
    cfd2:	1c3a      	adds	r2, r7, #0
    cfd4:	3216      	adds	r2, #22
    cfd6:	8812      	ldrh	r2, [r2, #0]
    cfd8:	3a07      	subs	r2, #7
    cfda:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    cfdc:	4b32      	ldr	r3, [pc, #200]	; (d0a8 <usart_read_callback+0xaa0>)
    cfde:	781a      	ldrb	r2, [r3, #0]
    cfe0:	4b32      	ldr	r3, [pc, #200]	; (d0ac <usart_read_callback+0xaa4>)
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	429a      	cmp	r2, r3
    cfe6:	d130      	bne.n	d04a <usart_read_callback+0xa42>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    cfe8:	4b2f      	ldr	r3, [pc, #188]	; (d0a8 <usart_read_callback+0xaa0>)
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	1c1a      	adds	r2, r3, #0
    cfee:	4b30      	ldr	r3, [pc, #192]	; (d0b0 <usart_read_callback+0xaa8>)
    cff0:	781b      	ldrb	r3, [r3, #0]
    cff2:	3301      	adds	r3, #1
    cff4:	429a      	cmp	r2, r3
    cff6:	da0d      	bge.n	d014 <usart_read_callback+0xa0c>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    cff8:	4b2e      	ldr	r3, [pc, #184]	; (d0b4 <usart_read_callback+0xaac>)
    cffa:	681b      	ldr	r3, [r3, #0]
    cffc:	2284      	movs	r2, #132	; 0x84
    cffe:	0292      	lsls	r2, r2, #10
    d000:	1899      	adds	r1, r3, r2
    d002:	4a2d      	ldr	r2, [pc, #180]	; (d0b8 <usart_read_callback+0xab0>)
    d004:	1c3b      	adds	r3, r7, #0
    d006:	3316      	adds	r3, #22
    d008:	881b      	ldrh	r3, [r3, #0]
    d00a:	1c08      	adds	r0, r1, #0
    d00c:	1c11      	adds	r1, r2, #0
    d00e:	1c1a      	adds	r2, r3, #0
    d010:	4b2a      	ldr	r3, [pc, #168]	; (d0bc <usart_read_callback+0xab4>)
    d012:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    d014:	4b24      	ldr	r3, [pc, #144]	; (d0a8 <usart_read_callback+0xaa0>)
    d016:	781a      	ldrb	r2, [r3, #0]
    d018:	4b25      	ldr	r3, [pc, #148]	; (d0b0 <usart_read_callback+0xaa8>)
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	429a      	cmp	r2, r3
    d01e:	d106      	bne.n	d02e <usart_read_callback+0xa26>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    d020:	4b27      	ldr	r3, [pc, #156]	; (d0c0 <usart_read_callback+0xab8>)
    d022:	681b      	ldr	r3, [r3, #0]
    d024:	2280      	movs	r2, #128	; 0x80
    d026:	01d2      	lsls	r2, r2, #7
    d028:	431a      	orrs	r2, r3
    d02a:	4b25      	ldr	r3, [pc, #148]	; (d0c0 <usart_read_callback+0xab8>)
    d02c:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    d02e:	1c3b      	adds	r3, r7, #0
    d030:	3316      	adds	r3, #22
    d032:	881a      	ldrh	r2, [r3, #0]
    d034:	4b1f      	ldr	r3, [pc, #124]	; (d0b4 <usart_read_callback+0xaac>)
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	18d2      	adds	r2, r2, r3
    d03a:	4b1e      	ldr	r3, [pc, #120]	; (d0b4 <usart_read_callback+0xaac>)
    d03c:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    d03e:	4b1b      	ldr	r3, [pc, #108]	; (d0ac <usart_read_callback+0xaa4>)
    d040:	781b      	ldrb	r3, [r3, #0]
    d042:	3301      	adds	r3, #1
    d044:	b2da      	uxtb	r2, r3
    d046:	4b19      	ldr	r3, [pc, #100]	; (d0ac <usart_read_callback+0xaa4>)
    d048:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    d04a:	4b1e      	ldr	r3, [pc, #120]	; (d0c4 <usart_read_callback+0xabc>)
    d04c:	2200      	movs	r2, #0
    d04e:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d050:	4b1c      	ldr	r3, [pc, #112]	; (d0c4 <usart_read_callback+0xabc>)
    d052:	2209      	movs	r2, #9
    d054:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    d056:	4b1b      	ldr	r3, [pc, #108]	; (d0c4 <usart_read_callback+0xabc>)
    d058:	2264      	movs	r2, #100	; 0x64
    d05a:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 's';
    d05c:	4b19      	ldr	r3, [pc, #100]	; (d0c4 <usart_read_callback+0xabc>)
    d05e:	2273      	movs	r2, #115	; 0x73
    d060:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    d062:	4b18      	ldr	r3, [pc, #96]	; (d0c4 <usart_read_callback+0xabc>)
    d064:	2230      	movs	r2, #48	; 0x30
    d066:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    d068:	4b16      	ldr	r3, [pc, #88]	; (d0c4 <usart_read_callback+0xabc>)
    d06a:	2231      	movs	r2, #49	; 0x31
    d06c:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    d06e:	4b0e      	ldr	r3, [pc, #56]	; (d0a8 <usart_read_callback+0xaa0>)
    d070:	781a      	ldrb	r2, [r3, #0]
    d072:	4b14      	ldr	r3, [pc, #80]	; (d0c4 <usart_read_callback+0xabc>)
    d074:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    d076:	4b0e      	ldr	r3, [pc, #56]	; (d0b0 <usart_read_callback+0xaa8>)
    d078:	781a      	ldrb	r2, [r3, #0]
    d07a:	4b12      	ldr	r3, [pc, #72]	; (d0c4 <usart_read_callback+0xabc>)
    d07c:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    d07e:	4b11      	ldr	r3, [pc, #68]	; (d0c4 <usart_read_callback+0xabc>)
    d080:	2200      	movs	r2, #0
    d082:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d084:	4b0f      	ldr	r3, [pc, #60]	; (d0c4 <usart_read_callback+0xabc>)
    d086:	220d      	movs	r2, #13
    d088:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    d08a:	4b0e      	ldr	r3, [pc, #56]	; (d0c4 <usart_read_callback+0xabc>)
    d08c:	1c18      	adds	r0, r3, #0
    d08e:	210b      	movs	r1, #11
    d090:	2201      	movs	r2, #1
    d092:	4b0d      	ldr	r3, [pc, #52]	; (d0c8 <usart_read_callback+0xac0>)
    d094:	4798      	blx	r3
				break;
    d096:	46c0      	nop			; (mov r8, r8)
			}
			
									
		}		
	}
	BTReceive();        
    d098:	4b0f      	ldr	r3, [pc, #60]	; (d0d8 <usart_read_callback+0xad0>)
    d09a:	4798      	blx	r3
}
    d09c:	46bd      	mov	sp, r7
    d09e:	b006      	add	sp, #24
    d0a0:	bd80      	pop	{r7, pc}
    d0a2:	46c0      	nop			; (mov r8, r8)
    d0a4:	20000a7c 	.word	0x20000a7c
    d0a8:	20003505 	.word	0x20003505
    d0ac:	20003504 	.word	0x20003504
    d0b0:	200034d5 	.word	0x200034d5
    d0b4:	20003500 	.word	0x20003500
    d0b8:	20000a82 	.word	0x20000a82
    d0bc:	0000baa5 	.word	0x0000baa5
    d0c0:	20003668 	.word	0x20003668
    d0c4:	200034d8 	.word	0x200034d8
    d0c8:	0000d25d 	.word	0x0000d25d
    d0cc:	200034b8 	.word	0x200034b8
    d0d0:	200034d6 	.word	0x200034d6
    d0d4:	20003508 	.word	0x20003508
    d0d8:	0000d231 	.word	0x0000d231

0000d0dc <usart_write_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void usart_write_callback(const struct usart_module *const usart_module)
{
    d0dc:	b580      	push	{r7, lr}
    d0de:	b082      	sub	sp, #8
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	6078      	str	r0, [r7, #4]
	
    general_buffer[0] = 0x01; 
    d0e4:	4b0b      	ldr	r3, [pc, #44]	; (d114 <usart_write_callback+0x38>)
    d0e6:	2201      	movs	r2, #1
    d0e8:	701a      	strb	r2, [r3, #0]
    general_buffer[1] = 0x29; 
    d0ea:	4b0a      	ldr	r3, [pc, #40]	; (d114 <usart_write_callback+0x38>)
    d0ec:	2229      	movs	r2, #41	; 0x29
    d0ee:	705a      	strb	r2, [r3, #1]
    general_buffer[2] = 0xFC; 
    d0f0:	4b08      	ldr	r3, [pc, #32]	; (d114 <usart_write_callback+0x38>)
    d0f2:	22fc      	movs	r2, #252	; 0xfc
    d0f4:	709a      	strb	r2, [r3, #2]
    general_buffer[3] = 0x03; 
    d0f6:	4b07      	ldr	r3, [pc, #28]	; (d114 <usart_write_callback+0x38>)
    d0f8:	2203      	movs	r2, #3
    d0fa:	70da      	strb	r2, [r3, #3]
    general_buffer[4] = 0x00;
    d0fc:	4b05      	ldr	r3, [pc, #20]	; (d114 <usart_write_callback+0x38>)
    d0fe:	2200      	movs	r2, #0
    d100:	711a      	strb	r2, [r3, #4]
    general_buffer[5] = 0x00; 
    d102:	4b04      	ldr	r3, [pc, #16]	; (d114 <usart_write_callback+0x38>)
    d104:	2200      	movs	r2, #0
    d106:	715a      	strb	r2, [r3, #5]
    general_buffer[6] = 0x06; 
    d108:	4b02      	ldr	r3, [pc, #8]	; (d114 <usart_write_callback+0x38>)
    d10a:	2206      	movs	r2, #6
    d10c:	719a      	strb	r2, [r3, #6]
    general_buffer[5] = 0x36;
    general_buffer[6] = 0x37;
*/		
//	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,3);
//	usart_write_buffer_job(&usart_instance, general_buffer,7); 
}
    d10e:	46bd      	mov	sp, r7
    d110:	b002      	add	sp, #8
    d112:	bd80      	pop	{r7, pc}
    d114:	20000a7c 	.word	0x20000a7c

0000d118 <configure_usart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void configure_usart(void)
{
    d118:	b580      	push	{r7, lr}
    d11a:	b08c      	sub	sp, #48	; 0x30
    d11c:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
 
	usart_get_config_defaults(&config_usart);
    d11e:	1c3b      	adds	r3, r7, #0
    d120:	1c18      	adds	r0, r3, #0
    d122:	4b17      	ldr	r3, [pc, #92]	; (d180 <configure_usart+0x68>)
    d124:	4798      	blx	r3
 
	config_usart.baudrate    = 115200;
    d126:	1c3b      	adds	r3, r7, #0
    d128:	22e1      	movs	r2, #225	; 0xe1
    d12a:	0252      	lsls	r2, r2, #9
    d12c:	611a      	str	r2, [r3, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d12e:	1c3b      	adds	r3, r7, #0
    d130:	22c4      	movs	r2, #196	; 0xc4
    d132:	0392      	lsls	r2, r2, #14
    d134:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d136:	1c3b      	adds	r3, r7, #0
    d138:	2201      	movs	r2, #1
    d13a:	4252      	negs	r2, r2
    d13c:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d13e:	1c3b      	adds	r3, r7, #0
    d140:	2201      	movs	r2, #1
    d142:	4252      	negs	r2, r2
    d144:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d146:	1c3b      	adds	r3, r7, #0
    d148:	4a0e      	ldr	r2, [pc, #56]	; (d184 <configure_usart+0x6c>)
    d14a:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d14c:	1c3b      	adds	r3, r7, #0
    d14e:	4a0e      	ldr	r2, [pc, #56]	; (d188 <configure_usart+0x70>)
    d150:	62da      	str	r2, [r3, #44]	; 0x2c
	config_usart.generator_source = GCLK_GENERATOR_3; 
    d152:	1c3b      	adds	r3, r7, #0
    d154:	2203      	movs	r2, #3
    d156:	775a      	strb	r2, [r3, #29]
 
	while (usart_init(&usart_instance,
    d158:	46c0      	nop			; (mov r8, r8)
    d15a:	490c      	ldr	r1, [pc, #48]	; (d18c <configure_usart+0x74>)
    d15c:	4a0c      	ldr	r2, [pc, #48]	; (d190 <configure_usart+0x78>)
    d15e:	1c3b      	adds	r3, r7, #0
    d160:	1c08      	adds	r0, r1, #0
    d162:	1c11      	adds	r1, r2, #0
    d164:	1c1a      	adds	r2, r3, #0
    d166:	4b0b      	ldr	r3, [pc, #44]	; (d194 <configure_usart+0x7c>)
    d168:	4798      	blx	r3
    d16a:	1c03      	adds	r3, r0, #0
    d16c:	2b00      	cmp	r3, #0
    d16e:	d1f4      	bne.n	d15a <configure_usart+0x42>
			EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
 
	usart_enable(&usart_instance);
    d170:	4b06      	ldr	r3, [pc, #24]	; (d18c <configure_usart+0x74>)
    d172:	1c18      	adds	r0, r3, #0
    d174:	4b08      	ldr	r3, [pc, #32]	; (d198 <configure_usart+0x80>)
    d176:	4798      	blx	r3
 
}
    d178:	46bd      	mov	sp, r7
    d17a:	b00c      	add	sp, #48	; 0x30
    d17c:	bd80      	pop	{r7, pc}
    d17e:	46c0      	nop			; (mov r8, r8)
    d180:	0000c4bd 	.word	0x0000c4bd
    d184:	000a0003 	.word	0x000a0003
    d188:	000b0003 	.word	0x000b0003
    d18c:	20003488 	.word	0x20003488
    d190:	42001000 	.word	0x42001000
    d194:	00004a51 	.word	0x00004a51
    d198:	0000c53d 	.word	0x0000c53d

0000d19c <USARTDisable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTDisable(void)
{
    d19c:	b580      	push	{r7, lr}
    d19e:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);	
    d1a0:	4b02      	ldr	r3, [pc, #8]	; (d1ac <USARTDisable+0x10>)
    d1a2:	1c18      	adds	r0, r3, #0
    d1a4:	4b02      	ldr	r3, [pc, #8]	; (d1b0 <USARTDisable+0x14>)
    d1a6:	4798      	blx	r3
}
    d1a8:	46bd      	mov	sp, r7
    d1aa:	bd80      	pop	{r7, pc}
    d1ac:	20003488 	.word	0x20003488
    d1b0:	0000c585 	.word	0x0000c585

0000d1b4 <USARTEnable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTEnable(void)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	af00      	add	r7, sp, #0
	usart_enable(&usart_instance);
    d1b8:	4b02      	ldr	r3, [pc, #8]	; (d1c4 <USARTEnable+0x10>)
    d1ba:	1c18      	adds	r0, r3, #0
    d1bc:	4b02      	ldr	r3, [pc, #8]	; (d1c8 <USARTEnable+0x14>)
    d1be:	4798      	blx	r3
}
    d1c0:	46bd      	mov	sp, r7
    d1c2:	bd80      	pop	{r7, pc}
    d1c4:	20003488 	.word	0x20003488
    d1c8:	0000c53d 	.word	0x0000c53d

0000d1cc <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    d1cc:	b580      	push	{r7, lr}
    d1ce:	af00      	add	r7, sp, #0
//! [setup_register_callbacks]
	usart_register_callback(&usart_instance,
    d1d0:	4a0c      	ldr	r2, [pc, #48]	; (d204 <configure_usart_callbacks+0x38>)
    d1d2:	4b0d      	ldr	r3, [pc, #52]	; (d208 <configure_usart_callbacks+0x3c>)
    d1d4:	1c10      	adds	r0, r2, #0
    d1d6:	1c19      	adds	r1, r3, #0
    d1d8:	2200      	movs	r2, #0
    d1da:	4b0c      	ldr	r3, [pc, #48]	; (d20c <configure_usart_callbacks+0x40>)
    d1dc:	4798      	blx	r3
			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    d1de:	4a09      	ldr	r2, [pc, #36]	; (d204 <configure_usart_callbacks+0x38>)
    d1e0:	4b0b      	ldr	r3, [pc, #44]	; (d210 <configure_usart_callbacks+0x44>)
    d1e2:	1c10      	adds	r0, r2, #0
    d1e4:	1c19      	adds	r1, r3, #0
    d1e6:	2201      	movs	r2, #1
    d1e8:	4b08      	ldr	r3, [pc, #32]	; (d20c <configure_usart_callbacks+0x40>)
    d1ea:	4798      	blx	r3
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
//! [setup_register_callbacks]

//! [setup_enable_callbacks]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    d1ec:	4b05      	ldr	r3, [pc, #20]	; (d204 <configure_usart_callbacks+0x38>)
    d1ee:	1c18      	adds	r0, r3, #0
    d1f0:	2100      	movs	r1, #0
    d1f2:	4b08      	ldr	r3, [pc, #32]	; (d214 <configure_usart_callbacks+0x48>)
    d1f4:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    d1f6:	4b03      	ldr	r3, [pc, #12]	; (d204 <configure_usart_callbacks+0x38>)
    d1f8:	1c18      	adds	r0, r3, #0
    d1fa:	2101      	movs	r1, #1
    d1fc:	4b05      	ldr	r3, [pc, #20]	; (d214 <configure_usart_callbacks+0x48>)
    d1fe:	4798      	blx	r3
//! [setup_enable_callbacks]
}
    d200:	46bd      	mov	sp, r7
    d202:	bd80      	pop	{r7, pc}
    d204:	20003488 	.word	0x20003488
    d208:	0000d0dd 	.word	0x0000d0dd
    d20c:	00004d8d 	.word	0x00004d8d
    d210:	0000c609 	.word	0x0000c609
    d214:	0000c5d1 	.word	0x0000c5d1

0000d218 <UsartMain>:
//! [setup]

void UsartMain(void)
{
    d218:	b580      	push	{r7, lr}
    d21a:	af00      	add	r7, sp, #0
	configure_usart();
    d21c:	4b02      	ldr	r3, [pc, #8]	; (d228 <UsartMain+0x10>)
    d21e:	4798      	blx	r3
	configure_usart_callbacks();
    d220:	4b02      	ldr	r3, [pc, #8]	; (d22c <UsartMain+0x14>)
    d222:	4798      	blx	r3
}
    d224:	46bd      	mov	sp, r7
    d226:	bd80      	pop	{r7, pc}
    d228:	0000d119 	.word	0x0000d119
    d22c:	0000d1cd 	.word	0x0000d1cd

0000d230 <BTReceive>:

void BTReceive(void)
{
    d230:	b580      	push	{r7, lr}
    d232:	af00      	add	r7, sp, #0
	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,5);
    d234:	4a05      	ldr	r2, [pc, #20]	; (d24c <BTReceive+0x1c>)
    d236:	4b06      	ldr	r3, [pc, #24]	; (d250 <BTReceive+0x20>)
    d238:	1c10      	adds	r0, r2, #0
    d23a:	1c19      	adds	r1, r3, #0
    d23c:	2205      	movs	r2, #5
    d23e:	4b05      	ldr	r3, [pc, #20]	; (d254 <BTReceive+0x24>)
    d240:	4798      	blx	r3
	receiveIntercharTimeout = FALSE;        
    d242:	4b05      	ldr	r3, [pc, #20]	; (d258 <BTReceive+0x28>)
    d244:	2200      	movs	r2, #0
    d246:	701a      	strb	r2, [r3, #0]
}
    d248:	46bd      	mov	sp, r7
    d24a:	bd80      	pop	{r7, pc}
    d24c:	20003488 	.word	0x20003488
    d250:	20000a7c 	.word	0x20000a7c
    d254:	00004e2d 	.word	0x00004e2d
    d258:	2000065b 	.word	0x2000065b

0000d25c <BTTransmit>:

void BTTransmit(uint8_t *buffer,uint8_t length,uint8_t state)
{
    d25c:	b580      	push	{r7, lr}
    d25e:	b082      	sub	sp, #8
    d260:	af00      	add	r7, sp, #0
    d262:	6078      	str	r0, [r7, #4]
    d264:	1cfb      	adds	r3, r7, #3
    d266:	7019      	strb	r1, [r3, #0]
    d268:	1cbb      	adds	r3, r7, #2
    d26a:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_instance, buffer, length); 
    d26c:	1cfb      	adds	r3, r7, #3
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	b29b      	uxth	r3, r3
    d272:	4905      	ldr	r1, [pc, #20]	; (d288 <BTTransmit+0x2c>)
    d274:	687a      	ldr	r2, [r7, #4]
    d276:	1c08      	adds	r0, r1, #0
    d278:	1c11      	adds	r1, r2, #0
    d27a:	1c1a      	adds	r2, r3, #0
    d27c:	4b03      	ldr	r3, [pc, #12]	; (d28c <BTTransmit+0x30>)
    d27e:	4798      	blx	r3
	
}
    d280:	46bd      	mov	sp, r7
    d282:	b002      	add	sp, #8
    d284:	bd80      	pop	{r7, pc}
    d286:	46c0      	nop			; (mov r8, r8)
    d288:	20003488 	.word	0x20003488
    d28c:	00004dd1 	.word	0x00004dd1

0000d290 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d290:	b580      	push	{r7, lr}
    d292:	b084      	sub	sp, #16
    d294:	af00      	add	r7, sp, #0
    d296:	1c02      	adds	r2, r0, #0
    d298:	1dfb      	adds	r3, r7, #7
    d29a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d29c:	1c3b      	adds	r3, r7, #0
    d29e:	330f      	adds	r3, #15
    d2a0:	1dfa      	adds	r2, r7, #7
    d2a2:	7812      	ldrb	r2, [r2, #0]
    d2a4:	09d2      	lsrs	r2, r2, #7
    d2a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d2a8:	1c3b      	adds	r3, r7, #0
    d2aa:	330e      	adds	r3, #14
    d2ac:	1dfa      	adds	r2, r7, #7
    d2ae:	7812      	ldrb	r2, [r2, #0]
    d2b0:	0952      	lsrs	r2, r2, #5
    d2b2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d2b4:	4b0d      	ldr	r3, [pc, #52]	; (d2ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d2b6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    d2b8:	1c3b      	adds	r3, r7, #0
    d2ba:	330f      	adds	r3, #15
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	2b00      	cmp	r3, #0
    d2c0:	d10e      	bne.n	d2e0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    d2c2:	1c3b      	adds	r3, r7, #0
    d2c4:	330f      	adds	r3, #15
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	009b      	lsls	r3, r3, #2
    d2ca:	2210      	movs	r2, #16
    d2cc:	19d2      	adds	r2, r2, r7
    d2ce:	18d3      	adds	r3, r2, r3
    d2d0:	3b08      	subs	r3, #8
    d2d2:	681a      	ldr	r2, [r3, #0]
    d2d4:	1c3b      	adds	r3, r7, #0
    d2d6:	330e      	adds	r3, #14
    d2d8:	781b      	ldrb	r3, [r3, #0]
    d2da:	01db      	lsls	r3, r3, #7
    d2dc:	18d3      	adds	r3, r2, r3
    d2de:	e000      	b.n	d2e2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    d2e0:	2300      	movs	r3, #0
	}
}
    d2e2:	1c18      	adds	r0, r3, #0
    d2e4:	46bd      	mov	sp, r7
    d2e6:	b004      	add	sp, #16
    d2e8:	bd80      	pop	{r7, pc}
    d2ea:	46c0      	nop			; (mov r8, r8)
    d2ec:	41004400 	.word	0x41004400

0000d2f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b082      	sub	sp, #8
    d2f4:	af00      	add	r7, sp, #0
    d2f6:	1c02      	adds	r2, r0, #0
    d2f8:	1dfb      	adds	r3, r7, #7
    d2fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d2fc:	1dfb      	adds	r3, r7, #7
    d2fe:	781b      	ldrb	r3, [r3, #0]
    d300:	1c18      	adds	r0, r3, #0
    d302:	4b03      	ldr	r3, [pc, #12]	; (d310 <port_get_group_from_gpio_pin+0x20>)
    d304:	4798      	blx	r3
    d306:	1c03      	adds	r3, r0, #0
}
    d308:	1c18      	adds	r0, r3, #0
    d30a:	46bd      	mov	sp, r7
    d30c:	b002      	add	sp, #8
    d30e:	bd80      	pop	{r7, pc}
    d310:	0000d291 	.word	0x0000d291

0000d314 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    d314:	b580      	push	{r7, lr}
    d316:	b082      	sub	sp, #8
    d318:	af00      	add	r7, sp, #0
    d31a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	2200      	movs	r2, #0
    d320:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d322:	687b      	ldr	r3, [r7, #4]
    d324:	2201      	movs	r2, #1
    d326:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d328:	687b      	ldr	r3, [r7, #4]
    d32a:	2200      	movs	r2, #0
    d32c:	709a      	strb	r2, [r3, #2]
}
    d32e:	46bd      	mov	sp, r7
    d330:	b002      	add	sp, #8
    d332:	bd80      	pop	{r7, pc}

0000d334 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d334:	b580      	push	{r7, lr}
    d336:	b084      	sub	sp, #16
    d338:	af00      	add	r7, sp, #0
    d33a:	1c0a      	adds	r2, r1, #0
    d33c:	1dfb      	adds	r3, r7, #7
    d33e:	1c01      	adds	r1, r0, #0
    d340:	7019      	strb	r1, [r3, #0]
    d342:	1dbb      	adds	r3, r7, #6
    d344:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d346:	1dfb      	adds	r3, r7, #7
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	1c18      	adds	r0, r3, #0
    d34c:	4b0d      	ldr	r3, [pc, #52]	; (d384 <port_pin_set_output_level+0x50>)
    d34e:	4798      	blx	r3
    d350:	1c03      	adds	r3, r0, #0
    d352:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d354:	1dfb      	adds	r3, r7, #7
    d356:	781a      	ldrb	r2, [r3, #0]
    d358:	231f      	movs	r3, #31
    d35a:	4013      	ands	r3, r2
    d35c:	2201      	movs	r2, #1
    d35e:	1c11      	adds	r1, r2, #0
    d360:	4099      	lsls	r1, r3
    d362:	1c0b      	adds	r3, r1, #0
    d364:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d366:	1dbb      	adds	r3, r7, #6
    d368:	781b      	ldrb	r3, [r3, #0]
    d36a:	2b00      	cmp	r3, #0
    d36c:	d003      	beq.n	d376 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    d36e:	68fb      	ldr	r3, [r7, #12]
    d370:	68ba      	ldr	r2, [r7, #8]
    d372:	619a      	str	r2, [r3, #24]
    d374:	e002      	b.n	d37c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d376:	68fb      	ldr	r3, [r7, #12]
    d378:	68ba      	ldr	r2, [r7, #8]
    d37a:	615a      	str	r2, [r3, #20]
	}
}
    d37c:	46bd      	mov	sp, r7
    d37e:	b004      	add	sp, #16
    d380:	bd80      	pop	{r7, pc}
    d382:	46c0      	nop			; (mov r8, r8)
    d384:	0000d2f1 	.word	0x0000d2f1

0000d388 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    d388:	b580      	push	{r7, lr}
    d38a:	b084      	sub	sp, #16
    d38c:	af00      	add	r7, sp, #0
    d38e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d390:	687b      	ldr	r3, [r7, #4]
    d392:	681b      	ldr	r3, [r3, #0]
    d394:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    d396:	68fb      	ldr	r3, [r7, #12]
    d398:	8a1b      	ldrh	r3, [r3, #16]
    d39a:	b29b      	uxth	r3, r3
    d39c:	1c1a      	adds	r2, r3, #0
    d39e:	2380      	movs	r3, #128	; 0x80
    d3a0:	021b      	lsls	r3, r3, #8
    d3a2:	4013      	ands	r3, r2
    d3a4:	1e5a      	subs	r2, r3, #1
    d3a6:	4193      	sbcs	r3, r2
    d3a8:	b2db      	uxtb	r3, r3
#  endif
}
    d3aa:	1c18      	adds	r0, r3, #0
    d3ac:	46bd      	mov	sp, r7
    d3ae:	b004      	add	sp, #16
    d3b0:	bd80      	pop	{r7, pc}
    d3b2:	46c0      	nop			; (mov r8, r8)

0000d3b4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    d3b4:	b580      	push	{r7, lr}
    d3b6:	b082      	sub	sp, #8
    d3b8:	af00      	add	r7, sp, #0
    d3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    d3bc:	687b      	ldr	r3, [r7, #4]
    d3be:	2201      	movs	r2, #1
    d3c0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d3c2:	687b      	ldr	r3, [r7, #4]
    d3c4:	2200      	movs	r2, #0
    d3c6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;  //BBBBBBBBBBBBBBBB0;
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	2200      	movs	r2, #0
    d3cc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    d3ce:	687b      	ldr	r3, [r7, #4]
    d3d0:	22c0      	movs	r2, #192	; 0xc0
    d3d2:	0392      	lsls	r2, r2, #14
    d3d4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	2200      	movs	r2, #0
    d3da:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	2200      	movs	r2, #0
    d3e0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	2201      	movs	r2, #1
    d3e6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_1;  //0;
    d3e8:	687a      	ldr	r2, [r7, #4]
    d3ea:	2320      	movs	r3, #32
    d3ec:	2101      	movs	r1, #1
    d3ee:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	3314      	adds	r3, #20
    d3f4:	1c18      	adds	r0, r3, #0
    d3f6:	2100      	movs	r1, #0
    d3f8:	220c      	movs	r2, #12
    d3fa:	4b0a      	ldr	r3, [pc, #40]	; (d424 <spi_get_config_defaults+0x70>)
    d3fc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    d3fe:	687b      	ldr	r3, [r7, #4]
    d400:	4a09      	ldr	r2, [pc, #36]	; (d428 <spi_get_config_defaults+0x74>)
    d402:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    d404:	687b      	ldr	r3, [r7, #4]
    d406:	2200      	movs	r2, #0
    d408:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    d40a:	687b      	ldr	r3, [r7, #4]
    d40c:	2200      	movs	r2, #0
    d40e:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	2200      	movs	r2, #0
    d414:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	2200      	movs	r2, #0
    d41a:	631a      	str	r2, [r3, #48]	; 0x30

};
    d41c:	46bd      	mov	sp, r7
    d41e:	b002      	add	sp, #8
    d420:	bd80      	pop	{r7, pc}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	00016d81 	.word	0x00016d81
    d428:	000186a0 	.word	0x000186a0

0000d42c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    d42c:	b580      	push	{r7, lr}
    d42e:	b082      	sub	sp, #8
    d430:	af00      	add	r7, sp, #0
    d432:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	220a      	movs	r2, #10
    d438:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	2200      	movs	r2, #0
    d43e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    d440:	687b      	ldr	r3, [r7, #4]
    d442:	2200      	movs	r2, #0
    d444:	709a      	strb	r2, [r3, #2]
}
    d446:	46bd      	mov	sp, r7
    d448:	b002      	add	sp, #8
    d44a:	bd80      	pop	{r7, pc}

0000d44c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    d44c:	b580      	push	{r7, lr}
    d44e:	b084      	sub	sp, #16
    d450:	af00      	add	r7, sp, #0
    d452:	6078      	str	r0, [r7, #4]
    d454:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    d456:	683b      	ldr	r3, [r7, #0]
    d458:	781a      	ldrb	r2, [r3, #0]
    d45a:	687b      	ldr	r3, [r7, #4]
    d45c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    d45e:	683b      	ldr	r3, [r7, #0]
    d460:	785a      	ldrb	r2, [r3, #1]
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    d466:	683b      	ldr	r3, [r7, #0]
    d468:	789a      	ldrb	r2, [r3, #2]
    d46a:	687b      	ldr	r3, [r7, #4]
    d46c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    d46e:	1c3b      	adds	r3, r7, #0
    d470:	330c      	adds	r3, #12
    d472:	1c18      	adds	r0, r3, #0
    d474:	4b0b      	ldr	r3, [pc, #44]	; (d4a4 <spi_attach_slave+0x58>)
    d476:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d478:	1c3b      	adds	r3, r7, #0
    d47a:	330c      	adds	r3, #12
    d47c:	2201      	movs	r2, #1
    d47e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	781a      	ldrb	r2, [r3, #0]
    d484:	1c3b      	adds	r3, r7, #0
    d486:	330c      	adds	r3, #12
    d488:	1c10      	adds	r0, r2, #0
    d48a:	1c19      	adds	r1, r3, #0
    d48c:	4b06      	ldr	r3, [pc, #24]	; (d4a8 <spi_attach_slave+0x5c>)
    d48e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	781b      	ldrb	r3, [r3, #0]
    d494:	1c18      	adds	r0, r3, #0
    d496:	2101      	movs	r1, #1
    d498:	4b04      	ldr	r3, [pc, #16]	; (d4ac <spi_attach_slave+0x60>)
    d49a:	4798      	blx	r3
}
    d49c:	46bd      	mov	sp, r7
    d49e:	b004      	add	sp, #16
    d4a0:	bd80      	pop	{r7, pc}
    d4a2:	46c0      	nop			; (mov r8, r8)
    d4a4:	0000d315 	.word	0x0000d315
    d4a8:	00010c95 	.word	0x00010c95
    d4ac:	0000d335 	.word	0x0000d335

0000d4b0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b084      	sub	sp, #16
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    d4be:	46c0      	nop			; (mov r8, r8)
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	1c18      	adds	r0, r3, #0
    d4c4:	4b06      	ldr	r3, [pc, #24]	; (d4e0 <spi_enable+0x30>)
    d4c6:	4798      	blx	r3
    d4c8:	1c03      	adds	r3, r0, #0
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d1f8      	bne.n	d4c0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	681b      	ldr	r3, [r3, #0]
    d4d2:	2202      	movs	r2, #2
    d4d4:	431a      	orrs	r2, r3
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	601a      	str	r2, [r3, #0]
}
    d4da:	46bd      	mov	sp, r7
    d4dc:	b004      	add	sp, #16
    d4de:	bd80      	pop	{r7, pc}
    d4e0:	0000d389 	.word	0x0000d389

0000d4e4 <SPIXConfigure>:
 
//----------------------------------------------------------------------------
//		SPIXConfigure
//---------------------------------------------------------------------------- 
void SPIXConfigure(void)
{
    d4e4:	b580      	push	{r7, lr}
    d4e6:	b08e      	sub	sp, #56	; 0x38
    d4e8:	af00      	add	r7, sp, #0
 
	//-----------------------------------
	// Configure and initialize software device 
	// instance of peripheral slave 
	//-----------------------------------
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    d4ea:	1c3b      	adds	r3, r7, #0
    d4ec:	1c18      	adds	r0, r3, #0
    d4ee:	4b17      	ldr	r3, [pc, #92]	; (d54c <SPIXConfigure+0x68>)
    d4f0:	4798      	blx	r3
	slave_dev_config.ss_pin = XSLAVE_SELECT_PIN;
    d4f2:	1c3b      	adds	r3, r7, #0
    d4f4:	2206      	movs	r2, #6
    d4f6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slavex, &slave_dev_config);
    d4f8:	4a15      	ldr	r2, [pc, #84]	; (d550 <SPIXConfigure+0x6c>)
    d4fa:	1c3b      	adds	r3, r7, #0
    d4fc:	1c10      	adds	r0, r2, #0
    d4fe:	1c19      	adds	r1, r3, #0
    d500:	4b14      	ldr	r3, [pc, #80]	; (d554 <SPIXConfigure+0x70>)
    d502:	4798      	blx	r3
	//------------------------------------
	// Configure, initialize and enable SERCOM SPI module 
	//------------------------------------
	spi_get_config_defaults(&config_spi_master);
    d504:	1d3b      	adds	r3, r7, #4
    d506:	1c18      	adds	r0, r3, #0
    d508:	4b13      	ldr	r3, [pc, #76]	; (d558 <SPIXConfigure+0x74>)
    d50a:	4798      	blx	r3
	config_spi_master.mux_setting = EXT2_SPI_SERCOM_MUX_SETTING;
    d50c:	1d3b      	adds	r3, r7, #4
    d50e:	22c0      	movs	r2, #192	; 0xc0
    d510:	0392      	lsls	r2, r2, #14
    d512:	60da      	str	r2, [r3, #12]

	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EXT2_SPI_SERCOM_PINMUX_PAD0;
    d514:	1d3b      	adds	r3, r7, #4
    d516:	4a11      	ldr	r2, [pc, #68]	; (d55c <SPIXConfigure+0x78>)
    d518:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 = EXT2_SPI_SERCOM_PINMUX_PAD1;
    d51a:	1d3b      	adds	r3, r7, #4
    d51c:	4a10      	ldr	r2, [pc, #64]	; (d560 <SPIXConfigure+0x7c>)
    d51e:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    d520:	1d3b      	adds	r3, r7, #4
    d522:	2201      	movs	r2, #1
    d524:	4252      	negs	r2, r2
    d526:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EXT2_SPI_SERCOM_PINMUX_PAD3;
    d528:	1d3b      	adds	r3, r7, #4
    d52a:	4a0e      	ldr	r2, [pc, #56]	; (d564 <SPIXConfigure+0x80>)
    d52c:	631a      	str	r2, [r3, #48]	; 0x30
	spi_init(&spix_master_instance, EXT2_SPI_MODULE, &config_spi_master);
    d52e:	490e      	ldr	r1, [pc, #56]	; (d568 <SPIXConfigure+0x84>)
    d530:	4a0e      	ldr	r2, [pc, #56]	; (d56c <SPIXConfigure+0x88>)
    d532:	1d3b      	adds	r3, r7, #4
    d534:	1c08      	adds	r0, r1, #0
    d536:	1c11      	adds	r1, r2, #0
    d538:	1c1a      	adds	r2, r3, #0
    d53a:	4b0d      	ldr	r3, [pc, #52]	; (d570 <SPIXConfigure+0x8c>)
    d53c:	4798      	blx	r3
	spi_enable(&spix_master_instance);
    d53e:	4b0a      	ldr	r3, [pc, #40]	; (d568 <SPIXConfigure+0x84>)
    d540:	1c18      	adds	r0, r3, #0
    d542:	4b0c      	ldr	r3, [pc, #48]	; (d574 <SPIXConfigure+0x90>)
    d544:	4798      	blx	r3
 
}
    d546:	46bd      	mov	sp, r7
    d548:	b00e      	add	sp, #56	; 0x38
    d54a:	bd80      	pop	{r7, pc}
    d54c:	0000d42d 	.word	0x0000d42d
    d550:	200035b8 	.word	0x200035b8
    d554:	0000d44d 	.word	0x0000d44d
    d558:	0000d3b5 	.word	0x0000d3b5
    d55c:	00040003 	.word	0x00040003
    d560:	00050003 	.word	0x00050003
    d564:	00070003 	.word	0x00070003
    d568:	20003654 	.word	0x20003654
    d56c:	42000800 	.word	0x42000800
    d570:	000120f5 	.word	0x000120f5
    d574:	0000d4b1 	.word	0x0000d4b1

0000d578 <SPIXMain>:
 //		SPIXMain
 //----------------------------------------------------------------------------
uint8_t rxBuffX[MAX_SPIX_BUFFER_SIZE];
uint8_t txBuffX[MAX_SPIX_BUFFER_SIZE];
int SPIXMain(void)
{
    d578:	b598      	push	{r3, r4, r7, lr}
    d57a:	af00      	add	r7, sp, #0
//	system_init();
 
//	SPIXConfigure();
// while (true)
// {
	spi_select_slave(&spix_master_instance, &slavex, true);
    d57c:	4a21      	ldr	r2, [pc, #132]	; (d604 <SPIXMain+0x8c>)
    d57e:	4b22      	ldr	r3, [pc, #136]	; (d608 <SPIXMain+0x90>)
    d580:	1c10      	adds	r0, r2, #0
    d582:	1c19      	adds	r1, r3, #0
    d584:	2201      	movs	r2, #1
    d586:	4b21      	ldr	r3, [pc, #132]	; (d60c <SPIXMain+0x94>)
    d588:	4798      	blx	r3
 
	txBuffX[0] = 0x42;
    d58a:	4b21      	ldr	r3, [pc, #132]	; (d610 <SPIXMain+0x98>)
    d58c:	2242      	movs	r2, #66	; 0x42
    d58e:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    d590:	4b1f      	ldr	r3, [pc, #124]	; (d610 <SPIXMain+0x98>)
    d592:	2200      	movs	r2, #0
    d594:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    d596:	4b1e      	ldr	r3, [pc, #120]	; (d610 <SPIXMain+0x98>)
    d598:	2200      	movs	r2, #0
    d59a:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],2);
    d59c:	4919      	ldr	r1, [pc, #100]	; (d604 <SPIXMain+0x8c>)
    d59e:	4a1c      	ldr	r2, [pc, #112]	; (d610 <SPIXMain+0x98>)
    d5a0:	4b1c      	ldr	r3, [pc, #112]	; (d614 <SPIXMain+0x9c>)
    d5a2:	1c08      	adds	r0, r1, #0
    d5a4:	1c11      	adds	r1, r2, #0
    d5a6:	1c1a      	adds	r2, r3, #0
    d5a8:	2302      	movs	r3, #2
    d5aa:	4c1b      	ldr	r4, [pc, #108]	; (d618 <SPIXMain+0xa0>)
    d5ac:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    d5ae:	4a15      	ldr	r2, [pc, #84]	; (d604 <SPIXMain+0x8c>)
    d5b0:	4b15      	ldr	r3, [pc, #84]	; (d608 <SPIXMain+0x90>)
    d5b2:	1c10      	adds	r0, r2, #0
    d5b4:	1c19      	adds	r1, r3, #0
    d5b6:	2200      	movs	r2, #0
    d5b8:	4b14      	ldr	r3, [pc, #80]	; (d60c <SPIXMain+0x94>)
    d5ba:	4798      	blx	r3
// }
//	while (true) {
//		/* Infinite loop */
//	}

	spi_select_slave(&spix_master_instance, &slavex, true);
    d5bc:	4a11      	ldr	r2, [pc, #68]	; (d604 <SPIXMain+0x8c>)
    d5be:	4b12      	ldr	r3, [pc, #72]	; (d608 <SPIXMain+0x90>)
    d5c0:	1c10      	adds	r0, r2, #0
    d5c2:	1c19      	adds	r1, r3, #0
    d5c4:	2201      	movs	r2, #1
    d5c6:	4b11      	ldr	r3, [pc, #68]	; (d60c <SPIXMain+0x94>)
    d5c8:	4798      	blx	r3
 
	txBuffX[0] = 0x01;
    d5ca:	4b11      	ldr	r3, [pc, #68]	; (d610 <SPIXMain+0x98>)
    d5cc:	2201      	movs	r2, #1
    d5ce:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    d5d0:	4b0f      	ldr	r3, [pc, #60]	; (d610 <SPIXMain+0x98>)
    d5d2:	2200      	movs	r2, #0
    d5d4:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    d5d6:	4b0e      	ldr	r3, [pc, #56]	; (d610 <SPIXMain+0x98>)
    d5d8:	2200      	movs	r2, #0
    d5da:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],4);
    d5dc:	4909      	ldr	r1, [pc, #36]	; (d604 <SPIXMain+0x8c>)
    d5de:	4a0c      	ldr	r2, [pc, #48]	; (d610 <SPIXMain+0x98>)
    d5e0:	4b0c      	ldr	r3, [pc, #48]	; (d614 <SPIXMain+0x9c>)
    d5e2:	1c08      	adds	r0, r1, #0
    d5e4:	1c11      	adds	r1, r2, #0
    d5e6:	1c1a      	adds	r2, r3, #0
    d5e8:	2304      	movs	r3, #4
    d5ea:	4c0b      	ldr	r4, [pc, #44]	; (d618 <SPIXMain+0xa0>)
    d5ec:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    d5ee:	4a05      	ldr	r2, [pc, #20]	; (d604 <SPIXMain+0x8c>)
    d5f0:	4b05      	ldr	r3, [pc, #20]	; (d608 <SPIXMain+0x90>)
    d5f2:	1c10      	adds	r0, r2, #0
    d5f4:	1c19      	adds	r1, r3, #0
    d5f6:	2200      	movs	r2, #0
    d5f8:	4b04      	ldr	r3, [pc, #16]	; (d60c <SPIXMain+0x94>)
    d5fa:	4798      	blx	r3
	return 1; 
    d5fc:	2301      	movs	r3, #1
 
}
    d5fe:	1c18      	adds	r0, r3, #0
    d600:	46bd      	mov	sp, r7
    d602:	bd98      	pop	{r3, r4, r7, pc}
    d604:	20003654 	.word	0x20003654
    d608:	200035b8 	.word	0x200035b8
    d60c:	000121e9 	.word	0x000121e9
    d610:	200035bc 	.word	0x200035bc
    d614:	20003520 	.word	0x20003520
    d618:	000122c5 	.word	0x000122c5

0000d61c <SPIXInOut>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    d61c:	b590      	push	{r4, r7, lr}
    d61e:	b087      	sub	sp, #28
    d620:	af00      	add	r7, sp, #0
    d622:	6039      	str	r1, [r7, #0]
    d624:	1dfb      	adds	r3, r7, #7
    d626:	1c01      	adds	r1, r0, #0
    d628:	7019      	strb	r1, [r3, #0]
    d62a:	1d3b      	adds	r3, r7, #4
    d62c:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    d62e:	683b      	ldr	r3, [r7, #0]
    d630:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    d632:	2300      	movs	r3, #0
    d634:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    d636:	1d3b      	adds	r3, r7, #4
    d638:	881b      	ldrh	r3, [r3, #0]
    d63a:	2b94      	cmp	r3, #148	; 0x94
    d63c:	d858      	bhi.n	d6f0 <SPIXInOut+0xd4>
	 {
		 success = 1; 
    d63e:	2301      	movs	r3, #1
    d640:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    d642:	4a2e      	ldr	r2, [pc, #184]	; (d6fc <SPIXInOut+0xe0>)
    d644:	4b2e      	ldr	r3, [pc, #184]	; (d700 <SPIXInOut+0xe4>)
    d646:	1c10      	adds	r0, r2, #0
    d648:	1c19      	adds	r1, r3, #0
    d64a:	2201      	movs	r2, #1
    d64c:	4b2d      	ldr	r3, [pc, #180]	; (d704 <SPIXInOut+0xe8>)
    d64e:	4798      	blx	r3
		 for (i=0;i<size;i++)
    d650:	1c3b      	adds	r3, r7, #0
    d652:	3316      	adds	r3, #22
    d654:	2200      	movs	r2, #0
    d656:	801a      	strh	r2, [r3, #0]
    d658:	e010      	b.n	d67c <SPIXInOut+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    d65a:	1c3b      	adds	r3, r7, #0
    d65c:	3316      	adds	r3, #22
    d65e:	881b      	ldrh	r3, [r3, #0]
    d660:	1c5a      	adds	r2, r3, #1
    d662:	693b      	ldr	r3, [r7, #16]
    d664:	1c59      	adds	r1, r3, #1
    d666:	6139      	str	r1, [r7, #16]
    d668:	7819      	ldrb	r1, [r3, #0]
    d66a:	4b27      	ldr	r3, [pc, #156]	; (d708 <SPIXInOut+0xec>)
    d66c:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    d66e:	1c3b      	adds	r3, r7, #0
    d670:	3316      	adds	r3, #22
    d672:	881a      	ldrh	r2, [r3, #0]
    d674:	1c3b      	adds	r3, r7, #0
    d676:	3316      	adds	r3, #22
    d678:	3201      	adds	r2, #1
    d67a:	801a      	strh	r2, [r3, #0]
    d67c:	1c3a      	adds	r2, r7, #0
    d67e:	3216      	adds	r2, #22
    d680:	1d3b      	adds	r3, r7, #4
    d682:	8812      	ldrh	r2, [r2, #0]
    d684:	881b      	ldrh	r3, [r3, #0]
    d686:	429a      	cmp	r2, r3
    d688:	d3e7      	bcc.n	d65a <SPIXInOut+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 
		 txBuffX[0] = addr; 
    d68a:	4b1f      	ldr	r3, [pc, #124]	; (d708 <SPIXInOut+0xec>)
    d68c:	1dfa      	adds	r2, r7, #7
    d68e:	7812      	ldrb	r2, [r2, #0]
    d690:	701a      	strb	r2, [r3, #0]
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    d692:	1d3b      	adds	r3, r7, #4
    d694:	881b      	ldrh	r3, [r3, #0]
    d696:	3301      	adds	r3, #1
    d698:	b29b      	uxth	r3, r3
    d69a:	4818      	ldr	r0, [pc, #96]	; (d6fc <SPIXInOut+0xe0>)
    d69c:	491a      	ldr	r1, [pc, #104]	; (d708 <SPIXInOut+0xec>)
    d69e:	4a1b      	ldr	r2, [pc, #108]	; (d70c <SPIXInOut+0xf0>)
    d6a0:	4c1b      	ldr	r4, [pc, #108]	; (d710 <SPIXInOut+0xf4>)
    d6a2:	47a0      	blx	r4
		 ptr = buffer; 
    d6a4:	683b      	ldr	r3, [r7, #0]
    d6a6:	613b      	str	r3, [r7, #16]
		 for (i=0;i<(size+1);i++)
    d6a8:	1c3b      	adds	r3, r7, #0
    d6aa:	3316      	adds	r3, #22
    d6ac:	2200      	movs	r2, #0
    d6ae:	801a      	strh	r2, [r3, #0]
    d6b0:	e00f      	b.n	d6d2 <SPIXInOut+0xb6>
		 {
			 *ptr++ = rxBuffX[i]; 
    d6b2:	693b      	ldr	r3, [r7, #16]
    d6b4:	1c5a      	adds	r2, r3, #1
    d6b6:	613a      	str	r2, [r7, #16]
    d6b8:	1c3a      	adds	r2, r7, #0
    d6ba:	3216      	adds	r2, #22
    d6bc:	8812      	ldrh	r2, [r2, #0]
    d6be:	4913      	ldr	r1, [pc, #76]	; (d70c <SPIXInOut+0xf0>)
    d6c0:	5c8a      	ldrb	r2, [r1, r2]
    d6c2:	701a      	strb	r2, [r3, #0]
		 }
		 
		 txBuffX[0] = addr; 
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
		 ptr = buffer; 
		 for (i=0;i<(size+1);i++)
    d6c4:	1c3b      	adds	r3, r7, #0
    d6c6:	3316      	adds	r3, #22
    d6c8:	881a      	ldrh	r2, [r3, #0]
    d6ca:	1c3b      	adds	r3, r7, #0
    d6cc:	3316      	adds	r3, #22
    d6ce:	3201      	adds	r2, #1
    d6d0:	801a      	strh	r2, [r3, #0]
    d6d2:	1c3b      	adds	r3, r7, #0
    d6d4:	3316      	adds	r3, #22
    d6d6:	881a      	ldrh	r2, [r3, #0]
    d6d8:	1d3b      	adds	r3, r7, #4
    d6da:	881b      	ldrh	r3, [r3, #0]
    d6dc:	3301      	adds	r3, #1
    d6de:	429a      	cmp	r2, r3
    d6e0:	dbe7      	blt.n	d6b2 <SPIXInOut+0x96>
		 {
			 *ptr++ = rxBuffX[i]; 
		 } 
		 spi_select_slave(&spix_master_instance, &slavex, false);
    d6e2:	4a06      	ldr	r2, [pc, #24]	; (d6fc <SPIXInOut+0xe0>)
    d6e4:	4b06      	ldr	r3, [pc, #24]	; (d700 <SPIXInOut+0xe4>)
    d6e6:	1c10      	adds	r0, r2, #0
    d6e8:	1c19      	adds	r1, r3, #0
    d6ea:	2200      	movs	r2, #0
    d6ec:	4b05      	ldr	r3, [pc, #20]	; (d704 <SPIXInOut+0xe8>)
    d6ee:	4798      	blx	r3
	 } 
	 return success; 
    d6f0:	68fb      	ldr	r3, [r7, #12]
 }
    d6f2:	1c18      	adds	r0, r3, #0
    d6f4:	46bd      	mov	sp, r7
    d6f6:	b007      	add	sp, #28
    d6f8:	bd90      	pop	{r4, r7, pc}
    d6fa:	46c0      	nop			; (mov r8, r8)
    d6fc:	20003654 	.word	0x20003654
    d700:	200035b8 	.word	0x200035b8
    d704:	000121e9 	.word	0x000121e9
    d708:	200035bc 	.word	0x200035bc
    d70c:	20003520 	.word	0x20003520
    d710:	000122c5 	.word	0x000122c5

0000d714 <SPIXInOut2>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut2(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    d714:	b590      	push	{r4, r7, lr}
    d716:	b087      	sub	sp, #28
    d718:	af00      	add	r7, sp, #0
    d71a:	6039      	str	r1, [r7, #0]
    d71c:	1dfb      	adds	r3, r7, #7
    d71e:	1c01      	adds	r1, r0, #0
    d720:	7019      	strb	r1, [r3, #0]
    d722:	1d3b      	adds	r3, r7, #4
    d724:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    d726:	683b      	ldr	r3, [r7, #0]
    d728:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    d72a:	2300      	movs	r3, #0
    d72c:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    d72e:	1d3b      	adds	r3, r7, #4
    d730:	881b      	ldrh	r3, [r3, #0]
    d732:	2b94      	cmp	r3, #148	; 0x94
    d734:	d869      	bhi.n	d80a <SPIXInOut2+0xf6>
	 {
		 success = 1; 
    d736:	2301      	movs	r3, #1
    d738:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    d73a:	4a36      	ldr	r2, [pc, #216]	; (d814 <SPIXInOut2+0x100>)
    d73c:	4b36      	ldr	r3, [pc, #216]	; (d818 <SPIXInOut2+0x104>)
    d73e:	1c10      	adds	r0, r2, #0
    d740:	1c19      	adds	r1, r3, #0
    d742:	2201      	movs	r2, #1
    d744:	4b35      	ldr	r3, [pc, #212]	; (d81c <SPIXInOut2+0x108>)
    d746:	4798      	blx	r3
		 for (i=0;i<size;i++)
    d748:	1c3b      	adds	r3, r7, #0
    d74a:	3316      	adds	r3, #22
    d74c:	2200      	movs	r2, #0
    d74e:	801a      	strh	r2, [r3, #0]
    d750:	e010      	b.n	d774 <SPIXInOut2+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    d752:	1c3b      	adds	r3, r7, #0
    d754:	3316      	adds	r3, #22
    d756:	881b      	ldrh	r3, [r3, #0]
    d758:	1c5a      	adds	r2, r3, #1
    d75a:	693b      	ldr	r3, [r7, #16]
    d75c:	1c59      	adds	r1, r3, #1
    d75e:	6139      	str	r1, [r7, #16]
    d760:	7819      	ldrb	r1, [r3, #0]
    d762:	4b2f      	ldr	r3, [pc, #188]	; (d820 <SPIXInOut2+0x10c>)
    d764:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    d766:	1c3b      	adds	r3, r7, #0
    d768:	3316      	adds	r3, #22
    d76a:	881a      	ldrh	r2, [r3, #0]
    d76c:	1c3b      	adds	r3, r7, #0
    d76e:	3316      	adds	r3, #22
    d770:	3201      	adds	r2, #1
    d772:	801a      	strh	r2, [r3, #0]
    d774:	1c3a      	adds	r2, r7, #0
    d776:	3216      	adds	r2, #22
    d778:	1d3b      	adds	r3, r7, #4
    d77a:	8812      	ldrh	r2, [r2, #0]
    d77c:	881b      	ldrh	r3, [r3, #0]
    d77e:	429a      	cmp	r2, r3
    d780:	d3e7      	bcc.n	d752 <SPIXInOut2+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 ptr = buffer; 
    d782:	683b      	ldr	r3, [r7, #0]
    d784:	613b      	str	r3, [r7, #16]
		 txBuffX[0] = addr; 
    d786:	4b26      	ldr	r3, [pc, #152]	; (d820 <SPIXInOut2+0x10c>)
    d788:	1dfa      	adds	r2, r7, #7
    d78a:	7812      	ldrb	r2, [r2, #0]
    d78c:	701a      	strb	r2, [r3, #0]
		 if ((addr & 0x80)!= 0)
    d78e:	1dfb      	adds	r3, r7, #7
    d790:	781b      	ldrb	r3, [r3, #0]
    d792:	b25b      	sxtb	r3, r3
    d794:	2b00      	cmp	r3, #0
    d796:	da09      	bge.n	d7ac <SPIXInOut2+0x98>
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    d798:	1d3b      	adds	r3, r7, #4
    d79a:	881b      	ldrh	r3, [r3, #0]
    d79c:	3301      	adds	r3, #1
    d79e:	b29b      	uxth	r3, r3
    d7a0:	481c      	ldr	r0, [pc, #112]	; (d814 <SPIXInOut2+0x100>)
    d7a2:	491f      	ldr	r1, [pc, #124]	; (d820 <SPIXInOut2+0x10c>)
    d7a4:	4a1f      	ldr	r2, [pc, #124]	; (d824 <SPIXInOut2+0x110>)
    d7a6:	4c20      	ldr	r4, [pc, #128]	; (d828 <SPIXInOut2+0x114>)
    d7a8:	47a0      	blx	r4
    d7aa:	e027      	b.n	d7fc <SPIXInOut2+0xe8>
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
    d7ac:	1d3b      	adds	r3, r7, #4
    d7ae:	881b      	ldrh	r3, [r3, #0]
    d7b0:	3301      	adds	r3, #1
    d7b2:	b29b      	uxth	r3, r3
    d7b4:	4817      	ldr	r0, [pc, #92]	; (d814 <SPIXInOut2+0x100>)
    d7b6:	491a      	ldr	r1, [pc, #104]	; (d820 <SPIXInOut2+0x10c>)
    d7b8:	4a1a      	ldr	r2, [pc, #104]	; (d824 <SPIXInOut2+0x110>)
    d7ba:	4c1b      	ldr	r4, [pc, #108]	; (d828 <SPIXInOut2+0x114>)
    d7bc:	47a0      	blx	r4
			 ptr = buffer; 
    d7be:	683b      	ldr	r3, [r7, #0]
    d7c0:	613b      	str	r3, [r7, #16]
			 for (i=0;i<size;i++)
    d7c2:	1c3b      	adds	r3, r7, #0
    d7c4:	3316      	adds	r3, #22
    d7c6:	2200      	movs	r2, #0
    d7c8:	801a      	strh	r2, [r3, #0]
    d7ca:	e010      	b.n	d7ee <SPIXInOut2+0xda>
			 {
				*ptr++ = rxBuffX[i+1];
    d7cc:	693b      	ldr	r3, [r7, #16]
    d7ce:	1c5a      	adds	r2, r3, #1
    d7d0:	613a      	str	r2, [r7, #16]
    d7d2:	1c3a      	adds	r2, r7, #0
    d7d4:	3216      	adds	r2, #22
    d7d6:	8812      	ldrh	r2, [r2, #0]
    d7d8:	3201      	adds	r2, #1
    d7da:	4912      	ldr	r1, [pc, #72]	; (d824 <SPIXInOut2+0x110>)
    d7dc:	5c8a      	ldrb	r2, [r1, r2]
    d7de:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
			 ptr = buffer; 
			 for (i=0;i<size;i++)
    d7e0:	1c3b      	adds	r3, r7, #0
    d7e2:	3316      	adds	r3, #22
    d7e4:	881a      	ldrh	r2, [r3, #0]
    d7e6:	1c3b      	adds	r3, r7, #0
    d7e8:	3316      	adds	r3, #22
    d7ea:	3201      	adds	r2, #1
    d7ec:	801a      	strh	r2, [r3, #0]
    d7ee:	1c3a      	adds	r2, r7, #0
    d7f0:	3216      	adds	r2, #22
    d7f2:	1d3b      	adds	r3, r7, #4
    d7f4:	8812      	ldrh	r2, [r2, #0]
    d7f6:	881b      	ldrh	r3, [r3, #0]
    d7f8:	429a      	cmp	r2, r3
    d7fa:	d3e7      	bcc.n	d7cc <SPIXInOut2+0xb8>
			 {
				*ptr++ = rxBuffX[i+1];
			 }
		 }
		 spi_select_slave(&spix_master_instance, &slavex, false);
    d7fc:	4a05      	ldr	r2, [pc, #20]	; (d814 <SPIXInOut2+0x100>)
    d7fe:	4b06      	ldr	r3, [pc, #24]	; (d818 <SPIXInOut2+0x104>)
    d800:	1c10      	adds	r0, r2, #0
    d802:	1c19      	adds	r1, r3, #0
    d804:	2200      	movs	r2, #0
    d806:	4b05      	ldr	r3, [pc, #20]	; (d81c <SPIXInOut2+0x108>)
    d808:	4798      	blx	r3
	 } 
	 return success; 
    d80a:	68fb      	ldr	r3, [r7, #12]
 }
    d80c:	1c18      	adds	r0, r3, #0
    d80e:	46bd      	mov	sp, r7
    d810:	b007      	add	sp, #28
    d812:	bd90      	pop	{r4, r7, pc}
    d814:	20003654 	.word	0x20003654
    d818:	200035b8 	.word	0x200035b8
    d81c:	000121e9 	.word	0x000121e9
    d820:	200035bc 	.word	0x200035bc
    d824:	20003520 	.word	0x20003520
    d828:	000122c5 	.word	0x000122c5

0000d82c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d82c:	b580      	push	{r7, lr}
    d82e:	b084      	sub	sp, #16
    d830:	af00      	add	r7, sp, #0
    d832:	1c02      	adds	r2, r0, #0
    d834:	1dfb      	adds	r3, r7, #7
    d836:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d838:	1c3b      	adds	r3, r7, #0
    d83a:	330f      	adds	r3, #15
    d83c:	1dfa      	adds	r2, r7, #7
    d83e:	7812      	ldrb	r2, [r2, #0]
    d840:	09d2      	lsrs	r2, r2, #7
    d842:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d844:	1c3b      	adds	r3, r7, #0
    d846:	330e      	adds	r3, #14
    d848:	1dfa      	adds	r2, r7, #7
    d84a:	7812      	ldrb	r2, [r2, #0]
    d84c:	0952      	lsrs	r2, r2, #5
    d84e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d850:	4b0d      	ldr	r3, [pc, #52]	; (d888 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d852:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    d854:	1c3b      	adds	r3, r7, #0
    d856:	330f      	adds	r3, #15
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	2b00      	cmp	r3, #0
    d85c:	d10e      	bne.n	d87c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    d85e:	1c3b      	adds	r3, r7, #0
    d860:	330f      	adds	r3, #15
    d862:	781b      	ldrb	r3, [r3, #0]
    d864:	009b      	lsls	r3, r3, #2
    d866:	2210      	movs	r2, #16
    d868:	19d2      	adds	r2, r2, r7
    d86a:	18d3      	adds	r3, r2, r3
    d86c:	3b08      	subs	r3, #8
    d86e:	681a      	ldr	r2, [r3, #0]
    d870:	1c3b      	adds	r3, r7, #0
    d872:	330e      	adds	r3, #14
    d874:	781b      	ldrb	r3, [r3, #0]
    d876:	01db      	lsls	r3, r3, #7
    d878:	18d3      	adds	r3, r2, r3
    d87a:	e000      	b.n	d87e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    d87c:	2300      	movs	r3, #0
	}
}
    d87e:	1c18      	adds	r0, r3, #0
    d880:	46bd      	mov	sp, r7
    d882:	b004      	add	sp, #16
    d884:	bd80      	pop	{r7, pc}
    d886:	46c0      	nop			; (mov r8, r8)
    d888:	41004400 	.word	0x41004400

0000d88c <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    d88c:	b580      	push	{r7, lr}
    d88e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    d890:	4b03      	ldr	r3, [pc, #12]	; (d8a0 <system_interrupt_enable_global+0x14>)
    d892:	2201      	movs	r2, #1
    d894:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    d896:	f3bf 8f5f 	dmb	sy
    d89a:	b662      	cpsie	i
}
    d89c:	46bd      	mov	sp, r7
    d89e:	bd80      	pop	{r7, pc}
    d8a0:	20000044 	.word	0x20000044

0000d8a4 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    d8a4:	b580      	push	{r7, lr}
    d8a6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    d8a8:	b672      	cpsid	i
    d8aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d8ae:	4b02      	ldr	r3, [pc, #8]	; (d8b8 <system_interrupt_disable_global+0x14>)
    d8b0:	2200      	movs	r2, #0
    d8b2:	701a      	strb	r2, [r3, #0]
}
    d8b4:	46bd      	mov	sp, r7
    d8b6:	bd80      	pop	{r7, pc}
    d8b8:	20000044 	.word	0x20000044

0000d8bc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    d8bc:	b580      	push	{r7, lr}
    d8be:	b082      	sub	sp, #8
    d8c0:	af00      	add	r7, sp, #0
    d8c2:	1c02      	adds	r2, r0, #0
    d8c4:	1dfb      	adds	r3, r7, #7
    d8c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d8c8:	4b06      	ldr	r3, [pc, #24]	; (d8e4 <system_interrupt_enable+0x28>)
    d8ca:	1dfa      	adds	r2, r7, #7
    d8cc:	7812      	ldrb	r2, [r2, #0]
    d8ce:	1c11      	adds	r1, r2, #0
    d8d0:	221f      	movs	r2, #31
    d8d2:	400a      	ands	r2, r1
    d8d4:	2101      	movs	r1, #1
    d8d6:	1c08      	adds	r0, r1, #0
    d8d8:	4090      	lsls	r0, r2
    d8da:	1c02      	adds	r2, r0, #0
    d8dc:	601a      	str	r2, [r3, #0]
}
    d8de:	46bd      	mov	sp, r7
    d8e0:	b002      	add	sp, #8
    d8e2:	bd80      	pop	{r7, pc}
    d8e4:	e000e100 	.word	0xe000e100

0000d8e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d8e8:	b580      	push	{r7, lr}
    d8ea:	b082      	sub	sp, #8
    d8ec:	af00      	add	r7, sp, #0
    d8ee:	1c02      	adds	r2, r0, #0
    d8f0:	1dfb      	adds	r3, r7, #7
    d8f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d8f4:	1dfb      	adds	r3, r7, #7
    d8f6:	781b      	ldrb	r3, [r3, #0]
    d8f8:	1c18      	adds	r0, r3, #0
    d8fa:	4b03      	ldr	r3, [pc, #12]	; (d908 <port_get_group_from_gpio_pin+0x20>)
    d8fc:	4798      	blx	r3
    d8fe:	1c03      	adds	r3, r0, #0
}
    d900:	1c18      	adds	r0, r3, #0
    d902:	46bd      	mov	sp, r7
    d904:	b002      	add	sp, #8
    d906:	bd80      	pop	{r7, pc}
    d908:	0000d82d 	.word	0x0000d82d

0000d90c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    d90c:	b580      	push	{r7, lr}
    d90e:	b082      	sub	sp, #8
    d910:	af00      	add	r7, sp, #0
    d912:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    d914:	687b      	ldr	r3, [r7, #4]
    d916:	2200      	movs	r2, #0
    d918:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	2201      	movs	r2, #1
    d91e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	2200      	movs	r2, #0
    d924:	709a      	strb	r2, [r3, #2]
}
    d926:	46bd      	mov	sp, r7
    d928:	b002      	add	sp, #8
    d92a:	bd80      	pop	{r7, pc}

0000d92c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d92c:	b580      	push	{r7, lr}
    d92e:	b084      	sub	sp, #16
    d930:	af00      	add	r7, sp, #0
    d932:	1c0a      	adds	r2, r1, #0
    d934:	1dfb      	adds	r3, r7, #7
    d936:	1c01      	adds	r1, r0, #0
    d938:	7019      	strb	r1, [r3, #0]
    d93a:	1dbb      	adds	r3, r7, #6
    d93c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d93e:	1dfb      	adds	r3, r7, #7
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	1c18      	adds	r0, r3, #0
    d944:	4b0d      	ldr	r3, [pc, #52]	; (d97c <port_pin_set_output_level+0x50>)
    d946:	4798      	blx	r3
    d948:	1c03      	adds	r3, r0, #0
    d94a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d94c:	1dfb      	adds	r3, r7, #7
    d94e:	781a      	ldrb	r2, [r3, #0]
    d950:	231f      	movs	r3, #31
    d952:	4013      	ands	r3, r2
    d954:	2201      	movs	r2, #1
    d956:	1c11      	adds	r1, r2, #0
    d958:	4099      	lsls	r1, r3
    d95a:	1c0b      	adds	r3, r1, #0
    d95c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d95e:	1dbb      	adds	r3, r7, #6
    d960:	781b      	ldrb	r3, [r3, #0]
    d962:	2b00      	cmp	r3, #0
    d964:	d003      	beq.n	d96e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    d966:	68fb      	ldr	r3, [r7, #12]
    d968:	68ba      	ldr	r2, [r7, #8]
    d96a:	619a      	str	r2, [r3, #24]
    d96c:	e002      	b.n	d974 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d96e:	68fb      	ldr	r3, [r7, #12]
    d970:	68ba      	ldr	r2, [r7, #8]
    d972:	615a      	str	r2, [r3, #20]
	}
}
    d974:	46bd      	mov	sp, r7
    d976:	b004      	add	sp, #16
    d978:	bd80      	pop	{r7, pc}
    d97a:	46c0      	nop			; (mov r8, r8)
    d97c:	0000d8e9 	.word	0x0000d8e9

0000d980 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    d980:	b580      	push	{r7, lr}
    d982:	b084      	sub	sp, #16
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	681b      	ldr	r3, [r3, #0]
    d98c:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    d98e:	68fb      	ldr	r3, [r7, #12]
    d990:	7bdb      	ldrb	r3, [r3, #15]
    d992:	b2db      	uxtb	r3, r3
    d994:	1c1a      	adds	r2, r3, #0
    d996:	2380      	movs	r3, #128	; 0x80
    d998:	4013      	ands	r3, r2
    d99a:	1e5a      	subs	r2, r3, #1
    d99c:	4193      	sbcs	r3, r2
    d99e:	b2db      	uxtb	r3, r3
}
    d9a0:	1c18      	adds	r0, r3, #0
    d9a2:	46bd      	mov	sp, r7
    d9a4:	b004      	add	sp, #16
    d9a6:	bd80      	pop	{r7, pc}

0000d9a8 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    d9a8:	b580      	push	{r7, lr}
    d9aa:	b082      	sub	sp, #8
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	2200      	movs	r2, #0
    d9b4:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d9b6:	687b      	ldr	r3, [r7, #4]
    d9b8:	2200      	movs	r2, #0
    d9ba:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d9bc:	687b      	ldr	r3, [r7, #4]
    d9be:	2200      	movs	r2, #0
    d9c0:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	2200      	movs	r2, #0
    d9c6:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	2200      	movs	r2, #0
    d9cc:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    d9ce:	687b      	ldr	r3, [r7, #4]
    d9d0:	2200      	movs	r2, #0
    d9d2:	705a      	strb	r2, [r3, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d9d4:	687b      	ldr	r3, [r7, #4]
    d9d6:	2200      	movs	r2, #0
    d9d8:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	2200      	movs	r2, #0
    d9de:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	2200      	movs	r2, #0
    d9e4:	731a      	strb	r2, [r3, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	2200      	movs	r2, #0
    d9ea:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    d9ec:	687b      	ldr	r3, [r7, #4]
    d9ee:	2200      	movs	r2, #0
    d9f0:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	2200      	movs	r2, #0
    d9f6:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d9f8:	687b      	ldr	r3, [r7, #4]
    d9fa:	2200      	movs	r2, #0
    d9fc:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	2200      	movs	r2, #0
    da02:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    da04:	687b      	ldr	r3, [r7, #4]
    da06:	2200      	movs	r2, #0
    da08:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    da0a:	687b      	ldr	r3, [r7, #4]
    da0c:	2200      	movs	r2, #0
    da0e:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    da10:	687b      	ldr	r3, [r7, #4]
    da12:	2200      	movs	r2, #0
    da14:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	2200      	movs	r2, #0
    da1a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	2200      	movs	r2, #0
    da20:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    da22:	687b      	ldr	r3, [r7, #4]
    da24:	2200      	movs	r2, #0
    da26:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    da28:	46bd      	mov	sp, r7
    da2a:	b002      	add	sp, #8
    da2c:	bd80      	pop	{r7, pc}
    da2e:	46c0      	nop			; (mov r8, r8)

0000da30 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    da30:	b580      	push	{r7, lr}
    da32:	b084      	sub	sp, #16
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    da38:	687b      	ldr	r3, [r7, #4]
    da3a:	681b      	ldr	r3, [r3, #0]
    da3c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    da3e:	46c0      	nop			; (mov r8, r8)
    da40:	687b      	ldr	r3, [r7, #4]
    da42:	1c18      	adds	r0, r3, #0
    da44:	4b07      	ldr	r3, [pc, #28]	; (da64 <tc_enable+0x34>)
    da46:	4798      	blx	r3
    da48:	1c03      	adds	r3, r0, #0
    da4a:	2b00      	cmp	r3, #0
    da4c:	d1f8      	bne.n	da40 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    da4e:	68fb      	ldr	r3, [r7, #12]
    da50:	881b      	ldrh	r3, [r3, #0]
    da52:	b29b      	uxth	r3, r3
    da54:	2202      	movs	r2, #2
    da56:	4313      	orrs	r3, r2
    da58:	b29a      	uxth	r2, r3
    da5a:	68fb      	ldr	r3, [r7, #12]
    da5c:	801a      	strh	r2, [r3, #0]
}
    da5e:	46bd      	mov	sp, r7
    da60:	b004      	add	sp, #16
    da62:	bd80      	pop	{r7, pc}
    da64:	0000d981 	.word	0x0000d981

0000da68 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    da68:	b580      	push	{r7, lr}
    da6a:	b082      	sub	sp, #8
    da6c:	af00      	add	r7, sp, #0
    da6e:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    da70:	4a04      	ldr	r2, [pc, #16]	; (da84 <_tc_interrupt_get_interrupt_vector+0x1c>)
    da72:	687b      	ldr	r3, [r7, #4]
    da74:	18d3      	adds	r3, r2, r3
    da76:	781b      	ldrb	r3, [r3, #0]
    da78:	b2db      	uxtb	r3, r3
    da7a:	b25b      	sxtb	r3, r3
}
    da7c:	1c18      	adds	r0, r3, #0
    da7e:	46bd      	mov	sp, r7
    da80:	b002      	add	sp, #8
    da82:	bd80      	pop	{r7, pc}
    da84:	20000004 	.word	0x20000004

0000da88 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b082      	sub	sp, #8
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
    da90:	1c0a      	adds	r2, r1, #0
    da92:	1cfb      	adds	r3, r7, #3
    da94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    da96:	687b      	ldr	r3, [r7, #4]
    da98:	681b      	ldr	r3, [r3, #0]
    da9a:	1c18      	adds	r0, r3, #0
    da9c:	4b22      	ldr	r3, [pc, #136]	; (db28 <tc_enable_callback+0xa0>)
    da9e:	4798      	blx	r3
    daa0:	1c03      	adds	r3, r0, #0
    daa2:	1c18      	adds	r0, r3, #0
    daa4:	4b21      	ldr	r3, [pc, #132]	; (db2c <tc_enable_callback+0xa4>)
    daa6:	4798      	blx	r3
    daa8:	1c03      	adds	r3, r0, #0
    daaa:	1c18      	adds	r0, r3, #0
    daac:	4b20      	ldr	r3, [pc, #128]	; (db30 <tc_enable_callback+0xa8>)
    daae:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    dab0:	1cfb      	adds	r3, r7, #3
    dab2:	781b      	ldrb	r3, [r3, #0]
    dab4:	2b02      	cmp	r3, #2
    dab6:	d10b      	bne.n	dad0 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	7e5b      	ldrb	r3, [r3, #25]
    dabc:	2210      	movs	r2, #16
    dabe:	4313      	orrs	r3, r2
    dac0:	b2da      	uxtb	r2, r3
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    dac6:	687b      	ldr	r3, [r7, #4]
    dac8:	681b      	ldr	r3, [r3, #0]
    daca:	2210      	movs	r2, #16
    dacc:	735a      	strb	r2, [r3, #13]
    dace:	e028      	b.n	db22 <tc_enable_callback+0x9a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    dad0:	1cfb      	adds	r3, r7, #3
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	2b03      	cmp	r3, #3
    dad6:	d10b      	bne.n	daf0 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    dad8:	687b      	ldr	r3, [r7, #4]
    dada:	7e5b      	ldrb	r3, [r3, #25]
    dadc:	2220      	movs	r2, #32
    dade:	4313      	orrs	r3, r2
    dae0:	b2da      	uxtb	r2, r3
    dae2:	687b      	ldr	r3, [r7, #4]
    dae4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    dae6:	687b      	ldr	r3, [r7, #4]
    dae8:	681b      	ldr	r3, [r3, #0]
    daea:	2220      	movs	r2, #32
    daec:	735a      	strb	r2, [r3, #13]
    daee:	e018      	b.n	db22 <tc_enable_callback+0x9a>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    daf0:	687b      	ldr	r3, [r7, #4]
    daf2:	7e5b      	ldrb	r3, [r3, #25]
    daf4:	b2da      	uxtb	r2, r3
    daf6:	1cfb      	adds	r3, r7, #3
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	2101      	movs	r1, #1
    dafc:	1c08      	adds	r0, r1, #0
    dafe:	4098      	lsls	r0, r3
    db00:	1c03      	adds	r3, r0, #0
    db02:	b2db      	uxtb	r3, r3
    db04:	4313      	orrs	r3, r2
    db06:	b2db      	uxtb	r3, r3
    db08:	b2da      	uxtb	r2, r3
    db0a:	687b      	ldr	r3, [r7, #4]
    db0c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    db0e:	687b      	ldr	r3, [r7, #4]
    db10:	681b      	ldr	r3, [r3, #0]
    db12:	1cfa      	adds	r2, r7, #3
    db14:	7812      	ldrb	r2, [r2, #0]
    db16:	2101      	movs	r1, #1
    db18:	1c08      	adds	r0, r1, #0
    db1a:	4090      	lsls	r0, r2
    db1c:	1c02      	adds	r2, r0, #0
    db1e:	b2d2      	uxtb	r2, r2
    db20:	735a      	strb	r2, [r3, #13]
	}
}
    db22:	46bd      	mov	sp, r7
    db24:	b002      	add	sp, #8
    db26:	bd80      	pop	{r7, pc}
    db28:	00005281 	.word	0x00005281
    db2c:	0000da69 	.word	0x0000da69
    db30:	0000d8bd 	.word	0x0000d8bd

0000db34 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    db34:	b580      	push	{r7, lr}
    db36:	b082      	sub	sp, #8
    db38:	af00      	add	r7, sp, #0
    db3a:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    db3c:	687b      	ldr	r3, [r7, #4]
    db3e:	2200      	movs	r2, #0
    db40:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = false;
    db42:	687b      	ldr	r3, [r7, #4]
    db44:	2200      	movs	r2, #0
    db46:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    db48:	4b09      	ldr	r3, [pc, #36]	; (db70 <nvm_get_config_defaults+0x3c>)
    db4a:	685b      	ldr	r3, [r3, #4]
    db4c:	085b      	lsrs	r3, r3, #1
    db4e:	1c1a      	adds	r2, r3, #0
    db50:	230f      	movs	r3, #15
    db52:	4013      	ands	r3, r2
    db54:	b2db      	uxtb	r3, r3
    db56:	1c1a      	adds	r2, r3, #0
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    db5c:	687b      	ldr	r3, [r7, #4]
    db5e:	2200      	movs	r2, #0
    db60:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	2200      	movs	r2, #0
    db66:	711a      	strb	r2, [r3, #4]
}
    db68:	46bd      	mov	sp, r7
    db6a:	b002      	add	sp, #8
    db6c:	bd80      	pop	{r7, pc}
    db6e:	46c0      	nop			; (mov r8, r8)
    db70:	41004000 	.word	0x41004000

0000db74 <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
    db74:	b580      	push	{r7, lr}
    db76:	b082      	sub	sp, #8
    db78:	af00      	add	r7, sp, #0
    db7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	2200      	movs	r2, #0
    db80:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    db82:	687b      	ldr	r3, [r7, #4]
    db84:	2201      	movs	r2, #1
    db86:	705a      	strb	r2, [r3, #1]
#if !(SAML21)
	config->clock_source         = GCLK_GENERATOR_4;
    db88:	687b      	ldr	r3, [r7, #4]
    db8a:	2204      	movs	r2, #4
    db8c:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	220c      	movs	r2, #12
    db92:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    db94:	687b      	ldr	r3, [r7, #4]
    db96:	2200      	movs	r2, #0
    db98:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	2200      	movs	r2, #0
    db9e:	715a      	strb	r2, [r3, #5]
}
    dba0:	46bd      	mov	sp, r7
    dba2:	b002      	add	sp, #8
    dba4:	bd80      	pop	{r7, pc}
    dba6:	46c0      	nop			; (mov r8, r8)

0000dba8 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    dba8:	b580      	push	{r7, lr}
    dbaa:	b082      	sub	sp, #8
    dbac:	af00      	add	r7, sp, #0
    dbae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	2200      	movs	r2, #0
    dbb4:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    dbb6:	687b      	ldr	r3, [r7, #4]
    dbb8:	2200      	movs	r2, #0
    dbba:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    dbbc:	687b      	ldr	r3, [r7, #4]
    dbbe:	2208      	movs	r2, #8
    dbc0:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	2227      	movs	r2, #39	; 0x27
    dbc6:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    dbc8:	687b      	ldr	r3, [r7, #4]
    dbca:	2201      	movs	r2, #1
    dbcc:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    dbce:	687b      	ldr	r3, [r7, #4]
    dbd0:	2201      	movs	r2, #1
    dbd2:	71da      	strb	r2, [r3, #7]
}
    dbd4:	46bd      	mov	sp, r7
    dbd6:	b002      	add	sp, #8
    dbd8:	bd80      	pop	{r7, pc}
    dbda:	46c0      	nop			; (mov r8, r8)

0000dbdc <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    dbdc:	b580      	push	{r7, lr}
    dbde:	b082      	sub	sp, #8
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	1c02      	adds	r2, r0, #0
    dbe4:	1dfb      	adds	r3, r7, #7
    dbe6:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    dbe8:	1dfb      	adds	r3, r7, #7
    dbea:	781b      	ldrb	r3, [r3, #0]
    dbec:	2b00      	cmp	r3, #0
    dbee:	d108      	bne.n	dc02 <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    dbf0:	4b06      	ldr	r3, [pc, #24]	; (dc0c <bod_enable+0x30>)
    dbf2:	4a06      	ldr	r2, [pc, #24]	; (dc0c <bod_enable+0x30>)
    dbf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
    dbf6:	2102      	movs	r1, #2
    dbf8:	430a      	orrs	r2, r1
    dbfa:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    dbfc:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    dbfe:	2300      	movs	r3, #0
    dc00:	e000      	b.n	dc04 <bod_enable+0x28>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    dc02:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    dc04:	1c18      	adds	r0, r3, #0
    dc06:	46bd      	mov	sp, r7
    dc08:	b002      	add	sp, #8
    dc0a:	bd80      	pop	{r7, pc}
    dc0c:	40000800 	.word	0x40000800

0000dc10 <EmptyTask>:
void CommSupTask(void);
void EmptyTask(void);


void EmptyTask(void)
{
    dc10:	b580      	push	{r7, lr}
    dc12:	af00      	add	r7, sp, #0
	
}
    dc14:	46bd      	mov	sp, r7
    dc16:	bd80      	pop	{r7, pc}

0000dc18 <configure_bod33>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
static void configure_bod33(void)
{
    dc18:	b580      	push	{r7, lr}
    dc1a:	b082      	sub	sp, #8
    dc1c:	af00      	add	r7, sp, #0
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    dc1e:	1c3b      	adds	r3, r7, #0
    dc20:	1c18      	adds	r0, r3, #0
    dc22:	4b06      	ldr	r3, [pc, #24]	; (dc3c <configure_bod33+0x24>)
    dc24:	4798      	blx	r3
	bod_set_config(BOD_BOD33, &config_bod33);
    dc26:	1c3b      	adds	r3, r7, #0
    dc28:	2000      	movs	r0, #0
    dc2a:	1c19      	adds	r1, r3, #0
    dc2c:	4b04      	ldr	r3, [pc, #16]	; (dc40 <configure_bod33+0x28>)
    dc2e:	4798      	blx	r3
	bod_enable(BOD_BOD33);
    dc30:	2000      	movs	r0, #0
    dc32:	4b04      	ldr	r3, [pc, #16]	; (dc44 <configure_bod33+0x2c>)
    dc34:	4798      	blx	r3
}
    dc36:	46bd      	mov	sp, r7
    dc38:	b002      	add	sp, #8
    dc3a:	bd80      	pop	{r7, pc}
    dc3c:	0000dba9 	.word	0x0000dba9
    dc40:	00003d19 	.word	0x00003d19
    dc44:	0000dbdd 	.word	0x0000dbdd

0000dc48 <configure_wdt>:
//	else {
//		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
//	}
//==============================================================================
void configure_wdt(void)
{
    dc48:	b580      	push	{r7, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    dc4e:	1c3b      	adds	r3, r7, #0
    dc50:	1c18      	adds	r0, r3, #0
    dc52:	4b09      	ldr	r3, [pc, #36]	; (dc78 <configure_wdt+0x30>)
    dc54:	4798      	blx	r3
	 
	config_wdt.always_on      = false;
    dc56:	1c3b      	adds	r3, r7, #0
    dc58:	2200      	movs	r2, #0
    dc5a:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    dc5c:	1c3b      	adds	r3, r7, #0
    dc5e:	2204      	movs	r2, #4
    dc60:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    dc62:	1c3b      	adds	r3, r7, #0
    dc64:	220c      	movs	r2, #12
    dc66:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    dc68:	1c3b      	adds	r3, r7, #0
    dc6a:	1c18      	adds	r0, r3, #0
    dc6c:	4b03      	ldr	r3, [pc, #12]	; (dc7c <configure_wdt+0x34>)
    dc6e:	4798      	blx	r3
 
}
    dc70:	46bd      	mov	sp, r7
    dc72:	b002      	add	sp, #8
    dc74:	bd80      	pop	{r7, pc}
    dc76:	46c0      	nop			; (mov r8, r8)
    dc78:	0000db75 	.word	0x0000db75
    dc7c:	000059d1 	.word	0x000059d1

0000dc80 <deconfigure_wdt>:
 

void deconfigure_wdt(void)
{
    dc80:	b580      	push	{r7, lr}
    dc82:	b082      	sub	sp, #8
    dc84:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    dc86:	1c3b      	adds	r3, r7, #0
    dc88:	1c18      	adds	r0, r3, #0
    dc8a:	4b0a      	ldr	r3, [pc, #40]	; (dcb4 <deconfigure_wdt+0x34>)
    dc8c:	4798      	blx	r3
	config_wdt.enable               = false;
    dc8e:	1c3b      	adds	r3, r7, #0
    dc90:	2200      	movs	r2, #0
    dc92:	705a      	strb	r2, [r3, #1]
	config_wdt.always_on      = false;
    dc94:	1c3b      	adds	r3, r7, #0
    dc96:	2200      	movs	r2, #0
    dc98:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    dc9a:	1c3b      	adds	r3, r7, #0
    dc9c:	2204      	movs	r2, #4
    dc9e:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    dca0:	1c3b      	adds	r3, r7, #0
    dca2:	220c      	movs	r2, #12
    dca4:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    dca6:	1c3b      	adds	r3, r7, #0
    dca8:	1c18      	adds	r0, r3, #0
    dcaa:	4b03      	ldr	r3, [pc, #12]	; (dcb8 <deconfigure_wdt+0x38>)
    dcac:	4798      	blx	r3
 
}
    dcae:	46bd      	mov	sp, r7
    dcb0:	b002      	add	sp, #8
    dcb2:	bd80      	pop	{r7, pc}
    dcb4:	0000db75 	.word	0x0000db75
    dcb8:	000059d1 	.word	0x000059d1

0000dcbc <HardDelay>:
uint8_t motorTest; 	
uint8_t message;

uint8_t testI2C;
void HardDelay(void)
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b082      	sub	sp, #8
    dcc0:	af00      	add	r7, sp, #0
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    dcc2:	2300      	movs	r3, #0
    dcc4:	607b      	str	r3, [r7, #4]
    dcc6:	e008      	b.n	dcda <HardDelay+0x1e>
	{
		testI2C++;
    dcc8:	4b07      	ldr	r3, [pc, #28]	; (dce8 <HardDelay+0x2c>)
    dcca:	781b      	ldrb	r3, [r3, #0]
    dccc:	3301      	adds	r3, #1
    dcce:	b2da      	uxtb	r2, r3
    dcd0:	4b05      	ldr	r3, [pc, #20]	; (dce8 <HardDelay+0x2c>)
    dcd2:	701a      	strb	r2, [r3, #0]

uint8_t testI2C;
void HardDelay(void)
{
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    dcd4:	687b      	ldr	r3, [r7, #4]
    dcd6:	3301      	adds	r3, #1
    dcd8:	607b      	str	r3, [r7, #4]
    dcda:	687b      	ldr	r3, [r7, #4]
    dcdc:	2b7f      	cmp	r3, #127	; 0x7f
    dcde:	d9f3      	bls.n	dcc8 <HardDelay+0xc>
	{
		testI2C++;
	}
	
}
    dce0:	46bd      	mov	sp, r7
    dce2:	b002      	add	sp, #8
    dce4:	bd80      	pop	{r7, pc}
    dce6:	46c0      	nop			; (mov r8, r8)
    dce8:	20003693 	.word	0x20003693

0000dcec <main>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
int main(void)
{
    dcec:	b590      	push	{r4, r7, lr}
    dcee:	b085      	sub	sp, #20
    dcf0:	af00      	add	r7, sp, #0
	uint8_t button,i; 
	struct nvm_config config;
	enum status_code error_code; 		
	struct port_config pin_conf;
	
	system_interrupt_disable_global();
    dcf2:	4bd9      	ldr	r3, [pc, #868]	; (e058 <main+0x36c>)
    dcf4:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    dcf6:	1d3b      	adds	r3, r7, #4
    dcf8:	1c18      	adds	r0, r3, #0
    dcfa:	4bd8      	ldr	r3, [pc, #864]	; (e05c <main+0x370>)
    dcfc:	4798      	blx	r3
	//-------------------------------
	// Initialize the SAM system 
    //-------------------------------
    system_init();	
    dcfe:	4bd8      	ldr	r3, [pc, #864]	; (e060 <main+0x374>)
    dd00:	4798      	blx	r3

	configure_bod33();	
    dd02:	4bd8      	ldr	r3, [pc, #864]	; (e064 <main+0x378>)
    dd04:	4798      	blx	r3
	//-------------------------------
	// initialize the status data before 
	// initializing any of the interfaces. 
	//------------------------------
	AppStatusInitialization(); 
    dd06:	4bd8      	ldr	r3, [pc, #864]	; (e068 <main+0x37c>)
    dd08:	4798      	blx	r3
	//-------------------------------
	// different board hardware configuration
	
#if BRAKEBOARD
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd0a:	1d3b      	adds	r3, r7, #4
    dd0c:	2201      	movs	r2, #1
    dd0e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    dd10:	1d3b      	adds	r3, r7, #4
    dd12:	200c      	movs	r0, #12
    dd14:	1c19      	adds	r1, r3, #0
    dd16:	4bd5      	ldr	r3, [pc, #852]	; (e06c <main+0x380>)
    dd18:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    dd1a:	200c      	movs	r0, #12
    dd1c:	2100      	movs	r1, #0
    dd1e:	4bd4      	ldr	r3, [pc, #848]	; (e070 <main+0x384>)
    dd20:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd22:	1d3b      	adds	r3, r7, #4
    dd24:	2201      	movs	r2, #1
    dd26:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    dd28:	1d3b      	adds	r3, r7, #4
    dd2a:	200d      	movs	r0, #13
    dd2c:	1c19      	adds	r1, r3, #0
    dd2e:	4bcf      	ldr	r3, [pc, #828]	; (e06c <main+0x380>)
    dd30:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    dd32:	200d      	movs	r0, #13
    dd34:	2100      	movs	r1, #0
    dd36:	4bce      	ldr	r3, [pc, #824]	; (e070 <main+0x384>)
    dd38:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd3a:	1d3b      	adds	r3, r7, #4
    dd3c:	2201      	movs	r2, #1
    dd3e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    dd40:	1d3b      	adds	r3, r7, #4
    dd42:	200d      	movs	r0, #13
    dd44:	1c19      	adds	r1, r3, #0
    dd46:	4bc9      	ldr	r3, [pc, #804]	; (e06c <main+0x380>)
    dd48:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    dd4a:	200d      	movs	r0, #13
    dd4c:	2101      	movs	r1, #1
    dd4e:	4bc8      	ldr	r3, [pc, #800]	; (e070 <main+0x384>)
    dd50:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd52:	1d3b      	adds	r3, r7, #4
    dd54:	2201      	movs	r2, #1
    dd56:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    dd58:	1d3b      	adds	r3, r7, #4
    dd5a:	200c      	movs	r0, #12
    dd5c:	1c19      	adds	r1, r3, #0
    dd5e:	4bc3      	ldr	r3, [pc, #780]	; (e06c <main+0x380>)
    dd60:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    dd62:	200c      	movs	r0, #12
    dd64:	2101      	movs	r1, #1
    dd66:	4bc2      	ldr	r3, [pc, #776]	; (e070 <main+0x384>)
    dd68:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    dd6a:	1c3b      	adds	r3, r7, #0
    dd6c:	330f      	adds	r3, #15
    dd6e:	2200      	movs	r2, #0
    dd70:	701a      	strb	r2, [r3, #0]
    dd72:	e022      	b.n	ddba <main+0xce>
	{
		HardDelay();
    dd74:	4bbf      	ldr	r3, [pc, #764]	; (e074 <main+0x388>)
    dd76:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd78:	1d3b      	adds	r3, r7, #4
    dd7a:	2201      	movs	r2, #1
    dd7c:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    dd7e:	1d3b      	adds	r3, r7, #4
    dd80:	200d      	movs	r0, #13
    dd82:	1c19      	adds	r1, r3, #0
    dd84:	4bb9      	ldr	r3, [pc, #740]	; (e06c <main+0x380>)
    dd86:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    dd88:	200d      	movs	r0, #13
    dd8a:	2100      	movs	r1, #0
    dd8c:	4bb8      	ldr	r3, [pc, #736]	; (e070 <main+0x384>)
    dd8e:	4798      	blx	r3
		HardDelay();
    dd90:	4bb8      	ldr	r3, [pc, #736]	; (e074 <main+0x388>)
    dd92:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd94:	1d3b      	adds	r3, r7, #4
    dd96:	2201      	movs	r2, #1
    dd98:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    dd9a:	1d3b      	adds	r3, r7, #4
    dd9c:	200d      	movs	r0, #13
    dd9e:	1c19      	adds	r1, r3, #0
    dda0:	4bb2      	ldr	r3, [pc, #712]	; (e06c <main+0x380>)
    dda2:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    dda4:	200d      	movs	r0, #13
    dda6:	2101      	movs	r1, #1
    dda8:	4bb1      	ldr	r3, [pc, #708]	; (e070 <main+0x384>)
    ddaa:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    ddac:	1c3b      	adds	r3, r7, #0
    ddae:	330f      	adds	r3, #15
    ddb0:	781a      	ldrb	r2, [r3, #0]
    ddb2:	1c3b      	adds	r3, r7, #0
    ddb4:	330f      	adds	r3, #15
    ddb6:	3201      	adds	r2, #1
    ddb8:	701a      	strb	r2, [r3, #0]
    ddba:	1c3b      	adds	r3, r7, #0
    ddbc:	330f      	adds	r3, #15
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	2b0f      	cmp	r3, #15
    ddc2:	d9d7      	bls.n	dd74 <main+0x88>
	}


	//-------LEDS off
	//  
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ddc4:	1d3b      	adds	r3, r7, #4
    ddc6:	2201      	movs	r2, #1
    ddc8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BIGREEN_PIN, &pin_conf);
    ddca:	1d3b      	adds	r3, r7, #4
    ddcc:	202e      	movs	r0, #46	; 0x2e
    ddce:	1c19      	adds	r1, r3, #0
    ddd0:	4ba6      	ldr	r3, [pc, #664]	; (e06c <main+0x380>)
    ddd2:	4798      	blx	r3
	port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ddd4:	202e      	movs	r0, #46	; 0x2e
    ddd6:	2101      	movs	r1, #1
    ddd8:	4ba5      	ldr	r3, [pc, #660]	; (e070 <main+0x384>)
    ddda:	4798      	blx	r3
	port_pin_set_config(LED_BIRED_PIN, &pin_conf);
    dddc:	1d3b      	adds	r3, r7, #4
    ddde:	202f      	movs	r0, #47	; 0x2f
    dde0:	1c19      	adds	r1, r3, #0
    dde2:	4ba2      	ldr	r3, [pc, #648]	; (e06c <main+0x380>)
    dde4:	4798      	blx	r3
	port_pin_set_output_level(LED_BIRED_PIN, true);	
    dde6:	202f      	movs	r0, #47	; 0x2f
    dde8:	2101      	movs	r1, #1
    ddea:	4ba1      	ldr	r3, [pc, #644]	; (e070 <main+0x384>)
    ddec:	4798      	blx	r3
	ledBiGreen = 1;
    ddee:	4ba2      	ldr	r3, [pc, #648]	; (e078 <main+0x38c>)
    ddf0:	2201      	movs	r2, #1
    ddf2:	701a      	strb	r2, [r3, #0]
	ledBiRed = 1; 
    ddf4:	4ba1      	ldr	r3, [pc, #644]	; (e07c <main+0x390>)
    ddf6:	2201      	movs	r2, #1
    ddf8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BLUE_PIN, &pin_conf);
    ddfa:	1d3b      	adds	r3, r7, #4
    ddfc:	202c      	movs	r0, #44	; 0x2c
    ddfe:	1c19      	adds	r1, r3, #0
    de00:	4b9a      	ldr	r3, [pc, #616]	; (e06c <main+0x380>)
    de02:	4798      	blx	r3
	port_pin_set_output_level(LED_BLUE_PIN, true);
    de04:	202c      	movs	r0, #44	; 0x2c
    de06:	2101      	movs	r1, #1
    de08:	4b99      	ldr	r3, [pc, #612]	; (e070 <main+0x384>)
    de0a:	4798      	blx	r3
	port_pin_set_config(LED_RED_PIN, &pin_conf);
    de0c:	1d3b      	adds	r3, r7, #4
    de0e:	202d      	movs	r0, #45	; 0x2d
    de10:	1c19      	adds	r1, r3, #0
    de12:	4b96      	ldr	r3, [pc, #600]	; (e06c <main+0x380>)
    de14:	4798      	blx	r3
	port_pin_set_output_level(LED_RED_PIN, true);	
    de16:	202d      	movs	r0, #45	; 0x2d
    de18:	2101      	movs	r1, #1
    de1a:	4b95      	ldr	r3, [pc, #596]	; (e070 <main+0x384>)
    de1c:	4798      	blx	r3
	 
	ledRed = 2; 
    de1e:	4b98      	ldr	r3, [pc, #608]	; (e080 <main+0x394>)
    de20:	2202      	movs	r2, #2
    de22:	701a      	strb	r2, [r3, #0]
	// PA16 PWMIN
	// PA18 EDa
	// PA19 INa
	// PB24 EDb
	// PB25 INb 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    de24:	1d3b      	adds	r3, r7, #4
    de26:	2201      	movs	r2, #1
    de28:	701a      	strb	r2, [r3, #0]
	//---------- EDb
	port_pin_set_config(ENb, &pin_conf);
    de2a:	1d3b      	adds	r3, r7, #4
    de2c:	2018      	movs	r0, #24
    de2e:	1c19      	adds	r1, r3, #0
    de30:	4b8e      	ldr	r3, [pc, #568]	; (e06c <main+0x380>)
    de32:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    de34:	2018      	movs	r0, #24
    de36:	2100      	movs	r1, #0
    de38:	4b8d      	ldr	r3, [pc, #564]	; (e070 <main+0x384>)
    de3a:	4798      	blx	r3
	//--------- INb
	port_pin_set_config(INb, &pin_conf);
    de3c:	1d3b      	adds	r3, r7, #4
    de3e:	2019      	movs	r0, #25
    de40:	1c19      	adds	r1, r3, #0
    de42:	4b8a      	ldr	r3, [pc, #552]	; (e06c <main+0x380>)
    de44:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    de46:	2019      	movs	r0, #25
    de48:	2100      	movs	r1, #0
    de4a:	4b89      	ldr	r3, [pc, #548]	; (e070 <main+0x384>)
    de4c:	4798      	blx	r3
	//----------EDa
	port_pin_set_config(ENa, &pin_conf);
    de4e:	1d3b      	adds	r3, r7, #4
    de50:	2012      	movs	r0, #18
    de52:	1c19      	adds	r1, r3, #0
    de54:	4b85      	ldr	r3, [pc, #532]	; (e06c <main+0x380>)
    de56:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    de58:	2012      	movs	r0, #18
    de5a:	2100      	movs	r1, #0
    de5c:	4b84      	ldr	r3, [pc, #528]	; (e070 <main+0x384>)
    de5e:	4798      	blx	r3
	//---------INa
	port_pin_set_config(INa, &pin_conf);
    de60:	1d3b      	adds	r3, r7, #4
    de62:	2013      	movs	r0, #19
    de64:	1c19      	adds	r1, r3, #0
    de66:	4b81      	ldr	r3, [pc, #516]	; (e06c <main+0x380>)
    de68:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    de6a:	2013      	movs	r0, #19
    de6c:	2100      	movs	r1, #0
    de6e:	4b80      	ldr	r3, [pc, #512]	; (e070 <main+0x384>)
    de70:	4798      	blx	r3
	//-------- PWmin
	port_pin_set_config(PIN_PA16, &pin_conf);
    de72:	1d3b      	adds	r3, r7, #4
    de74:	2010      	movs	r0, #16
    de76:	1c19      	adds	r1, r3, #0
    de78:	4b7c      	ldr	r3, [pc, #496]	; (e06c <main+0x380>)
    de7a:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA16, true); //false);	
    de7c:	2010      	movs	r0, #16
    de7e:	2101      	movs	r1, #1
    de80:	4b7b      	ldr	r3, [pc, #492]	; (e070 <main+0x384>)
    de82:	4798      	blx	r3
	//-----------------------------
	// MOTOR PIN INITIALIZATION - INPUTS
	// PA3 CS - CURRENT SENSE
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    de84:	1d3b      	adds	r3, r7, #4
    de86:	2200      	movs	r2, #0
    de88:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    de8a:	1d3b      	adds	r3, r7, #4
    de8c:	2200      	movs	r2, #0
    de8e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA03, &pin_conf);
    de90:	1d3b      	adds	r3, r7, #4
    de92:	2003      	movs	r0, #3
    de94:	1c19      	adds	r1, r3, #0
    de96:	4b75      	ldr	r3, [pc, #468]	; (e06c <main+0x380>)
    de98:	4798      	blx	r3
 
	
	//-------MOTOR OFF 
	// ENa,ENb, INa, INb all 0 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    de9a:	1d3b      	adds	r3, r7, #4
    de9c:	2201      	movs	r2, #1
    de9e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);	
    dea0:	1d3b      	adds	r3, r7, #4
    dea2:	2012      	movs	r0, #18
    dea4:	1c19      	adds	r1, r3, #0
    dea6:	4b71      	ldr	r3, [pc, #452]	; (e06c <main+0x380>)
    dea8:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    deaa:	2012      	movs	r0, #18
    deac:	2100      	movs	r1, #0
    deae:	4b70      	ldr	r3, [pc, #448]	; (e070 <main+0x384>)
    deb0:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);	
    deb2:	1d3b      	adds	r3, r7, #4
    deb4:	2018      	movs	r0, #24
    deb6:	1c19      	adds	r1, r3, #0
    deb8:	4b6c      	ldr	r3, [pc, #432]	; (e06c <main+0x380>)
    deba:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    debc:	2018      	movs	r0, #24
    debe:	2100      	movs	r1, #0
    dec0:	4b6b      	ldr	r3, [pc, #428]	; (e070 <main+0x384>)
    dec2:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);		
    dec4:	1d3b      	adds	r3, r7, #4
    dec6:	2013      	movs	r0, #19
    dec8:	1c19      	adds	r1, r3, #0
    deca:	4b68      	ldr	r3, [pc, #416]	; (e06c <main+0x380>)
    decc:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    dece:	2013      	movs	r0, #19
    ded0:	2100      	movs	r1, #0
    ded2:	4b67      	ldr	r3, [pc, #412]	; (e070 <main+0x384>)
    ded4:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);		
    ded6:	1d3b      	adds	r3, r7, #4
    ded8:	2019      	movs	r0, #25
    deda:	1c19      	adds	r1, r3, #0
    dedc:	4b63      	ldr	r3, [pc, #396]	; (e06c <main+0x380>)
    dede:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    dee0:	2019      	movs	r0, #25
    dee2:	2100      	movs	r1, #0
    dee4:	4b62      	ldr	r3, [pc, #392]	; (e070 <main+0x384>)
    dee6:	4798      	blx	r3
 
	//-----------motor inputs
	// FLIMIT - 
	// HLIMIT
	// ENCODER 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dee8:	1d3b      	adds	r3, r7, #4
    deea:	2201      	movs	r2, #1
    deec:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(IRLEDEN, &pin_conf);	
    deee:	1d3b      	adds	r3, r7, #4
    def0:	201b      	movs	r0, #27
    def2:	1c19      	adds	r1, r3, #0
    def4:	4b5d      	ldr	r3, [pc, #372]	; (e06c <main+0x380>)
    def6:	4798      	blx	r3
	port_pin_set_output_level(IRLEDEN, true);	
    def8:	201b      	movs	r0, #27
    defa:	2101      	movs	r1, #1
    defc:	4b5c      	ldr	r3, [pc, #368]	; (e070 <main+0x384>)
    defe:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    df00:	1d3b      	adds	r3, r7, #4
    df02:	2200      	movs	r2, #0
    df04:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    df06:	1d3b      	adds	r3, r7, #4
    df08:	2200      	movs	r2, #0
    df0a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(FLIMIT, &pin_conf);
    df0c:	1d3b      	adds	r3, r7, #4
    df0e:	2015      	movs	r0, #21
    df10:	1c19      	adds	r1, r3, #0
    df12:	4b56      	ldr	r3, [pc, #344]	; (e06c <main+0x380>)
    df14:	4798      	blx	r3
	port_pin_set_config(HLIMIT, &pin_conf);
    df16:	1d3b      	adds	r3, r7, #4
    df18:	2014      	movs	r0, #20
    df1a:	1c19      	adds	r1, r3, #0
    df1c:	4b53      	ldr	r3, [pc, #332]	; (e06c <main+0x380>)
    df1e:	4798      	blx	r3
	port_pin_set_config(ENCODER, &pin_conf);		 
    df20:	1d3b      	adds	r3, r7, #4
    df22:	202b      	movs	r0, #43	; 0x2b
    df24:	1c19      	adds	r1, r3, #0
    df26:	4b51      	ldr	r3, [pc, #324]	; (e06c <main+0x380>)
    df28:	4798      	blx	r3
 

 
	MotorInit(); 
    df2a:	4b56      	ldr	r3, [pc, #344]	; (e084 <main+0x398>)
    df2c:	4798      	blx	r3
 
	//-------SUPER CAP enable
	// 1 is on
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    df2e:	1d3b      	adds	r3, r7, #4
    df30:	2201      	movs	r2, #1
    df32:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SUPERCAPEN, &pin_conf);	
    df34:	1d3b      	adds	r3, r7, #4
    df36:	2025      	movs	r0, #37	; 0x25
    df38:	1c19      	adds	r1, r3, #0
    df3a:	4b4c      	ldr	r3, [pc, #304]	; (e06c <main+0x380>)
    df3c:	4798      	blx	r3
	port_pin_set_output_level(SUPERCAPEN, false);  
    df3e:	2025      	movs	r0, #37	; 0x25
    df40:	2100      	movs	r1, #0
    df42:	4b4b      	ldr	r3, [pc, #300]	; (e070 <main+0x384>)
    df44:	4798      	blx	r3
	supercapState = true; 
    df46:	4b50      	ldr	r3, [pc, #320]	; (e088 <main+0x39c>)
    df48:	2201      	movs	r2, #1
    df4a:	701a      	strb	r2, [r3, #0]
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    df4c:	1d3b      	adds	r3, r7, #4
    df4e:	2200      	movs	r2, #0
    df50:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    df52:	1d3b      	adds	r3, r7, #4
    df54:	2200      	movs	r2, #0
    df56:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    df58:	1d3b      	adds	r3, r7, #4
    df5a:	2002      	movs	r0, #2
    df5c:	1c19      	adds	r1, r3, #0
    df5e:	4b43      	ldr	r3, [pc, #268]	; (e06c <main+0x380>)
    df60:	4798      	blx	r3
	port_pin_set_config(PIN_PA28, &pin_conf);
    df62:	1d3b      	adds	r3, r7, #4
    df64:	201c      	movs	r0, #28
    df66:	1c19      	adds	r1, r3, #0
    df68:	4b40      	ldr	r3, [pc, #256]	; (e06c <main+0x380>)
    df6a:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_TIP, &pin_conf);
    df6c:	1d3b      	adds	r3, r7, #4
    df6e:	2017      	movs	r0, #23
    df70:	1c19      	adds	r1, r3, #0
    df72:	4b3e      	ldr	r3, [pc, #248]	; (e06c <main+0x380>)
    df74:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_RING, &pin_conf);	
    df76:	1d3b      	adds	r3, r7, #4
    df78:	2016      	movs	r0, #22
    df7a:	1c19      	adds	r1, r3, #0
    df7c:	4b3b      	ldr	r3, [pc, #236]	; (e06c <main+0x380>)
    df7e:	4798      	blx	r3
	
	//--------------------------
	// BUTTON INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    df80:	1d3b      	adds	r3, r7, #4
    df82:	2200      	movs	r2, #0
    df84:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    df86:	1d3b      	adds	r3, r7, #4
    df88:	2201      	movs	r2, #1
    df8a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_SETUP, &pin_conf);
    df8c:	1d3b      	adds	r3, r7, #4
    df8e:	200f      	movs	r0, #15
    df90:	1c19      	adds	r1, r3, #0
    df92:	4b36      	ldr	r3, [pc, #216]	; (e06c <main+0x380>)
    df94:	4798      	blx	r3
	port_pin_set_config(BUTTON_POWER, &pin_conf);
    df96:	1d3b      	adds	r3, r7, #4
    df98:	200e      	movs	r0, #14
    df9a:	1c19      	adds	r1, r3, #0
    df9c:	4b33      	ldr	r3, [pc, #204]	; (e06c <main+0x380>)
    df9e:	4798      	blx	r3
	//-------------------------
	// ADC
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    dfa0:	1d3b      	adds	r3, r7, #4
    dfa2:	2200      	movs	r2, #0
    dfa4:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    dfa6:	1d3b      	adds	r3, r7, #4
    dfa8:	2200      	movs	r2, #0
    dfaa:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    dfac:	1d3b      	adds	r3, r7, #4
    dfae:	2002      	movs	r0, #2
    dfb0:	1c19      	adds	r1, r3, #0
    dfb2:	4b2e      	ldr	r3, [pc, #184]	; (e06c <main+0x380>)
    dfb4:	4798      	blx	r3
	port_pin_set_config(PIN_PA03, &pin_conf);
    dfb6:	1d3b      	adds	r3, r7, #4
    dfb8:	2003      	movs	r0, #3
    dfba:	1c19      	adds	r1, r3, #0
    dfbc:	4b2b      	ldr	r3, [pc, #172]	; (e06c <main+0x380>)
    dfbe:	4798      	blx	r3
	port_pin_set_config(PIN_PB04, &pin_conf);
    dfc0:	1d3b      	adds	r3, r7, #4
    dfc2:	2024      	movs	r0, #36	; 0x24
    dfc4:	1c19      	adds	r1, r3, #0
    dfc6:	4b29      	ldr	r3, [pc, #164]	; (e06c <main+0x380>)
    dfc8:	4798      	blx	r3
	port_pin_set_config(PIN_PB06, &pin_conf); 
    dfca:	1d3b      	adds	r3, r7, #4
    dfcc:	2026      	movs	r0, #38	; 0x26
    dfce:	1c19      	adds	r1, r3, #0
    dfd0:	4b26      	ldr	r3, [pc, #152]	; (e06c <main+0x380>)
    dfd2:	4798      	blx	r3
	port_pin_set_config(PIN_PB07, &pin_conf); 	
    dfd4:	1d3b      	adds	r3, r7, #4
    dfd6:	2027      	movs	r0, #39	; 0x27
    dfd8:	1c19      	adds	r1, r3, #0
    dfda:	4b24      	ldr	r3, [pc, #144]	; (e06c <main+0x380>)
    dfdc:	4798      	blx	r3
	
	//--------------------------
	// BLUETOOTH INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    dfde:	1d3b      	adds	r3, r7, #4
    dfe0:	2200      	movs	r2, #0
    dfe2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    dfe4:	1d3b      	adds	r3, r7, #4
    dfe6:	2201      	movs	r2, #1
    dfe8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    dfea:	1d3b      	adds	r3, r7, #4
    dfec:	2008      	movs	r0, #8
    dfee:	1c19      	adds	r1, r3, #0
    dff0:	4b1e      	ldr	r3, [pc, #120]	; (e06c <main+0x380>)
    dff2:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    dff4:	1d3b      	adds	r3, r7, #4
    dff6:	2200      	movs	r2, #0
    dff8:	705a      	strb	r2, [r3, #1]
//	port_pin_set_config(BLUETOOTH_RX, &pin_conf);	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dffa:	1d3b      	adds	r3, r7, #4
    dffc:	2201      	movs	r2, #1
    dffe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    e000:	1d3b      	adds	r3, r7, #4
    e002:	2009      	movs	r0, #9
    e004:	1c19      	adds	r1, r3, #0
    e006:	4b19      	ldr	r3, [pc, #100]	; (e06c <main+0x380>)
    e008:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    e00a:	2009      	movs	r0, #9
    e00c:	2101      	movs	r1, #1
    e00e:	4b18      	ldr	r3, [pc, #96]	; (e070 <main+0x384>)
    e010:	4798      	blx	r3
	port_pin_set_config(PIN_PB23, &pin_conf); 	
#endif	

	//----------------------------
	// FCC PINS 
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    e012:	1d3b      	adds	r3, r7, #4
    e014:	2200      	movs	r2, #0
    e016:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    e018:	1d3b      	adds	r3, r7, #4
    e01a:	2201      	movs	r2, #1
    e01c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CONSTANTTX, &pin_conf);
    e01e:	1d3b      	adds	r3, r7, #4
    e020:	2000      	movs	r0, #0
    e022:	1c19      	adds	r1, r3, #0
    e024:	4b11      	ldr	r3, [pc, #68]	; (e06c <main+0x380>)
    e026:	4798      	blx	r3
	port_pin_set_config(CONSTANTRX, &pin_conf);	 
    e028:	1d3b      	adds	r3, r7, #4
    e02a:	2001      	movs	r0, #1
    e02c:	1c19      	adds	r1, r3, #0
    e02e:	4b0f      	ldr	r3, [pc, #60]	; (e06c <main+0x380>)
    e030:	4798      	blx	r3
	port_pin_set_config(CONSTANTCW, &pin_conf);
    e032:	1d3b      	adds	r3, r7, #4
    e034:	2036      	movs	r0, #54	; 0x36
    e036:	1c19      	adds	r1, r3, #0
    e038:	4b0c      	ldr	r3, [pc, #48]	; (e06c <main+0x380>)
    e03a:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
    e03c:	4b13      	ldr	r3, [pc, #76]	; (e08c <main+0x3a0>)
    e03e:	2200      	movs	r2, #0
    e040:	701a      	strb	r2, [r3, #0]
	setCW = 0;
    e042:	4b13      	ldr	r3, [pc, #76]	; (e090 <main+0x3a4>)
    e044:	2200      	movs	r2, #0
    e046:	701a      	strb	r2, [r3, #0]
	setRXContinuous = 0;	
    e048:	4b12      	ldr	r3, [pc, #72]	; (e094 <main+0x3a8>)
    e04a:	2200      	movs	r2, #0
    e04c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<10;i++)
    e04e:	1c3b      	adds	r3, r7, #0
    e050:	330f      	adds	r3, #15
    e052:	2200      	movs	r2, #0
    e054:	701a      	strb	r2, [r3, #0]
    e056:	e028      	b.n	e0aa <main+0x3be>
    e058:	0000d8a5 	.word	0x0000d8a5
    e05c:	0000d90d 	.word	0x0000d90d
    e060:	00013225 	.word	0x00013225
    e064:	0000dc19 	.word	0x0000dc19
    e068:	0000e531 	.word	0x0000e531
    e06c:	00010c95 	.word	0x00010c95
    e070:	0000d92d 	.word	0x0000d92d
    e074:	0000dcbd 	.word	0x0000dcbd
    e078:	2000366c 	.word	0x2000366c
    e07c:	200036c4 	.word	0x200036c4
    e080:	20003692 	.word	0x20003692
    e084:	00008cc9 	.word	0x00008cc9
    e088:	200036bc 	.word	0x200036bc
    e08c:	2000365f 	.word	0x2000365f
    e090:	2000365c 	.word	0x2000365c
    e094:	2000365d 	.word	0x2000365d
	{
		FCCSample();
    e098:	4b94      	ldr	r3, [pc, #592]	; (e2ec <main+0x600>)
    e09a:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
	setCW = 0;
	setRXContinuous = 0;	
	for (i=0;i<10;i++)
    e09c:	1c3b      	adds	r3, r7, #0
    e09e:	330f      	adds	r3, #15
    e0a0:	781a      	ldrb	r2, [r3, #0]
    e0a2:	1c3b      	adds	r3, r7, #0
    e0a4:	330f      	adds	r3, #15
    e0a6:	3201      	adds	r2, #1
    e0a8:	701a      	strb	r2, [r3, #0]
    e0aa:	1c3b      	adds	r3, r7, #0
    e0ac:	330f      	adds	r3, #15
    e0ae:	781b      	ldrb	r3, [r3, #0]
    e0b0:	2b09      	cmp	r3, #9
    e0b2:	d9f1      	bls.n	e098 <main+0x3ac>
	{
		FCCSample();
	}
	if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    e0b4:	4b8e      	ldr	r3, [pc, #568]	; (e2f0 <main+0x604>)
    e0b6:	881b      	ldrh	r3, [r3, #0]
    e0b8:	2b00      	cmp	r3, #0
    e0ba:	d00a      	beq.n	e0d2 <main+0x3e6>
    e0bc:	4b8d      	ldr	r3, [pc, #564]	; (e2f4 <main+0x608>)
    e0be:	881b      	ldrh	r3, [r3, #0]
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d106      	bne.n	e0d2 <main+0x3e6>
    e0c4:	4b8c      	ldr	r3, [pc, #560]	; (e2f8 <main+0x60c>)
    e0c6:	881b      	ldrh	r3, [r3, #0]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d102      	bne.n	e0d2 <main+0x3e6>
	{
		setTXContinuous = 1; 
    e0cc:	4b8b      	ldr	r3, [pc, #556]	; (e2fc <main+0x610>)
    e0ce:	2201      	movs	r2, #1
    e0d0:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    e0d2:	4b87      	ldr	r3, [pc, #540]	; (e2f0 <main+0x604>)
    e0d4:	881b      	ldrh	r3, [r3, #0]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d10a      	bne.n	e0f0 <main+0x404>
    e0da:	4b86      	ldr	r3, [pc, #536]	; (e2f4 <main+0x608>)
    e0dc:	881b      	ldrh	r3, [r3, #0]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d006      	beq.n	e0f0 <main+0x404>
    e0e2:	4b85      	ldr	r3, [pc, #532]	; (e2f8 <main+0x60c>)
    e0e4:	881b      	ldrh	r3, [r3, #0]
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d102      	bne.n	e0f0 <main+0x404>
	{
		setRXContinuous = 1; 
    e0ea:	4b85      	ldr	r3, [pc, #532]	; (e300 <main+0x614>)
    e0ec:	2201      	movs	r2, #1
    e0ee:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    e0f0:	4b7f      	ldr	r3, [pc, #508]	; (e2f0 <main+0x604>)
    e0f2:	881b      	ldrh	r3, [r3, #0]
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	d10a      	bne.n	e10e <main+0x422>
    e0f8:	4b7e      	ldr	r3, [pc, #504]	; (e2f4 <main+0x608>)
    e0fa:	881b      	ldrh	r3, [r3, #0]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d106      	bne.n	e10e <main+0x422>
    e100:	4b7d      	ldr	r3, [pc, #500]	; (e2f8 <main+0x60c>)
    e102:	881b      	ldrh	r3, [r3, #0]
    e104:	2b00      	cmp	r3, #0
    e106:	d002      	beq.n	e10e <main+0x422>
	{
		setCW = 1; 
    e108:	4b7e      	ldr	r3, [pc, #504]	; (e304 <main+0x618>)
    e10a:	2201      	movs	r2, #1
    e10c:	701a      	strb	r2, [r3, #0]
	}		
	//--------------------------------
	// speaker PB16 and PB17
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    e10e:	1d3b      	adds	r3, r7, #4
    e110:	2201      	movs	r2, #1
    e112:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB16, &pin_conf);
    e114:	1d3b      	adds	r3, r7, #4
    e116:	2030      	movs	r0, #48	; 0x30
    e118:	1c19      	adds	r1, r3, #0
    e11a:	4b7b      	ldr	r3, [pc, #492]	; (e308 <main+0x61c>)
    e11c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB16, false);
    e11e:	2030      	movs	r0, #48	; 0x30
    e120:	2100      	movs	r1, #0
    e122:	4b7a      	ldr	r3, [pc, #488]	; (e30c <main+0x620>)
    e124:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    e126:	1d3b      	adds	r3, r7, #4
    e128:	2201      	movs	r2, #1
    e12a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB17, &pin_conf);
    e12c:	1d3b      	adds	r3, r7, #4
    e12e:	2031      	movs	r0, #49	; 0x31
    e130:	1c19      	adds	r1, r3, #0
    e132:	4b75      	ldr	r3, [pc, #468]	; (e308 <main+0x61c>)
    e134:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB17, false);
    e136:	2031      	movs	r0, #49	; 0x31
    e138:	2100      	movs	r1, #0
    e13a:	4b74      	ldr	r3, [pc, #464]	; (e30c <main+0x620>)
    e13c:	4798      	blx	r3
				
	//---------------------
	// i2c setup for EEPROM - COMMON
	//---------------------
	I2Cmain();
    e13e:	4b74      	ldr	r3, [pc, #464]	; (e310 <main+0x624>)
    e140:	4798      	blx	r3
	ConfigInit(); 
    e142:	4b74      	ldr	r3, [pc, #464]	; (e314 <main+0x628>)
    e144:	4798      	blx	r3
//ConfigSensorTableClear();	
	//-----------Accelerometer 
	// Brakeboard - is i2c
	// remoteboard is spi
#if BRAKEBOARD	
	AccelInit(); 
    e146:	4b74      	ldr	r3, [pc, #464]	; (e318 <main+0x62c>)
    e148:	4798      	blx	r3
#if BRAKEBOARD
 
#endif
	//----------Timer Initialization
	//		
	configure_tc();
    e14a:	4b74      	ldr	r3, [pc, #464]	; (e31c <main+0x630>)
    e14c:	4798      	blx	r3
	configure_tc_callbacks();
    e14e:	4b74      	ldr	r3, [pc, #464]	; (e320 <main+0x634>)
    e150:	4798      	blx	r3

	//-----ADC--------------
	ADCInit();
    e152:	4b74      	ldr	r3, [pc, #464]	; (e324 <main+0x638>)
    e154:	4798      	blx	r3
	
	//---------------LORA/FSK radio 
	whichRadio = WHICHRADIO_LORA; 
    e156:	4b74      	ldr	r3, [pc, #464]	; (e328 <main+0x63c>)
    e158:	2299      	movs	r2, #153	; 0x99
    e15a:	701a      	strb	r2, [r3, #0]
	CommInit();
    e15c:	4b73      	ldr	r3, [pc, #460]	; (e32c <main+0x640>)
    e15e:	4798      	blx	r3
#if REMOTEBOARD
	BacklightSet(table0.Item.BackLightOn);	
	BacklightSetHomeColor(table0.Item.ScreenColor);
#endif

	system_interrupt_enable_global();
    e160:	4b73      	ldr	r3, [pc, #460]	; (e330 <main+0x644>)
    e162:	4798      	blx	r3
	Enable_global_interrupt();
    e164:	4b73      	ldr	r3, [pc, #460]	; (e334 <main+0x648>)
    e166:	2201      	movs	r2, #1
    e168:	701a      	strb	r2, [r3, #0]
    e16a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    e16e:	b662      	cpsie	i
	
	ADCStart(); 
    e170:	4b71      	ldr	r3, [pc, #452]	; (e338 <main+0x64c>)
    e172:	4798      	blx	r3

#if BRAKEBOARD
	BrakeInit();
    e174:	4b71      	ldr	r3, [pc, #452]	; (e33c <main+0x650>)
    e176:	4798      	blx	r3
	UsartMain();
    e178:	4b71      	ldr	r3, [pc, #452]	; (e340 <main+0x654>)
    e17a:	4798      	blx	r3
	USARTDisable();
    e17c:	4b71      	ldr	r3, [pc, #452]	; (e344 <main+0x658>)
    e17e:	4798      	blx	r3
	BluetoothSleep();
    e180:	4b71      	ldr	r3, [pc, #452]	; (e348 <main+0x65c>)
    e182:	4798      	blx	r3
//	BluetoothMicrochipConfig();
//	BluetoothWakeUp();	
	 
	nvm_get_config_defaults(&config);
    e184:	1c3b      	adds	r3, r7, #0
    e186:	3308      	adds	r3, #8
    e188:	1c18      	adds	r0, r3, #0
    e18a:	4b70      	ldr	r3, [pc, #448]	; (e34c <main+0x660>)
    e18c:	4798      	blx	r3
	nvm_set_config(&config);
    e18e:	1c3b      	adds	r3, r7, #0
    e190:	3308      	adds	r3, #8
    e192:	1c18      	adds	r0, r3, #0
    e194:	4b6e      	ldr	r3, [pc, #440]	; (e350 <main+0x664>)
    e196:	4798      	blx	r3
		 general_buffer, NVMCTRL_PAGE_SIZE);
	 } while (error_code == STATUS_BUSY);
#endif	
#endif		

	button = ButtonChanged(); 
    e198:	1c3c      	adds	r4, r7, #0
    e19a:	340e      	adds	r4, #14
    e19c:	4b6d      	ldr	r3, [pc, #436]	; (e354 <main+0x668>)
    e19e:	4798      	blx	r3
    e1a0:	1c03      	adds	r3, r0, #0
    e1a2:	7023      	strb	r3, [r4, #0]
	configure_wdt();
    e1a4:	4b6c      	ldr	r3, [pc, #432]	; (e358 <main+0x66c>)
    e1a6:	4798      	blx	r3
    while (1) 
    {
//		wdt_reset_count();

		schedDone = 0;
    e1a8:	4b6c      	ldr	r3, [pc, #432]	; (e35c <main+0x670>)
    e1aa:	2200      	movs	r2, #0
    e1ac:	701a      	strb	r2, [r3, #0]
		schedCount = 0;
    e1ae:	4b6c      	ldr	r3, [pc, #432]	; (e360 <main+0x674>)
    e1b0:	2200      	movs	r2, #0
    e1b2:	701a      	strb	r2, [r3, #0]
		while ((schedCount <16) && (schedDone ==0))
    e1b4:	e090      	b.n	e2d8 <main+0x5ec>
		{
			mainLineTask = 0; 
    e1b6:	4b6b      	ldr	r3, [pc, #428]	; (e364 <main+0x678>)
    e1b8:	2200      	movs	r2, #0
    e1ba:	701a      	strb	r2, [r3, #0]
			if ((schedByte & (1<<schedCount))!= 0)
    e1bc:	4b68      	ldr	r3, [pc, #416]	; (e360 <main+0x674>)
    e1be:	781b      	ldrb	r3, [r3, #0]
    e1c0:	2201      	movs	r2, #1
    e1c2:	1c11      	adds	r1, r2, #0
    e1c4:	4099      	lsls	r1, r3
    e1c6:	1c0b      	adds	r3, r1, #0
    e1c8:	1c1a      	adds	r2, r3, #0
    e1ca:	4b67      	ldr	r3, [pc, #412]	; (e368 <main+0x67c>)
    e1cc:	681b      	ldr	r3, [r3, #0]
    e1ce:	4013      	ands	r3, r2
    e1d0:	d100      	bne.n	e1d4 <main+0x4e8>
    e1d2:	e07b      	b.n	e2cc <main+0x5e0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    e1d4:	b672      	cpsid	i
    e1d6:	f3bf 8f5f 	dmb	sy
			{
				//-------------------
				// disable interrupt
				//-------------------
				Disable_global_interrupt();			
    e1da:	4b56      	ldr	r3, [pc, #344]	; (e334 <main+0x648>)
    e1dc:	2200      	movs	r2, #0
    e1de:	701a      	strb	r2, [r3, #0]
				schedByte &= (~(1<<schedCount));			
    e1e0:	4b5f      	ldr	r3, [pc, #380]	; (e360 <main+0x674>)
    e1e2:	781b      	ldrb	r3, [r3, #0]
    e1e4:	2201      	movs	r2, #1
    e1e6:	1c11      	adds	r1, r2, #0
    e1e8:	4099      	lsls	r1, r3
    e1ea:	1c0b      	adds	r3, r1, #0
    e1ec:	43db      	mvns	r3, r3
    e1ee:	1c1a      	adds	r2, r3, #0
    e1f0:	4b5d      	ldr	r3, [pc, #372]	; (e368 <main+0x67c>)
    e1f2:	681b      	ldr	r3, [r3, #0]
    e1f4:	401a      	ands	r2, r3
    e1f6:	4b5c      	ldr	r3, [pc, #368]	; (e368 <main+0x67c>)
    e1f8:	601a      	str	r2, [r3, #0]
				Enable_global_interrupt();
    e1fa:	4b4e      	ldr	r3, [pc, #312]	; (e334 <main+0x648>)
    e1fc:	2201      	movs	r2, #1
    e1fe:	701a      	strb	r2, [r3, #0]
    e200:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    e204:	b662      	cpsie	i
						 SpeakerOn();
					}				
*/				
#endif			
#if BRAKEBOARD				
				if (poweredUp != 0)
    e206:	4b59      	ldr	r3, [pc, #356]	; (e36c <main+0x680>)
    e208:	781b      	ldrb	r3, [r3, #0]
    e20a:	2b00      	cmp	r3, #0
    e20c:	d007      	beq.n	e21e <main+0x532>
				{
					SwTaskList[schedCount]();
    e20e:	4b54      	ldr	r3, [pc, #336]	; (e360 <main+0x674>)
    e210:	781b      	ldrb	r3, [r3, #0]
    e212:	1c1a      	adds	r2, r3, #0
    e214:	4b56      	ldr	r3, [pc, #344]	; (e370 <main+0x684>)
    e216:	0092      	lsls	r2, r2, #2
    e218:	58d3      	ldr	r3, [r2, r3]
    e21a:	4798      	blx	r3
    e21c:	e056      	b.n	e2cc <main+0x5e0>
				}
				else
				{
					if ((schedCount ==14))
    e21e:	4b50      	ldr	r3, [pc, #320]	; (e360 <main+0x674>)
    e220:	781b      	ldrb	r3, [r3, #0]
    e222:	2b0e      	cmp	r3, #14
    e224:	d101      	bne.n	e22a <main+0x53e>
					{
						DownloadDoneTask();
    e226:	4b53      	ldr	r3, [pc, #332]	; (e374 <main+0x688>)
    e228:	4798      	blx	r3
					}
					if ((schedCount == 13)||(schedCount==10))
    e22a:	4b4d      	ldr	r3, [pc, #308]	; (e360 <main+0x674>)
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	2b0d      	cmp	r3, #13
    e230:	d003      	beq.n	e23a <main+0x54e>
    e232:	4b4b      	ldr	r3, [pc, #300]	; (e360 <main+0x674>)
    e234:	781b      	ldrb	r3, [r3, #0]
    e236:	2b0a      	cmp	r3, #10
    e238:	d10a      	bne.n	e250 <main+0x564>
					{
					//v 01_10
						if (newRemoteDownloadNeeded == TRUE)
    e23a:	4b4f      	ldr	r3, [pc, #316]	; (e378 <main+0x68c>)
    e23c:	781b      	ldrb	r3, [r3, #0]
    e23e:	2b01      	cmp	r3, #1
    e240:	d106      	bne.n	e250 <main+0x564>
						{
							SwTaskList[schedCount]();	
    e242:	4b47      	ldr	r3, [pc, #284]	; (e360 <main+0x674>)
    e244:	781b      	ldrb	r3, [r3, #0]
    e246:	1c1a      	adds	r2, r3, #0
    e248:	4b49      	ldr	r3, [pc, #292]	; (e370 <main+0x684>)
    e24a:	0092      	lsls	r2, r2, #2
    e24c:	58d3      	ldr	r3, [r2, r3]
    e24e:	4798      	blx	r3
						}
					}
					if (schedCount ==6)
    e250:	4b43      	ldr	r3, [pc, #268]	; (e360 <main+0x674>)
    e252:	781b      	ldrb	r3, [r3, #0]
    e254:	2b06      	cmp	r3, #6
    e256:	d101      	bne.n	e25c <main+0x570>
					{
						BrakeBoardStateMachineTask();
    e258:	4b48      	ldr	r3, [pc, #288]	; (e37c <main+0x690>)
    e25a:	4798      	blx	r3
					}					
					if (schedCount ==3)
    e25c:	4b40      	ldr	r3, [pc, #256]	; (e360 <main+0x674>)
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	2b03      	cmp	r3, #3
    e262:	d101      	bne.n	e268 <main+0x57c>
					{
						ButtonSample();
    e264:	4b46      	ldr	r3, [pc, #280]	; (e380 <main+0x694>)
    e266:	4798      	blx	r3
					//------------------------
					// if not powered up and 
					// setup is pressed, will RESET the 
					// bluetooth to wake it up.
					//------------------------
					button = ButtonChanged();
    e268:	1c3c      	adds	r4, r7, #0
    e26a:	340e      	adds	r4, #14
    e26c:	4b39      	ldr	r3, [pc, #228]	; (e354 <main+0x668>)
    e26e:	4798      	blx	r3
    e270:	1c03      	adds	r3, r0, #0
    e272:	7023      	strb	r3, [r4, #0]
					if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
    e274:	1c3b      	adds	r3, r7, #0
    e276:	330e      	adds	r3, #14
    e278:	781a      	ldrb	r2, [r3, #0]
    e27a:	2301      	movs	r3, #1
    e27c:	4013      	ands	r3, r2
    e27e:	d006      	beq.n	e28e <main+0x5a2>
    e280:	4b40      	ldr	r3, [pc, #256]	; (e384 <main+0x698>)
    e282:	881b      	ldrh	r3, [r3, #0]
    e284:	2b00      	cmp	r3, #0
    e286:	d002      	beq.n	e28e <main+0x5a2>
					{
						bluetoothHoldTimer100msec = 30; 
    e288:	4b3f      	ldr	r3, [pc, #252]	; (e388 <main+0x69c>)
    e28a:	221e      	movs	r2, #30
    e28c:	701a      	strb	r2, [r3, #0]
					}
					if (setup_pressed != 0)
    e28e:	4b3d      	ldr	r3, [pc, #244]	; (e384 <main+0x698>)
    e290:	881b      	ldrh	r3, [r3, #0]
    e292:	2b00      	cmp	r3, #0
    e294:	d013      	beq.n	e2be <main+0x5d2>
					{
						if (bluetoothHoldTimer100msec == 1)
    e296:	4b3c      	ldr	r3, [pc, #240]	; (e388 <main+0x69c>)
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	2b01      	cmp	r3, #1
    e29c:	d10f      	bne.n	e2be <main+0x5d2>
						{
							bluetoothHoldTimer100msec = 0;
    e29e:	4b3a      	ldr	r3, [pc, #232]	; (e388 <main+0x69c>)
    e2a0:	2200      	movs	r2, #0
    e2a2:	701a      	strb	r2, [r3, #0]
							if(bluetoothAwake != 0)
    e2a4:	4b39      	ldr	r3, [pc, #228]	; (e38c <main+0x6a0>)
    e2a6:	781b      	ldrb	r3, [r3, #0]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d004      	beq.n	e2b6 <main+0x5ca>
							{
								USARTDisable();
    e2ac:	4b25      	ldr	r3, [pc, #148]	; (e344 <main+0x658>)
    e2ae:	4798      	blx	r3
								BluetoothSleep();
    e2b0:	4b25      	ldr	r3, [pc, #148]	; (e348 <main+0x65c>)
    e2b2:	4798      	blx	r3
    e2b4:	e003      	b.n	e2be <main+0x5d2>
							}
							else
							{
								USARTEnable();
    e2b6:	4b36      	ldr	r3, [pc, #216]	; (e390 <main+0x6a4>)
    e2b8:	4798      	blx	r3
								BluetoothWakeUp();
    e2ba:	4b36      	ldr	r3, [pc, #216]	; (e394 <main+0x6a8>)
    e2bc:	4798      	blx	r3
							}
						}
					}
					if (setup_pressed ==0)
    e2be:	4b31      	ldr	r3, [pc, #196]	; (e384 <main+0x698>)
    e2c0:	881b      	ldrh	r3, [r3, #0]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d102      	bne.n	e2cc <main+0x5e0>
					{
						bluetoothHoldTimer100msec = 0;
    e2c6:	4b30      	ldr	r3, [pc, #192]	; (e388 <main+0x69c>)
    e2c8:	2200      	movs	r2, #0
    e2ca:	701a      	strb	r2, [r3, #0]
				}
				prevSW4 = newSW4;
*/				
#endif	
			}
			schedCount++;
    e2cc:	4b24      	ldr	r3, [pc, #144]	; (e360 <main+0x674>)
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	3301      	adds	r3, #1
    e2d2:	b2da      	uxtb	r2, r3
    e2d4:	4b22      	ldr	r3, [pc, #136]	; (e360 <main+0x674>)
    e2d6:	701a      	strb	r2, [r3, #0]
    {
//		wdt_reset_count();

		schedDone = 0;
		schedCount = 0;
		while ((schedCount <16) && (schedDone ==0))
    e2d8:	4b21      	ldr	r3, [pc, #132]	; (e360 <main+0x674>)
    e2da:	781b      	ldrb	r3, [r3, #0]
    e2dc:	2b0f      	cmp	r3, #15
    e2de:	d804      	bhi.n	e2ea <main+0x5fe>
    e2e0:	4b1e      	ldr	r3, [pc, #120]	; (e35c <main+0x670>)
    e2e2:	781b      	ldrb	r3, [r3, #0]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d100      	bne.n	e2ea <main+0x5fe>
    e2e8:	e765      	b.n	e1b6 <main+0x4ca>

		
#endif 
 
		
    }
    e2ea:	e75d      	b.n	e1a8 <main+0x4bc>
    e2ec:	0000ab81 	.word	0x0000ab81
    e2f0:	200004bc 	.word	0x200004bc
    e2f4:	200004be 	.word	0x200004be
    e2f8:	200004c0 	.word	0x200004c0
    e2fc:	2000365f 	.word	0x2000365f
    e300:	2000365d 	.word	0x2000365d
    e304:	2000365c 	.word	0x2000365c
    e308:	00010c95 	.word	0x00010c95
    e30c:	0000d92d 	.word	0x0000d92d
    e310:	0000b8ed 	.word	0x0000b8ed
    e314:	0000a055 	.word	0x0000a055
    e318:	00005de9 	.word	0x00005de9
    e31c:	0000ec1d 	.word	0x0000ec1d
    e320:	0000ec79 	.word	0x0000ec79
    e324:	0000a98d 	.word	0x0000a98d
    e328:	2000369a 	.word	0x2000369a
    e32c:	0000e45d 	.word	0x0000e45d
    e330:	0000d88d 	.word	0x0000d88d
    e334:	20000044 	.word	0x20000044
    e338:	0000aa21 	.word	0x0000aa21
    e33c:	000067fd 	.word	0x000067fd
    e340:	0000d219 	.word	0x0000d219
    e344:	0000d19d 	.word	0x0000d19d
    e348:	00006375 	.word	0x00006375
    e34c:	0000db35 	.word	0x0000db35
    e350:	000043cd 	.word	0x000043cd
    e354:	0000ac3d 	.word	0x0000ac3d
    e358:	0000dc49 	.word	0x0000dc49
    e35c:	20003699 	.word	0x20003699
    e360:	20003666 	.word	0x20003666
    e364:	200004d3 	.word	0x200004d3
    e368:	20003668 	.word	0x20003668
    e36c:	20003681 	.word	0x20003681
    e370:	000172b0 	.word	0x000172b0
    e374:	0000af7d 	.word	0x0000af7d
    e378:	200004b5 	.word	0x200004b5
    e37c:	00006c75 	.word	0x00006c75
    e380:	0000ac61 	.word	0x0000ac61
    e384:	2000303a 	.word	0x2000303a
    e388:	200004da 	.word	0x200004da
    e38c:	200004a4 	.word	0x200004a4
    e390:	0000d1b5 	.word	0x0000d1b5
    e394:	000062dd 	.word	0x000062dd

0000e398 <CommSupTask>:
//------------------------------------------------------------------------------
// This function
//whichRadio = WHICHRADIO_LORA;  hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh will need to add back if comm loss
//==============================================================================
void CommSupTask(void)
{
    e398:	b580      	push	{r7, lr}
    e39a:	af00      	add	r7, sp, #0
 	
	if ((setCW == 0)&&(setTXContinuous==0)&&(setRXContinuous==0))
    e39c:	4b23      	ldr	r3, [pc, #140]	; (e42c <CommSupTask+0x94>)
    e39e:	781b      	ldrb	r3, [r3, #0]
    e3a0:	2b00      	cmp	r3, #0
    e3a2:	d141      	bne.n	e428 <CommSupTask+0x90>
    e3a4:	4b22      	ldr	r3, [pc, #136]	; (e430 <CommSupTask+0x98>)
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d13d      	bne.n	e428 <CommSupTask+0x90>
    e3ac:	4b21      	ldr	r3, [pc, #132]	; (e434 <CommSupTask+0x9c>)
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d139      	bne.n	e428 <CommSupTask+0x90>
	{
		commErrorCount++;
    e3b4:	4b20      	ldr	r3, [pc, #128]	; (e438 <CommSupTask+0xa0>)
    e3b6:	781b      	ldrb	r3, [r3, #0]
    e3b8:	3301      	adds	r3, #1
    e3ba:	b2da      	uxtb	r2, r3
    e3bc:	4b1e      	ldr	r3, [pc, #120]	; (e438 <CommSupTask+0xa0>)
    e3be:	701a      	strb	r2, [r3, #0]
		if (commErrorCount > 20)
    e3c0:	4b1d      	ldr	r3, [pc, #116]	; (e438 <CommSupTask+0xa0>)
    e3c2:	781b      	ldrb	r3, [r3, #0]
    e3c4:	2b14      	cmp	r3, #20
    e3c6:	d92b      	bls.n	e420 <CommSupTask+0x88>
		{
			commErrorCount = 0; 
    e3c8:	4b1b      	ldr	r3, [pc, #108]	; (e438 <CommSupTask+0xa0>)
    e3ca:	2200      	movs	r2, #0
    e3cc:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_COMMERROR; 
    e3ce:	4b1b      	ldr	r3, [pc, #108]	; (e43c <CommSupTask+0xa4>)
    e3d0:	791b      	ldrb	r3, [r3, #4]
    e3d2:	2201      	movs	r2, #1
    e3d4:	4313      	orrs	r3, r2
    e3d6:	b2da      	uxtb	r2, r3
    e3d8:	4b18      	ldr	r3, [pc, #96]	; (e43c <CommSupTask+0xa4>)
    e3da:	711a      	strb	r2, [r3, #4]
	#if REMOTEBOARD		
			eventMessageReceived = 1; 
			AppScreenUpdateHome();	
	#endif	
			CommInit();	
    e3dc:	4b18      	ldr	r3, [pc, #96]	; (e440 <CommSupTask+0xa8>)
    e3de:	4798      	blx	r3
			SX1272Init(whichRadio);
    e3e0:	4b18      	ldr	r3, [pc, #96]	; (e444 <CommSupTask+0xac>)
    e3e2:	781b      	ldrb	r3, [r3, #0]
    e3e4:	1c18      	adds	r0, r3, #0
    e3e6:	4b18      	ldr	r3, [pc, #96]	; (e448 <CommSupTask+0xb0>)
    e3e8:	4798      	blx	r3
	#if BRAKEBOARD	
		
			if (whichRadio == WHICHRADIO_LORA)
    e3ea:	4b16      	ldr	r3, [pc, #88]	; (e444 <CommSupTask+0xac>)
    e3ec:	781b      	ldrb	r3, [r3, #0]
    e3ee:	2b99      	cmp	r3, #153	; 0x99
    e3f0:	d102      	bne.n	e3f8 <CommSupTask+0x60>
			{					 
				AppLoraReceiveStart();
    e3f2:	4b16      	ldr	r3, [pc, #88]	; (e44c <CommSupTask+0xb4>)
    e3f4:	4798      	blx	r3
    e3f6:	e001      	b.n	e3fc <CommSupTask+0x64>
			}
			else
			{
				AppFskReceiveStart();
    e3f8:	4b15      	ldr	r3, [pc, #84]	; (e450 <CommSupTask+0xb8>)
    e3fa:	4798      	blx	r3
			}
			commSupTimer = COMM_SUP_TIME; 
    e3fc:	4b15      	ldr	r3, [pc, #84]	; (e454 <CommSupTask+0xbc>)
    e3fe:	22fa      	movs	r2, #250	; 0xfa
    e400:	0052      	lsls	r2, r2, #1
    e402:	801a      	strh	r2, [r3, #0]
	#endif
			commFailureCount++;
    e404:	4b14      	ldr	r3, [pc, #80]	; (e458 <CommSupTask+0xc0>)
    e406:	781b      	ldrb	r3, [r3, #0]
    e408:	3301      	adds	r3, #1
    e40a:	b2da      	uxtb	r2, r3
    e40c:	4b12      	ldr	r3, [pc, #72]	; (e458 <CommSupTask+0xc0>)
    e40e:	701a      	strb	r2, [r3, #0]
			if (commFailureCount>30)
    e410:	4b11      	ldr	r3, [pc, #68]	; (e458 <CommSupTask+0xc0>)
    e412:	781b      	ldrb	r3, [r3, #0]
    e414:	2b1e      	cmp	r3, #30
    e416:	d907      	bls.n	e428 <CommSupTask+0x90>
			{
				commFailureCount =  0;
    e418:	4b0f      	ldr	r3, [pc, #60]	; (e458 <CommSupTask+0xc0>)
    e41a:	2200      	movs	r2, #0
    e41c:	701a      	strb	r2, [r3, #0]
    e41e:	e003      	b.n	e428 <CommSupTask+0x90>
			}	
		}	
		else
		{
	#if BRAKEBOARD	
			commSupTimer = COMM_SUP_TIME; 
    e420:	4b0c      	ldr	r3, [pc, #48]	; (e454 <CommSupTask+0xbc>)
    e422:	22fa      	movs	r2, #250	; 0xfa
    e424:	0052      	lsls	r2, r2, #1
    e426:	801a      	strh	r2, [r3, #0]
	#endif		
		}
	}
}
    e428:	46bd      	mov	sp, r7
    e42a:	bd80      	pop	{r7, pc}
    e42c:	2000365c 	.word	0x2000365c
    e430:	2000365f 	.word	0x2000365f
    e434:	2000365d 	.word	0x2000365d
    e438:	2000367d 	.word	0x2000367d
    e43c:	20003660 	.word	0x20003660
    e440:	0000e45d 	.word	0x0000e45d
    e444:	2000369a 	.word	0x2000369a
    e448:	00010a15 	.word	0x00010a15
    e44c:	0000ff19 	.word	0x0000ff19
    e450:	0000f141 	.word	0x0000f141
    e454:	20003686 	.word	0x20003686
    e458:	20003684 	.word	0x20003684

0000e45c <CommInit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void CommInit(void)
{
    e45c:	b580      	push	{r7, lr}
    e45e:	b082      	sub	sp, #8
    e460:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	if ((setCW != 0))
    e462:	4b25      	ldr	r3, [pc, #148]	; (e4f8 <CommInit+0x9c>)
    e464:	781b      	ldrb	r3, [r3, #0]
    e466:	2b00      	cmp	r3, #0
    e468:	d002      	beq.n	e470 <CommInit+0x14>
	{
		whichRadio = WHICHRADIO_FSK;
    e46a:	4b24      	ldr	r3, [pc, #144]	; (e4fc <CommInit+0xa0>)
    e46c:	2288      	movs	r2, #136	; 0x88
    e46e:	701a      	strb	r2, [r3, #0]
	}
		
//	whichRadio = WHICHRADIO_FSK;  //TESTTINTGGGGGT
	port_get_config_defaults(&pin_conf);
    e470:	1d3b      	adds	r3, r7, #4
    e472:	1c18      	adds	r0, r3, #0
    e474:	4b22      	ldr	r3, [pc, #136]	; (e500 <CommInit+0xa4>)
    e476:	4798      	blx	r3
	// X-MOSI = output = PA4
	// X-MISO = input = PA7
	// X-SCK = output = PA5
	// X-DIO0 = input ? = PB9
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    e478:	1d3b      	adds	r3, r7, #4
    e47a:	2201      	movs	r2, #1
    e47c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
    e47e:	1d3b      	adds	r3, r7, #4
    e480:	2028      	movs	r0, #40	; 0x28
    e482:	1c19      	adds	r1, r3, #0
    e484:	4b1f      	ldr	r3, [pc, #124]	; (e504 <CommInit+0xa8>)
    e486:	4798      	blx	r3
	port_pin_set_output_level(LORA_XRESET, 0);
    e488:	2028      	movs	r0, #40	; 0x28
    e48a:	2100      	movs	r1, #0
    e48c:	4b1e      	ldr	r3, [pc, #120]	; (e508 <CommInit+0xac>)
    e48e:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    e490:	1d3b      	adds	r3, r7, #4
    e492:	2200      	movs	r2, #0
    e494:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XDIO0, &pin_conf);
    e496:	1d3b      	adds	r3, r7, #4
    e498:	2029      	movs	r0, #41	; 0x29
    e49a:	1c19      	adds	r1, r3, #0
    e49c:	4b19      	ldr	r3, [pc, #100]	; (e504 <CommInit+0xa8>)
    e49e:	4798      	blx	r3
	port_pin_set_config(LORA_XDIO1, &pin_conf);
    e4a0:	1d3b      	adds	r3, r7, #4
    e4a2:	2011      	movs	r0, #17
    e4a4:	1c19      	adds	r1, r3, #0
    e4a6:	4b17      	ldr	r3, [pc, #92]	; (e504 <CommInit+0xa8>)
    e4a8:	4798      	blx	r3
	SPIXConfigure();
    e4aa:	4b18      	ldr	r3, [pc, #96]	; (e50c <CommInit+0xb0>)
    e4ac:	4798      	blx	r3
	SPIXMain();
    e4ae:	4b18      	ldr	r3, [pc, #96]	; (e510 <CommInit+0xb4>)
    e4b0:	4798      	blx	r3

	SX1272Init(whichRadio); 
    e4b2:	4b12      	ldr	r3, [pc, #72]	; (e4fc <CommInit+0xa0>)
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	1c18      	adds	r0, r3, #0
    e4b8:	4b16      	ldr	r3, [pc, #88]	; (e514 <CommInit+0xb8>)
    e4ba:	4798      	blx	r3
	if ((setCW == 0))	
    e4bc:	4b0e      	ldr	r3, [pc, #56]	; (e4f8 <CommInit+0x9c>)
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d108      	bne.n	e4d6 <CommInit+0x7a>
	{
		if (whichRadio == WHICHRADIO_LORA)
    e4c4:	4b0d      	ldr	r3, [pc, #52]	; (e4fc <CommInit+0xa0>)
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	2b99      	cmp	r3, #153	; 0x99
    e4ca:	d102      	bne.n	e4d2 <CommInit+0x76>
		{
			AppLoraReceiveStart();
    e4cc:	4b12      	ldr	r3, [pc, #72]	; (e518 <CommInit+0xbc>)
    e4ce:	4798      	blx	r3
    e4d0:	e001      	b.n	e4d6 <CommInit+0x7a>
		}
		else
		{
			AppFskReceiveStart();
    e4d2:	4b12      	ldr	r3, [pc, #72]	; (e51c <CommInit+0xc0>)
    e4d4:	4798      	blx	r3
		}
	}
	if (setTXContinuous!=0)
    e4d6:	4b12      	ldr	r3, [pc, #72]	; (e520 <CommInit+0xc4>)
    e4d8:	781b      	ldrb	r3, [r3, #0]
    e4da:	2b00      	cmp	r3, #0
    e4dc:	d001      	beq.n	e4e2 <CommInit+0x86>
	{	
		SendOneMessage();
    e4de:	4b11      	ldr	r3, [pc, #68]	; (e524 <CommInit+0xc8>)
    e4e0:	4798      	blx	r3
#if REMOTEBOARD
	commSupTimer = 0; 
	commErrorCount = 2; 	
#endif
#if BRAKEBOARD
	commSupTimer = COMM_SUP_TIME; 
    e4e2:	4b11      	ldr	r3, [pc, #68]	; (e528 <CommInit+0xcc>)
    e4e4:	22fa      	movs	r2, #250	; 0xfa
    e4e6:	0052      	lsls	r2, r2, #1
    e4e8:	801a      	strh	r2, [r3, #0]
	commErrorCount = 0; 	
    e4ea:	4b10      	ldr	r3, [pc, #64]	; (e52c <CommInit+0xd0>)
    e4ec:	2200      	movs	r2, #0
    e4ee:	701a      	strb	r2, [r3, #0]
#endif	

}
    e4f0:	46bd      	mov	sp, r7
    e4f2:	b002      	add	sp, #8
    e4f4:	bd80      	pop	{r7, pc}
    e4f6:	46c0      	nop			; (mov r8, r8)
    e4f8:	2000365c 	.word	0x2000365c
    e4fc:	2000369a 	.word	0x2000369a
    e500:	0000d90d 	.word	0x0000d90d
    e504:	00010c95 	.word	0x00010c95
    e508:	0000d92d 	.word	0x0000d92d
    e50c:	0000d4e5 	.word	0x0000d4e5
    e510:	0000d579 	.word	0x0000d579
    e514:	00010a15 	.word	0x00010a15
    e518:	0000ff19 	.word	0x0000ff19
    e51c:	0000f141 	.word	0x0000f141
    e520:	2000365f 	.word	0x2000365f
    e524:	00009fd5 	.word	0x00009fd5
    e528:	20003686 	.word	0x20003686
    e52c:	2000367d 	.word	0x2000367d

0000e530 <AppStatusInitialization>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusInitialization(void)
{
    e530:	b580      	push	{r7, lr}
    e532:	af00      	add	r7, sp, #0
	//-----------------------
	// Tire radio status 
	// bit 0 = init of the tire radio has been done
	// bit 1 = successful comm with the RF433 chip 
	// bit 2 = received a packet via the RF433 chip 
	statusData.TireRadio = 0; 
    e534:	4b14      	ldr	r3, [pc, #80]	; (e588 <AppStatusInitialization+0x58>)
    e536:	2200      	movs	r2, #0
    e538:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusData.Accelerometer = 0;
    e53a:	4b13      	ldr	r3, [pc, #76]	; (e588 <AppStatusInitialization+0x58>)
    e53c:	2200      	movs	r2, #0
    e53e:	70da      	strb	r2, [r3, #3]
	statusData.EEPROM = 0;
    e540:	4b11      	ldr	r3, [pc, #68]	; (e588 <AppStatusInitialization+0x58>)
    e542:	2200      	movs	r2, #0
    e544:	709a      	strb	r2, [r3, #2]
	statusData.ExtRadio = 0;
    e546:	4b10      	ldr	r3, [pc, #64]	; (e588 <AppStatusInitialization+0x58>)
    e548:	2200      	movs	r2, #0
    e54a:	705a      	strb	r2, [r3, #1]

	statusBrake.TireRadio = 0;
    e54c:	4b0f      	ldr	r3, [pc, #60]	; (e58c <AppStatusInitialization+0x5c>)
    e54e:	2200      	movs	r2, #0
    e550:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusBrake.Accelerometer = 0;
    e552:	4b0e      	ldr	r3, [pc, #56]	; (e58c <AppStatusInitialization+0x5c>)
    e554:	2200      	movs	r2, #0
    e556:	70da      	strb	r2, [r3, #3]
	statusBrake.EEPROM = 0;
    e558:	4b0c      	ldr	r3, [pc, #48]	; (e58c <AppStatusInitialization+0x5c>)
    e55a:	2200      	movs	r2, #0
    e55c:	709a      	strb	r2, [r3, #2]
	statusBrake.ExtRadio = 0;	
    e55e:	4b0b      	ldr	r3, [pc, #44]	; (e58c <AppStatusInitialization+0x5c>)
    e560:	2200      	movs	r2, #0
    e562:	705a      	strb	r2, [r3, #1]
	//----------------brake status 
	brakeStatus.VoltageInput = 0;
    e564:	4b0a      	ldr	r3, [pc, #40]	; (e590 <AppStatusInitialization+0x60>)
    e566:	2200      	movs	r2, #0
    e568:	701a      	strb	r2, [r3, #0]
	brakeStatus.AccelerometerStatus = 0;
    e56a:	4b09      	ldr	r3, [pc, #36]	; (e590 <AppStatusInitialization+0x60>)
    e56c:	2200      	movs	r2, #0
    e56e:	70da      	strb	r2, [r3, #3]
	brakeStatus.ActuatorStatus = 0; 
    e570:	4b07      	ldr	r3, [pc, #28]	; (e590 <AppStatusInitialization+0x60>)
    e572:	2200      	movs	r2, #0
    e574:	709a      	strb	r2, [r3, #2]
	brakeStatus.BrakeState = 0;
    e576:	4b06      	ldr	r3, [pc, #24]	; (e590 <AppStatusInitialization+0x60>)
    e578:	2200      	movs	r2, #0
    e57a:	711a      	strb	r2, [r3, #4]
	brakeStatus.VoltageSupercap = 0; 
    e57c:	4b04      	ldr	r3, [pc, #16]	; (e590 <AppStatusInitialization+0x60>)
    e57e:	2200      	movs	r2, #0
    e580:	705a      	strb	r2, [r3, #1]
}
    e582:	46bd      	mov	sp, r7
    e584:	bd80      	pop	{r7, pc}
    e586:	46c0      	nop			; (mov r8, r8)
    e588:	20003694 	.word	0x20003694
    e58c:	20003678 	.word	0x20003678
    e590:	20003660 	.word	0x20003660

0000e594 <AppStatusUpdate>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusUpdate(uint8_t whichInterface,uint8_t statusUpdate,uint8_t good)
{
    e594:	b580      	push	{r7, lr}
    e596:	b082      	sub	sp, #8
    e598:	af00      	add	r7, sp, #0
    e59a:	1dfb      	adds	r3, r7, #7
    e59c:	7018      	strb	r0, [r3, #0]
    e59e:	1dbb      	adds	r3, r7, #6
    e5a0:	7019      	strb	r1, [r3, #0]
    e5a2:	1d7b      	adds	r3, r7, #5
    e5a4:	701a      	strb	r2, [r3, #0]
	switch (whichInterface)
    e5a6:	1dfb      	adds	r3, r7, #7
    e5a8:	781b      	ldrb	r3, [r3, #0]
    e5aa:	2b03      	cmp	r3, #3
    e5ac:	d01d      	beq.n	e5ea <AppStatusUpdate+0x56>
    e5ae:	2b04      	cmp	r3, #4
    e5b0:	d035      	beq.n	e61e <AppStatusUpdate+0x8a>
    e5b2:	2b01      	cmp	r3, #1
    e5b4:	d14d      	bne.n	e652 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    e5b6:	1d7b      	adds	r3, r7, #5
    e5b8:	781b      	ldrb	r3, [r3, #0]
    e5ba:	2b00      	cmp	r3, #0
    e5bc:	d008      	beq.n	e5d0 <AppStatusUpdate+0x3c>
			{
				statusData.TireRadio |= statusUpdate; 
    e5be:	4b26      	ldr	r3, [pc, #152]	; (e658 <AppStatusUpdate+0xc4>)
    e5c0:	781a      	ldrb	r2, [r3, #0]
    e5c2:	1dbb      	adds	r3, r7, #6
    e5c4:	781b      	ldrb	r3, [r3, #0]
    e5c6:	4313      	orrs	r3, r2
    e5c8:	b2da      	uxtb	r2, r3
    e5ca:	4b23      	ldr	r3, [pc, #140]	; (e658 <AppStatusUpdate+0xc4>)
    e5cc:	701a      	strb	r2, [r3, #0]
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
			}
			break;
    e5ce:	e040      	b.n	e652 <AppStatusUpdate+0xbe>
			{
				statusData.TireRadio |= statusUpdate; 
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
    e5d0:	4b21      	ldr	r3, [pc, #132]	; (e658 <AppStatusUpdate+0xc4>)
    e5d2:	781b      	ldrb	r3, [r3, #0]
    e5d4:	b2db      	uxtb	r3, r3
    e5d6:	1dba      	adds	r2, r7, #6
    e5d8:	7812      	ldrb	r2, [r2, #0]
    e5da:	43d2      	mvns	r2, r2
    e5dc:	b2d2      	uxtb	r2, r2
    e5de:	4013      	ands	r3, r2
    e5e0:	b2db      	uxtb	r3, r3
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	4b1c      	ldr	r3, [pc, #112]	; (e658 <AppStatusUpdate+0xc4>)
    e5e6:	701a      	strb	r2, [r3, #0]
			}
			break;
    e5e8:	e033      	b.n	e652 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    e5ea:	1d7b      	adds	r3, r7, #5
    e5ec:	781b      	ldrb	r3, [r3, #0]
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d008      	beq.n	e604 <AppStatusUpdate+0x70>
			{
				statusData.EEPROM |= statusUpdate; 
    e5f2:	4b19      	ldr	r3, [pc, #100]	; (e658 <AppStatusUpdate+0xc4>)
    e5f4:	789a      	ldrb	r2, [r3, #2]
    e5f6:	1dbb      	adds	r3, r7, #6
    e5f8:	781b      	ldrb	r3, [r3, #0]
    e5fa:	4313      	orrs	r3, r2
    e5fc:	b2da      	uxtb	r2, r3
    e5fe:	4b16      	ldr	r3, [pc, #88]	; (e658 <AppStatusUpdate+0xc4>)
    e600:	709a      	strb	r2, [r3, #2]
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
			}
			break;
    e602:	e026      	b.n	e652 <AppStatusUpdate+0xbe>
			{
				statusData.EEPROM |= statusUpdate; 
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
    e604:	4b14      	ldr	r3, [pc, #80]	; (e658 <AppStatusUpdate+0xc4>)
    e606:	789b      	ldrb	r3, [r3, #2]
    e608:	b2db      	uxtb	r3, r3
    e60a:	1dba      	adds	r2, r7, #6
    e60c:	7812      	ldrb	r2, [r2, #0]
    e60e:	43d2      	mvns	r2, r2
    e610:	b2d2      	uxtb	r2, r2
    e612:	4013      	ands	r3, r2
    e614:	b2db      	uxtb	r3, r3
    e616:	b2da      	uxtb	r2, r3
    e618:	4b0f      	ldr	r3, [pc, #60]	; (e658 <AppStatusUpdate+0xc4>)
    e61a:	709a      	strb	r2, [r3, #2]
			}
			break;
    e61c:	e019      	b.n	e652 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    e61e:	1d7b      	adds	r3, r7, #5
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	2b00      	cmp	r3, #0
    e624:	d008      	beq.n	e638 <AppStatusUpdate+0xa4>
			{
				statusData.Accelerometer |= statusUpdate; 
    e626:	4b0c      	ldr	r3, [pc, #48]	; (e658 <AppStatusUpdate+0xc4>)
    e628:	78da      	ldrb	r2, [r3, #3]
    e62a:	1dbb      	adds	r3, r7, #6
    e62c:	781b      	ldrb	r3, [r3, #0]
    e62e:	4313      	orrs	r3, r2
    e630:	b2da      	uxtb	r2, r3
    e632:	4b09      	ldr	r3, [pc, #36]	; (e658 <AppStatusUpdate+0xc4>)
    e634:	70da      	strb	r2, [r3, #3]
    e636:	e00b      	b.n	e650 <AppStatusUpdate+0xbc>
			}		
			else
			{
				statusData.Accelerometer &= ~statusUpdate; 
    e638:	4b07      	ldr	r3, [pc, #28]	; (e658 <AppStatusUpdate+0xc4>)
    e63a:	78db      	ldrb	r3, [r3, #3]
    e63c:	b2db      	uxtb	r3, r3
    e63e:	1dba      	adds	r2, r7, #6
    e640:	7812      	ldrb	r2, [r2, #0]
    e642:	43d2      	mvns	r2, r2
    e644:	b2d2      	uxtb	r2, r2
    e646:	4013      	ands	r3, r2
    e648:	b2db      	uxtb	r3, r3
    e64a:	b2da      	uxtb	r2, r3
    e64c:	4b02      	ldr	r3, [pc, #8]	; (e658 <AppStatusUpdate+0xc4>)
    e64e:	70da      	strb	r2, [r3, #3]
			}
			break;
    e650:	46c0      	nop			; (mov r8, r8)
		}					
	}
}
    e652:	46bd      	mov	sp, r7
    e654:	b002      	add	sp, #8
    e656:	bd80      	pop	{r7, pc}
    e658:	20003694 	.word	0x20003694

0000e65c <tc_callback_to_toggle_led>:
//
//============================================================================== 
uint8_t minute=0;
uint8_t toggle; 
void tc_callback_to_toggle_led(struct tc_module *const module_inst)
{
    e65c:	b580      	push	{r7, lr}
    e65e:	b082      	sub	sp, #8
    e660:	af00      	add	r7, sp, #0
    e662:	6078      	str	r0, [r7, #4]
	wdt_reset_count();
    e664:	4bb4      	ldr	r3, [pc, #720]	; (e938 <tc_callback_to_toggle_led+0x2dc>)
    e666:	4798      	blx	r3
	{
		timerAccelerometer = 0;
		schedByte |= SCHEDBYTE_ACCELEROMETER;
	}	
#else
	schedByte |= SCHEDBYTE_ACCELEROMETER;
    e668:	4bb4      	ldr	r3, [pc, #720]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e66a:	681b      	ldr	r3, [r3, #0]
    e66c:	2201      	movs	r2, #1
    e66e:	431a      	orrs	r2, r3
    e670:	4bb2      	ldr	r3, [pc, #712]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e672:	601a      	str	r2, [r3, #0]
#endif
#if BRAKEBOARD 
	if (blockingTime >0)
    e674:	4bb2      	ldr	r3, [pc, #712]	; (e940 <tc_callback_to_toggle_led+0x2e4>)
    e676:	881b      	ldrh	r3, [r3, #0]
    e678:	2b00      	cmp	r3, #0
    e67a:	d005      	beq.n	e688 <tc_callback_to_toggle_led+0x2c>
	{
		blockingTime--;
    e67c:	4bb0      	ldr	r3, [pc, #704]	; (e940 <tc_callback_to_toggle_led+0x2e4>)
    e67e:	881b      	ldrh	r3, [r3, #0]
    e680:	3b01      	subs	r3, #1
    e682:	b29a      	uxth	r2, r3
    e684:	4bae      	ldr	r3, [pc, #696]	; (e940 <tc_callback_to_toggle_led+0x2e4>)
    e686:	801a      	strh	r2, [r3, #0]
	}
#endif
//-------------------
// 25 msec tasks
//-------------------	
	twentyfiveMSec++;
    e688:	4bae      	ldr	r3, [pc, #696]	; (e944 <tc_callback_to_toggle_led+0x2e8>)
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	3301      	adds	r3, #1
    e68e:	b2da      	uxtb	r2, r3
    e690:	4bac      	ldr	r3, [pc, #688]	; (e944 <tc_callback_to_toggle_led+0x2e8>)
    e692:	701a      	strb	r2, [r3, #0]
	if (twentyfiveMSec >= 25)
    e694:	4bab      	ldr	r3, [pc, #684]	; (e944 <tc_callback_to_toggle_led+0x2e8>)
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	2b18      	cmp	r3, #24
    e69a:	d919      	bls.n	e6d0 <tc_callback_to_toggle_led+0x74>
	{
#if BRAKEBOARD		
		schedByte|= SCHEDBYTE_BRAKETASK; 
    e69c:	4ba7      	ldr	r3, [pc, #668]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e69e:	681b      	ldr	r3, [r3, #0]
    e6a0:	2240      	movs	r2, #64	; 0x40
    e6a2:	431a      	orrs	r2, r3
    e6a4:	4ba5      	ldr	r3, [pc, #660]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e6a6:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_TABLESAMPLE; 
    e6a8:	4ba7      	ldr	r3, [pc, #668]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e6aa:	781b      	ldrb	r3, [r3, #0]
    e6ac:	2204      	movs	r2, #4
    e6ae:	4313      	orrs	r3, r2
    e6b0:	b2da      	uxtb	r2, r3
    e6b2:	4ba5      	ldr	r3, [pc, #660]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e6b4:	701a      	strb	r2, [r3, #0]
		
		if (breakawayHoldTimer > 0)
    e6b6:	4ba5      	ldr	r3, [pc, #660]	; (e94c <tc_callback_to_toggle_led+0x2f0>)
    e6b8:	881b      	ldrh	r3, [r3, #0]
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d005      	beq.n	e6ca <tc_callback_to_toggle_led+0x6e>
		{
			breakawayHoldTimer++;
    e6be:	4ba3      	ldr	r3, [pc, #652]	; (e94c <tc_callback_to_toggle_led+0x2f0>)
    e6c0:	881b      	ldrh	r3, [r3, #0]
    e6c2:	3301      	adds	r3, #1
    e6c4:	b29a      	uxth	r2, r3
    e6c6:	4ba1      	ldr	r3, [pc, #644]	; (e94c <tc_callback_to_toggle_led+0x2f0>)
    e6c8:	801a      	strh	r2, [r3, #0]
		}
#endif		

		twentyfiveMSec = 0;
    e6ca:	4b9e      	ldr	r3, [pc, #632]	; (e944 <tc_callback_to_toggle_led+0x2e8>)
    e6cc:	2200      	movs	r2, #0
    e6ce:	701a      	strb	r2, [r3, #0]
	}
#if BRAKEBOARD			 
	if (motorOn == TRUE)
    e6d0:	4b9f      	ldr	r3, [pc, #636]	; (e950 <tc_callback_to_toggle_led+0x2f4>)
    e6d2:	781b      	ldrb	r3, [r3, #0]
    e6d4:	2b01      	cmp	r3, #1
    e6d6:	d105      	bne.n	e6e4 <tc_callback_to_toggle_led+0x88>
	{
		schedByte |= SCHEDBYTE_BRAKETASK;
    e6d8:	4b98      	ldr	r3, [pc, #608]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e6da:	681b      	ldr	r3, [r3, #0]
    e6dc:	2240      	movs	r2, #64	; 0x40
    e6de:	431a      	orrs	r2, r3
    e6e0:	4b96      	ldr	r3, [pc, #600]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e6e2:	601a      	str	r2, [r3, #0]
	}
#endif		
#if BRAKEBOARD	
	ditherTimer++;
    e6e4:	4b9b      	ldr	r3, [pc, #620]	; (e954 <tc_callback_to_toggle_led+0x2f8>)
    e6e6:	881b      	ldrh	r3, [r3, #0]
    e6e8:	3301      	adds	r3, #1
    e6ea:	b29a      	uxth	r2, r3
    e6ec:	4b99      	ldr	r3, [pc, #612]	; (e954 <tc_callback_to_toggle_led+0x2f8>)
    e6ee:	801a      	strh	r2, [r3, #0]
	if (ditherTimer >= DITHER_TIME)
    e6f0:	4b98      	ldr	r3, [pc, #608]	; (e954 <tc_callback_to_toggle_led+0x2f8>)
    e6f2:	881a      	ldrh	r2, [r3, #0]
    e6f4:	4b98      	ldr	r3, [pc, #608]	; (e958 <tc_callback_to_toggle_led+0x2fc>)
    e6f6:	429a      	cmp	r2, r3
    e6f8:	d90f      	bls.n	e71a <tc_callback_to_toggle_led+0xbe>
	{	
		ditherTimer = 0;		
    e6fa:	4b96      	ldr	r3, [pc, #600]	; (e954 <tc_callback_to_toggle_led+0x2f8>)
    e6fc:	2200      	movs	r2, #0
    e6fe:	801a      	strh	r2, [r3, #0]
		schedByte|= SCHEDBYTE_BRAKETASK; 
    e700:	4b8e      	ldr	r3, [pc, #568]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e702:	681b      	ldr	r3, [r3, #0]
    e704:	2240      	movs	r2, #64	; 0x40
    e706:	431a      	orrs	r2, r3
    e708:	4b8c      	ldr	r3, [pc, #560]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e70a:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_DITHER; 
    e70c:	4b8e      	ldr	r3, [pc, #568]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e70e:	781b      	ldrb	r3, [r3, #0]
    e710:	2210      	movs	r2, #16
    e712:	4313      	orrs	r3, r2
    e714:	b2da      	uxtb	r2, r3
    e716:	4b8c      	ldr	r3, [pc, #560]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e718:	701a      	strb	r2, [r3, #0]
	}
#endif 
	
	hundredMSec++;
    e71a:	4b90      	ldr	r3, [pc, #576]	; (e95c <tc_callback_to_toggle_led+0x300>)
    e71c:	781b      	ldrb	r3, [r3, #0]
    e71e:	3301      	adds	r3, #1
    e720:	b2da      	uxtb	r2, r3
    e722:	4b8e      	ldr	r3, [pc, #568]	; (e95c <tc_callback_to_toggle_led+0x300>)
    e724:	701a      	strb	r2, [r3, #0]
	if (hundredMSec >= 100)
    e726:	4b8d      	ldr	r3, [pc, #564]	; (e95c <tc_callback_to_toggle_led+0x300>)
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	2b63      	cmp	r3, #99	; 0x63
    e72c:	d93a      	bls.n	e7a4 <tc_callback_to_toggle_led+0x148>
	{
#if BRAKEBOARD 
		if ((brakeState != BRAKESTATE_RESET)&&(programming ==0))
    e72e:	4b8c      	ldr	r3, [pc, #560]	; (e960 <tc_callback_to_toggle_led+0x304>)
    e730:	781b      	ldrb	r3, [r3, #0]
    e732:	2b00      	cmp	r3, #0
    e734:	d009      	beq.n	e74a <tc_callback_to_toggle_led+0xee>
    e736:	4b8b      	ldr	r3, [pc, #556]	; (e964 <tc_callback_to_toggle_led+0x308>)
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	2b00      	cmp	r3, #0
    e73c:	d105      	bne.n	e74a <tc_callback_to_toggle_led+0xee>
		{	
			mainLineTask++;
    e73e:	4b8a      	ldr	r3, [pc, #552]	; (e968 <tc_callback_to_toggle_led+0x30c>)
    e740:	781b      	ldrb	r3, [r3, #0]
    e742:	3301      	adds	r3, #1
    e744:	b2da      	uxtb	r2, r3
    e746:	4b88      	ldr	r3, [pc, #544]	; (e968 <tc_callback_to_toggle_led+0x30c>)
    e748:	701a      	strb	r2, [r3, #0]
		if ((programming ==0))
		{
			mainLineTask++;
		}
#endif 		
		if (mainLineTask>10)
    e74a:	4b87      	ldr	r3, [pc, #540]	; (e968 <tc_callback_to_toggle_led+0x30c>)
    e74c:	781b      	ldrb	r3, [r3, #0]
    e74e:	2b0a      	cmp	r3, #10
    e750:	d900      	bls.n	e754 <tc_callback_to_toggle_led+0xf8>
		{
			while (1)
			{
				
			}
    e752:	e7fe      	b.n	e752 <tc_callback_to_toggle_led+0xf6>
			downloadTimer = 0;
			downloadTime = TRUE; 
		}
		
#endif
		hundredMSec = 0;
    e754:	4b81      	ldr	r3, [pc, #516]	; (e95c <tc_callback_to_toggle_led+0x300>)
    e756:	2200      	movs	r2, #0
    e758:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD	
		if (bluetoothHoldTimer100msec > 1)
    e75a:	4b84      	ldr	r3, [pc, #528]	; (e96c <tc_callback_to_toggle_led+0x310>)
    e75c:	781b      	ldrb	r3, [r3, #0]
    e75e:	2b01      	cmp	r3, #1
    e760:	d905      	bls.n	e76e <tc_callback_to_toggle_led+0x112>
		{
			bluetoothHoldTimer100msec--;
    e762:	4b82      	ldr	r3, [pc, #520]	; (e96c <tc_callback_to_toggle_led+0x310>)
    e764:	781b      	ldrb	r3, [r3, #0]
    e766:	3b01      	subs	r3, #1
    e768:	b2da      	uxtb	r2, r3
    e76a:	4b80      	ldr	r3, [pc, #512]	; (e96c <tc_callback_to_toggle_led+0x310>)
    e76c:	701a      	strb	r2, [r3, #0]
		}			
		if (voltageBadTime < VOLTAGE_BAD_TIME)
    e76e:	4b80      	ldr	r3, [pc, #512]	; (e970 <tc_callback_to_toggle_led+0x314>)
    e770:	881b      	ldrh	r3, [r3, #0]
    e772:	2b1d      	cmp	r3, #29
    e774:	d805      	bhi.n	e782 <tc_callback_to_toggle_led+0x126>
		{
			voltageBadTime++;
    e776:	4b7e      	ldr	r3, [pc, #504]	; (e970 <tc_callback_to_toggle_led+0x314>)
    e778:	881b      	ldrh	r3, [r3, #0]
    e77a:	3301      	adds	r3, #1
    e77c:	b29a      	uxth	r2, r3
    e77e:	4b7c      	ldr	r3, [pc, #496]	; (e970 <tc_callback_to_toggle_led+0x314>)
    e780:	801a      	strh	r2, [r3, #0]
		}
		if (needNewBaselineTimer >0)
    e782:	4b7c      	ldr	r3, [pc, #496]	; (e974 <tc_callback_to_toggle_led+0x318>)
    e784:	881b      	ldrh	r3, [r3, #0]
    e786:	2b00      	cmp	r3, #0
    e788:	d009      	beq.n	e79e <tc_callback_to_toggle_led+0x142>
		{
			needNewBaselineTimer--;
    e78a:	4b7a      	ldr	r3, [pc, #488]	; (e974 <tc_callback_to_toggle_led+0x318>)
    e78c:	881b      	ldrh	r3, [r3, #0]
    e78e:	3b01      	subs	r3, #1
    e790:	b29a      	uxth	r2, r3
    e792:	4b78      	ldr	r3, [pc, #480]	; (e974 <tc_callback_to_toggle_led+0x318>)
    e794:	801a      	strh	r2, [r3, #0]
			needNewBaseline = 1; 
    e796:	4b78      	ldr	r3, [pc, #480]	; (e978 <tc_callback_to_toggle_led+0x31c>)
    e798:	2201      	movs	r2, #1
    e79a:	701a      	strb	r2, [r3, #0]
    e79c:	e002      	b.n	e7a4 <tc_callback_to_toggle_led+0x148>
		}
		else
		{
			needNewBaseline = 0;
    e79e:	4b76      	ldr	r3, [pc, #472]	; (e978 <tc_callback_to_toggle_led+0x31c>)
    e7a0:	2200      	movs	r2, #0
    e7a2:	701a      	strb	r2, [r3, #0]
		}
#endif		
	}
	timerSecond++;
    e7a4:	4b75      	ldr	r3, [pc, #468]	; (e97c <tc_callback_to_toggle_led+0x320>)
    e7a6:	881b      	ldrh	r3, [r3, #0]
    e7a8:	3301      	adds	r3, #1
    e7aa:	b29a      	uxth	r2, r3
    e7ac:	4b73      	ldr	r3, [pc, #460]	; (e97c <tc_callback_to_toggle_led+0x320>)
    e7ae:	801a      	strh	r2, [r3, #0]
	if (timerSecond >= 1000)
    e7b0:	4b72      	ldr	r3, [pc, #456]	; (e97c <tc_callback_to_toggle_led+0x320>)
    e7b2:	881a      	ldrh	r2, [r3, #0]
    e7b4:	4b68      	ldr	r3, [pc, #416]	; (e958 <tc_callback_to_toggle_led+0x2fc>)
    e7b6:	429a      	cmp	r2, r3
    e7b8:	d937      	bls.n	e82a <tc_callback_to_toggle_led+0x1ce>
	{
		timerSecond = 0;
    e7ba:	4b70      	ldr	r3, [pc, #448]	; (e97c <tc_callback_to_toggle_led+0x320>)
    e7bc:	2200      	movs	r2, #0
    e7be:	801a      	strh	r2, [r3, #0]
		minute++;
    e7c0:	4b6f      	ldr	r3, [pc, #444]	; (e980 <tc_callback_to_toggle_led+0x324>)
    e7c2:	781b      	ldrb	r3, [r3, #0]
    e7c4:	3301      	adds	r3, #1
    e7c6:	b2da      	uxtb	r2, r3
    e7c8:	4b6d      	ldr	r3, [pc, #436]	; (e980 <tc_callback_to_toggle_led+0x324>)
    e7ca:	701a      	strb	r2, [r3, #0]
		if (minute >= 60)
    e7cc:	4b6c      	ldr	r3, [pc, #432]	; (e980 <tc_callback_to_toggle_led+0x324>)
    e7ce:	781b      	ldrb	r3, [r3, #0]
    e7d0:	2b3b      	cmp	r3, #59	; 0x3b
    e7d2:	d902      	bls.n	e7da <tc_callback_to_toggle_led+0x17e>
		{
			minute = 0;
    e7d4:	4b6a      	ldr	r3, [pc, #424]	; (e980 <tc_callback_to_toggle_led+0x324>)
    e7d6:	2200      	movs	r2, #0
    e7d8:	701a      	strb	r2, [r3, #0]
		}
//		port_pin_toggle_output_level(BL_KEY_PIN);
#if BRAKEBOARD
		if (brakeSupTime >0)
    e7da:	4b6a      	ldr	r3, [pc, #424]	; (e984 <tc_callback_to_toggle_led+0x328>)
    e7dc:	781b      	ldrb	r3, [r3, #0]
    e7de:	2b00      	cmp	r3, #0
    e7e0:	d010      	beq.n	e804 <tc_callback_to_toggle_led+0x1a8>
		{
			brakeSupTime--;
    e7e2:	4b68      	ldr	r3, [pc, #416]	; (e984 <tc_callback_to_toggle_led+0x328>)
    e7e4:	781b      	ldrb	r3, [r3, #0]
    e7e6:	3b01      	subs	r3, #1
    e7e8:	b2da      	uxtb	r2, r3
    e7ea:	4b66      	ldr	r3, [pc, #408]	; (e984 <tc_callback_to_toggle_led+0x328>)
    e7ec:	701a      	strb	r2, [r3, #0]
			if (brakeSupTime ==0)
    e7ee:	4b65      	ldr	r3, [pc, #404]	; (e984 <tc_callback_to_toggle_led+0x328>)
    e7f0:	781b      	ldrb	r3, [r3, #0]
    e7f2:	2b00      	cmp	r3, #0
    e7f4:	d106      	bne.n	e804 <tc_callback_to_toggle_led+0x1a8>
			{
				brakeChange |= BRAKECHANGE_SUPTIME; 
    e7f6:	4b54      	ldr	r3, [pc, #336]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	2202      	movs	r2, #2
    e7fc:	4313      	orrs	r3, r2
    e7fe:	b2da      	uxtb	r2, r3
    e800:	4b51      	ldr	r3, [pc, #324]	; (e948 <tc_callback_to_toggle_led+0x2ec>)
    e802:	701a      	strb	r2, [r3, #0]

#endif


		//-----------------one second timer 
		timerRF433++;
    e804:	4b60      	ldr	r3, [pc, #384]	; (e988 <tc_callback_to_toggle_led+0x32c>)
    e806:	881b      	ldrh	r3, [r3, #0]
    e808:	3301      	adds	r3, #1
    e80a:	b29a      	uxth	r2, r3
    e80c:	4b5e      	ldr	r3, [pc, #376]	; (e988 <tc_callback_to_toggle_led+0x32c>)
    e80e:	801a      	strh	r2, [r3, #0]
		if (timerRF433>= 30)
    e810:	4b5d      	ldr	r3, [pc, #372]	; (e988 <tc_callback_to_toggle_led+0x32c>)
    e812:	881b      	ldrh	r3, [r3, #0]
    e814:	2b1d      	cmp	r3, #29
    e816:	d908      	bls.n	e82a <tc_callback_to_toggle_led+0x1ce>
		{
			timerRF433 = 0;
    e818:	4b5b      	ldr	r3, [pc, #364]	; (e988 <tc_callback_to_toggle_led+0x32c>)
    e81a:	2200      	movs	r2, #0
    e81c:	801a      	strh	r2, [r3, #0]
			schedByte |= SCHEDBYTE_RF433;
    e81e:	4b47      	ldr	r3, [pc, #284]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e820:	681b      	ldr	r3, [r3, #0]
    e822:	2210      	movs	r2, #16
    e824:	431a      	orrs	r2, r3
    e826:	4b45      	ldr	r3, [pc, #276]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e828:	601a      	str	r2, [r3, #0]
		}

	}
	TickCounter++;
    e82a:	4b58      	ldr	r3, [pc, #352]	; (e98c <tc_callback_to_toggle_led+0x330>)
    e82c:	681b      	ldr	r3, [r3, #0]
    e82e:	1c5a      	adds	r2, r3, #1
    e830:	4b56      	ldr	r3, [pc, #344]	; (e98c <tc_callback_to_toggle_led+0x330>)
    e832:	601a      	str	r2, [r3, #0]
	if (TickCounter > 20)
    e834:	4b55      	ldr	r3, [pc, #340]	; (e98c <tc_callback_to_toggle_led+0x330>)
    e836:	681b      	ldr	r3, [r3, #0]
    e838:	2b14      	cmp	r3, #20
    e83a:	d908      	bls.n	e84e <tc_callback_to_toggle_led+0x1f2>
	{
		TickCounter = 0;
    e83c:	4b53      	ldr	r3, [pc, #332]	; (e98c <tc_callback_to_toggle_led+0x330>)
    e83e:	2200      	movs	r2, #0
    e840:	601a      	str	r2, [r3, #0]
		schedByte |= SCHEDBYTE_BUTTON;
    e842:	4b3e      	ldr	r3, [pc, #248]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e844:	681b      	ldr	r3, [r3, #0]
    e846:	2208      	movs	r2, #8
    e848:	431a      	orrs	r2, r3
    e84a:	4b3c      	ldr	r3, [pc, #240]	; (e93c <tc_callback_to_toggle_led+0x2e0>)
    e84c:	601a      	str	r2, [r3, #0]
	}
	if (wdog >0)
    e84e:	4b50      	ldr	r3, [pc, #320]	; (e990 <tc_callback_to_toggle_led+0x334>)
    e850:	881b      	ldrh	r3, [r3, #0]
    e852:	2b00      	cmp	r3, #0
    e854:	d005      	beq.n	e862 <tc_callback_to_toggle_led+0x206>
	{
		wdog--;
    e856:	4b4e      	ldr	r3, [pc, #312]	; (e990 <tc_callback_to_toggle_led+0x334>)
    e858:	881b      	ldrh	r3, [r3, #0]
    e85a:	3b01      	subs	r3, #1
    e85c:	b29a      	uxth	r2, r3
    e85e:	4b4c      	ldr	r3, [pc, #304]	; (e990 <tc_callback_to_toggle_led+0x334>)
    e860:	801a      	strh	r2, [r3, #0]
		schedByte |= SCHEDBYTE_COMMTOBRAKE;
	}	
#endif	

#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENFLICKER)
    e862:	4b4c      	ldr	r3, [pc, #304]	; (e994 <tc_callback_to_toggle_led+0x338>)
    e864:	781b      	ldrb	r3, [r3, #0]
    e866:	2b01      	cmp	r3, #1
    e868:	d123      	bne.n	e8b2 <tc_callback_to_toggle_led+0x256>
	{
		flickTimer++;
    e86a:	4b4b      	ldr	r3, [pc, #300]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e86c:	881b      	ldrh	r3, [r3, #0]
    e86e:	3301      	adds	r3, #1
    e870:	b29a      	uxth	r2, r3
    e872:	4b49      	ldr	r3, [pc, #292]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e874:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    e876:	4b48      	ldr	r3, [pc, #288]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e878:	881a      	ldrh	r2, [r3, #0]
    e87a:	4b37      	ldr	r3, [pc, #220]	; (e958 <tc_callback_to_toggle_led+0x2fc>)
    e87c:	429a      	cmp	r2, r3
    e87e:	d90b      	bls.n	e898 <tc_callback_to_toggle_led+0x23c>
		{
			flickTimer = 0;
    e880:	4b45      	ldr	r3, [pc, #276]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e882:	2200      	movs	r2, #0
    e884:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    e886:	202e      	movs	r0, #46	; 0x2e
    e888:	2100      	movs	r1, #0
    e88a:	4b44      	ldr	r3, [pc, #272]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e88c:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);			
    e88e:	202f      	movs	r0, #47	; 0x2f
    e890:	2101      	movs	r1, #1
    e892:	4b42      	ldr	r3, [pc, #264]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e894:	4798      	blx	r3
    e896:	e00c      	b.n	e8b2 <tc_callback_to_toggle_led+0x256>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    e898:	4b3f      	ldr	r3, [pc, #252]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e89a:	881a      	ldrh	r2, [r3, #0]
    e89c:	4b40      	ldr	r3, [pc, #256]	; (e9a0 <tc_callback_to_toggle_led+0x344>)
    e89e:	429a      	cmp	r2, r3
    e8a0:	d907      	bls.n	e8b2 <tc_callback_to_toggle_led+0x256>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    e8a2:	202e      	movs	r0, #46	; 0x2e
    e8a4:	2101      	movs	r1, #1
    e8a6:	4b3d      	ldr	r3, [pc, #244]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e8a8:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    e8aa:	202f      	movs	r0, #47	; 0x2f
    e8ac:	2101      	movs	r1, #1
    e8ae:	4b3b      	ldr	r3, [pc, #236]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e8b0:	4798      	blx	r3
			}
		}
	}	
	if (brakeBiLED == BRAKEBILED_YELLOWFLICKER)
    e8b2:	4b38      	ldr	r3, [pc, #224]	; (e994 <tc_callback_to_toggle_led+0x338>)
    e8b4:	781b      	ldrb	r3, [r3, #0]
    e8b6:	2b07      	cmp	r3, #7
    e8b8:	d123      	bne.n	e902 <tc_callback_to_toggle_led+0x2a6>
	{
		flickTimer++;
    e8ba:	4b37      	ldr	r3, [pc, #220]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e8bc:	881b      	ldrh	r3, [r3, #0]
    e8be:	3301      	adds	r3, #1
    e8c0:	b29a      	uxth	r2, r3
    e8c2:	4b35      	ldr	r3, [pc, #212]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e8c4:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    e8c6:	4b34      	ldr	r3, [pc, #208]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e8c8:	881a      	ldrh	r2, [r3, #0]
    e8ca:	4b23      	ldr	r3, [pc, #140]	; (e958 <tc_callback_to_toggle_led+0x2fc>)
    e8cc:	429a      	cmp	r2, r3
    e8ce:	d90b      	bls.n	e8e8 <tc_callback_to_toggle_led+0x28c>
		{
			flickTimer = 0;
    e8d0:	4b31      	ldr	r3, [pc, #196]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e8d2:	2200      	movs	r2, #0
    e8d4:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    e8d6:	202e      	movs	r0, #46	; 0x2e
    e8d8:	2100      	movs	r1, #0
    e8da:	4b30      	ldr	r3, [pc, #192]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e8dc:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, false);			
    e8de:	202f      	movs	r0, #47	; 0x2f
    e8e0:	2100      	movs	r1, #0
    e8e2:	4b2e      	ldr	r3, [pc, #184]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e8e4:	4798      	blx	r3
    e8e6:	e00c      	b.n	e902 <tc_callback_to_toggle_led+0x2a6>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    e8e8:	4b2b      	ldr	r3, [pc, #172]	; (e998 <tc_callback_to_toggle_led+0x33c>)
    e8ea:	881a      	ldrh	r2, [r3, #0]
    e8ec:	4b2c      	ldr	r3, [pc, #176]	; (e9a0 <tc_callback_to_toggle_led+0x344>)
    e8ee:	429a      	cmp	r2, r3
    e8f0:	d907      	bls.n	e902 <tc_callback_to_toggle_led+0x2a6>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    e8f2:	202e      	movs	r0, #46	; 0x2e
    e8f4:	2101      	movs	r1, #1
    e8f6:	4b29      	ldr	r3, [pc, #164]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e8f8:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    e8fa:	202f      	movs	r0, #47	; 0x2f
    e8fc:	2101      	movs	r1, #1
    e8fe:	4b27      	ldr	r3, [pc, #156]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e900:	4798      	blx	r3
			}
		}
	}		
#endif	
#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENSTROBE)
    e902:	4b24      	ldr	r3, [pc, #144]	; (e994 <tc_callback_to_toggle_led+0x338>)
    e904:	781b      	ldrb	r3, [r3, #0]
    e906:	2b05      	cmp	r3, #5
    e908:	d15c      	bne.n	e9c4 <tc_callback_to_toggle_led+0x368>
	{
		strobeTimer++;
    e90a:	4b26      	ldr	r3, [pc, #152]	; (e9a4 <tc_callback_to_toggle_led+0x348>)
    e90c:	881b      	ldrh	r3, [r3, #0]
    e90e:	3301      	adds	r3, #1
    e910:	b29a      	uxth	r2, r3
    e912:	4b24      	ldr	r3, [pc, #144]	; (e9a4 <tc_callback_to_toggle_led+0x348>)
    e914:	801a      	strh	r2, [r3, #0]
		if (strobeTimer >= STROBETIME)
    e916:	4b23      	ldr	r3, [pc, #140]	; (e9a4 <tc_callback_to_toggle_led+0x348>)
    e918:	881a      	ldrh	r2, [r3, #0]
    e91a:	4b23      	ldr	r3, [pc, #140]	; (e9a8 <tc_callback_to_toggle_led+0x34c>)
    e91c:	429a      	cmp	r2, r3
    e91e:	d945      	bls.n	e9ac <tc_callback_to_toggle_led+0x350>
		{
			strobeTimer = 0;
    e920:	4b20      	ldr	r3, [pc, #128]	; (e9a4 <tc_callback_to_toggle_led+0x348>)
    e922:	2200      	movs	r2, #0
    e924:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    e926:	202e      	movs	r0, #46	; 0x2e
    e928:	2100      	movs	r1, #0
    e92a:	4b1c      	ldr	r3, [pc, #112]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e92c:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);
    e92e:	202f      	movs	r0, #47	; 0x2f
    e930:	2101      	movs	r1, #1
    e932:	4b1a      	ldr	r3, [pc, #104]	; (e99c <tc_callback_to_toggle_led+0x340>)
    e934:	4798      	blx	r3
    e936:	e045      	b.n	e9c4 <tc_callback_to_toggle_led+0x368>
    e938:	00005b51 	.word	0x00005b51
    e93c:	20003668 	.word	0x20003668
    e940:	200036c2 	.word	0x200036c2
    e944:	20003683 	.word	0x20003683
    e948:	20002ecc 	.word	0x20002ecc
    e94c:	20002ed0 	.word	0x20002ed0
    e950:	200004ac 	.word	0x200004ac
    e954:	20002eb8 	.word	0x20002eb8
    e958:	000003e7 	.word	0x000003e7
    e95c:	200036c0 	.word	0x200036c0
    e960:	20002eaa 	.word	0x20002eaa
    e964:	200004d2 	.word	0x200004d2
    e968:	200004d3 	.word	0x200004d3
    e96c:	200004da 	.word	0x200004da
    e970:	20002eba 	.word	0x20002eba
    e974:	20000634 	.word	0x20000634
    e978:	20000000 	.word	0x20000000
    e97c:	200036be 	.word	0x200036be
    e980:	200004db 	.word	0x200004db
    e984:	2000368e 	.word	0x2000368e
    e988:	200004d8 	.word	0x200004d8
    e98c:	200004d4 	.word	0x200004d4
    e990:	2000368a 	.word	0x2000368a
    e994:	20002ec8 	.word	0x20002ec8
    e998:	2000367e 	.word	0x2000367e
    e99c:	0000d92d 	.word	0x0000d92d
    e9a0:	00000383 	.word	0x00000383
    e9a4:	20003690 	.word	0x20003690
    e9a8:	000007cf 	.word	0x000007cf
		}
		else
		{
			if (strobeTimer >= STROBEOFF)
    e9ac:	4b8c      	ldr	r3, [pc, #560]	; (ebe0 <tc_callback_to_toggle_led+0x584>)
    e9ae:	881b      	ldrh	r3, [r3, #0]
    e9b0:	2b63      	cmp	r3, #99	; 0x63
    e9b2:	d907      	bls.n	e9c4 <tc_callback_to_toggle_led+0x368>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    e9b4:	202e      	movs	r0, #46	; 0x2e
    e9b6:	2101      	movs	r1, #1
    e9b8:	4b8a      	ldr	r3, [pc, #552]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    e9ba:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    e9bc:	202f      	movs	r0, #47	; 0x2f
    e9be:	2101      	movs	r1, #1
    e9c0:	4b88      	ldr	r3, [pc, #544]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    e9c2:	4798      	blx	r3
			}
		}
	}
#endif
	blinkTimer++;
    e9c4:	4b88      	ldr	r3, [pc, #544]	; (ebe8 <tc_callback_to_toggle_led+0x58c>)
    e9c6:	881b      	ldrh	r3, [r3, #0]
    e9c8:	3301      	adds	r3, #1
    e9ca:	b29a      	uxth	r2, r3
    e9cc:	4b86      	ldr	r3, [pc, #536]	; (ebe8 <tc_callback_to_toggle_led+0x58c>)
    e9ce:	801a      	strh	r2, [r3, #0]
	if (blinkTimer >= BLINKTIME)
    e9d0:	4b85      	ldr	r3, [pc, #532]	; (ebe8 <tc_callback_to_toggle_led+0x58c>)
    e9d2:	881b      	ldrh	r3, [r3, #0]
    e9d4:	2bf9      	cmp	r3, #249	; 0xf9
    e9d6:	d800      	bhi.n	e9da <tc_callback_to_toggle_led+0x37e>
    e9d8:	e0c8      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
	{
		blinkTimer = 0;
    e9da:	4b83      	ldr	r3, [pc, #524]	; (ebe8 <tc_callback_to_toggle_led+0x58c>)
    e9dc:	2200      	movs	r2, #0
    e9de:	801a      	strh	r2, [r3, #0]
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
    e9e0:	4b82      	ldr	r3, [pc, #520]	; (ebec <tc_callback_to_toggle_led+0x590>)
    e9e2:	781b      	ldrb	r3, [r3, #0]
    e9e4:	2b03      	cmp	r3, #3
    e9e6:	d003      	beq.n	e9f0 <tc_callback_to_toggle_led+0x394>
    e9e8:	4b80      	ldr	r3, [pc, #512]	; (ebec <tc_callback_to_toggle_led+0x590>)
    e9ea:	781b      	ldrb	r3, [r3, #0]
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	d12c      	bne.n	ea4a <tc_callback_to_toggle_led+0x3ee>
		{
			if (ledBlue == 0)
    e9f0:	4b7f      	ldr	r3, [pc, #508]	; (ebf0 <tc_callback_to_toggle_led+0x594>)
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d118      	bne.n	ea2a <tc_callback_to_toggle_led+0x3ce>
			{
				ledBlue = 1; 
    e9f8:	4b7d      	ldr	r3, [pc, #500]	; (ebf0 <tc_callback_to_toggle_led+0x594>)
    e9fa:	2201      	movs	r2, #1
    e9fc:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, true);
    e9fe:	202c      	movs	r0, #44	; 0x2c
    ea00:	2101      	movs	r1, #1
    ea02:	4b78      	ldr	r3, [pc, #480]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea04:	4798      	blx	r3
				if (brakeBlueLED == BRAKEBLUELED_ALTGREEN)
    ea06:	4b79      	ldr	r3, [pc, #484]	; (ebec <tc_callback_to_toggle_led+0x590>)
    ea08:	781b      	ldrb	r3, [r3, #0]
    ea0a:	2b03      	cmp	r3, #3
    ea0c:	d104      	bne.n	ea18 <tc_callback_to_toggle_led+0x3bc>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    ea0e:	202e      	movs	r0, #46	; 0x2e
    ea10:	2100      	movs	r1, #0
    ea12:	4b74      	ldr	r3, [pc, #464]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea14:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    ea16:	e0a9      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
				}
				else
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    ea18:	202e      	movs	r0, #46	; 0x2e
    ea1a:	2100      	movs	r1, #0
    ea1c:	4b71      	ldr	r3, [pc, #452]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea1e:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, false);
    ea20:	202f      	movs	r0, #47	; 0x2f
    ea22:	2100      	movs	r1, #0
    ea24:	4b6f      	ldr	r3, [pc, #444]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea26:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    ea28:	e0a0      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
					port_pin_set_output_level(LED_BIRED_PIN, false);
				}
			}	
			else
			{
				ledBlue = 0;
    ea2a:	4b71      	ldr	r3, [pc, #452]	; (ebf0 <tc_callback_to_toggle_led+0x594>)
    ea2c:	2200      	movs	r2, #0
    ea2e:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, false);
    ea30:	202c      	movs	r0, #44	; 0x2c
    ea32:	2100      	movs	r1, #0
    ea34:	4b6b      	ldr	r3, [pc, #428]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea36:	4798      	blx	r3
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ea38:	202e      	movs	r0, #46	; 0x2e
    ea3a:	2101      	movs	r1, #1
    ea3c:	4b69      	ldr	r3, [pc, #420]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea3e:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    ea40:	202f      	movs	r0, #47	; 0x2f
    ea42:	2101      	movs	r1, #1
    ea44:	4b67      	ldr	r3, [pc, #412]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea46:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    ea48:	e090      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
				port_pin_set_output_level(LED_BIRED_PIN, true);
			}
		}
		else
		{
			switch (brakeBiLED)
    ea4a:	4b6a      	ldr	r3, [pc, #424]	; (ebf4 <tc_callback_to_toggle_led+0x598>)
    ea4c:	781b      	ldrb	r3, [r3, #0]
    ea4e:	2b06      	cmp	r3, #6
    ea50:	d86b      	bhi.n	eb2a <tc_callback_to_toggle_led+0x4ce>
    ea52:	009a      	lsls	r2, r3, #2
    ea54:	4b68      	ldr	r3, [pc, #416]	; (ebf8 <tc_callback_to_toggle_led+0x59c>)
    ea56:	18d3      	adds	r3, r2, r3
    ea58:	681b      	ldr	r3, [r3, #0]
    ea5a:	469f      	mov	pc, r3
			{
				case BRAKEBILED_REDFLASH:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ea5c:	202e      	movs	r0, #46	; 0x2e
    ea5e:	2101      	movs	r1, #1
    ea60:	4b60      	ldr	r3, [pc, #384]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea62:	4798      	blx	r3
					if (ledBiRed != 0)
    ea64:	4b65      	ldr	r3, [pc, #404]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    ea66:	781b      	ldrb	r3, [r3, #0]
    ea68:	2b00      	cmp	r3, #0
    ea6a:	d007      	beq.n	ea7c <tc_callback_to_toggle_led+0x420>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    ea6c:	202f      	movs	r0, #47	; 0x2f
    ea6e:	2100      	movs	r1, #0
    ea70:	4b5c      	ldr	r3, [pc, #368]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea72:	4798      	blx	r3
						ledBiRed = 0;
    ea74:	4b61      	ldr	r3, [pc, #388]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    ea76:	2200      	movs	r2, #0
    ea78:	701a      	strb	r2, [r3, #0]
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
						ledBiRed = 1;
					}	
					break;
    ea7a:	e056      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
						port_pin_set_output_level(LED_BIRED_PIN, false);
						ledBiRed = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    ea7c:	202f      	movs	r0, #47	; 0x2f
    ea7e:	2101      	movs	r1, #1
    ea80:	4b58      	ldr	r3, [pc, #352]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea82:	4798      	blx	r3
						ledBiRed = 1;
    ea84:	4b5d      	ldr	r3, [pc, #372]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    ea86:	2201      	movs	r2, #1
    ea88:	701a      	strb	r2, [r3, #0]
					}	
					break;
    ea8a:	e04e      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
				}
				case BRAKEBILED_YELLOWSOLID:
				{
		 			port_pin_set_output_level(LED_BIRED_PIN, false);
    ea8c:	202f      	movs	r0, #47	; 0x2f
    ea8e:	2100      	movs	r1, #0
    ea90:	4b54      	ldr	r3, [pc, #336]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea92:	4798      	blx	r3
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    ea94:	202e      	movs	r0, #46	; 0x2e
    ea96:	2100      	movs	r1, #0
    ea98:	4b52      	ldr	r3, [pc, #328]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ea9a:	4798      	blx	r3
					ledBiRed = 0;
    ea9c:	4b57      	ldr	r3, [pc, #348]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    ea9e:	2200      	movs	r2, #0
    eaa0:	701a      	strb	r2, [r3, #0]
					ledBiGreen = 0;
    eaa2:	4b57      	ldr	r3, [pc, #348]	; (ec00 <tc_callback_to_toggle_led+0x5a4>)
    eaa4:	2200      	movs	r2, #0
    eaa6:	701a      	strb	r2, [r3, #0]
					break;
    eaa8:	e03f      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
				}	
				case BRAKEBILED_YELLOWFLASH:
				{
					if (ledBiRed != 0)
    eaaa:	4b54      	ldr	r3, [pc, #336]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    eaac:	781b      	ldrb	r3, [r3, #0]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d00e      	beq.n	ead0 <tc_callback_to_toggle_led+0x474>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    eab2:	202f      	movs	r0, #47	; 0x2f
    eab4:	2100      	movs	r1, #0
    eab6:	4b4b      	ldr	r3, [pc, #300]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eab8:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, false);
    eaba:	202e      	movs	r0, #46	; 0x2e
    eabc:	2100      	movs	r1, #0
    eabe:	4b49      	ldr	r3, [pc, #292]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eac0:	4798      	blx	r3
						ledBiRed = 0;
    eac2:	4b4e      	ldr	r3, [pc, #312]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    eac4:	2200      	movs	r2, #0
    eac6:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 0;
    eac8:	4b4d      	ldr	r3, [pc, #308]	; (ec00 <tc_callback_to_toggle_led+0x5a4>)
    eaca:	2200      	movs	r2, #0
    eacc:	701a      	strb	r2, [r3, #0]
						port_pin_set_output_level(LED_BIRED_PIN, true);
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
						ledBiRed = 1;
						ledBiGreen = 1;
					}
					break;
    eace:	e02c      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
						ledBiRed = 0;
						ledBiGreen = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    ead0:	202f      	movs	r0, #47	; 0x2f
    ead2:	2101      	movs	r1, #1
    ead4:	4b43      	ldr	r3, [pc, #268]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    ead6:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ead8:	202e      	movs	r0, #46	; 0x2e
    eada:	2101      	movs	r1, #1
    eadc:	4b41      	ldr	r3, [pc, #260]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eade:	4798      	blx	r3
						ledBiRed = 1;
    eae0:	4b46      	ldr	r3, [pc, #280]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    eae2:	2201      	movs	r2, #1
    eae4:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 1;
    eae6:	4b46      	ldr	r3, [pc, #280]	; (ec00 <tc_callback_to_toggle_led+0x5a4>)
    eae8:	2201      	movs	r2, #1
    eaea:	701a      	strb	r2, [r3, #0]
					}
					break;
    eaec:	e01d      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
				}													
				case BRAKEBILED_OFF:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    eaee:	202e      	movs	r0, #46	; 0x2e
    eaf0:	2101      	movs	r1, #1
    eaf2:	4b3c      	ldr	r3, [pc, #240]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eaf4:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    eaf6:	202f      	movs	r0, #47	; 0x2f
    eaf8:	2101      	movs	r1, #1
    eafa:	4b3a      	ldr	r3, [pc, #232]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eafc:	4798      	blx	r3
					ledBiGreen = 1;
    eafe:	4b40      	ldr	r3, [pc, #256]	; (ec00 <tc_callback_to_toggle_led+0x5a4>)
    eb00:	2201      	movs	r2, #1
    eb02:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    eb04:	4b3d      	ldr	r3, [pc, #244]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    eb06:	2201      	movs	r2, #1
    eb08:	701a      	strb	r2, [r3, #0]
					break;
    eb0a:	e00e      	b.n	eb2a <tc_callback_to_toggle_led+0x4ce>
				}		
				case BRAKEBILED_GREENSOLID:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    eb0c:	202e      	movs	r0, #46	; 0x2e
    eb0e:	2100      	movs	r1, #0
    eb10:	4b34      	ldr	r3, [pc, #208]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb12:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    eb14:	202f      	movs	r0, #47	; 0x2f
    eb16:	2101      	movs	r1, #1
    eb18:	4b32      	ldr	r3, [pc, #200]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb1a:	4798      	blx	r3
					ledBiGreen = 0;
    eb1c:	4b38      	ldr	r3, [pc, #224]	; (ec00 <tc_callback_to_toggle_led+0x5a4>)
    eb1e:	2200      	movs	r2, #0
    eb20:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    eb22:	4b36      	ldr	r3, [pc, #216]	; (ebfc <tc_callback_to_toggle_led+0x5a0>)
    eb24:	2201      	movs	r2, #1
    eb26:	701a      	strb	r2, [r3, #0]
					break;
    eb28:	46c0      	nop			; (mov r8, r8)
				}				
			}
			switch (brakeBlueLED)
    eb2a:	4b30      	ldr	r3, [pc, #192]	; (ebec <tc_callback_to_toggle_led+0x590>)
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	2b01      	cmp	r3, #1
    eb30:	d006      	beq.n	eb40 <tc_callback_to_toggle_led+0x4e4>
    eb32:	2b02      	cmp	r3, #2
    eb34:	d109      	bne.n	eb4a <tc_callback_to_toggle_led+0x4ee>
			{
				case BRAKEBLUELED_OFF:
				{
					port_pin_set_output_level(LED_BLUE_PIN, true);
    eb36:	202c      	movs	r0, #44	; 0x2c
    eb38:	2101      	movs	r1, #1
    eb3a:	4b2a      	ldr	r3, [pc, #168]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb3c:	4798      	blx	r3
					break;
    eb3e:	e004      	b.n	eb4a <tc_callback_to_toggle_led+0x4ee>
				}
				case BRAKEBLUELED_SOLID:
				{
					port_pin_set_output_level(LED_BLUE_PIN, false);
    eb40:	202c      	movs	r0, #44	; 0x2c
    eb42:	2100      	movs	r1, #0
    eb44:	4b27      	ldr	r3, [pc, #156]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb46:	4798      	blx	r3
					break;
    eb48:	46c0      	nop			; (mov r8, r8)
				}
			}	
			switch (brakeRedLED)
    eb4a:	4b2e      	ldr	r3, [pc, #184]	; (ec04 <tc_callback_to_toggle_led+0x5a8>)
    eb4c:	781b      	ldrb	r3, [r3, #0]
    eb4e:	2b01      	cmp	r3, #1
    eb50:	d002      	beq.n	eb58 <tc_callback_to_toggle_led+0x4fc>
    eb52:	2b02      	cmp	r3, #2
    eb54:	d005      	beq.n	eb62 <tc_callback_to_toggle_led+0x506>
    eb56:	e009      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
			{
				case BRAKEREDLED_OFF:
				{
					port_pin_set_output_level(LED_RED_PIN, true);
    eb58:	202d      	movs	r0, #45	; 0x2d
    eb5a:	2101      	movs	r1, #1
    eb5c:	4b21      	ldr	r3, [pc, #132]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb5e:	4798      	blx	r3
					break;
    eb60:	e004      	b.n	eb6c <tc_callback_to_toggle_led+0x510>
				}
				case BRAKEREDLED_SOLID:
				{
					port_pin_set_output_level(LED_RED_PIN, false);
    eb62:	202d      	movs	r0, #45	; 0x2d
    eb64:	2100      	movs	r1, #0
    eb66:	4b1f      	ldr	r3, [pc, #124]	; (ebe4 <tc_callback_to_toggle_led+0x588>)
    eb68:	4798      	blx	r3
					break;
    eb6a:	46c0      	nop			; (mov r8, r8)
				}
			}			
		}
#endif	
	}
	if (adcTimer >0)
    eb6c:	4b26      	ldr	r3, [pc, #152]	; (ec08 <tc_callback_to_toggle_led+0x5ac>)
    eb6e:	881b      	ldrh	r3, [r3, #0]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d012      	beq.n	eb9a <tc_callback_to_toggle_led+0x53e>
	{
		adcTimer--;
    eb74:	4b24      	ldr	r3, [pc, #144]	; (ec08 <tc_callback_to_toggle_led+0x5ac>)
    eb76:	881b      	ldrh	r3, [r3, #0]
    eb78:	3b01      	subs	r3, #1
    eb7a:	b29a      	uxth	r2, r3
    eb7c:	4b22      	ldr	r3, [pc, #136]	; (ec08 <tc_callback_to_toggle_led+0x5ac>)
    eb7e:	801a      	strh	r2, [r3, #0]
		if (adcTimer == 0)
    eb80:	4b21      	ldr	r3, [pc, #132]	; (ec08 <tc_callback_to_toggle_led+0x5ac>)
    eb82:	881b      	ldrh	r3, [r3, #0]
    eb84:	2b00      	cmp	r3, #0
    eb86:	d108      	bne.n	eb9a <tc_callback_to_toggle_led+0x53e>
		{
			adcTimeout = 1; 
    eb88:	4b20      	ldr	r3, [pc, #128]	; (ec0c <tc_callback_to_toggle_led+0x5b0>)
    eb8a:	2201      	movs	r2, #1
    eb8c:	701a      	strb	r2, [r3, #0]
			schedByte |= SCHEDBYTE_ADC; 
    eb8e:	4b20      	ldr	r3, [pc, #128]	; (ec10 <tc_callback_to_toggle_led+0x5b4>)
    eb90:	681b      	ldr	r3, [r3, #0]
    eb92:	2220      	movs	r2, #32
    eb94:	431a      	orrs	r2, r3
    eb96:	4b1e      	ldr	r3, [pc, #120]	; (ec10 <tc_callback_to_toggle_led+0x5b4>)
    eb98:	601a      	str	r2, [r3, #0]
		}
	}
		if (commSupTimer>0)
    eb9a:	4b1e      	ldr	r3, [pc, #120]	; (ec14 <tc_callback_to_toggle_led+0x5b8>)
    eb9c:	881b      	ldrh	r3, [r3, #0]
    eb9e:	2b00      	cmp	r3, #0
    eba0:	d010      	beq.n	ebc4 <tc_callback_to_toggle_led+0x568>
		{
			commSupTimer--;
    eba2:	4b1c      	ldr	r3, [pc, #112]	; (ec14 <tc_callback_to_toggle_led+0x5b8>)
    eba4:	881b      	ldrh	r3, [r3, #0]
    eba6:	3b01      	subs	r3, #1
    eba8:	b29a      	uxth	r2, r3
    ebaa:	4b1a      	ldr	r3, [pc, #104]	; (ec14 <tc_callback_to_toggle_led+0x5b8>)
    ebac:	801a      	strh	r2, [r3, #0]
			if (commSupTimer == 0)
    ebae:	4b19      	ldr	r3, [pc, #100]	; (ec14 <tc_callback_to_toggle_led+0x5b8>)
    ebb0:	881b      	ldrh	r3, [r3, #0]
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d106      	bne.n	ebc4 <tc_callback_to_toggle_led+0x568>
			{
				schedByte |= SCHEDBYTE_COMMSUP; 	
    ebb6:	4b16      	ldr	r3, [pc, #88]	; (ec10 <tc_callback_to_toggle_led+0x5b4>)
    ebb8:	681b      	ldr	r3, [r3, #0]
    ebba:	2280      	movs	r2, #128	; 0x80
    ebbc:	0192      	lsls	r2, r2, #6
    ebbe:	431a      	orrs	r2, r3
    ebc0:	4b13      	ldr	r3, [pc, #76]	; (ec10 <tc_callback_to_toggle_led+0x5b4>)
    ebc2:	601a      	str	r2, [r3, #0]
			}
		}	
#if BRAKEBOARD		
	if (motorRunTime >0)
    ebc4:	4b14      	ldr	r3, [pc, #80]	; (ec18 <tc_callback_to_toggle_led+0x5bc>)
    ebc6:	881b      	ldrh	r3, [r3, #0]
    ebc8:	2b00      	cmp	r3, #0
    ebca:	d005      	beq.n	ebd8 <tc_callback_to_toggle_led+0x57c>
	{
		motorRunTime--;
    ebcc:	4b12      	ldr	r3, [pc, #72]	; (ec18 <tc_callback_to_toggle_led+0x5bc>)
    ebce:	881b      	ldrh	r3, [r3, #0]
    ebd0:	3b01      	subs	r3, #1
    ebd2:	b29a      	uxth	r2, r3
    ebd4:	4b10      	ldr	r3, [pc, #64]	; (ec18 <tc_callback_to_toggle_led+0x5bc>)
    ebd6:	801a      	strh	r2, [r3, #0]
	}		
#endif		
}
    ebd8:	46bd      	mov	sp, r7
    ebda:	b002      	add	sp, #8
    ebdc:	bd80      	pop	{r7, pc}
    ebde:	46c0      	nop			; (mov r8, r8)
    ebe0:	20003690 	.word	0x20003690
    ebe4:	0000d92d 	.word	0x0000d92d
    ebe8:	20003688 	.word	0x20003688
    ebec:	20002ea2 	.word	0x20002ea2
    ebf0:	2000365e 	.word	0x2000365e
    ebf4:	20002ec8 	.word	0x20002ec8
    ebf8:	000172f0 	.word	0x000172f0
    ebfc:	200036c4 	.word	0x200036c4
    ec00:	2000366c 	.word	0x2000366c
    ec04:	20002e9c 	.word	0x20002e9c
    ec08:	20003000 	.word	0x20003000
    ec0c:	20002fec 	.word	0x20002fec
    ec10:	20003668 	.word	0x20003668
    ec14:	20003686 	.word	0x20003686
    ec18:	20002e9e 	.word	0x20002e9e

0000ec1c <configure_tc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc(void)
{
    ec1c:	b580      	push	{r7, lr}
    ec1e:	b08e      	sub	sp, #56	; 0x38
    ec20:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
 
	tc_get_config_defaults(&config_tc);
    ec22:	1d3b      	adds	r3, r7, #4
    ec24:	1c18      	adds	r0, r3, #0
    ec26:	4b0f      	ldr	r3, [pc, #60]	; (ec64 <configure_tc+0x48>)
    ec28:	4798      	blx	r3
 
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    ec2a:	1d3b      	adds	r3, r7, #4
    ec2c:	2204      	movs	r2, #4
    ec2e:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
    ec30:	1d3b      	adds	r3, r7, #4
    ec32:	2201      	movs	r2, #1
    ec34:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    ec36:	1d3b      	adds	r3, r7, #4
    ec38:	22e0      	movs	r2, #224	; 0xe0
    ec3a:	00d2      	lsls	r2, r2, #3
    ec3c:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 8;  //9;
    ec3e:	1d3a      	adds	r2, r7, #4
    ec40:	2329      	movs	r3, #41	; 0x29
    ec42:	2108      	movs	r1, #8
    ec44:	54d1      	strb	r1, [r2, r3]
//	config_tc.counter_16_bit.value = 200;
//	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
//	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	 
	tc_init(&tc_instance, TC3, &config_tc);
    ec46:	4908      	ldr	r1, [pc, #32]	; (ec68 <configure_tc+0x4c>)
    ec48:	4a08      	ldr	r2, [pc, #32]	; (ec6c <configure_tc+0x50>)
    ec4a:	1d3b      	adds	r3, r7, #4
    ec4c:	1c08      	adds	r0, r1, #0
    ec4e:	1c11      	adds	r1, r2, #0
    ec50:	1c1a      	adds	r2, r3, #0
    ec52:	4b07      	ldr	r3, [pc, #28]	; (ec70 <configure_tc+0x54>)
    ec54:	4798      	blx	r3
	tc_enable(&tc_instance);
    ec56:	4b04      	ldr	r3, [pc, #16]	; (ec68 <configure_tc+0x4c>)
    ec58:	1c18      	adds	r0, r3, #0
    ec5a:	4b06      	ldr	r3, [pc, #24]	; (ec74 <configure_tc+0x58>)
    ec5c:	4798      	blx	r3
}
    ec5e:	46bd      	mov	sp, r7
    ec60:	b00e      	add	sp, #56	; 0x38
    ec62:	bd80      	pop	{r7, pc}
    ec64:	0000d9a9 	.word	0x0000d9a9
    ec68:	200036a0 	.word	0x200036a0
    ec6c:	42002c00 	.word	0x42002c00
    ec70:	000052d1 	.word	0x000052d1
    ec74:	0000da31 	.word	0x0000da31

0000ec78 <configure_tc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc_callbacks(void)
{
    ec78:	b580      	push	{r7, lr}
    ec7a:	af00      	add	r7, sp, #0
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
    ec7c:	4a06      	ldr	r2, [pc, #24]	; (ec98 <configure_tc_callbacks+0x20>)
    ec7e:	4b07      	ldr	r3, [pc, #28]	; (ec9c <configure_tc_callbacks+0x24>)
    ec80:	1c10      	adds	r0, r2, #0
    ec82:	1c19      	adds	r1, r3, #0
    ec84:	2200      	movs	r2, #0
    ec86:	4b06      	ldr	r3, [pc, #24]	; (eca0 <configure_tc_callbacks+0x28>)
    ec88:	4798      	blx	r3
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    ec8a:	4b03      	ldr	r3, [pc, #12]	; (ec98 <configure_tc_callbacks+0x20>)
    ec8c:	1c18      	adds	r0, r3, #0
    ec8e:	2100      	movs	r1, #0
    ec90:	4b04      	ldr	r3, [pc, #16]	; (eca4 <configure_tc_callbacks+0x2c>)
    ec92:	4798      	blx	r3
}
    ec94:	46bd      	mov	sp, r7
    ec96:	bd80      	pop	{r7, pc}
    ec98:	200036a0 	.word	0x200036a0
    ec9c:	0000e65d 	.word	0x0000e65d
    eca0:	00005755 	.word	0x00005755
    eca4:	0000da89 	.word	0x0000da89

0000eca8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    eca8:	b580      	push	{r7, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	af00      	add	r7, sp, #0
    ecae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	2200      	movs	r2, #0
    ecb4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    ecb6:	687b      	ldr	r3, [r7, #4]
    ecb8:	2200      	movs	r2, #0
    ecba:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    ecbc:	687b      	ldr	r3, [r7, #4]
    ecbe:	2201      	movs	r2, #1
    ecc0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    ecc2:	687b      	ldr	r3, [r7, #4]
    ecc4:	2201      	movs	r2, #1
    ecc6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    ecc8:	687b      	ldr	r3, [r7, #4]
    ecca:	2200      	movs	r2, #0
    eccc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    ecce:	687b      	ldr	r3, [r7, #4]
    ecd0:	2202      	movs	r2, #2
    ecd2:	72da      	strb	r2, [r3, #11]
}
    ecd4:	46bd      	mov	sp, r7
    ecd6:	b002      	add	sp, #8
    ecd8:	bd80      	pop	{r7, pc}
    ecda:	46c0      	nop			; (mov r8, r8)

0000ecdc <SX1272FskInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272FskInit( void )
{
    ecdc:	b580      	push	{r7, lr}
    ecde:	af00      	add	r7, sp, #0
    RFState = RF_STATE_IDLE;
    ece0:	4b77      	ldr	r3, [pc, #476]	; (eec0 <SX1272FskInit+0x1e4>)
    ece2:	2200      	movs	r2, #0
    ece4:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio 
	//------------------------
    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    ece6:	4b77      	ldr	r3, [pc, #476]	; (eec4 <SX1272FskInit+0x1e8>)
    ece8:	2001      	movs	r0, #1
    ecea:	1c19      	adds	r1, r3, #0
    ecec:	226f      	movs	r2, #111	; 0x6f
    ecee:	4b76      	ldr	r3, [pc, #472]	; (eec8 <SX1272FskInit+0x1ec>)
    ecf0:	4798      	blx	r3
//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );	 
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    ecf2:	4b74      	ldr	r3, [pc, #464]	; (eec4 <SX1272FskInit+0x1e8>)
    ecf4:	2001      	movs	r0, #1
    ecf6:	1c19      	adds	r1, r3, #0
    ecf8:	226f      	movs	r2, #111	; 0x6f
    ecfa:	4b73      	ldr	r3, [pc, #460]	; (eec8 <SX1272FskInit+0x1ec>)
    ecfc:	4798      	blx	r3
	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
    ecfe:	2000      	movs	r0, #0
    ed00:	4b72      	ldr	r3, [pc, #456]	; (eecc <SX1272FskInit+0x1f0>)
    ed02:	4798      	blx	r3
    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
    ed04:	4b72      	ldr	r3, [pc, #456]	; (eed0 <SX1272FskInit+0x1f4>)
    ed06:	681a      	ldr	r2, [r3, #0]
    ed08:	4b71      	ldr	r3, [pc, #452]	; (eed0 <SX1272FskInit+0x1f4>)
    ed0a:	681b      	ldr	r3, [r3, #0]
    ed0c:	7859      	ldrb	r1, [r3, #1]
    ed0e:	237f      	movs	r3, #127	; 0x7f
    ed10:	400b      	ands	r3, r1
    ed12:	b2db      	uxtb	r3, r3
    ed14:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );    
    ed16:	4b6e      	ldr	r3, [pc, #440]	; (eed0 <SX1272FskInit+0x1f4>)
    ed18:	681b      	ldr	r3, [r3, #0]
    ed1a:	785b      	ldrb	r3, [r3, #1]
    ed1c:	2001      	movs	r0, #1
    ed1e:	1c19      	adds	r1, r3, #0
    ed20:	4b6c      	ldr	r3, [pc, #432]	; (eed4 <SX1272FskInit+0x1f8>)
    ed22:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
    ed24:	4b67      	ldr	r3, [pc, #412]	; (eec4 <SX1272FskInit+0x1e8>)
    ed26:	2001      	movs	r0, #1
    ed28:	1c19      	adds	r1, r3, #0
    ed2a:	226f      	movs	r2, #111	; 0x6f
    ed2c:	4b66      	ldr	r3, [pc, #408]	; (eec8 <SX1272FskInit+0x1ec>)
    ed2e:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register 
	// structure with the value of our setup
	//--------------------------------------
    SX1272->RegPaConfig = ( SX1272->RegPaConfig & ~RF_PACONFIG_PASELECT_PABOOST ) | RF_PACONFIG_PASELECT_PABOOST;
    ed30:	4b67      	ldr	r3, [pc, #412]	; (eed0 <SX1272FskInit+0x1f4>)
    ed32:	681a      	ldr	r2, [r3, #0]
    ed34:	4b66      	ldr	r3, [pc, #408]	; (eed0 <SX1272FskInit+0x1f4>)
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	7a5b      	ldrb	r3, [r3, #9]
    ed3a:	2180      	movs	r1, #128	; 0x80
    ed3c:	4249      	negs	r1, r1
    ed3e:	430b      	orrs	r3, r1
    ed40:	b2db      	uxtb	r3, r3
    ed42:	7253      	strb	r3, [r2, #9]
    SX1272->RegLna = RF_LNA_GAIN_G1 | RF_LNA_BOOST_ON;
    ed44:	4b62      	ldr	r3, [pc, #392]	; (eed0 <SX1272FskInit+0x1f4>)
    ed46:	681b      	ldr	r3, [r3, #0]
    ed48:	2223      	movs	r2, #35	; 0x23
    ed4a:	731a      	strb	r2, [r3, #12]

    if( FskSettings.AfcOn == true )
    ed4c:	4b62      	ldr	r3, [pc, #392]	; (eed8 <SX1272FskInit+0x1fc>)
    ed4e:	7e5b      	ldrb	r3, [r3, #25]
    ed50:	2b00      	cmp	r3, #0
    ed52:	d004      	beq.n	ed5e <SX1272FskInit+0x82>
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_ON |
    ed54:	4b5e      	ldr	r3, [pc, #376]	; (eed0 <SX1272FskInit+0x1f4>)
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	221e      	movs	r2, #30
    ed5a:	735a      	strb	r2, [r3, #13]
    ed5c:	e003      	b.n	ed66 <SX1272FskInit+0x8a>
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }
    else
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_OFF |
    ed5e:	4b5c      	ldr	r3, [pc, #368]	; (eed0 <SX1272FskInit+0x1f4>)
    ed60:	681b      	ldr	r3, [r3, #0]
    ed62:	220e      	movs	r2, #14
    ed64:	735a      	strb	r2, [r3, #13]
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }

    SX1272->RegPreambleLsb = 8;
    ed66:	4b5a      	ldr	r3, [pc, #360]	; (eed0 <SX1272FskInit+0x1f4>)
    ed68:	681a      	ldr	r2, [r3, #0]
    ed6a:	2326      	movs	r3, #38	; 0x26
    ed6c:	2108      	movs	r1, #8
    ed6e:	54d1      	strb	r1, [r2, r3]
    
    SX1272->RegPreambleDetect = RF_PREAMBLEDETECT_DETECTOR_ON | RF_PREAMBLEDETECT_DETECTORSIZE_2 |
    ed70:	4b57      	ldr	r3, [pc, #348]	; (eed0 <SX1272FskInit+0x1f4>)
    ed72:	681b      	ldr	r3, [r3, #0]
    ed74:	22aa      	movs	r2, #170	; 0xaa
    ed76:	77da      	strb	r2, [r3, #31]
                                RF_PREAMBLEDETECT_DETECTORTOL_10;
    
    SX1272->RegRssiThresh = 0xFF;
    ed78:	4b55      	ldr	r3, [pc, #340]	; (eed0 <SX1272FskInit+0x1f4>)
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	22ff      	movs	r2, #255	; 0xff
    ed7e:	741a      	strb	r2, [r3, #16]

    SX1272->RegSyncConfig = RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON | RF_SYNCCONFIG_PREAMBLEPOLARITY_AA |
    ed80:	4b53      	ldr	r3, [pc, #332]	; (eed0 <SX1272FskInit+0x1f4>)
    ed82:	681a      	ldr	r2, [r3, #0]
    ed84:	2327      	movs	r3, #39	; 0x27
    ed86:	2193      	movs	r1, #147	; 0x93
    ed88:	54d1      	strb	r1, [r2, r3]
                            RF_SYNCCONFIG_SYNC_ON | RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO |
                            RF_SYNCCONFIG_SYNCSIZE_4;

    SX1272->RegSyncValue1 = 0x69;
    ed8a:	4b51      	ldr	r3, [pc, #324]	; (eed0 <SX1272FskInit+0x1f4>)
    ed8c:	681a      	ldr	r2, [r3, #0]
    ed8e:	2328      	movs	r3, #40	; 0x28
    ed90:	2169      	movs	r1, #105	; 0x69
    ed92:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue2 = 0x81;
    ed94:	4b4e      	ldr	r3, [pc, #312]	; (eed0 <SX1272FskInit+0x1f4>)
    ed96:	681a      	ldr	r2, [r3, #0]
    ed98:	2329      	movs	r3, #41	; 0x29
    ed9a:	2181      	movs	r1, #129	; 0x81
    ed9c:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue3 = 0x7E;
    ed9e:	4b4c      	ldr	r3, [pc, #304]	; (eed0 <SX1272FskInit+0x1f4>)
    eda0:	681a      	ldr	r2, [r3, #0]
    eda2:	232a      	movs	r3, #42	; 0x2a
    eda4:	217e      	movs	r1, #126	; 0x7e
    eda6:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue4 = 0x96;
    eda8:	4b49      	ldr	r3, [pc, #292]	; (eed0 <SX1272FskInit+0x1f4>)
    edaa:	681a      	ldr	r2, [r3, #0]
    edac:	232b      	movs	r3, #43	; 0x2b
    edae:	2196      	movs	r1, #150	; 0x96
    edb0:	54d1      	strb	r1, [r2, r3]

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    edb2:	4b47      	ldr	r3, [pc, #284]	; (eed0 <SX1272FskInit+0x1f4>)
    edb4:	681a      	ldr	r2, [r3, #0]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
    edb6:	4b48      	ldr	r3, [pc, #288]	; (eed8 <SX1272FskInit+0x1fc>)
    edb8:	7e1b      	ldrb	r3, [r3, #24]
    edba:	011b      	lsls	r3, r3, #4
    SX1272->RegSyncValue1 = 0x69;
    SX1272->RegSyncValue2 = 0x81;
    SX1272->RegSyncValue3 = 0x7E;
    SX1272->RegSyncValue4 = 0x96;

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    edbc:	b2db      	uxtb	r3, r3
    edbe:	2180      	movs	r1, #128	; 0x80
    edc0:	4249      	negs	r1, r1
    edc2:	430b      	orrs	r3, r1
    edc4:	b2db      	uxtb	r3, r3
    edc6:	b2d9      	uxtb	r1, r3
    edc8:	2330      	movs	r3, #48	; 0x30
    edca:	54d1      	strb	r1, [r2, r3]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
                               RF_PACKETCONFIG1_ADDRSFILTERING_OFF | RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT;
    SX1272FskGetPacketCrcOn( ); 
    edcc:	4b43      	ldr	r3, [pc, #268]	; (eedc <SX1272FskInit+0x200>)
    edce:	4798      	blx	r3

    SX1272->RegPayloadLength = FskSettings.PayloadLength;
    edd0:	4b3f      	ldr	r3, [pc, #252]	; (eed0 <SX1272FskInit+0x1f4>)
    edd2:	681a      	ldr	r2, [r3, #0]
    edd4:	4b40      	ldr	r3, [pc, #256]	; (eed8 <SX1272FskInit+0x1fc>)
    edd6:	7e99      	ldrb	r1, [r3, #26]
    edd8:	2332      	movs	r3, #50	; 0x32
    edda:	54d1      	strb	r1, [r2, r3]
	//------------------------------------------------------
    // we can now update the registers with our configuration
    SX1272WriteBuffer( REG_OPMODE, SX1272Regs + 1, 0x70 - 1 );
    eddc:	4b39      	ldr	r3, [pc, #228]	; (eec4 <SX1272FskInit+0x1e8>)
    edde:	2001      	movs	r0, #1
    ede0:	1c19      	adds	r1, r3, #0
    ede2:	226f      	movs	r2, #111	; 0x6f
    ede4:	4b3e      	ldr	r3, [pc, #248]	; (eee0 <SX1272FskInit+0x204>)
    ede6:	4798      	blx	r3
	//-------------------------------------
    // then we need to set the RF settings 
    SX1272FskSetRFFrequency( FskSettings.RFFrequency );
    ede8:	4b3b      	ldr	r3, [pc, #236]	; (eed8 <SX1272FskInit+0x1fc>)
    edea:	681b      	ldr	r3, [r3, #0]
    edec:	1c18      	adds	r0, r3, #0
    edee:	4b3d      	ldr	r3, [pc, #244]	; (eee4 <SX1272FskInit+0x208>)
    edf0:	4798      	blx	r3
    SX1272FskSetBitrate( FskSettings.Bitrate );
    edf2:	4b39      	ldr	r3, [pc, #228]	; (eed8 <SX1272FskInit+0x1fc>)
    edf4:	685b      	ldr	r3, [r3, #4]
    edf6:	1c18      	adds	r0, r3, #0
    edf8:	4b3b      	ldr	r3, [pc, #236]	; (eee8 <SX1272FskInit+0x20c>)
    edfa:	4798      	blx	r3
    SX1272FskSetFdev( FskSettings.Fdev );
    edfc:	4b36      	ldr	r3, [pc, #216]	; (eed8 <SX1272FskInit+0x1fc>)
    edfe:	689b      	ldr	r3, [r3, #8]
    ee00:	1c18      	adds	r0, r3, #0
    ee02:	4b3a      	ldr	r3, [pc, #232]	; (eeec <SX1272FskInit+0x210>)
    ee04:	4798      	blx	r3
    SX1272FskSetPa20dBm( true );
    ee06:	2001      	movs	r0, #1
    ee08:	4b39      	ldr	r3, [pc, #228]	; (eef0 <SX1272FskInit+0x214>)
    ee0a:	4798      	blx	r3
    SX1272FskSetRFPower( FskSettings.Power );
    ee0c:	4b32      	ldr	r3, [pc, #200]	; (eed8 <SX1272FskInit+0x1fc>)
    ee0e:	7b1b      	ldrb	r3, [r3, #12]
    ee10:	b25b      	sxtb	r3, r3
    ee12:	1c18      	adds	r0, r3, #0
    ee14:	4b37      	ldr	r3, [pc, #220]	; (eef4 <SX1272FskInit+0x218>)
    ee16:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegRxBw, 0, FskSettings.RxBw );
    ee18:	4b2d      	ldr	r3, [pc, #180]	; (eed0 <SX1272FskInit+0x1f4>)
    ee1a:	681b      	ldr	r3, [r3, #0]
    ee1c:	1c1a      	adds	r2, r3, #0
    ee1e:	3212      	adds	r2, #18
    ee20:	4b2d      	ldr	r3, [pc, #180]	; (eed8 <SX1272FskInit+0x1fc>)
    ee22:	691b      	ldr	r3, [r3, #16]
    ee24:	1c10      	adds	r0, r2, #0
    ee26:	2100      	movs	r1, #0
    ee28:	1c1a      	adds	r2, r3, #0
    ee2a:	4b33      	ldr	r3, [pc, #204]	; (eef8 <SX1272FskInit+0x21c>)
    ee2c:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegAfcBw, 0, FskSettings.RxBwAfc );
    ee2e:	4b28      	ldr	r3, [pc, #160]	; (eed0 <SX1272FskInit+0x1f4>)
    ee30:	681b      	ldr	r3, [r3, #0]
    ee32:	1c1a      	adds	r2, r3, #0
    ee34:	3213      	adds	r2, #19
    ee36:	4b28      	ldr	r3, [pc, #160]	; (eed8 <SX1272FskInit+0x1fc>)
    ee38:	695b      	ldr	r3, [r3, #20]
    ee3a:	1c10      	adds	r0, r2, #0
    ee3c:	2100      	movs	r1, #0
    ee3e:	1c1a      	adds	r2, r3, #0
    ee40:	4b2d      	ldr	r3, [pc, #180]	; (eef8 <SX1272FskInit+0x21c>)
    ee42:	4798      	blx	r3
    SX1272FskSetRssiOffset( -6 );
    ee44:	2306      	movs	r3, #6
    ee46:	425b      	negs	r3, r3
    ee48:	1c18      	adds	r0, r3, #0
    ee4a:	4b2c      	ldr	r3, [pc, #176]	; (eefc <SX1272FskInit+0x220>)
    ee4c:	4798      	blx	r3
	SX1272->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | 0x18; // 24 bytes of data
    ee4e:	4b20      	ldr	r3, [pc, #128]	; (eed0 <SX1272FskInit+0x1f4>)
    ee50:	681a      	ldr	r2, [r3, #0]
    ee52:	2335      	movs	r3, #53	; 0x35
    ee54:	2198      	movs	r1, #152	; 0x98
    ee56:	54d1      	strb	r1, [r2, r3]
	SX1272Write( REG_FIFOTHRESH, SX1272->RegFifoThresh );	
    ee58:	4b1d      	ldr	r3, [pc, #116]	; (eed0 <SX1272FskInit+0x1f4>)
    ee5a:	681a      	ldr	r2, [r3, #0]
    ee5c:	2335      	movs	r3, #53	; 0x35
    ee5e:	5cd3      	ldrb	r3, [r2, r3]
    ee60:	2035      	movs	r0, #53	; 0x35
    ee62:	1c19      	adds	r1, r3, #0
    ee64:	4b1b      	ldr	r3, [pc, #108]	; (eed4 <SX1272FskInit+0x1f8>)
    ee66:	4798      	blx	r3

	if (setCW != 0)
    ee68:	4b25      	ldr	r3, [pc, #148]	; (ef00 <SX1272FskInit+0x224>)
    ee6a:	781b      	ldrb	r3, [r3, #0]
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	d002      	beq.n	ee76 <SX1272FskInit+0x19a>
	{
		SX1272FskSetPacketConfig2(1);  //if non-zero, continuous
    ee70:	2001      	movs	r0, #1
    ee72:	4b24      	ldr	r3, [pc, #144]	; (ef04 <SX1272FskInit+0x228>)
    ee74:	4798      	blx	r3
	}

	SX1272FskSetOpMode( RF_OPMODE_STANDBY );
    ee76:	2001      	movs	r0, #1
    ee78:	4b14      	ldr	r3, [pc, #80]	; (eecc <SX1272FskInit+0x1f0>)
    ee7a:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );	
    ee7c:	4b11      	ldr	r3, [pc, #68]	; (eec4 <SX1272FskInit+0x1e8>)
    ee7e:	2001      	movs	r0, #1
    ee80:	1c19      	adds	r1, r3, #0
    ee82:	226f      	movs	r2, #111	; 0x6f
    ee84:	4b10      	ldr	r3, [pc, #64]	; (eec8 <SX1272FskInit+0x1ec>)
    ee86:	4798      	blx	r3

 
	
	if (setCW != 0)
    ee88:	4b1d      	ldr	r3, [pc, #116]	; (ef00 <SX1272FskInit+0x224>)
    ee8a:	781b      	ldrb	r3, [r3, #0]
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d014      	beq.n	eeba <SX1272FskInit+0x1de>
	{
//		SX1272FskSetOpMode(RF_OPMODE_TRANSMITTER);
	//------------------
	// turn on transmitter
		SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
    ee90:	4b0f      	ldr	r3, [pc, #60]	; (eed0 <SX1272FskInit+0x1f4>)
    ee92:	681a      	ldr	r2, [r3, #0]
    ee94:	4b0e      	ldr	r3, [pc, #56]	; (eed0 <SX1272FskInit+0x1f4>)
    ee96:	681b      	ldr	r3, [r3, #0]
    ee98:	785b      	ldrb	r3, [r3, #1]
    ee9a:	b2db      	uxtb	r3, r3
    ee9c:	2107      	movs	r1, #7
    ee9e:	438b      	bics	r3, r1
    eea0:	b2db      	uxtb	r3, r3
    eea2:	2103      	movs	r1, #3
    eea4:	430b      	orrs	r3, r1
    eea6:	b2db      	uxtb	r3, r3
    eea8:	b2db      	uxtb	r3, r3
    eeaa:	7053      	strb	r3, [r2, #1]
		SX1272Write( REG_OPMODE, SX1272->RegOpMode );    		
    eeac:	4b08      	ldr	r3, [pc, #32]	; (eed0 <SX1272FskInit+0x1f4>)
    eeae:	681b      	ldr	r3, [r3, #0]
    eeb0:	785b      	ldrb	r3, [r3, #1]
    eeb2:	2001      	movs	r0, #1
    eeb4:	1c19      	adds	r1, r3, #0
    eeb6:	4b07      	ldr	r3, [pc, #28]	; (eed4 <SX1272FskInit+0x1f8>)
    eeb8:	4798      	blx	r3
	} 
}
    eeba:	46bd      	mov	sp, r7
    eebc:	bd80      	pop	{r7, pc}
    eebe:	46c0      	nop			; (mov r8, r8)
    eec0:	200004dc 	.word	0x200004dc
    eec4:	200038d1 	.word	0x200038d1
    eec8:	0001098d 	.word	0x0001098d
    eecc:	0000ef09 	.word	0x0000ef09
    eed0:	200036c8 	.word	0x200036c8
    eed4:	000108e5 	.word	0x000108e5
    eed8:	2000000c 	.word	0x2000000c
    eedc:	0000f96d 	.word	0x0000f96d
    eee0:	00010955 	.word	0x00010955
    eee4:	0000f3f1 	.word	0x0000f3f1
    eee8:	0000f481 	.word	0x0000f481
    eeec:	0000f509 	.word	0x0000f509
    eef0:	0000f9b1 	.word	0x0000f9b1
    eef4:	0000f591 	.word	0x0000f591
    eef8:	0000f859 	.word	0x0000f859
    eefc:	0000fa0d 	.word	0x0000fa0d
    ef00:	2000365c 	.word	0x2000365c
    ef04:	0000f3b5 	.word	0x0000f3b5

0000ef08 <SX1272FskSetOpMode>:

void SX1272FskSetOpMode( uint8_t opMode )
{
    ef08:	b580      	push	{r7, lr}
    ef0a:	b082      	sub	sp, #8
    ef0c:	af00      	add	r7, sp, #0
    ef0e:	1c02      	adds	r2, r0, #0
    ef10:	1dfb      	adds	r3, r7, #7
    ef12:	701a      	strb	r2, [r3, #0]
  
        SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | opMode;
    ef14:	4b0c      	ldr	r3, [pc, #48]	; (ef48 <SX1272FskSetOpMode+0x40>)
    ef16:	681a      	ldr	r2, [r3, #0]
    ef18:	4b0b      	ldr	r3, [pc, #44]	; (ef48 <SX1272FskSetOpMode+0x40>)
    ef1a:	681b      	ldr	r3, [r3, #0]
    ef1c:	785b      	ldrb	r3, [r3, #1]
    ef1e:	b2db      	uxtb	r3, r3
    ef20:	2107      	movs	r1, #7
    ef22:	438b      	bics	r3, r1
    ef24:	b2d9      	uxtb	r1, r3
    ef26:	1dfb      	adds	r3, r7, #7
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	430b      	orrs	r3, r1
    ef2c:	b2db      	uxtb	r3, r3
    ef2e:	b2db      	uxtb	r3, r3
    ef30:	7053      	strb	r3, [r2, #1]

        SX1272Write( REG_OPMODE, SX1272->RegOpMode );        
    ef32:	4b05      	ldr	r3, [pc, #20]	; (ef48 <SX1272FskSetOpMode+0x40>)
    ef34:	681b      	ldr	r3, [r3, #0]
    ef36:	785b      	ldrb	r3, [r3, #1]
    ef38:	2001      	movs	r0, #1
    ef3a:	1c19      	adds	r1, r3, #0
    ef3c:	4b03      	ldr	r3, [pc, #12]	; (ef4c <SX1272FskSetOpMode+0x44>)
    ef3e:	4798      	blx	r3
}
    ef40:	46bd      	mov	sp, r7
    ef42:	b002      	add	sp, #8
    ef44:	bd80      	pop	{r7, pc}
    ef46:	46c0      	nop			; (mov r8, r8)
    ef48:	200036c8 	.word	0x200036c8
    ef4c:	000108e5 	.word	0x000108e5

0000ef50 <configure_extintFSK_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_channel(void)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b084      	sub	sp, #16
    ef54:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    ef56:	1d3b      	adds	r3, r7, #4
    ef58:	1c18      	adds	r0, r3, #0
    ef5a:	4b0b      	ldr	r3, [pc, #44]	; (ef88 <configure_extintFSK_channel+0x38>)
    ef5c:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
    ef5e:	1d3b      	adds	r3, r7, #4
    ef60:	2229      	movs	r2, #41	; 0x29
    ef62:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
    ef64:	1d3b      	adds	r3, r7, #4
    ef66:	2200      	movs	r2, #0
    ef68:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    ef6a:	1d3b      	adds	r3, r7, #4
    ef6c:	2201      	movs	r2, #1
    ef6e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
    ef70:	1d3b      	adds	r3, r7, #4
    ef72:	2201      	movs	r2, #1
    ef74:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
    ef76:	1d3b      	adds	r3, r7, #4
    ef78:	2009      	movs	r0, #9
    ef7a:	1c19      	adds	r1, r3, #0
    ef7c:	4b03      	ldr	r3, [pc, #12]	; (ef8c <configure_extintFSK_channel+0x3c>)
    ef7e:	4798      	blx	r3
}
    ef80:	46bd      	mov	sp, r7
    ef82:	b004      	add	sp, #16
    ef84:	bd80      	pop	{r7, pc}
    ef86:	46c0      	nop			; (mov r8, r8)
    ef88:	0000eca9 	.word	0x0000eca9
    ef8c:	0000406d 	.word	0x0000406d

0000ef90 <configure_extintFSK_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_callbacks(void)
{
    ef90:	b580      	push	{r7, lr}
    ef92:	af00      	add	r7, sp, #0
	extint_register_callback(extintFSK_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
    ef94:	4b05      	ldr	r3, [pc, #20]	; (efac <configure_extintFSK_callbacks+0x1c>)
    ef96:	1c18      	adds	r0, r3, #0
    ef98:	2109      	movs	r1, #9
    ef9a:	2200      	movs	r2, #0
    ef9c:	4b04      	ldr	r3, [pc, #16]	; (efb0 <configure_extintFSK_callbacks+0x20>)
    ef9e:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
    efa0:	2009      	movs	r0, #9
    efa2:	2100      	movs	r1, #0
    efa4:	4b03      	ldr	r3, [pc, #12]	; (efb4 <configure_extintFSK_callbacks+0x24>)
    efa6:	4798      	blx	r3
}
    efa8:	46bd      	mov	sp, r7
    efaa:	bd80      	pop	{r7, pc}
    efac:	0000efb9 	.word	0x0000efb9
    efb0:	00004239 	.word	0x00004239
    efb4:	00004295 	.word	0x00004295

0000efb8 <extintFSK_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintFSK_detection_callback(void)
{
    efb8:	b580      	push	{r7, lr}
    efba:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFFSK;
    efbc:	4b07      	ldr	r3, [pc, #28]	; (efdc <extintFSK_detection_callback+0x24>)
    efbe:	681b      	ldr	r3, [r3, #0]
    efc0:	2280      	movs	r2, #128	; 0x80
    efc2:	0092      	lsls	r2, r2, #2
    efc4:	431a      	orrs	r2, r3
    efc6:	4b05      	ldr	r3, [pc, #20]	; (efdc <extintFSK_detection_callback+0x24>)
    efc8:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFLORA;
    efca:	4b04      	ldr	r3, [pc, #16]	; (efdc <extintFSK_detection_callback+0x24>)
    efcc:	681b      	ldr	r3, [r3, #0]
    efce:	2280      	movs	r2, #128	; 0x80
    efd0:	00d2      	lsls	r2, r2, #3
    efd2:	431a      	orrs	r2, r3
    efd4:	4b01      	ldr	r3, [pc, #4]	; (efdc <extintFSK_detection_callback+0x24>)
    efd6:	601a      	str	r2, [r3, #0]
}
    efd8:	46bd      	mov	sp, r7
    efda:	bd80      	pop	{r7, pc}
    efdc:	20003668 	.word	0x20003668

0000efe0 <AppFskTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskTask(void)
{
    efe0:	b580      	push	{r7, lr}
    efe2:	af00      	add	r7, sp, #0
	if ((setCW == 0)&&(whichRadio == WHICHRADIO_FSK))
    efe4:	4b47      	ldr	r3, [pc, #284]	; (f104 <AppFskTask+0x124>)
    efe6:	781b      	ldrb	r3, [r3, #0]
    efe8:	2b00      	cmp	r3, #0
    efea:	d000      	beq.n	efee <AppFskTask+0xe>
    efec:	e087      	b.n	f0fe <AppFskTask+0x11e>
    efee:	4b46      	ldr	r3, [pc, #280]	; (f108 <AppFskTask+0x128>)
    eff0:	781b      	ldrb	r3, [r3, #0]
    eff2:	2b88      	cmp	r3, #136	; 0x88
    eff4:	d000      	beq.n	eff8 <AppFskTask+0x18>
    eff6:	e082      	b.n	f0fe <AppFskTask+0x11e>
	{	 
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
    eff8:	4b44      	ldr	r3, [pc, #272]	; (f10c <AppFskTask+0x12c>)
    effa:	681b      	ldr	r3, [r3, #0]
    effc:	333e      	adds	r3, #62	; 0x3e
    effe:	203e      	movs	r0, #62	; 0x3e
    f000:	1c19      	adds	r1, r3, #0
    f002:	4b43      	ldr	r3, [pc, #268]	; (f110 <AppFskTask+0x130>)
    f004:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
    f006:	4b41      	ldr	r3, [pc, #260]	; (f10c <AppFskTask+0x12c>)
    f008:	681b      	ldr	r3, [r3, #0]
    f00a:	333f      	adds	r3, #63	; 0x3f
    f00c:	203f      	movs	r0, #63	; 0x3f
    f00e:	1c19      	adds	r1, r3, #0
    f010:	4b3f      	ldr	r3, [pc, #252]	; (f110 <AppFskTask+0x130>)
    f012:	4798      	blx	r3
	//----------------------------
	/// see if payload ready for a receive event 
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x04)!= 0) // PayloadReady/CrcOk
    f014:	4b3d      	ldr	r3, [pc, #244]	; (f10c <AppFskTask+0x12c>)
    f016:	681a      	ldr	r2, [r3, #0]
    f018:	233f      	movs	r3, #63	; 0x3f
    f01a:	5cd3      	ldrb	r3, [r2, r3]
    f01c:	1c1a      	adds	r2, r3, #0
    f01e:	2304      	movs	r3, #4
    f020:	4013      	ands	r3, r2
    f022:	d054      	beq.n	f0ce <AppFskTask+0xee>
	{
		fskReceiveCount++;
    f024:	4b3b      	ldr	r3, [pc, #236]	; (f114 <AppFskTask+0x134>)
    f026:	881b      	ldrh	r3, [r3, #0]
    f028:	3301      	adds	r3, #1
    f02a:	b29a      	uxth	r2, r3
    f02c:	4b39      	ldr	r3, [pc, #228]	; (f114 <AppFskTask+0x134>)
    f02e:	801a      	strh	r2, [r3, #0]
		SX1272ReadFifo(RFBuffer,1);
    f030:	4b39      	ldr	r3, [pc, #228]	; (f118 <AppFskTask+0x138>)
    f032:	1c18      	adds	r0, r3, #0
    f034:	2101      	movs	r1, #1
    f036:	4b39      	ldr	r3, [pc, #228]	; (f11c <AppFskTask+0x13c>)
    f038:	4798      	blx	r3
		RxPacketSize = RFBuffer[0];				
    f03a:	4b37      	ldr	r3, [pc, #220]	; (f118 <AppFskTask+0x138>)
    f03c:	781b      	ldrb	r3, [r3, #0]
    f03e:	1c1a      	adds	r2, r3, #0
    f040:	4b37      	ldr	r3, [pc, #220]	; (f120 <AppFskTask+0x140>)
    f042:	801a      	strh	r2, [r3, #0]
//				RxPacketSize = SX1272->RegPayloadLength;	 
		SX1272ReadFifo(RFBuffer+1, RxPacketSize+1 );
    f044:	4b36      	ldr	r3, [pc, #216]	; (f120 <AppFskTask+0x140>)
    f046:	881b      	ldrh	r3, [r3, #0]
    f048:	3301      	adds	r3, #1
    f04a:	b29b      	uxth	r3, r3
    f04c:	4a35      	ldr	r2, [pc, #212]	; (f124 <AppFskTask+0x144>)
    f04e:	1c10      	adds	r0, r2, #0
    f050:	1c19      	adds	r1, r3, #0
    f052:	4b32      	ldr	r3, [pc, #200]	; (f11c <AppFskTask+0x13c>)
    f054:	4798      	blx	r3
				done = 1; 
			}
			i++;					
		}
*/		
		if (testRFBufferOffset >= MAXPACKETS2)
    f056:	4b34      	ldr	r3, [pc, #208]	; (f128 <AppFskTask+0x148>)
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	2b03      	cmp	r3, #3
    f05c:	d902      	bls.n	f064 <AppFskTask+0x84>
		{
			testRFBufferOffset = 0; 
    f05e:	4b32      	ldr	r3, [pc, #200]	; (f128 <AppFskTask+0x148>)
    f060:	2200      	movs	r2, #0
    f062:	701a      	strb	r2, [r3, #0]
		}
		testRFBuffer[testRFBufferOffset].Length = RFBuffer[0];
    f064:	4b30      	ldr	r3, [pc, #192]	; (f128 <AppFskTask+0x148>)
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	1c1a      	adds	r2, r3, #0
    f06a:	4b2b      	ldr	r3, [pc, #172]	; (f118 <AppFskTask+0x138>)
    f06c:	7818      	ldrb	r0, [r3, #0]
    f06e:	492f      	ldr	r1, [pc, #188]	; (f12c <AppFskTask+0x14c>)
    f070:	1c13      	adds	r3, r2, #0
    f072:	005b      	lsls	r3, r3, #1
    f074:	189b      	adds	r3, r3, r2
    f076:	1c02      	adds	r2, r0, #0
    f078:	545a      	strb	r2, [r3, r1]
		testRFBuffer[testRFBufferOffset].Command[0] = RFBuffer[2]; 
    f07a:	4b2b      	ldr	r3, [pc, #172]	; (f128 <AppFskTask+0x148>)
    f07c:	781b      	ldrb	r3, [r3, #0]
    f07e:	1c1a      	adds	r2, r3, #0
    f080:	4b25      	ldr	r3, [pc, #148]	; (f118 <AppFskTask+0x138>)
    f082:	7899      	ldrb	r1, [r3, #2]
    f084:	4829      	ldr	r0, [pc, #164]	; (f12c <AppFskTask+0x14c>)
    f086:	1c13      	adds	r3, r2, #0
    f088:	005b      	lsls	r3, r3, #1
    f08a:	189b      	adds	r3, r3, r2
    f08c:	18c3      	adds	r3, r0, r3
    f08e:	1c0a      	adds	r2, r1, #0
    f090:	705a      	strb	r2, [r3, #1]
		testRFBuffer[testRFBufferOffset].Command[1] = RFBuffer[3]; 
    f092:	4b25      	ldr	r3, [pc, #148]	; (f128 <AppFskTask+0x148>)
    f094:	781b      	ldrb	r3, [r3, #0]
    f096:	1c1a      	adds	r2, r3, #0
    f098:	4b1f      	ldr	r3, [pc, #124]	; (f118 <AppFskTask+0x138>)
    f09a:	78d9      	ldrb	r1, [r3, #3]
    f09c:	4823      	ldr	r0, [pc, #140]	; (f12c <AppFskTask+0x14c>)
    f09e:	1c13      	adds	r3, r2, #0
    f0a0:	005b      	lsls	r3, r3, #1
    f0a2:	189b      	adds	r3, r3, r2
    f0a4:	18c3      	adds	r3, r0, r3
    f0a6:	3301      	adds	r3, #1
    f0a8:	1c0a      	adds	r2, r1, #0
    f0aa:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD		
		AppScreenFSKReadingIn(RFBuffer,testRFBufferOffset);
#endif		
		testRFBufferOffset++;	
    f0ac:	4b1e      	ldr	r3, [pc, #120]	; (f128 <AppFskTask+0x148>)
    f0ae:	781b      	ldrb	r3, [r3, #0]
    f0b0:	3301      	adds	r3, #1
    f0b2:	b2da      	uxtb	r2, r3
    f0b4:	4b1c      	ldr	r3, [pc, #112]	; (f128 <AppFskTask+0x148>)
    f0b6:	701a      	strb	r2, [r3, #0]
		if (testRFBufferOffset >= MAXPACKETS2)
    f0b8:	4b1b      	ldr	r3, [pc, #108]	; (f128 <AppFskTask+0x148>)
    f0ba:	781b      	ldrb	r3, [r3, #0]
    f0bc:	2b03      	cmp	r3, #3
    f0be:	d902      	bls.n	f0c6 <AppFskTask+0xe6>
		{
			testRFBufferOffset = 0;
    f0c0:	4b19      	ldr	r3, [pc, #100]	; (f128 <AppFskTask+0x148>)
    f0c2:	2200      	movs	r2, #0
    f0c4:	701a      	strb	r2, [r3, #0]
		}	
#if BRAKEBOARD		
		AppProtocolBrake(RFBuffer);
    f0c6:	4b14      	ldr	r3, [pc, #80]	; (f118 <AppFskTask+0x138>)
    f0c8:	1c18      	adds	r0, r3, #0
    f0ca:	4b19      	ldr	r3, [pc, #100]	; (f130 <AppFskTask+0x150>)
    f0cc:	4798      	blx	r3
#endif						
	}
	//----------------------------
	/// see if packetSent
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x08)!= 0)  
    f0ce:	4b0f      	ldr	r3, [pc, #60]	; (f10c <AppFskTask+0x12c>)
    f0d0:	681a      	ldr	r2, [r3, #0]
    f0d2:	233f      	movs	r3, #63	; 0x3f
    f0d4:	5cd3      	ldrb	r3, [r2, r3]
    f0d6:	1c1a      	adds	r2, r3, #0
    f0d8:	2308      	movs	r3, #8
    f0da:	4013      	ands	r3, r2
    f0dc:	d00f      	beq.n	f0fe <AppFskTask+0x11e>
	{
         SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
    f0de:	2005      	movs	r0, #5
    f0e0:	4b14      	ldr	r3, [pc, #80]	; (f134 <AppFskTask+0x154>)
    f0e2:	4798      	blx	r3
#if REMOTEBOARD
		commSupTimer = COMM_SUP_TIME_REMOTE;
#endif		 
		if (switchOnTransmit != 0)
    f0e4:	4b14      	ldr	r3, [pc, #80]	; (f138 <AppFskTask+0x158>)
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d008      	beq.n	f0fe <AppFskTask+0x11e>
		{
			whichRadio = switchOnTransmit; 
    f0ec:	4b12      	ldr	r3, [pc, #72]	; (f138 <AppFskTask+0x158>)
    f0ee:	781a      	ldrb	r2, [r3, #0]
    f0f0:	4b05      	ldr	r3, [pc, #20]	; (f108 <AppFskTask+0x128>)
    f0f2:	701a      	strb	r2, [r3, #0]
			CommInit();
    f0f4:	4b11      	ldr	r3, [pc, #68]	; (f13c <AppFskTask+0x15c>)
    f0f6:	4798      	blx	r3
			switchOnTransmit = 0; 
    f0f8:	4b0f      	ldr	r3, [pc, #60]	; (f138 <AppFskTask+0x158>)
    f0fa:	2200      	movs	r2, #0
    f0fc:	701a      	strb	r2, [r3, #0]
		}
	}
	}
}
    f0fe:	46bd      	mov	sp, r7
    f100:	bd80      	pop	{r7, pc}
    f102:	46c0      	nop			; (mov r8, r8)
    f104:	2000365c 	.word	0x2000365c
    f108:	2000369a 	.word	0x2000369a
    f10c:	200036c8 	.word	0x200036c8
    f110:	00010919 	.word	0x00010919
    f114:	200004e4 	.word	0x200004e4
    f118:	200036cc 	.word	0x200036cc
    f11c:	000109ed 	.word	0x000109ed
    f120:	200004de 	.word	0x200004de
    f124:	200036cd 	.word	0x200036cd
    f128:	200004f0 	.word	0x200004f0
    f12c:	20003948 	.word	0x20003948
    f130:	00009079 	.word	0x00009079
    f134:	0000ef09 	.word	0x0000ef09
    f138:	200004d1 	.word	0x200004d1
    f13c:	0000e45d 	.word	0x0000e45d

0000f140 <AppFskReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskReceiveStart(void)
{
    f140:	b580      	push	{r7, lr}
    f142:	b082      	sub	sp, #8
    f144:	af00      	add	r7, sp, #0
 
 
	//------------------------
	// set up receive.
	//------------------------
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
    f146:	4b29      	ldr	r3, [pc, #164]	; (f1ec <AppFskReceiveStart+0xac>)
    f148:	681b      	ldr	r3, [r3, #0]
    f14a:	333e      	adds	r3, #62	; 0x3e
    f14c:	203e      	movs	r0, #62	; 0x3e
    f14e:	1c19      	adds	r1, r3, #0
    f150:	4b27      	ldr	r3, [pc, #156]	; (f1f0 <AppFskReceiveStart+0xb0>)
    f152:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
    f154:	4b25      	ldr	r3, [pc, #148]	; (f1ec <AppFskReceiveStart+0xac>)
    f156:	681b      	ldr	r3, [r3, #0]
    f158:	333f      	adds	r3, #63	; 0x3f
    f15a:	203f      	movs	r0, #63	; 0x3f
    f15c:	1c19      	adds	r1, r3, #0
    f15e:	4b24      	ldr	r3, [pc, #144]	; (f1f0 <AppFskReceiveStart+0xb0>)
    f160:	4798      	blx	r3
        
    memset( RFBuffer, 0, ( size_t )RF_BUFFER_SIZE );
    f162:	4a24      	ldr	r2, [pc, #144]	; (f1f4 <AppFskReceiveStart+0xb4>)
    f164:	2380      	movs	r3, #128	; 0x80
    f166:	005b      	lsls	r3, r3, #1
    f168:	1c10      	adds	r0, r2, #0
    f16a:	2100      	movs	r1, #0
    f16c:	1c1a      	adds	r2, r3, #0
    f16e:	4b22      	ldr	r3, [pc, #136]	; (f1f8 <AppFskReceiveStart+0xb8>)
    f170:	4798      	blx	r3
	
	//--------------------------------
	// set interrupt pin to processor
    //           PayloadReady
    SX1272->RegDioMapping1 = RF_DIOMAPPING1_DIO0_00 |RF_DIOMAPPING1_DIO1_11 ;
    f172:	4b1e      	ldr	r3, [pc, #120]	; (f1ec <AppFskReceiveStart+0xac>)
    f174:	681a      	ldr	r2, [r3, #0]
    f176:	2340      	movs	r3, #64	; 0x40
    f178:	2130      	movs	r1, #48	; 0x30
    f17a:	54d1      	strb	r1, [r2, r3]
    SX1272->RegDioMapping2 = 0;
    f17c:	4b1b      	ldr	r3, [pc, #108]	; (f1ec <AppFskReceiveStart+0xac>)
    f17e:	681a      	ldr	r2, [r3, #0]
    f180:	2341      	movs	r3, #65	; 0x41
    f182:	2100      	movs	r1, #0
    f184:	54d1      	strb	r1, [r2, r3]
    SX1272WriteBuffer( REG_DIOMAPPING1, &SX1272->RegDioMapping1, 2);           	
    f186:	4b19      	ldr	r3, [pc, #100]	; (f1ec <AppFskReceiveStart+0xac>)
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	3340      	adds	r3, #64	; 0x40
    f18c:	2040      	movs	r0, #64	; 0x40
    f18e:	1c19      	adds	r1, r3, #0
    f190:	2202      	movs	r2, #2
    f192:	4b1a      	ldr	r3, [pc, #104]	; (f1fc <AppFskReceiveStart+0xbc>)
    f194:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintFSK_channel();
    f196:	4b1a      	ldr	r3, [pc, #104]	; (f200 <AppFskReceiveStart+0xc0>)
    f198:	4798      	blx	r3
	configure_extintFSK_callbacks();
    f19a:	4b1a      	ldr	r3, [pc, #104]	; (f204 <AppFskReceiveStart+0xc4>)
    f19c:	4798      	blx	r3

    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
    f19e:	2001      	movs	r0, #1
    f1a0:	4b19      	ldr	r3, [pc, #100]	; (f208 <AppFskReceiveStart+0xc8>)
    f1a2:	4798      	blx	r3
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
    f1a4:	1dfb      	adds	r3, r7, #7
    f1a6:	2200      	movs	r2, #0
    f1a8:	701a      	strb	r2, [r3, #0]
	while (done == 0)
    f1aa:	e015      	b.n	f1d8 <AppFskReceiveStart+0x98>
	{
		SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
    f1ac:	4b0f      	ldr	r3, [pc, #60]	; (f1ec <AppFskReceiveStart+0xac>)
    f1ae:	681b      	ldr	r3, [r3, #0]
    f1b0:	333e      	adds	r3, #62	; 0x3e
    f1b2:	203e      	movs	r0, #62	; 0x3e
    f1b4:	1c19      	adds	r1, r3, #0
    f1b6:	4b0e      	ldr	r3, [pc, #56]	; (f1f0 <AppFskReceiveStart+0xb0>)
    f1b8:	4798      	blx	r3
		if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
    f1ba:	4b0c      	ldr	r3, [pc, #48]	; (f1ec <AppFskReceiveStart+0xac>)
    f1bc:	681a      	ldr	r2, [r3, #0]
    f1be:	233e      	movs	r3, #62	; 0x3e
    f1c0:	5cd3      	ldrb	r3, [r2, r3]
    f1c2:	b2db      	uxtb	r3, r3
    f1c4:	1dfa      	adds	r2, r7, #7
    f1c6:	1df9      	adds	r1, r7, #7
    f1c8:	7809      	ldrb	r1, [r1, #0]
    f1ca:	7011      	strb	r1, [r2, #0]
    f1cc:	b25b      	sxtb	r3, r3
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	da02      	bge.n	f1d8 <AppFskReceiveStart+0x98>
		{
			done = 1;	
    f1d2:	1dfb      	adds	r3, r7, #7
    f1d4:	2201      	movs	r2, #1
    f1d6:	701a      	strb	r2, [r3, #0]
    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
	while (done == 0)
    f1d8:	1dfb      	adds	r3, r7, #7
    f1da:	781b      	ldrb	r3, [r3, #0]
    f1dc:	2b00      	cmp	r3, #0
    f1de:	d0e5      	beq.n	f1ac <AppFskReceiveStart+0x6c>
		{
			done = 1;	
		}				
	}
  
    SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
    f1e0:	2005      	movs	r0, #5
    f1e2:	4b09      	ldr	r3, [pc, #36]	; (f208 <AppFskReceiveStart+0xc8>)
    f1e4:	4798      	blx	r3
}
    f1e6:	46bd      	mov	sp, r7
    f1e8:	b002      	add	sp, #8
    f1ea:	bd80      	pop	{r7, pc}
    f1ec:	200036c8 	.word	0x200036c8
    f1f0:	00010919 	.word	0x00010919
    f1f4:	200036cc 	.word	0x200036cc
    f1f8:	00016d81 	.word	0x00016d81
    f1fc:	00010955 	.word	0x00010955
    f200:	0000ef51 	.word	0x0000ef51
    f204:	0000ef91 	.word	0x0000ef91
    f208:	0000ef09 	.word	0x0000ef09

0000f20c <SX1272FskTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272FskTransmit(uint8_t *txBuffer,uint8_t length)
{
    f20c:	b580      	push	{r7, lr}
    f20e:	b086      	sub	sp, #24
    f210:	af00      	add	r7, sp, #0
    f212:	6078      	str	r0, [r7, #4]
    f214:	1c0a      	adds	r2, r1, #0
    f216:	1cfb      	adds	r3, r7, #3
    f218:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,*ptr; 
    uint8_t status; 
	status = 1; 
    f21a:	1c3b      	adds	r3, r7, #0
    f21c:	330f      	adds	r3, #15
    f21e:	2201      	movs	r2, #1
    f220:	701a      	strb	r2, [r3, #0]
 		  
	fskTransmitCount++;	   
    f222:	4b5a      	ldr	r3, [pc, #360]	; (f38c <SX1272FskTransmit+0x180>)
    f224:	881b      	ldrh	r3, [r3, #0]
    f226:	3301      	adds	r3, #1
    f228:	b29a      	uxth	r2, r3
    f22a:	4b58      	ldr	r3, [pc, #352]	; (f38c <SX1272FskTransmit+0x180>)
    f22c:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_OPMODE, &SX1272->RegOpMode );   		
    f22e:	4b58      	ldr	r3, [pc, #352]	; (f390 <SX1272FskTransmit+0x184>)
    f230:	681b      	ldr	r3, [r3, #0]
    f232:	3301      	adds	r3, #1
    f234:	2001      	movs	r0, #1
    f236:	1c19      	adds	r1, r3, #0
    f238:	4b56      	ldr	r3, [pc, #344]	; (f394 <SX1272FskTransmit+0x188>)
    f23a:	4798      	blx	r3
	if ((SX1272->RegOpMode & ~RF_OPMODE_MASK)!= 0x001)
    f23c:	4b54      	ldr	r3, [pc, #336]	; (f390 <SX1272FskTransmit+0x184>)
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	785b      	ldrb	r3, [r3, #1]
    f242:	22f8      	movs	r2, #248	; 0xf8
    f244:	4393      	bics	r3, r2
    f246:	2b01      	cmp	r3, #1
    f248:	d025      	beq.n	f296 <SX1272FskTransmit+0x8a>
	{	 
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
    f24a:	2001      	movs	r0, #1
    f24c:	4b52      	ldr	r3, [pc, #328]	; (f398 <SX1272FskTransmit+0x18c>)
    f24e:	4798      	blx	r3
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
    f250:	1c3b      	adds	r3, r7, #0
    f252:	3317      	adds	r3, #23
    f254:	2200      	movs	r2, #0
    f256:	701a      	strb	r2, [r3, #0]
		while (done == 0)
    f258:	e018      	b.n	f28c <SX1272FskTransmit+0x80>
		{
			SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
    f25a:	4b4d      	ldr	r3, [pc, #308]	; (f390 <SX1272FskTransmit+0x184>)
    f25c:	681b      	ldr	r3, [r3, #0]
    f25e:	333e      	adds	r3, #62	; 0x3e
    f260:	203e      	movs	r0, #62	; 0x3e
    f262:	1c19      	adds	r1, r3, #0
    f264:	4b4b      	ldr	r3, [pc, #300]	; (f394 <SX1272FskTransmit+0x188>)
    f266:	4798      	blx	r3
			if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
    f268:	4b49      	ldr	r3, [pc, #292]	; (f390 <SX1272FskTransmit+0x184>)
    f26a:	681a      	ldr	r2, [r3, #0]
    f26c:	233e      	movs	r3, #62	; 0x3e
    f26e:	5cd3      	ldrb	r3, [r2, r3]
    f270:	b2db      	uxtb	r3, r3
    f272:	1c3a      	adds	r2, r7, #0
    f274:	3217      	adds	r2, #23
    f276:	1c39      	adds	r1, r7, #0
    f278:	3117      	adds	r1, #23
    f27a:	7809      	ldrb	r1, [r1, #0]
    f27c:	7011      	strb	r1, [r2, #0]
    f27e:	b25b      	sxtb	r3, r3
    f280:	2b00      	cmp	r3, #0
    f282:	da03      	bge.n	f28c <SX1272FskTransmit+0x80>
			{
				done = 1;	
    f284:	1c3b      	adds	r3, r7, #0
    f286:	3317      	adds	r3, #23
    f288:	2201      	movs	r2, #1
    f28a:	701a      	strb	r2, [r3, #0]
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
		while (done == 0)
    f28c:	1c3b      	adds	r3, r7, #0
    f28e:	3317      	adds	r3, #23
    f290:	781b      	ldrb	r3, [r3, #0]
    f292:	2b00      	cmp	r3, #0
    f294:	d0e1      	beq.n	f25a <SX1272FskTransmit+0x4e>
  		
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	613b      	str	r3, [r7, #16]
	RFBuffer[0] = length;
    f29a:	4b40      	ldr	r3, [pc, #256]	; (f39c <SX1272FskTransmit+0x190>)
    f29c:	1cfa      	adds	r2, r7, #3
    f29e:	7812      	ldrb	r2, [r2, #0]
    f2a0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
    f2a2:	1c3b      	adds	r3, r7, #0
    f2a4:	3316      	adds	r3, #22
    f2a6:	2200      	movs	r2, #0
    f2a8:	701a      	strb	r2, [r3, #0]
    f2aa:	e010      	b.n	f2ce <SX1272FskTransmit+0xc2>
	{
		RFBuffer[i+1] = *ptr++;
    f2ac:	1c3b      	adds	r3, r7, #0
    f2ae:	3316      	adds	r3, #22
    f2b0:	781b      	ldrb	r3, [r3, #0]
    f2b2:	1c5a      	adds	r2, r3, #1
    f2b4:	693b      	ldr	r3, [r7, #16]
    f2b6:	1c59      	adds	r1, r3, #1
    f2b8:	6139      	str	r1, [r7, #16]
    f2ba:	7819      	ldrb	r1, [r3, #0]
    f2bc:	4b37      	ldr	r3, [pc, #220]	; (f39c <SX1272FskTransmit+0x190>)
    f2be:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBuffer[0] = length;
	for (i=0;i<length;i++)
    f2c0:	1c3b      	adds	r3, r7, #0
    f2c2:	3316      	adds	r3, #22
    f2c4:	781a      	ldrb	r2, [r3, #0]
    f2c6:	1c3b      	adds	r3, r7, #0
    f2c8:	3316      	adds	r3, #22
    f2ca:	3201      	adds	r2, #1
    f2cc:	701a      	strb	r2, [r3, #0]
    f2ce:	1c3a      	adds	r2, r7, #0
    f2d0:	3216      	adds	r2, #22
    f2d2:	1cfb      	adds	r3, r7, #3
    f2d4:	7812      	ldrb	r2, [r2, #0]
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	429a      	cmp	r2, r3
    f2da:	d3e7      	bcc.n	f2ac <SX1272FskTransmit+0xa0>
	{
		RFBuffer[i+1] = *ptr++;
	}
    TxPacketSize = length; 
    f2dc:	1cfb      	adds	r3, r7, #3
    f2de:	781b      	ldrb	r3, [r3, #0]
    f2e0:	b29a      	uxth	r2, r3
    f2e2:	4b2f      	ldr	r3, [pc, #188]	; (f3a0 <SX1272FskTransmit+0x194>)
    f2e4:	801a      	strh	r2, [r3, #0]
//	SX1272WriteFifo( ( uint8_t* )&TxPacketSize, 1 );
	SX1272WriteFifo( RFBuffer, TxPacketSize+1);		
    f2e6:	4b2e      	ldr	r3, [pc, #184]	; (f3a0 <SX1272FskTransmit+0x194>)
    f2e8:	881b      	ldrh	r3, [r3, #0]
    f2ea:	3301      	adds	r3, #1
    f2ec:	b29b      	uxth	r3, r3
    f2ee:	4a2b      	ldr	r2, [pc, #172]	; (f39c <SX1272FskTransmit+0x190>)
    f2f0:	1c10      	adds	r0, r2, #0
    f2f2:	1c19      	adds	r1, r3, #0
    f2f4:	4b2b      	ldr	r3, [pc, #172]	; (f3a4 <SX1272FskTransmit+0x198>)
    f2f6:	4798      	blx	r3
	//------------------
	// turn on transmitter
	SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
    f2f8:	4b25      	ldr	r3, [pc, #148]	; (f390 <SX1272FskTransmit+0x184>)
    f2fa:	681a      	ldr	r2, [r3, #0]
    f2fc:	4b24      	ldr	r3, [pc, #144]	; (f390 <SX1272FskTransmit+0x184>)
    f2fe:	681b      	ldr	r3, [r3, #0]
    f300:	785b      	ldrb	r3, [r3, #1]
    f302:	b2db      	uxtb	r3, r3
    f304:	2107      	movs	r1, #7
    f306:	438b      	bics	r3, r1
    f308:	b2db      	uxtb	r3, r3
    f30a:	2103      	movs	r1, #3
    f30c:	430b      	orrs	r3, r1
    f30e:	b2db      	uxtb	r3, r3
    f310:	b2db      	uxtb	r3, r3
    f312:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );       		
    f314:	4b1e      	ldr	r3, [pc, #120]	; (f390 <SX1272FskTransmit+0x184>)
    f316:	681b      	ldr	r3, [r3, #0]
    f318:	785b      	ldrb	r3, [r3, #1]
    f31a:	2001      	movs	r0, #1
    f31c:	1c19      	adds	r1, r3, #0
    f31e:	4b22      	ldr	r3, [pc, #136]	; (f3a8 <SX1272FskTransmit+0x19c>)
    f320:	4798      	blx	r3
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
    f322:	1c3b      	adds	r3, r7, #0
    f324:	3317      	adds	r3, #23
    f326:	2200      	movs	r2, #0
    f328:	701a      	strb	r2, [r3, #0]
	wdog = 0x00ff; 
    f32a:	4b20      	ldr	r3, [pc, #128]	; (f3ac <SX1272FskTransmit+0x1a0>)
    f32c:	22ff      	movs	r2, #255	; 0xff
    f32e:	801a      	strh	r2, [r3, #0]
    while ((done == 0)&&(wdog>0))
    f330:	e019      	b.n	f366 <SX1272FskTransmit+0x15a>
    {
	       SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
    f332:	4b17      	ldr	r3, [pc, #92]	; (f390 <SX1272FskTransmit+0x184>)
    f334:	681b      	ldr	r3, [r3, #0]
    f336:	333e      	adds	r3, #62	; 0x3e
    f338:	203e      	movs	r0, #62	; 0x3e
    f33a:	1c19      	adds	r1, r3, #0
    f33c:	4b15      	ldr	r3, [pc, #84]	; (f394 <SX1272FskTransmit+0x188>)
    f33e:	4798      	blx	r3
	       if ((SX1272->RegIrqFlags1 & 0x20)!= 0)
    f340:	4b13      	ldr	r3, [pc, #76]	; (f390 <SX1272FskTransmit+0x184>)
    f342:	681a      	ldr	r2, [r3, #0]
    f344:	233e      	movs	r3, #62	; 0x3e
    f346:	5cd3      	ldrb	r3, [r2, r3]
    f348:	1c1a      	adds	r2, r3, #0
    f34a:	2320      	movs	r3, #32
    f34c:	4013      	ands	r3, r2
    f34e:	1c3a      	adds	r2, r7, #0
    f350:	3217      	adds	r2, #23
    f352:	1c39      	adds	r1, r7, #0
    f354:	3117      	adds	r1, #23
    f356:	7809      	ldrb	r1, [r1, #0]
    f358:	7011      	strb	r1, [r2, #0]
    f35a:	2b00      	cmp	r3, #0
    f35c:	d003      	beq.n	f366 <SX1272FskTransmit+0x15a>
	        {
		        done = 1;
    f35e:	1c3b      	adds	r3, r7, #0
    f360:	3317      	adds	r3, #23
    f362:	2201      	movs	r2, #1
    f364:	701a      	strb	r2, [r3, #0]
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
	wdog = 0x00ff; 
    while ((done == 0)&&(wdog>0))
    f366:	1c3b      	adds	r3, r7, #0
    f368:	3317      	adds	r3, #23
    f36a:	781b      	ldrb	r3, [r3, #0]
    f36c:	2b00      	cmp	r3, #0
    f36e:	d103      	bne.n	f378 <SX1272FskTransmit+0x16c>
    f370:	4b0e      	ldr	r3, [pc, #56]	; (f3ac <SX1272FskTransmit+0x1a0>)
    f372:	881b      	ldrh	r3, [r3, #0]
    f374:	2b00      	cmp	r3, #0
    f376:	d1dc      	bne.n	f332 <SX1272FskTransmit+0x126>
	        {
		        done = 1;
	        }
    }

    RFState = RF_STATE_TX_RUNNING;
    f378:	4b0d      	ldr	r3, [pc, #52]	; (f3b0 <SX1272FskTransmit+0x1a4>)
    f37a:	2209      	movs	r2, #9
    f37c:	701a      	strb	r2, [r3, #0]
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
    f37e:	1c3b      	adds	r3, r7, #0
    f380:	330f      	adds	r3, #15
    f382:	781b      	ldrb	r3, [r3, #0]
}
    f384:	1c18      	adds	r0, r3, #0
    f386:	46bd      	mov	sp, r7
    f388:	b006      	add	sp, #24
    f38a:	bd80      	pop	{r7, pc}
    f38c:	200004e2 	.word	0x200004e2
    f390:	200036c8 	.word	0x200036c8
    f394:	00010919 	.word	0x00010919
    f398:	0000ef09 	.word	0x0000ef09
    f39c:	200036cc 	.word	0x200036cc
    f3a0:	200004e0 	.word	0x200004e0
    f3a4:	000109c5 	.word	0x000109c5
    f3a8:	000108e5 	.word	0x000108e5
    f3ac:	2000368a 	.word	0x2000368a
    f3b0:	200004dc 	.word	0x200004dc

0000f3b4 <SX1272FskSetPacketConfig2>:

extern tFskSettings FskSettings;

//BETH - ADDED
void SX1272FskSetPacketConfig2(uint8_t continuous )
{
    f3b4:	b580      	push	{r7, lr}
    f3b6:	b084      	sub	sp, #16
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	1c02      	adds	r2, r0, #0
    f3bc:	1dfb      	adds	r3, r7, #7
    f3be:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = 0x40; 
    f3c0:	1c3b      	adds	r3, r7, #0
    f3c2:	330f      	adds	r3, #15
    f3c4:	2240      	movs	r2, #64	; 0x40
    f3c6:	701a      	strb	r2, [r3, #0]
	if (continuous != 0)
    f3c8:	1dfb      	adds	r3, r7, #7
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	2b00      	cmp	r3, #0
    f3ce:	d003      	beq.n	f3d8 <SX1272FskSetPacketConfig2+0x24>
	{
		temp = 0; 
    f3d0:	1c3b      	adds	r3, r7, #0
    f3d2:	330f      	adds	r3, #15
    f3d4:	2200      	movs	r2, #0
    f3d6:	701a      	strb	r2, [r3, #0]
	}
	
	SX1272Write(REG_PACKETCONFIG2, temp);
    f3d8:	1c3b      	adds	r3, r7, #0
    f3da:	330f      	adds	r3, #15
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	2031      	movs	r0, #49	; 0x31
    f3e0:	1c19      	adds	r1, r3, #0
    f3e2:	4b02      	ldr	r3, [pc, #8]	; (f3ec <SX1272FskSetPacketConfig2+0x38>)
    f3e4:	4798      	blx	r3
}
    f3e6:	46bd      	mov	sp, r7
    f3e8:	b004      	add	sp, #16
    f3ea:	bd80      	pop	{r7, pc}
    f3ec:	000108e5 	.word	0x000108e5

0000f3f0 <SX1272FskSetRFFrequency>:

void SX1272FskSetRFFrequency( uint32_t freq )
{
    f3f0:	b5b0      	push	{r4, r5, r7, lr}
    f3f2:	b082      	sub	sp, #8
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	6078      	str	r0, [r7, #4]
    FskSettings.RFFrequency = freq;
    f3f8:	4b1b      	ldr	r3, [pc, #108]	; (f468 <SX1272FskSetRFFrequency+0x78>)
    f3fa:	687a      	ldr	r2, [r7, #4]
    f3fc:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
    f3fe:	4b1b      	ldr	r3, [pc, #108]	; (f46c <SX1272FskSetRFFrequency+0x7c>)
    f400:	6878      	ldr	r0, [r7, #4]
    f402:	4798      	blx	r3
    f404:	1c03      	adds	r3, r0, #0
    f406:	1c0c      	adds	r4, r1, #0
    f408:	4d19      	ldr	r5, [pc, #100]	; (f470 <SX1272FskSetRFFrequency+0x80>)
    f40a:	1c18      	adds	r0, r3, #0
    f40c:	1c21      	adds	r1, r4, #0
    f40e:	4b15      	ldr	r3, [pc, #84]	; (f464 <SX1272FskSetRFFrequency+0x74>)
    f410:	4a13      	ldr	r2, [pc, #76]	; (f460 <SX1272FskSetRFFrequency+0x70>)
    f412:	47a8      	blx	r5
    f414:	1c03      	adds	r3, r0, #0
    f416:	1c0c      	adds	r4, r1, #0
    f418:	4a16      	ldr	r2, [pc, #88]	; (f474 <SX1272FskSetRFFrequency+0x84>)
    f41a:	1c18      	adds	r0, r3, #0
    f41c:	1c21      	adds	r1, r4, #0
    f41e:	4790      	blx	r2
    f420:	1c03      	adds	r3, r0, #0
    f422:	607b      	str	r3, [r7, #4]
    SX1272->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
    f424:	4b14      	ldr	r3, [pc, #80]	; (f478 <SX1272FskSetRFFrequency+0x88>)
    f426:	681b      	ldr	r3, [r3, #0]
    f428:	687a      	ldr	r2, [r7, #4]
    f42a:	0c12      	lsrs	r2, r2, #16
    f42c:	b2d2      	uxtb	r2, r2
    f42e:	719a      	strb	r2, [r3, #6]
    SX1272->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
    f430:	4b11      	ldr	r3, [pc, #68]	; (f478 <SX1272FskSetRFFrequency+0x88>)
    f432:	681b      	ldr	r3, [r3, #0]
    f434:	687a      	ldr	r2, [r7, #4]
    f436:	0a12      	lsrs	r2, r2, #8
    f438:	b2d2      	uxtb	r2, r2
    f43a:	71da      	strb	r2, [r3, #7]
    SX1272->RegFrfLsb = ( uint8_t )( freq & 0xFF );
    f43c:	4b0e      	ldr	r3, [pc, #56]	; (f478 <SX1272FskSetRFFrequency+0x88>)
    f43e:	681b      	ldr	r3, [r3, #0]
    f440:	687a      	ldr	r2, [r7, #4]
    f442:	b2d2      	uxtb	r2, r2
    f444:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_FRFMSB, &SX1272->RegFrfMsb, 3 );
    f446:	4b0c      	ldr	r3, [pc, #48]	; (f478 <SX1272FskSetRFFrequency+0x88>)
    f448:	681b      	ldr	r3, [r3, #0]
    f44a:	3306      	adds	r3, #6
    f44c:	2006      	movs	r0, #6
    f44e:	1c19      	adds	r1, r3, #0
    f450:	2203      	movs	r2, #3
    f452:	4b0a      	ldr	r3, [pc, #40]	; (f47c <SX1272FskSetRFFrequency+0x8c>)
    f454:	4798      	blx	r3
}
    f456:	46bd      	mov	sp, r7
    f458:	b002      	add	sp, #8
    f45a:	bdb0      	pop	{r4, r5, r7, pc}
    f45c:	46c0      	nop			; (mov r8, r8)
    f45e:	46c0      	nop			; (mov r8, r8)
    f460:	00000000 	.word	0x00000000
    f464:	404e8480 	.word	0x404e8480
    f468:	2000000c 	.word	0x2000000c
    f46c:	000164c9 	.word	0x000164c9
    f470:	00014f89 	.word	0x00014f89
    f474:	00014899 	.word	0x00014899
    f478:	200036c8 	.word	0x200036c8
    f47c:	00010955 	.word	0x00010955

0000f480 <SX1272FskSetBitrate>:
//bb    startTick = GET_TICK_COUNT( );
//bb    while( ( GET_TICK_COUNT( ) - startTick ) < TICK_RATE_MS( 8 ) );    
}

void SX1272FskSetBitrate( uint32_t bitrate )
{
    f480:	b5b0      	push	{r4, r5, r7, lr}
    f482:	b082      	sub	sp, #8
    f484:	af00      	add	r7, sp, #0
    f486:	6078      	str	r0, [r7, #4]
    FskSettings.Bitrate = bitrate;
    f488:	4b19      	ldr	r3, [pc, #100]	; (f4f0 <SX1272FskSetBitrate+0x70>)
    f48a:	687a      	ldr	r2, [r7, #4]
    f48c:	605a      	str	r2, [r3, #4]
    
    bitrate = ( uint16_t )( ( double )XTAL_FREQ / ( double )bitrate );
    f48e:	4b19      	ldr	r3, [pc, #100]	; (f4f4 <SX1272FskSetBitrate+0x74>)
    f490:	6878      	ldr	r0, [r7, #4]
    f492:	4798      	blx	r3
    f494:	1c03      	adds	r3, r0, #0
    f496:	1c0c      	adds	r4, r1, #0
    f498:	4d17      	ldr	r5, [pc, #92]	; (f4f8 <SX1272FskSetBitrate+0x78>)
    f49a:	4914      	ldr	r1, [pc, #80]	; (f4ec <SX1272FskSetBitrate+0x6c>)
    f49c:	4812      	ldr	r0, [pc, #72]	; (f4e8 <SX1272FskSetBitrate+0x68>)
    f49e:	1c1a      	adds	r2, r3, #0
    f4a0:	1c23      	adds	r3, r4, #0
    f4a2:	47a8      	blx	r5
    f4a4:	1c03      	adds	r3, r0, #0
    f4a6:	1c0c      	adds	r4, r1, #0
    f4a8:	4a14      	ldr	r2, [pc, #80]	; (f4fc <SX1272FskSetBitrate+0x7c>)
    f4aa:	1c18      	adds	r0, r3, #0
    f4ac:	1c21      	adds	r1, r4, #0
    f4ae:	4790      	blx	r2
    f4b0:	1c03      	adds	r3, r0, #0
    f4b2:	b29b      	uxth	r3, r3
    f4b4:	607b      	str	r3, [r7, #4]
    SX1272->RegBitrateMsb    = ( uint8_t )( bitrate >> 8 );
    f4b6:	4b12      	ldr	r3, [pc, #72]	; (f500 <SX1272FskSetBitrate+0x80>)
    f4b8:	681b      	ldr	r3, [r3, #0]
    f4ba:	687a      	ldr	r2, [r7, #4]
    f4bc:	0a12      	lsrs	r2, r2, #8
    f4be:	b2d2      	uxtb	r2, r2
    f4c0:	709a      	strb	r2, [r3, #2]
    SX1272->RegBitrateLsb    = ( uint8_t )( bitrate & 0xFF );
    f4c2:	4b0f      	ldr	r3, [pc, #60]	; (f500 <SX1272FskSetBitrate+0x80>)
    f4c4:	681b      	ldr	r3, [r3, #0]
    f4c6:	687a      	ldr	r2, [r7, #4]
    f4c8:	b2d2      	uxtb	r2, r2
    f4ca:	70da      	strb	r2, [r3, #3]
    SX1272WriteBuffer( REG_BITRATEMSB, &SX1272->RegBitrateMsb, 2 );    
    f4cc:	4b0c      	ldr	r3, [pc, #48]	; (f500 <SX1272FskSetBitrate+0x80>)
    f4ce:	681b      	ldr	r3, [r3, #0]
    f4d0:	3302      	adds	r3, #2
    f4d2:	2002      	movs	r0, #2
    f4d4:	1c19      	adds	r1, r3, #0
    f4d6:	2202      	movs	r2, #2
    f4d8:	4b0a      	ldr	r3, [pc, #40]	; (f504 <SX1272FskSetBitrate+0x84>)
    f4da:	4798      	blx	r3
}
    f4dc:	46bd      	mov	sp, r7
    f4de:	b002      	add	sp, #8
    f4e0:	bdb0      	pop	{r4, r5, r7, pc}
    f4e2:	46c0      	nop			; (mov r8, r8)
    f4e4:	46c0      	nop			; (mov r8, r8)
    f4e6:	46c0      	nop			; (mov r8, r8)
    f4e8:	00000000 	.word	0x00000000
    f4ec:	417e8480 	.word	0x417e8480
    f4f0:	2000000c 	.word	0x2000000c
    f4f4:	000164c9 	.word	0x000164c9
    f4f8:	00014f89 	.word	0x00014f89
    f4fc:	00014899 	.word	0x00014899
    f500:	200036c8 	.word	0x200036c8
    f504:	00010955 	.word	0x00010955

0000f508 <SX1272FskSetFdev>:

    return FskSettings.Bitrate;
}

void SX1272FskSetFdev( uint32_t fdev )
{
    f508:	b5b0      	push	{r4, r5, r7, lr}
    f50a:	b082      	sub	sp, #8
    f50c:	af00      	add	r7, sp, #0
    f50e:	6078      	str	r0, [r7, #4]
    FskSettings.Fdev = fdev;
    f510:	4b19      	ldr	r3, [pc, #100]	; (f578 <SX1272FskSetFdev+0x70>)
    f512:	687a      	ldr	r2, [r7, #4]
    f514:	609a      	str	r2, [r3, #8]

    fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    f516:	4b19      	ldr	r3, [pc, #100]	; (f57c <SX1272FskSetFdev+0x74>)
    f518:	6878      	ldr	r0, [r7, #4]
    f51a:	4798      	blx	r3
    f51c:	1c03      	adds	r3, r0, #0
    f51e:	1c0c      	adds	r4, r1, #0
    f520:	4d17      	ldr	r5, [pc, #92]	; (f580 <SX1272FskSetFdev+0x78>)
    f522:	1c18      	adds	r0, r3, #0
    f524:	1c21      	adds	r1, r4, #0
    f526:	4b13      	ldr	r3, [pc, #76]	; (f574 <SX1272FskSetFdev+0x6c>)
    f528:	4a11      	ldr	r2, [pc, #68]	; (f570 <SX1272FskSetFdev+0x68>)
    f52a:	47a8      	blx	r5
    f52c:	1c03      	adds	r3, r0, #0
    f52e:	1c0c      	adds	r4, r1, #0
    f530:	4a14      	ldr	r2, [pc, #80]	; (f584 <SX1272FskSetFdev+0x7c>)
    f532:	1c18      	adds	r0, r3, #0
    f534:	1c21      	adds	r1, r4, #0
    f536:	4790      	blx	r2
    f538:	1c03      	adds	r3, r0, #0
    f53a:	b29b      	uxth	r3, r3
    f53c:	607b      	str	r3, [r7, #4]
    SX1272->RegFdevMsb    = ( uint8_t )( fdev >> 8 );
    f53e:	4b12      	ldr	r3, [pc, #72]	; (f588 <SX1272FskSetFdev+0x80>)
    f540:	681b      	ldr	r3, [r3, #0]
    f542:	687a      	ldr	r2, [r7, #4]
    f544:	0a12      	lsrs	r2, r2, #8
    f546:	b2d2      	uxtb	r2, r2
    f548:	711a      	strb	r2, [r3, #4]
    SX1272->RegFdevLsb    = ( uint8_t )( fdev & 0xFF );
    f54a:	4b0f      	ldr	r3, [pc, #60]	; (f588 <SX1272FskSetFdev+0x80>)
    f54c:	681b      	ldr	r3, [r3, #0]
    f54e:	687a      	ldr	r2, [r7, #4]
    f550:	b2d2      	uxtb	r2, r2
    f552:	715a      	strb	r2, [r3, #5]
    SX1272WriteBuffer( REG_FDEVMSB, &SX1272->RegFdevMsb, 2 );    
    f554:	4b0c      	ldr	r3, [pc, #48]	; (f588 <SX1272FskSetFdev+0x80>)
    f556:	681b      	ldr	r3, [r3, #0]
    f558:	3304      	adds	r3, #4
    f55a:	2004      	movs	r0, #4
    f55c:	1c19      	adds	r1, r3, #0
    f55e:	2202      	movs	r2, #2
    f560:	4b0a      	ldr	r3, [pc, #40]	; (f58c <SX1272FskSetFdev+0x84>)
    f562:	4798      	blx	r3
}
    f564:	46bd      	mov	sp, r7
    f566:	b002      	add	sp, #8
    f568:	bdb0      	pop	{r4, r5, r7, pc}
    f56a:	46c0      	nop			; (mov r8, r8)
    f56c:	46c0      	nop			; (mov r8, r8)
    f56e:	46c0      	nop			; (mov r8, r8)
    f570:	00000000 	.word	0x00000000
    f574:	404e8480 	.word	0x404e8480
    f578:	2000000c 	.word	0x2000000c
    f57c:	000164c9 	.word	0x000164c9
    f580:	00014f89 	.word	0x00014f89
    f584:	00014899 	.word	0x00014899
    f588:	200036c8 	.word	0x200036c8
    f58c:	00010955 	.word	0x00010955

0000f590 <SX1272FskSetRFPower>:

    return FskSettings.Fdev;
}

void SX1272FskSetRFPower( int8_t power )
{
    f590:	b580      	push	{r7, lr}
    f592:	b082      	sub	sp, #8
    f594:	af00      	add	r7, sp, #0
    f596:	1c02      	adds	r2, r0, #0
    f598:	1dfb      	adds	r3, r7, #7
    f59a:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PACONFIG, &SX1272->RegPaConfig );
    f59c:	4b4f      	ldr	r3, [pc, #316]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f59e:	681b      	ldr	r3, [r3, #0]
    f5a0:	3309      	adds	r3, #9
    f5a2:	2009      	movs	r0, #9
    f5a4:	1c19      	adds	r1, r3, #0
    f5a6:	4b4e      	ldr	r3, [pc, #312]	; (f6e0 <SX1272FskSetRFPower+0x150>)
    f5a8:	4798      	blx	r3
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
    f5aa:	4b4c      	ldr	r3, [pc, #304]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f5ac:	681b      	ldr	r3, [r3, #0]
    f5ae:	335a      	adds	r3, #90	; 0x5a
    f5b0:	205a      	movs	r0, #90	; 0x5a
    f5b2:	1c19      	adds	r1, r3, #0
    f5b4:	4b4a      	ldr	r3, [pc, #296]	; (f6e0 <SX1272FskSetRFPower+0x150>)
    f5b6:	4798      	blx	r3
    
    if( ( SX1272->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
    f5b8:	4b48      	ldr	r3, [pc, #288]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f5ba:	681b      	ldr	r3, [r3, #0]
    f5bc:	7a5b      	ldrb	r3, [r3, #9]
    f5be:	b2db      	uxtb	r3, r3
    f5c0:	b25b      	sxtb	r3, r3
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	da56      	bge.n	f674 <SX1272FskSetRFPower+0xe4>
    {
        if( ( SX1272->RegPaDac & 0x07 ) == 0x07 )
    f5c6:	4b45      	ldr	r3, [pc, #276]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f5c8:	681a      	ldr	r2, [r3, #0]
    f5ca:	235a      	movs	r3, #90	; 0x5a
    f5cc:	5cd3      	ldrb	r3, [r2, r3]
    f5ce:	1c1a      	adds	r2, r3, #0
    f5d0:	2307      	movs	r3, #7
    f5d2:	4013      	ands	r3, r2
    f5d4:	2b07      	cmp	r3, #7
    f5d6:	d126      	bne.n	f626 <SX1272FskSetRFPower+0x96>
        {
            if( power < 5 )
    f5d8:	1dfb      	adds	r3, r7, #7
    f5da:	781b      	ldrb	r3, [r3, #0]
    f5dc:	b25b      	sxtb	r3, r3
    f5de:	2b04      	cmp	r3, #4
    f5e0:	dc02      	bgt.n	f5e8 <SX1272FskSetRFPower+0x58>
            {
                power = 5;
    f5e2:	1dfb      	adds	r3, r7, #7
    f5e4:	2205      	movs	r2, #5
    f5e6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
    f5e8:	1dfb      	adds	r3, r7, #7
    f5ea:	781b      	ldrb	r3, [r3, #0]
    f5ec:	b25b      	sxtb	r3, r3
    f5ee:	2b14      	cmp	r3, #20
    f5f0:	dd02      	ble.n	f5f8 <SX1272FskSetRFPower+0x68>
            {
                power = 20;
    f5f2:	1dfb      	adds	r3, r7, #7
    f5f4:	2214      	movs	r2, #20
    f5f6:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
    f5f8:	4b38      	ldr	r3, [pc, #224]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f5fa:	681a      	ldr	r2, [r3, #0]
    f5fc:	4b37      	ldr	r3, [pc, #220]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	7a5b      	ldrb	r3, [r3, #9]
    f602:	b2db      	uxtb	r3, r3
    f604:	210f      	movs	r1, #15
    f606:	438b      	bics	r3, r1
    f608:	b2d9      	uxtb	r1, r3
    f60a:	1dfb      	adds	r3, r7, #7
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	3b05      	subs	r3, #5
    f610:	b2db      	uxtb	r3, r3
    f612:	b2db      	uxtb	r3, r3
    f614:	1c18      	adds	r0, r3, #0
    f616:	230f      	movs	r3, #15
    f618:	4003      	ands	r3, r0
    f61a:	b2db      	uxtb	r3, r3
    f61c:	430b      	orrs	r3, r1
    f61e:	b2db      	uxtb	r3, r3
    f620:	b2db      	uxtb	r3, r3
    f622:	7253      	strb	r3, [r2, #9]
    f624:	e04c      	b.n	f6c0 <SX1272FskSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
    f626:	1dfb      	adds	r3, r7, #7
    f628:	781b      	ldrb	r3, [r3, #0]
    f62a:	b25b      	sxtb	r3, r3
    f62c:	2b01      	cmp	r3, #1
    f62e:	dc02      	bgt.n	f636 <SX1272FskSetRFPower+0xa6>
            {
                power = 2;
    f630:	1dfb      	adds	r3, r7, #7
    f632:	2202      	movs	r2, #2
    f634:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
    f636:	1dfb      	adds	r3, r7, #7
    f638:	781b      	ldrb	r3, [r3, #0]
    f63a:	b25b      	sxtb	r3, r3
    f63c:	2b11      	cmp	r3, #17
    f63e:	dd02      	ble.n	f646 <SX1272FskSetRFPower+0xb6>
            {
                power = 17;
    f640:	1dfb      	adds	r3, r7, #7
    f642:	2211      	movs	r2, #17
    f644:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
    f646:	4b25      	ldr	r3, [pc, #148]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f648:	681a      	ldr	r2, [r3, #0]
    f64a:	4b24      	ldr	r3, [pc, #144]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f64c:	681b      	ldr	r3, [r3, #0]
    f64e:	7a5b      	ldrb	r3, [r3, #9]
    f650:	b2db      	uxtb	r3, r3
    f652:	210f      	movs	r1, #15
    f654:	438b      	bics	r3, r1
    f656:	b2d9      	uxtb	r1, r3
    f658:	1dfb      	adds	r3, r7, #7
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	3b02      	subs	r3, #2
    f65e:	b2db      	uxtb	r3, r3
    f660:	b2db      	uxtb	r3, r3
    f662:	1c18      	adds	r0, r3, #0
    f664:	230f      	movs	r3, #15
    f666:	4003      	ands	r3, r0
    f668:	b2db      	uxtb	r3, r3
    f66a:	430b      	orrs	r3, r1
    f66c:	b2db      	uxtb	r3, r3
    f66e:	b2db      	uxtb	r3, r3
    f670:	7253      	strb	r3, [r2, #9]
    f672:	e025      	b.n	f6c0 <SX1272FskSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
    f674:	1dfb      	adds	r3, r7, #7
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	b25b      	sxtb	r3, r3
    f67a:	3301      	adds	r3, #1
    f67c:	da02      	bge.n	f684 <SX1272FskSetRFPower+0xf4>
        {
            power = -1;
    f67e:	1dfb      	adds	r3, r7, #7
    f680:	22ff      	movs	r2, #255	; 0xff
    f682:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
    f684:	1dfb      	adds	r3, r7, #7
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	b25b      	sxtb	r3, r3
    f68a:	2b0e      	cmp	r3, #14
    f68c:	dd02      	ble.n	f694 <SX1272FskSetRFPower+0x104>
        {
            power = 14;
    f68e:	1dfb      	adds	r3, r7, #7
    f690:	220e      	movs	r2, #14
    f692:	701a      	strb	r2, [r3, #0]
        }
        SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
    f694:	4b11      	ldr	r3, [pc, #68]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f696:	681a      	ldr	r2, [r3, #0]
    f698:	4b10      	ldr	r3, [pc, #64]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f69a:	681b      	ldr	r3, [r3, #0]
    f69c:	7a5b      	ldrb	r3, [r3, #9]
    f69e:	b2db      	uxtb	r3, r3
    f6a0:	210f      	movs	r1, #15
    f6a2:	438b      	bics	r3, r1
    f6a4:	b2d9      	uxtb	r1, r3
    f6a6:	1dfb      	adds	r3, r7, #7
    f6a8:	781b      	ldrb	r3, [r3, #0]
    f6aa:	3301      	adds	r3, #1
    f6ac:	b2db      	uxtb	r3, r3
    f6ae:	b2db      	uxtb	r3, r3
    f6b0:	1c18      	adds	r0, r3, #0
    f6b2:	230f      	movs	r3, #15
    f6b4:	4003      	ands	r3, r0
    f6b6:	b2db      	uxtb	r3, r3
    f6b8:	430b      	orrs	r3, r1
    f6ba:	b2db      	uxtb	r3, r3
    f6bc:	b2db      	uxtb	r3, r3
    f6be:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_PACONFIG, SX1272->RegPaConfig );
    f6c0:	4b06      	ldr	r3, [pc, #24]	; (f6dc <SX1272FskSetRFPower+0x14c>)
    f6c2:	681b      	ldr	r3, [r3, #0]
    f6c4:	7a5b      	ldrb	r3, [r3, #9]
    f6c6:	2009      	movs	r0, #9
    f6c8:	1c19      	adds	r1, r3, #0
    f6ca:	4b06      	ldr	r3, [pc, #24]	; (f6e4 <SX1272FskSetRFPower+0x154>)
    f6cc:	4798      	blx	r3
    FskSettings.Power = power;
    f6ce:	4b06      	ldr	r3, [pc, #24]	; (f6e8 <SX1272FskSetRFPower+0x158>)
    f6d0:	1dfa      	adds	r2, r7, #7
    f6d2:	7812      	ldrb	r2, [r2, #0]
    f6d4:	731a      	strb	r2, [r3, #12]
}
    f6d6:	46bd      	mov	sp, r7
    f6d8:	b002      	add	sp, #8
    f6da:	bd80      	pop	{r7, pc}
    f6dc:	200036c8 	.word	0x200036c8
    f6e0:	00010919 	.word	0x00010919
    f6e4:	000108e5 	.word	0x000108e5
    f6e8:	2000000c 	.word	0x2000000c
    f6ec:	00000000 	.word	0x00000000

0000f6f0 <SX1272FskComputeRxBwMantExp>:
 * \param [IN] rxBwValue Bandwidth value
 * \param [OUT] mantisse Mantisse of the bandwidth value
 * \param [OUT] exponent Exponent of the bandwidth value
 */
static void SX1272FskComputeRxBwMantExp( uint32_t rxBwValue, uint8_t* mantisse, uint8_t* exponent )
{
    f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6f2:	b08d      	sub	sp, #52	; 0x34
    f6f4:	af00      	add	r7, sp, #0
    f6f6:	6178      	str	r0, [r7, #20]
    f6f8:	6139      	str	r1, [r7, #16]
    f6fa:	60fa      	str	r2, [r7, #12]
    uint8_t tmpExp = 0;
    f6fc:	1c3b      	adds	r3, r7, #0
    f6fe:	332f      	adds	r3, #47	; 0x2f
    f700:	2200      	movs	r2, #0
    f702:	701a      	strb	r2, [r3, #0]
    uint8_t tmpMant = 0;
    f704:	1c3b      	adds	r3, r7, #0
    f706:	332e      	adds	r3, #46	; 0x2e
    f708:	2200      	movs	r2, #0
    f70a:	701a      	strb	r2, [r3, #0]

    double tmpRxBw = 0;
    f70c:	4b43      	ldr	r3, [pc, #268]	; (f81c <SX1272FskComputeRxBwMantExp+0x12c>)
    f70e:	4a42      	ldr	r2, [pc, #264]	; (f818 <SX1272FskComputeRxBwMantExp+0x128>)
    f710:	61ba      	str	r2, [r7, #24]
    f712:	61fb      	str	r3, [r7, #28]
    double rxBwMin = 10e6;
    f714:	4a42      	ldr	r2, [pc, #264]	; (f820 <SX1272FskComputeRxBwMantExp+0x130>)
    f716:	4b43      	ldr	r3, [pc, #268]	; (f824 <SX1272FskComputeRxBwMantExp+0x134>)
    f718:	623a      	str	r2, [r7, #32]
    f71a:	627b      	str	r3, [r7, #36]	; 0x24

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
    f71c:	1c3b      	adds	r3, r7, #0
    f71e:	332f      	adds	r3, #47	; 0x2f
    f720:	2200      	movs	r2, #0
    f722:	701a      	strb	r2, [r3, #0]
    f724:	e06e      	b.n	f804 <SX1272FskComputeRxBwMantExp+0x114>
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
    f726:	1c3b      	adds	r3, r7, #0
    f728:	332e      	adds	r3, #46	; 0x2e
    f72a:	2210      	movs	r2, #16
    f72c:	701a      	strb	r2, [r3, #0]
    f72e:	e05d      	b.n	f7ec <SX1272FskComputeRxBwMantExp+0xfc>
        {
            if( ( SX1272->RegOpMode & RF_OPMODE_MODULATIONTYPE_FSK ) == RF_OPMODE_MODULATIONTYPE_FSK )
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 2 ) );
    f730:	1c3b      	adds	r3, r7, #0
    f732:	332e      	adds	r3, #46	; 0x2e
    f734:	781a      	ldrb	r2, [r3, #0]
    f736:	4b40      	ldr	r3, [pc, #256]	; (f838 <SX1272FskComputeRxBwMantExp+0x148>)
    f738:	1c10      	adds	r0, r2, #0
    f73a:	4798      	blx	r3
    f73c:	6038      	str	r0, [r7, #0]
    f73e:	6079      	str	r1, [r7, #4]
    f740:	1c3b      	adds	r3, r7, #0
    f742:	332f      	adds	r3, #47	; 0x2f
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	1c9a      	adds	r2, r3, #2
    f748:	4b3b      	ldr	r3, [pc, #236]	; (f838 <SX1272FskComputeRxBwMantExp+0x148>)
    f74a:	1c10      	adds	r0, r2, #0
    f74c:	4798      	blx	r3
    f74e:	1c02      	adds	r2, r0, #0
    f750:	1c0b      	adds	r3, r1, #0
    f752:	4835      	ldr	r0, [pc, #212]	; (f828 <SX1272FskComputeRxBwMantExp+0x138>)
    f754:	4935      	ldr	r1, [pc, #212]	; (f82c <SX1272FskComputeRxBwMantExp+0x13c>)
    f756:	4e39      	ldr	r6, [pc, #228]	; (f83c <SX1272FskComputeRxBwMantExp+0x14c>)
    f758:	47b0      	blx	r6
    f75a:	1c02      	adds	r2, r0, #0
    f75c:	1c0b      	adds	r3, r1, #0
    f75e:	4e38      	ldr	r6, [pc, #224]	; (f840 <SX1272FskComputeRxBwMantExp+0x150>)
    f760:	6838      	ldr	r0, [r7, #0]
    f762:	6879      	ldr	r1, [r7, #4]
    f764:	47b0      	blx	r6
    f766:	1c02      	adds	r2, r0, #0
    f768:	1c0b      	adds	r3, r1, #0
    f76a:	4e36      	ldr	r6, [pc, #216]	; (f844 <SX1272FskComputeRxBwMantExp+0x154>)
    f76c:	4830      	ldr	r0, [pc, #192]	; (f830 <SX1272FskComputeRxBwMantExp+0x140>)
    f76e:	4931      	ldr	r1, [pc, #196]	; (f834 <SX1272FskComputeRxBwMantExp+0x144>)
    f770:	47b0      	blx	r6
    f772:	1c02      	adds	r2, r0, #0
    f774:	1c0b      	adds	r3, r1, #0
    f776:	61ba      	str	r2, [r7, #24]
    f778:	61fb      	str	r3, [r7, #28]
            }
            else
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 3 ) );
            }
            if( fabs( tmpRxBw - rxBwValue ) < rxBwMin )
    f77a:	4b33      	ldr	r3, [pc, #204]	; (f848 <SX1272FskComputeRxBwMantExp+0x158>)
    f77c:	6978      	ldr	r0, [r7, #20]
    f77e:	4798      	blx	r3
    f780:	1c02      	adds	r2, r0, #0
    f782:	1c0b      	adds	r3, r1, #0
    f784:	4e31      	ldr	r6, [pc, #196]	; (f84c <SX1272FskComputeRxBwMantExp+0x15c>)
    f786:	69b8      	ldr	r0, [r7, #24]
    f788:	69f9      	ldr	r1, [r7, #28]
    f78a:	47b0      	blx	r6
    f78c:	1c02      	adds	r2, r0, #0
    f78e:	1c0b      	adds	r3, r1, #0
    f790:	1c11      	adds	r1, r2, #0
    f792:	1c0c      	adds	r4, r1, #0
    f794:	005b      	lsls	r3, r3, #1
    f796:	085d      	lsrs	r5, r3, #1
    f798:	4e2d      	ldr	r6, [pc, #180]	; (f850 <SX1272FskComputeRxBwMantExp+0x160>)
    f79a:	1c20      	adds	r0, r4, #0
    f79c:	1c29      	adds	r1, r5, #0
    f79e:	6a3a      	ldr	r2, [r7, #32]
    f7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f7a2:	47b0      	blx	r6
    f7a4:	1c03      	adds	r3, r0, #0
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	d019      	beq.n	f7de <SX1272FskComputeRxBwMantExp+0xee>
            {
                rxBwMin = fabs( tmpRxBw - rxBwValue );
    f7aa:	4b27      	ldr	r3, [pc, #156]	; (f848 <SX1272FskComputeRxBwMantExp+0x158>)
    f7ac:	6978      	ldr	r0, [r7, #20]
    f7ae:	4798      	blx	r3
    f7b0:	1c02      	adds	r2, r0, #0
    f7b2:	1c0b      	adds	r3, r1, #0
    f7b4:	4e25      	ldr	r6, [pc, #148]	; (f84c <SX1272FskComputeRxBwMantExp+0x15c>)
    f7b6:	69b8      	ldr	r0, [r7, #24]
    f7b8:	69f9      	ldr	r1, [r7, #28]
    f7ba:	47b0      	blx	r6
    f7bc:	1c02      	adds	r2, r0, #0
    f7be:	1c0b      	adds	r3, r1, #0
    f7c0:	1c11      	adds	r1, r2, #0
    f7c2:	6239      	str	r1, [r7, #32]
    f7c4:	005b      	lsls	r3, r3, #1
    f7c6:	085b      	lsrs	r3, r3, #1
    f7c8:	627b      	str	r3, [r7, #36]	; 0x24
                *mantisse = tmpMant;
    f7ca:	693b      	ldr	r3, [r7, #16]
    f7cc:	1c3a      	adds	r2, r7, #0
    f7ce:	322e      	adds	r2, #46	; 0x2e
    f7d0:	7812      	ldrb	r2, [r2, #0]
    f7d2:	701a      	strb	r2, [r3, #0]
                *exponent = tmpExp;
    f7d4:	68fb      	ldr	r3, [r7, #12]
    f7d6:	1c3a      	adds	r2, r7, #0
    f7d8:	322f      	adds	r2, #47	; 0x2f
    f7da:	7812      	ldrb	r2, [r2, #0]
    f7dc:	701a      	strb	r2, [r3, #0]
    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
    f7de:	1c3b      	adds	r3, r7, #0
    f7e0:	332e      	adds	r3, #46	; 0x2e
    f7e2:	1c3a      	adds	r2, r7, #0
    f7e4:	322e      	adds	r2, #46	; 0x2e
    f7e6:	7812      	ldrb	r2, [r2, #0]
    f7e8:	3204      	adds	r2, #4
    f7ea:	701a      	strb	r2, [r3, #0]
    f7ec:	1c3b      	adds	r3, r7, #0
    f7ee:	332e      	adds	r3, #46	; 0x2e
    f7f0:	781b      	ldrb	r3, [r3, #0]
    f7f2:	2b18      	cmp	r3, #24
    f7f4:	d99c      	bls.n	f730 <SX1272FskComputeRxBwMantExp+0x40>
    uint8_t tmpMant = 0;

    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
    f7f6:	1c3b      	adds	r3, r7, #0
    f7f8:	332f      	adds	r3, #47	; 0x2f
    f7fa:	781a      	ldrb	r2, [r3, #0]
    f7fc:	1c3b      	adds	r3, r7, #0
    f7fe:	332f      	adds	r3, #47	; 0x2f
    f800:	3201      	adds	r2, #1
    f802:	701a      	strb	r2, [r3, #0]
    f804:	1c3b      	adds	r3, r7, #0
    f806:	332f      	adds	r3, #47	; 0x2f
    f808:	781b      	ldrb	r3, [r3, #0]
    f80a:	2b07      	cmp	r3, #7
    f80c:	d98b      	bls.n	f726 <SX1272FskComputeRxBwMantExp+0x36>
                *mantisse = tmpMant;
                *exponent = tmpExp;
            }
        }
    }
}
    f80e:	46bd      	mov	sp, r7
    f810:	b00d      	add	sp, #52	; 0x34
    f812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f814:	46c0      	nop			; (mov r8, r8)
    f816:	46c0      	nop			; (mov r8, r8)
	...
    f824:	416312d0 	.word	0x416312d0
    f828:	00000000 	.word	0x00000000
    f82c:	40000000 	.word	0x40000000
    f830:	00000000 	.word	0x00000000
    f834:	417e8480 	.word	0x417e8480
    f838:	0001644d 	.word	0x0001644d
    f83c:	000132d9 	.word	0x000132d9
    f840:	0001585d 	.word	0x0001585d
    f844:	00014f89 	.word	0x00014f89
    f848:	000164c9 	.word	0x000164c9
    f84c:	00015d7d 	.word	0x00015d7d
    f850:	000147c5 	.word	0x000147c5
    f854:	46c0      	nop			; (mov r8, r8)
    f856:	46c0      	nop			; (mov r8, r8)

0000f858 <SX1272FskSetDccBw>:

void SX1272FskSetDccBw( uint8_t* reg, uint32_t dccValue, uint32_t rxBwValue )
{
    f858:	b580      	push	{r7, lr}
    f85a:	b086      	sub	sp, #24
    f85c:	af00      	add	r7, sp, #0
    f85e:	60f8      	str	r0, [r7, #12]
    f860:	60b9      	str	r1, [r7, #8]
    f862:	607a      	str	r2, [r7, #4]
    uint8_t mantisse = 0;
    f864:	1c3b      	adds	r3, r7, #0
    f866:	3317      	adds	r3, #23
    f868:	2200      	movs	r2, #0
    f86a:	701a      	strb	r2, [r3, #0]
    uint8_t exponent = 0;
    f86c:	1c3b      	adds	r3, r7, #0
    f86e:	3316      	adds	r3, #22
    f870:	2200      	movs	r2, #0
    f872:	701a      	strb	r2, [r3, #0]
    
    if( reg == &SX1272->RegRxBw )
    f874:	4b39      	ldr	r3, [pc, #228]	; (f95c <SX1272FskSetDccBw+0x104>)
    f876:	681b      	ldr	r3, [r3, #0]
    f878:	1c1a      	adds	r2, r3, #0
    f87a:	3212      	adds	r2, #18
    f87c:	68fb      	ldr	r3, [r7, #12]
    f87e:	429a      	cmp	r2, r3
    f880:	d107      	bne.n	f892 <SX1272FskSetDccBw+0x3a>
    {
        *reg = ( uint8_t )dccValue & 0x60;
    f882:	68bb      	ldr	r3, [r7, #8]
    f884:	b2da      	uxtb	r2, r3
    f886:	2360      	movs	r3, #96	; 0x60
    f888:	4013      	ands	r3, r2
    f88a:	b2da      	uxtb	r2, r3
    f88c:	68fb      	ldr	r3, [r7, #12]
    f88e:	701a      	strb	r2, [r3, #0]
    f890:	e002      	b.n	f898 <SX1272FskSetDccBw+0x40>
    }
    else
    {
        *reg = 0;
    f892:	68fb      	ldr	r3, [r7, #12]
    f894:	2200      	movs	r2, #0
    f896:	701a      	strb	r2, [r3, #0]
    }

    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );
    f898:	6879      	ldr	r1, [r7, #4]
    f89a:	1c3a      	adds	r2, r7, #0
    f89c:	3217      	adds	r2, #23
    f89e:	1c3b      	adds	r3, r7, #0
    f8a0:	3316      	adds	r3, #22
    f8a2:	1c08      	adds	r0, r1, #0
    f8a4:	1c11      	adds	r1, r2, #0
    f8a6:	1c1a      	adds	r2, r3, #0
    f8a8:	4b2d      	ldr	r3, [pc, #180]	; (f960 <SX1272FskSetDccBw+0x108>)
    f8aa:	4798      	blx	r3

    switch( mantisse )
    f8ac:	1c3b      	adds	r3, r7, #0
    f8ae:	3317      	adds	r3, #23
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	2b14      	cmp	r3, #20
    f8b4:	d015      	beq.n	f8e2 <SX1272FskSetDccBw+0x8a>
    f8b6:	2b18      	cmp	r3, #24
    f8b8:	d023      	beq.n	f902 <SX1272FskSetDccBw+0xaa>
    f8ba:	2b10      	cmp	r3, #16
    f8bc:	d000      	beq.n	f8c0 <SX1272FskSetDccBw+0x68>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
            break;
        default:
            // Something went terribely wrong
            break;
    f8be:	e030      	b.n	f922 <SX1272FskSetDccBw+0xca>
    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );

    switch( mantisse )
    {
        case 16:
            *reg |= ( uint8_t )( 0x00 | ( exponent & 0x07 ) );
    f8c0:	68fb      	ldr	r3, [r7, #12]
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	b2da      	uxtb	r2, r3
    f8c6:	1c3b      	adds	r3, r7, #0
    f8c8:	3316      	adds	r3, #22
    f8ca:	781b      	ldrb	r3, [r3, #0]
    f8cc:	b2db      	uxtb	r3, r3
    f8ce:	1c19      	adds	r1, r3, #0
    f8d0:	2307      	movs	r3, #7
    f8d2:	400b      	ands	r3, r1
    f8d4:	b2db      	uxtb	r3, r3
    f8d6:	4313      	orrs	r3, r2
    f8d8:	b2db      	uxtb	r3, r3
    f8da:	b2da      	uxtb	r2, r3
    f8dc:	68fb      	ldr	r3, [r7, #12]
    f8de:	701a      	strb	r2, [r3, #0]
            break;
    f8e0:	e01f      	b.n	f922 <SX1272FskSetDccBw+0xca>
        case 20:
            *reg |= ( uint8_t )( 0x08 | ( exponent & 0x07 ) );
    f8e2:	68fb      	ldr	r3, [r7, #12]
    f8e4:	781a      	ldrb	r2, [r3, #0]
    f8e6:	1c3b      	adds	r3, r7, #0
    f8e8:	3316      	adds	r3, #22
    f8ea:	7819      	ldrb	r1, [r3, #0]
    f8ec:	2307      	movs	r3, #7
    f8ee:	400b      	ands	r3, r1
    f8f0:	b2db      	uxtb	r3, r3
    f8f2:	4313      	orrs	r3, r2
    f8f4:	b2db      	uxtb	r3, r3
    f8f6:	2208      	movs	r2, #8
    f8f8:	4313      	orrs	r3, r2
    f8fa:	b2da      	uxtb	r2, r3
    f8fc:	68fb      	ldr	r3, [r7, #12]
    f8fe:	701a      	strb	r2, [r3, #0]
            break;
    f900:	e00f      	b.n	f922 <SX1272FskSetDccBw+0xca>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
    f902:	68fb      	ldr	r3, [r7, #12]
    f904:	781a      	ldrb	r2, [r3, #0]
    f906:	1c3b      	adds	r3, r7, #0
    f908:	3316      	adds	r3, #22
    f90a:	7819      	ldrb	r1, [r3, #0]
    f90c:	2307      	movs	r3, #7
    f90e:	400b      	ands	r3, r1
    f910:	b2db      	uxtb	r3, r3
    f912:	4313      	orrs	r3, r2
    f914:	b2db      	uxtb	r3, r3
    f916:	2210      	movs	r2, #16
    f918:	4313      	orrs	r3, r2
    f91a:	b2da      	uxtb	r2, r3
    f91c:	68fb      	ldr	r3, [r7, #12]
    f91e:	701a      	strb	r2, [r3, #0]
            break;
    f920:	46c0      	nop			; (mov r8, r8)
        default:
            // Something went terribely wrong
            break;
    }

    if( reg == &SX1272->RegRxBw )
    f922:	4b0e      	ldr	r3, [pc, #56]	; (f95c <SX1272FskSetDccBw+0x104>)
    f924:	681b      	ldr	r3, [r3, #0]
    f926:	1c1a      	adds	r2, r3, #0
    f928:	3212      	adds	r2, #18
    f92a:	68fb      	ldr	r3, [r7, #12]
    f92c:	429a      	cmp	r2, r3
    f92e:	d109      	bne.n	f944 <SX1272FskSetDccBw+0xec>
    {
        SX1272Write( REG_RXBW, *reg );
    f930:	68fb      	ldr	r3, [r7, #12]
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2012      	movs	r0, #18
    f936:	1c19      	adds	r1, r3, #0
    f938:	4b0a      	ldr	r3, [pc, #40]	; (f964 <SX1272FskSetDccBw+0x10c>)
    f93a:	4798      	blx	r3
        FskSettings.RxBw = rxBwValue;
    f93c:	4b0a      	ldr	r3, [pc, #40]	; (f968 <SX1272FskSetDccBw+0x110>)
    f93e:	687a      	ldr	r2, [r7, #4]
    f940:	611a      	str	r2, [r3, #16]
    f942:	e008      	b.n	f956 <SX1272FskSetDccBw+0xfe>
    }
    else
    {
        SX1272Write( REG_AFCBW, *reg );
    f944:	68fb      	ldr	r3, [r7, #12]
    f946:	781b      	ldrb	r3, [r3, #0]
    f948:	2013      	movs	r0, #19
    f94a:	1c19      	adds	r1, r3, #0
    f94c:	4b05      	ldr	r3, [pc, #20]	; (f964 <SX1272FskSetDccBw+0x10c>)
    f94e:	4798      	blx	r3
        FskSettings.RxBwAfc = rxBwValue;
    f950:	4b05      	ldr	r3, [pc, #20]	; (f968 <SX1272FskSetDccBw+0x110>)
    f952:	687a      	ldr	r2, [r7, #4]
    f954:	615a      	str	r2, [r3, #20]
    }
}
    f956:	46bd      	mov	sp, r7
    f958:	b006      	add	sp, #24
    f95a:	bd80      	pop	{r7, pc}
    f95c:	200036c8 	.word	0x200036c8
    f960:	0000f6f1 	.word	0x0000f6f1
    f964:	000108e5 	.word	0x000108e5
    f968:	2000000c 	.word	0x2000000c

0000f96c <SX1272FskGetPacketCrcOn>:
    SX1272Write( REG_PACKETCONFIG1, SX1272->RegPacketConfig1 );
    FskSettings.CrcOn = enable;
}

bool SX1272FskGetPacketCrcOn( void )
{
    f96c:	b580      	push	{r7, lr}
    f96e:	af00      	add	r7, sp, #0
    SX1272Read( REG_PACKETCONFIG1, &SX1272->RegPacketConfig1 );
    f970:	4b0c      	ldr	r3, [pc, #48]	; (f9a4 <SX1272FskGetPacketCrcOn+0x38>)
    f972:	681b      	ldr	r3, [r3, #0]
    f974:	3330      	adds	r3, #48	; 0x30
    f976:	2030      	movs	r0, #48	; 0x30
    f978:	1c19      	adds	r1, r3, #0
    f97a:	4b0b      	ldr	r3, [pc, #44]	; (f9a8 <SX1272FskGetPacketCrcOn+0x3c>)
    f97c:	4798      	blx	r3
    FskSettings.CrcOn = ( SX1272->RegPacketConfig1 & RF_PACKETCONFIG1_CRC_ON ) >> 4;
    f97e:	4b09      	ldr	r3, [pc, #36]	; (f9a4 <SX1272FskGetPacketCrcOn+0x38>)
    f980:	681a      	ldr	r2, [r3, #0]
    f982:	2330      	movs	r3, #48	; 0x30
    f984:	5cd3      	ldrb	r3, [r2, r3]
    f986:	1c1a      	adds	r2, r3, #0
    f988:	2310      	movs	r3, #16
    f98a:	4013      	ands	r3, r2
    f98c:	111b      	asrs	r3, r3, #4
    f98e:	1e5a      	subs	r2, r3, #1
    f990:	4193      	sbcs	r3, r2
    f992:	b2da      	uxtb	r2, r3
    f994:	4b05      	ldr	r3, [pc, #20]	; (f9ac <SX1272FskGetPacketCrcOn+0x40>)
    f996:	761a      	strb	r2, [r3, #24]
    return FskSettings.CrcOn;
    f998:	4b04      	ldr	r3, [pc, #16]	; (f9ac <SX1272FskGetPacketCrcOn+0x40>)
    f99a:	7e1b      	ldrb	r3, [r3, #24]
}
    f99c:	1c18      	adds	r0, r3, #0
    f99e:	46bd      	mov	sp, r7
    f9a0:	bd80      	pop	{r7, pc}
    f9a2:	46c0      	nop			; (mov r8, r8)
    f9a4:	200036c8 	.word	0x200036c8
    f9a8:	00010919 	.word	0x00010919
    f9ac:	2000000c 	.word	0x2000000c

0000f9b0 <SX1272FskSetPa20dBm>:
    FskSettings.PayloadLength = SX1272->RegPayloadLength;
    return FskSettings.PayloadLength;
}

void SX1272FskSetPa20dBm( bool enale )
{
    f9b0:	b580      	push	{r7, lr}
    f9b2:	b082      	sub	sp, #8
    f9b4:	af00      	add	r7, sp, #0
    f9b6:	1c02      	adds	r2, r0, #0
    f9b8:	1dfb      	adds	r3, r7, #7
    f9ba:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
    f9bc:	4b10      	ldr	r3, [pc, #64]	; (fa00 <SX1272FskSetPa20dBm+0x50>)
    f9be:	681b      	ldr	r3, [r3, #0]
    f9c0:	335a      	adds	r3, #90	; 0x5a
    f9c2:	205a      	movs	r0, #90	; 0x5a
    f9c4:	1c19      	adds	r1, r3, #0
    f9c6:	4b0f      	ldr	r3, [pc, #60]	; (fa04 <SX1272FskSetPa20dBm+0x54>)
    f9c8:	4798      	blx	r3
    
    if( enale == true )
    f9ca:	1dfb      	adds	r3, r7, #7
    f9cc:	781b      	ldrb	r3, [r3, #0]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	d005      	beq.n	f9de <SX1272FskSetPa20dBm+0x2e>
    {
        SX1272->RegPaDac = 0x87;
    f9d2:	4b0b      	ldr	r3, [pc, #44]	; (fa00 <SX1272FskSetPa20dBm+0x50>)
    f9d4:	681a      	ldr	r2, [r3, #0]
    f9d6:	235a      	movs	r3, #90	; 0x5a
    f9d8:	2187      	movs	r1, #135	; 0x87
    f9da:	54d1      	strb	r1, [r2, r3]
    f9dc:	e004      	b.n	f9e8 <SX1272FskSetPa20dBm+0x38>
    }
    else
    {
        SX1272->RegPaDac = 0x84;
    f9de:	4b08      	ldr	r3, [pc, #32]	; (fa00 <SX1272FskSetPa20dBm+0x50>)
    f9e0:	681a      	ldr	r2, [r3, #0]
    f9e2:	235a      	movs	r3, #90	; 0x5a
    f9e4:	2184      	movs	r1, #132	; 0x84
    f9e6:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_PADAC, SX1272->RegPaDac );
    f9e8:	4b05      	ldr	r3, [pc, #20]	; (fa00 <SX1272FskSetPa20dBm+0x50>)
    f9ea:	681a      	ldr	r2, [r3, #0]
    f9ec:	235a      	movs	r3, #90	; 0x5a
    f9ee:	5cd3      	ldrb	r3, [r2, r3]
    f9f0:	205a      	movs	r0, #90	; 0x5a
    f9f2:	1c19      	adds	r1, r3, #0
    f9f4:	4b04      	ldr	r3, [pc, #16]	; (fa08 <SX1272FskSetPa20dBm+0x58>)
    f9f6:	4798      	blx	r3
}
    f9f8:	46bd      	mov	sp, r7
    f9fa:	b002      	add	sp, #8
    f9fc:	bd80      	pop	{r7, pc}
    f9fe:	46c0      	nop			; (mov r8, r8)
    fa00:	200036c8 	.word	0x200036c8
    fa04:	00010919 	.word	0x00010919
    fa08:	000108e5 	.word	0x000108e5

0000fa0c <SX1272FskSetRssiOffset>:
    SX1272Read( REG_PARAMP, &SX1272->RegPaRamp );
    return SX1272->RegPaRamp & ~RF_PARAMP_MASK;
}

void SX1272FskSetRssiOffset( int8_t offset )
{
    fa0c:	b580      	push	{r7, lr}
    fa0e:	b082      	sub	sp, #8
    fa10:	af00      	add	r7, sp, #0
    fa12:	1c02      	adds	r2, r0, #0
    fa14:	1dfb      	adds	r3, r7, #7
    fa16:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_RSSICONFIG, &SX1272->RegRssiConfig );
    fa18:	4b1a      	ldr	r3, [pc, #104]	; (fa84 <SX1272FskSetRssiOffset+0x78>)
    fa1a:	681b      	ldr	r3, [r3, #0]
    fa1c:	330e      	adds	r3, #14
    fa1e:	200e      	movs	r0, #14
    fa20:	1c19      	adds	r1, r3, #0
    fa22:	4b19      	ldr	r3, [pc, #100]	; (fa88 <SX1272FskSetRssiOffset+0x7c>)
    fa24:	4798      	blx	r3
    if( offset < 0 )
    fa26:	1dfb      	adds	r3, r7, #7
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	2b7f      	cmp	r3, #127	; 0x7f
    fa2c:	d914      	bls.n	fa58 <SX1272FskSetRssiOffset+0x4c>
    {
        offset = ( ~offset & 0x1F );
    fa2e:	1dfb      	adds	r3, r7, #7
    fa30:	781b      	ldrb	r3, [r3, #0]
    fa32:	43db      	mvns	r3, r3
    fa34:	b2da      	uxtb	r2, r3
    fa36:	1dfb      	adds	r3, r7, #7
    fa38:	1c11      	adds	r1, r2, #0
    fa3a:	221f      	movs	r2, #31
    fa3c:	400a      	ands	r2, r1
    fa3e:	701a      	strb	r2, [r3, #0]
        offset += 1;
    fa40:	1dfb      	adds	r3, r7, #7
    fa42:	781b      	ldrb	r3, [r3, #0]
    fa44:	3301      	adds	r3, #1
    fa46:	b2da      	uxtb	r2, r3
    fa48:	1dfb      	adds	r3, r7, #7
    fa4a:	701a      	strb	r2, [r3, #0]
        offset = -offset;
    fa4c:	1dfb      	adds	r3, r7, #7
    fa4e:	781b      	ldrb	r3, [r3, #0]
    fa50:	425b      	negs	r3, r3
    fa52:	b2da      	uxtb	r2, r3
    fa54:	1dfb      	adds	r3, r7, #7
    fa56:	701a      	strb	r2, [r3, #0]
    }
    SX1272->RegRssiConfig |= ( uint8_t )( ( offset & 0x1F ) << 3 );
    fa58:	4b0a      	ldr	r3, [pc, #40]	; (fa84 <SX1272FskSetRssiOffset+0x78>)
    fa5a:	681a      	ldr	r2, [r3, #0]
    fa5c:	4b09      	ldr	r3, [pc, #36]	; (fa84 <SX1272FskSetRssiOffset+0x78>)
    fa5e:	681b      	ldr	r3, [r3, #0]
    fa60:	7b99      	ldrb	r1, [r3, #14]
    fa62:	1dfb      	adds	r3, r7, #7
    fa64:	781b      	ldrb	r3, [r3, #0]
    fa66:	00db      	lsls	r3, r3, #3
    fa68:	b2db      	uxtb	r3, r3
    fa6a:	430b      	orrs	r3, r1
    fa6c:	b2db      	uxtb	r3, r3
    fa6e:	7393      	strb	r3, [r2, #14]
    SX1272Write( REG_RSSICONFIG, SX1272->RegRssiConfig );
    fa70:	4b04      	ldr	r3, [pc, #16]	; (fa84 <SX1272FskSetRssiOffset+0x78>)
    fa72:	681b      	ldr	r3, [r3, #0]
    fa74:	7b9b      	ldrb	r3, [r3, #14]
    fa76:	200e      	movs	r0, #14
    fa78:	1c19      	adds	r1, r3, #0
    fa7a:	4b04      	ldr	r3, [pc, #16]	; (fa8c <SX1272FskSetRssiOffset+0x80>)
    fa7c:	4798      	blx	r3
}
    fa7e:	46bd      	mov	sp, r7
    fa80:	b002      	add	sp, #8
    fa82:	bd80      	pop	{r7, pc}
    fa84:	200036c8 	.word	0x200036c8
    fa88:	00010919 	.word	0x00010919
    fa8c:	000108e5 	.word	0x000108e5

0000fa90 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    fa90:	b580      	push	{r7, lr}
    fa92:	b082      	sub	sp, #8
    fa94:	af00      	add	r7, sp, #0
    fa96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fa98:	687b      	ldr	r3, [r7, #4]
    fa9a:	2200      	movs	r2, #0
    fa9c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    fa9e:	687b      	ldr	r3, [r7, #4]
    faa0:	2200      	movs	r2, #0
    faa2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    faa4:	687b      	ldr	r3, [r7, #4]
    faa6:	2201      	movs	r2, #1
    faa8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	2201      	movs	r2, #1
    faae:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    fab0:	687b      	ldr	r3, [r7, #4]
    fab2:	2200      	movs	r2, #0
    fab4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fab6:	687b      	ldr	r3, [r7, #4]
    fab8:	2202      	movs	r2, #2
    faba:	72da      	strb	r2, [r3, #11]
}
    fabc:	46bd      	mov	sp, r7
    fabe:	b002      	add	sp, #8
    fac0:	bd80      	pop	{r7, pc}
    fac2:	46c0      	nop			; (mov r8, r8)

0000fac4 <SX1272LoRaInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272LoRaInit( void )
{
    fac4:	b580      	push	{r7, lr}
    fac6:	af00      	add	r7, sp, #0
    RFLRState = RFLR_STATE_IDLE;
    fac8:	4b46      	ldr	r3, [pc, #280]	; (fbe4 <SX1272LoRaInit+0x120>)
    faca:	2200      	movs	r2, #0
    facc:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio
	//------------------------
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
    face:	4b46      	ldr	r3, [pc, #280]	; (fbe8 <SX1272LoRaInit+0x124>)
    fad0:	2001      	movs	r0, #1
    fad2:	1c19      	adds	r1, r3, #0
    fad4:	226f      	movs	r2, #111	; 0x6f
    fad6:	4b45      	ldr	r3, [pc, #276]	; (fbec <SX1272LoRaInit+0x128>)
    fad8:	4798      	blx	r3
	//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fada:	4b43      	ldr	r3, [pc, #268]	; (fbe8 <SX1272LoRaInit+0x124>)
    fadc:	2001      	movs	r0, #1
    fade:	1c19      	adds	r1, r3, #0
    fae0:	226f      	movs	r2, #111	; 0x6f
    fae2:	4b42      	ldr	r3, [pc, #264]	; (fbec <SX1272LoRaInit+0x128>)
    fae4:	4798      	blx	r3
 
 	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
    fae6:	2000      	movs	r0, #0
    fae8:	4b41      	ldr	r3, [pc, #260]	; (fbf0 <SX1272LoRaInit+0x12c>)
    faea:	4798      	blx	r3
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
    faec:	4b41      	ldr	r3, [pc, #260]	; (fbf4 <SX1272LoRaInit+0x130>)
    faee:	681a      	ldr	r2, [r3, #0]
    faf0:	4b40      	ldr	r3, [pc, #256]	; (fbf4 <SX1272LoRaInit+0x130>)
    faf2:	681b      	ldr	r3, [r3, #0]
    faf4:	785b      	ldrb	r3, [r3, #1]
    faf6:	2180      	movs	r1, #128	; 0x80
    faf8:	4249      	negs	r1, r1
    fafa:	430b      	orrs	r3, r1
    fafc:	b2db      	uxtb	r3, r3
    fafe:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );    
    fb00:	4b3c      	ldr	r3, [pc, #240]	; (fbf4 <SX1272LoRaInit+0x130>)
    fb02:	681b      	ldr	r3, [r3, #0]
    fb04:	785b      	ldrb	r3, [r3, #1]
    fb06:	2001      	movs	r0, #1
    fb08:	1c19      	adds	r1, r3, #0
    fb0a:	4b3b      	ldr	r3, [pc, #236]	; (fbf8 <SX1272LoRaInit+0x134>)
    fb0c:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
    fb0e:	4b36      	ldr	r3, [pc, #216]	; (fbe8 <SX1272LoRaInit+0x124>)
    fb10:	2001      	movs	r0, #1
    fb12:	1c19      	adds	r1, r3, #0
    fb14:	226f      	movs	r2, #111	; 0x6f
    fb16:	4b35      	ldr	r3, [pc, #212]	; (fbec <SX1272LoRaInit+0x128>)
    fb18:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register
    // structure with the value of our setup
    //--------------------------------------
    SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & ~RFLR_PACONFIG_PASELECT_PABOOST ) |
    fb1a:	4b36      	ldr	r3, [pc, #216]	; (fbf4 <SX1272LoRaInit+0x130>)
    fb1c:	681a      	ldr	r2, [r3, #0]
    fb1e:	4b35      	ldr	r3, [pc, #212]	; (fbf4 <SX1272LoRaInit+0x130>)
    fb20:	681b      	ldr	r3, [r3, #0]
    fb22:	7a5b      	ldrb	r3, [r3, #9]
    fb24:	2180      	movs	r1, #128	; 0x80
    fb26:	4249      	negs	r1, r1
    fb28:	430b      	orrs	r3, r1
    fb2a:	b2db      	uxtb	r3, r3
    fb2c:	7253      	strb	r3, [r2, #9]
                            RFLR_PACONFIG_PASELECT_PABOOST;
    SX1272LR->RegLna = RFLR_LNA_GAIN_G1 | RFLR_LNA_BOOST_ON;
    fb2e:	4b31      	ldr	r3, [pc, #196]	; (fbf4 <SX1272LoRaInit+0x130>)
    fb30:	681b      	ldr	r3, [r3, #0]
    fb32:	2223      	movs	r2, #35	; 0x23
    fb34:	731a      	strb	r2, [r3, #12]

    SX1272WriteBuffer( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fb36:	4b2c      	ldr	r3, [pc, #176]	; (fbe8 <SX1272LoRaInit+0x124>)
    fb38:	2001      	movs	r0, #1
    fb3a:	1c19      	adds	r1, r3, #0
    fb3c:	226f      	movs	r2, #111	; 0x6f
    fb3e:	4b2f      	ldr	r3, [pc, #188]	; (fbfc <SX1272LoRaInit+0x138>)
    fb40:	4798      	blx	r3
	
    // set the RF settings 
    SX1272LoRaSetRFFrequency( LoRaSettings.RFFrequency );
    fb42:	4b2f      	ldr	r3, [pc, #188]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb44:	681b      	ldr	r3, [r3, #0]
    fb46:	1c18      	adds	r0, r3, #0
    fb48:	4b2e      	ldr	r3, [pc, #184]	; (fc04 <SX1272LoRaInit+0x140>)
    fb4a:	4798      	blx	r3
    SX1272LoRaSetPa20dBm( true );
    fb4c:	2001      	movs	r0, #1
    fb4e:	4b2e      	ldr	r3, [pc, #184]	; (fc08 <SX1272LoRaInit+0x144>)
    fb50:	4798      	blx	r3
    SX1272LoRaSetRFPower( LoRaSettings.Power );
    fb52:	4b2b      	ldr	r3, [pc, #172]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb54:	791b      	ldrb	r3, [r3, #4]
    fb56:	b25b      	sxtb	r3, r3
    fb58:	1c18      	adds	r0, r3, #0
    fb5a:	4b2c      	ldr	r3, [pc, #176]	; (fc0c <SX1272LoRaInit+0x148>)
    fb5c:	4798      	blx	r3
    SX1272LoRaSetSpreadingFactor( LoRaSettings.SpreadingFactor ); // SF6 only operates in implicit header mode.
    fb5e:	4b28      	ldr	r3, [pc, #160]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb60:	799b      	ldrb	r3, [r3, #6]
    fb62:	1c18      	adds	r0, r3, #0
    fb64:	4b2a      	ldr	r3, [pc, #168]	; (fc10 <SX1272LoRaInit+0x14c>)
    fb66:	4798      	blx	r3
    SX1272LoRaSetErrorCoding( LoRaSettings.ErrorCoding );
    fb68:	4b25      	ldr	r3, [pc, #148]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb6a:	79db      	ldrb	r3, [r3, #7]
    fb6c:	1c18      	adds	r0, r3, #0
    fb6e:	4b29      	ldr	r3, [pc, #164]	; (fc14 <SX1272LoRaInit+0x150>)
    fb70:	4798      	blx	r3
    SX1272LoRaSetPacketCrcOn( LoRaSettings.CrcOn );
    fb72:	4b23      	ldr	r3, [pc, #140]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb74:	7a1b      	ldrb	r3, [r3, #8]
    fb76:	1c18      	adds	r0, r3, #0
    fb78:	4b27      	ldr	r3, [pc, #156]	; (fc18 <SX1272LoRaInit+0x154>)
    fb7a:	4798      	blx	r3
    SX1272LoRaSetSignalBandwidth( LoRaSettings.SignalBw );
    fb7c:	4b20      	ldr	r3, [pc, #128]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb7e:	795b      	ldrb	r3, [r3, #5]
    fb80:	1c18      	adds	r0, r3, #0
    fb82:	4b26      	ldr	r3, [pc, #152]	; (fc1c <SX1272LoRaInit+0x158>)
    fb84:	4798      	blx	r3
    
    SX1272LoRaSetImplicitHeaderOn( LoRaSettings.ImplicitHeaderOn );
    fb86:	4b1e      	ldr	r3, [pc, #120]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb88:	7a5b      	ldrb	r3, [r3, #9]
    fb8a:	1c18      	adds	r0, r3, #0
    fb8c:	4b24      	ldr	r3, [pc, #144]	; (fc20 <SX1272LoRaInit+0x15c>)
    fb8e:	4798      	blx	r3
    SX1272LoRaSetSymbTimeout( 0x3FF );
    fb90:	4b24      	ldr	r3, [pc, #144]	; (fc24 <SX1272LoRaInit+0x160>)
    fb92:	1c18      	adds	r0, r3, #0
    fb94:	4b24      	ldr	r3, [pc, #144]	; (fc28 <SX1272LoRaInit+0x164>)
    fb96:	4798      	blx	r3
    SX1272LoRaSetPayloadLength( LoRaSettings.PayloadLength );
    fb98:	4b19      	ldr	r3, [pc, #100]	; (fc00 <SX1272LoRaInit+0x13c>)
    fb9a:	7e1b      	ldrb	r3, [r3, #24]
    fb9c:	1c18      	adds	r0, r3, #0
    fb9e:	4b23      	ldr	r3, [pc, #140]	; (fc2c <SX1272LoRaInit+0x168>)
    fba0:	4798      	blx	r3
    SX1272LoRaSetLowDatarateOptimize( true );
    fba2:	2001      	movs	r0, #1
    fba4:	4b22      	ldr	r3, [pc, #136]	; (fc30 <SX1272LoRaInit+0x16c>)
    fba6:	4798      	blx	r3
	
 
	if (setCW != 0)
    fba8:	4b22      	ldr	r3, [pc, #136]	; (fc34 <SX1272LoRaInit+0x170>)
    fbaa:	781b      	ldrb	r3, [r3, #0]
    fbac:	2b00      	cmp	r3, #0
    fbae:	d003      	beq.n	fbb8 <SX1272LoRaInit+0xf4>
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON);
    fbb0:	2008      	movs	r0, #8
    fbb2:	4b21      	ldr	r3, [pc, #132]	; (fc38 <SX1272LoRaInit+0x174>)
    fbb4:	4798      	blx	r3
    fbb6:	e002      	b.n	fbbe <SX1272LoRaInit+0xfa>
	}
	else
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF);
    fbb8:	2000      	movs	r0, #0
    fbba:	4b1f      	ldr	r3, [pc, #124]	; (fc38 <SX1272LoRaInit+0x174>)
    fbbc:	4798      	blx	r3
	}

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
    fbbe:	2001      	movs	r0, #1
    fbc0:	4b0b      	ldr	r3, [pc, #44]	; (fbf0 <SX1272LoRaInit+0x12c>)
    fbc2:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );		
    fbc4:	4b08      	ldr	r3, [pc, #32]	; (fbe8 <SX1272LoRaInit+0x124>)
    fbc6:	2001      	movs	r0, #1
    fbc8:	1c19      	adds	r1, r3, #0
    fbca:	226f      	movs	r2, #111	; 0x6f
    fbcc:	4b07      	ldr	r3, [pc, #28]	; (fbec <SX1272LoRaInit+0x128>)
    fbce:	4798      	blx	r3
	
	if (setCW != 0)
    fbd0:	4b18      	ldr	r3, [pc, #96]	; (fc34 <SX1272LoRaInit+0x170>)
    fbd2:	781b      	ldrb	r3, [r3, #0]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d002      	beq.n	fbde <SX1272LoRaInit+0x11a>
	{
		SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER);
    fbd8:	2003      	movs	r0, #3
    fbda:	4b05      	ldr	r3, [pc, #20]	; (fbf0 <SX1272LoRaInit+0x12c>)
    fbdc:	4798      	blx	r3
	}
}
    fbde:	46bd      	mov	sp, r7
    fbe0:	bd80      	pop	{r7, pc}
    fbe2:	46c0      	nop			; (mov r8, r8)
    fbe4:	200004e6 	.word	0x200004e6
    fbe8:	200038d1 	.word	0x200038d1
    fbec:	0001098d 	.word	0x0001098d
    fbf0:	0000fc3d 	.word	0x0000fc3d
    fbf4:	200037cc 	.word	0x200037cc
    fbf8:	000108e5 	.word	0x000108e5
    fbfc:	00010955 	.word	0x00010955
    fc00:	20000028 	.word	0x20000028
    fc04:	00010189 	.word	0x00010189
    fc08:	00010601 	.word	0x00010601
    fc0c:	00010219 	.word	0x00010219
    fc10:	000103e1 	.word	0x000103e1
    fc14:	00010485 	.word	0x00010485
    fc18:	000104ed 	.word	0x000104ed
    fc1c:	00010375 	.word	0x00010375
    fc20:	00010555 	.word	0x00010555
    fc24:	000003ff 	.word	0x000003ff
    fc28:	000106bd 	.word	0x000106bd
    fc2c:	000105bd 	.word	0x000105bd
    fc30:	00010735 	.word	0x00010735
    fc34:	2000365c 	.word	0x2000365c
    fc38:	0001065d 	.word	0x0001065d

0000fc3c <SX1272LoRaSetOpMode>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272LoRaSetOpMode( uint8_t opMode )
{
    fc3c:	b580      	push	{r7, lr}
    fc3e:	b082      	sub	sp, #8
    fc40:	af00      	add	r7, sp, #0
    fc42:	1c02      	adds	r2, r0, #0
    fc44:	1dfb      	adds	r3, r7, #7
    fc46:	701a      	strb	r2, [r3, #0]
   
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_MASK ) | opMode;
    fc48:	4b0c      	ldr	r3, [pc, #48]	; (fc7c <SX1272LoRaSetOpMode+0x40>)
    fc4a:	681a      	ldr	r2, [r3, #0]
    fc4c:	4b0b      	ldr	r3, [pc, #44]	; (fc7c <SX1272LoRaSetOpMode+0x40>)
    fc4e:	681b      	ldr	r3, [r3, #0]
    fc50:	785b      	ldrb	r3, [r3, #1]
    fc52:	b2db      	uxtb	r3, r3
    fc54:	2107      	movs	r1, #7
    fc56:	438b      	bics	r3, r1
    fc58:	b2d9      	uxtb	r1, r3
    fc5a:	1dfb      	adds	r3, r7, #7
    fc5c:	781b      	ldrb	r3, [r3, #0]
    fc5e:	430b      	orrs	r3, r1
    fc60:	b2db      	uxtb	r3, r3
    fc62:	b2db      	uxtb	r3, r3
    fc64:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );        
    fc66:	4b05      	ldr	r3, [pc, #20]	; (fc7c <SX1272LoRaSetOpMode+0x40>)
    fc68:	681b      	ldr	r3, [r3, #0]
    fc6a:	785b      	ldrb	r3, [r3, #1]
    fc6c:	2001      	movs	r0, #1
    fc6e:	1c19      	adds	r1, r3, #0
    fc70:	4b03      	ldr	r3, [pc, #12]	; (fc80 <SX1272LoRaSetOpMode+0x44>)
    fc72:	4798      	blx	r3
}
    fc74:	46bd      	mov	sp, r7
    fc76:	b002      	add	sp, #8
    fc78:	bd80      	pop	{r7, pc}
    fc7a:	46c0      	nop			; (mov r8, r8)
    fc7c:	200037cc 	.word	0x200037cc
    fc80:	000108e5 	.word	0x000108e5

0000fc84 <configure_extintLORA_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_channel(void)
{
    fc84:	b580      	push	{r7, lr}
    fc86:	b084      	sub	sp, #16
    fc88:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    fc8a:	1d3b      	adds	r3, r7, #4
    fc8c:	1c18      	adds	r0, r3, #0
    fc8e:	4b0b      	ldr	r3, [pc, #44]	; (fcbc <configure_extintLORA_channel+0x38>)
    fc90:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
    fc92:	1d3b      	adds	r3, r7, #4
    fc94:	2229      	movs	r2, #41	; 0x29
    fc96:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
    fc98:	1d3b      	adds	r3, r7, #4
    fc9a:	2200      	movs	r2, #0
    fc9c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    fc9e:	1d3b      	adds	r3, r7, #4
    fca0:	2201      	movs	r2, #1
    fca2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
    fca4:	1d3b      	adds	r3, r7, #4
    fca6:	2201      	movs	r2, #1
    fca8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
    fcaa:	1d3b      	adds	r3, r7, #4
    fcac:	2009      	movs	r0, #9
    fcae:	1c19      	adds	r1, r3, #0
    fcb0:	4b03      	ldr	r3, [pc, #12]	; (fcc0 <configure_extintLORA_channel+0x3c>)
    fcb2:	4798      	blx	r3
}
    fcb4:	46bd      	mov	sp, r7
    fcb6:	b004      	add	sp, #16
    fcb8:	bd80      	pop	{r7, pc}
    fcba:	46c0      	nop			; (mov r8, r8)
    fcbc:	0000fa91 	.word	0x0000fa91
    fcc0:	0000406d 	.word	0x0000406d

0000fcc4 <configure_extintLORA_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_callbacks(void)
{
    fcc4:	b580      	push	{r7, lr}
    fcc6:	af00      	add	r7, sp, #0
	extint_register_callback(extintLORA_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
    fcc8:	4b05      	ldr	r3, [pc, #20]	; (fce0 <configure_extintLORA_callbacks+0x1c>)
    fcca:	1c18      	adds	r0, r3, #0
    fccc:	2109      	movs	r1, #9
    fcce:	2200      	movs	r2, #0
    fcd0:	4b04      	ldr	r3, [pc, #16]	; (fce4 <configure_extintLORA_callbacks+0x20>)
    fcd2:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
    fcd4:	2009      	movs	r0, #9
    fcd6:	2100      	movs	r1, #0
    fcd8:	4b03      	ldr	r3, [pc, #12]	; (fce8 <configure_extintLORA_callbacks+0x24>)
    fcda:	4798      	blx	r3
}
    fcdc:	46bd      	mov	sp, r7
    fcde:	bd80      	pop	{r7, pc}
    fce0:	0000fced 	.word	0x0000fced
    fce4:	00004239 	.word	0x00004239
    fce8:	00004295 	.word	0x00004295

0000fcec <extintLORA_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintLORA_detection_callback(void)
{
    fcec:	b580      	push	{r7, lr}
    fcee:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFLORA;
    fcf0:	4b07      	ldr	r3, [pc, #28]	; (fd10 <extintLORA_detection_callback+0x24>)
    fcf2:	681b      	ldr	r3, [r3, #0]
    fcf4:	2280      	movs	r2, #128	; 0x80
    fcf6:	00d2      	lsls	r2, r2, #3
    fcf8:	431a      	orrs	r2, r3
    fcfa:	4b05      	ldr	r3, [pc, #20]	; (fd10 <extintLORA_detection_callback+0x24>)
    fcfc:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFFSK;
    fcfe:	4b04      	ldr	r3, [pc, #16]	; (fd10 <extintLORA_detection_callback+0x24>)
    fd00:	681b      	ldr	r3, [r3, #0]
    fd02:	2280      	movs	r2, #128	; 0x80
    fd04:	0092      	lsls	r2, r2, #2
    fd06:	431a      	orrs	r2, r3
    fd08:	4b01      	ldr	r3, [pc, #4]	; (fd10 <extintLORA_detection_callback+0x24>)
    fd0a:	601a      	str	r2, [r3, #0]
}
    fd0c:	46bd      	mov	sp, r7
    fd0e:	bd80      	pop	{r7, pc}
    fd10:	20003668 	.word	0x20003668

0000fd14 <AppLoraTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraTask(void)
{
    fd14:	b580      	push	{r7, lr}
    fd16:	af00      	add	r7, sp, #0
		
	if ((setCW == 0)&&(setRXContinuous==0)&&(whichRadio == WHICHRADIO_LORA))
    fd18:	4b6a      	ldr	r3, [pc, #424]	; (fec4 <AppLoraTask+0x1b0>)
    fd1a:	781b      	ldrb	r3, [r3, #0]
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d000      	beq.n	fd22 <AppLoraTask+0xe>
    fd20:	e0ce      	b.n	fec0 <AppLoraTask+0x1ac>
    fd22:	4b69      	ldr	r3, [pc, #420]	; (fec8 <AppLoraTask+0x1b4>)
    fd24:	781b      	ldrb	r3, [r3, #0]
    fd26:	2b00      	cmp	r3, #0
    fd28:	d000      	beq.n	fd2c <AppLoraTask+0x18>
    fd2a:	e0c9      	b.n	fec0 <AppLoraTask+0x1ac>
    fd2c:	4b67      	ldr	r3, [pc, #412]	; (fecc <AppLoraTask+0x1b8>)
    fd2e:	781b      	ldrb	r3, [r3, #0]
    fd30:	2b99      	cmp	r3, #153	; 0x99
    fd32:	d000      	beq.n	fd36 <AppLoraTask+0x22>
    fd34:	e0c4      	b.n	fec0 <AppLoraTask+0x1ac>
	{	 
		if (whichRadio == WHICHRADIO_LORA)
    fd36:	4b65      	ldr	r3, [pc, #404]	; (fecc <AppLoraTask+0x1b8>)
    fd38:	781b      	ldrb	r3, [r3, #0]
    fd3a:	2b99      	cmp	r3, #153	; 0x99
    fd3c:	d000      	beq.n	fd40 <AppLoraTask+0x2c>
    fd3e:	e0bf      	b.n	fec0 <AppLoraTask+0x1ac>
		{	
			SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
    fd40:	4b63      	ldr	r3, [pc, #396]	; (fed0 <AppLoraTask+0x1bc>)
    fd42:	681b      	ldr	r3, [r3, #0]
    fd44:	3312      	adds	r3, #18
    fd46:	2012      	movs	r0, #18
    fd48:	1c19      	adds	r1, r3, #0
    fd4a:	4b62      	ldr	r3, [pc, #392]	; (fed4 <AppLoraTask+0x1c0>)
    fd4c:	4798      	blx	r3
			//----------------------------
			/// see if RX DONE for a receive event 
			//----------------------------
 			if (((SX1272LR->RegIrqFlags & 0x40)!= 0) && (setTXContinuous==0))
    fd4e:	4b60      	ldr	r3, [pc, #384]	; (fed0 <AppLoraTask+0x1bc>)
    fd50:	681b      	ldr	r3, [r3, #0]
    fd52:	7c9b      	ldrb	r3, [r3, #18]
    fd54:	1c1a      	adds	r2, r3, #0
    fd56:	2340      	movs	r3, #64	; 0x40
    fd58:	4013      	ands	r3, r2
    fd5a:	d100      	bne.n	fd5e <AppLoraTask+0x4a>
    fd5c:	e07a      	b.n	fe54 <AppLoraTask+0x140>
    fd5e:	4b5e      	ldr	r3, [pc, #376]	; (fed8 <AppLoraTask+0x1c4>)
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	2b00      	cmp	r3, #0
    fd64:	d176      	bne.n	fe54 <AppLoraTask+0x140>
 			{ 		
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
    fd66:	2012      	movs	r0, #18
    fd68:	2140      	movs	r1, #64	; 0x40
    fd6a:	4b5c      	ldr	r3, [pc, #368]	; (fedc <AppLoraTask+0x1c8>)
    fd6c:	4798      	blx	r3
				RFLRState = RFLR_STATE_RX_DONE;		
    fd6e:	4b5c      	ldr	r3, [pc, #368]	; (fee0 <AppLoraTask+0x1cc>)
    fd70:	2203      	movs	r2, #3
    fd72:	701a      	strb	r2, [r3, #0]
		
				loraReceiveCount++;
    fd74:	4b5b      	ldr	r3, [pc, #364]	; (fee4 <AppLoraTask+0x1d0>)
    fd76:	881b      	ldrh	r3, [r3, #0]
    fd78:	3301      	adds	r3, #1
    fd7a:	b29a      	uxth	r2, r3
    fd7c:	4b59      	ldr	r3, [pc, #356]	; (fee4 <AppLoraTask+0x1d0>)
    fd7e:	801a      	strh	r2, [r3, #0]
				SX1272Read( REG_LR_FIFORXCURRENTADDR, &SX1272LR->RegFifoRxCurrentAddr );
    fd80:	4b53      	ldr	r3, [pc, #332]	; (fed0 <AppLoraTask+0x1bc>)
    fd82:	681b      	ldr	r3, [r3, #0]
    fd84:	3310      	adds	r3, #16
    fd86:	2010      	movs	r0, #16
    fd88:	1c19      	adds	r1, r3, #0
    fd8a:	4b52      	ldr	r3, [pc, #328]	; (fed4 <AppLoraTask+0x1c0>)
    fd8c:	4798      	blx	r3

 
				SX1272Read( REG_LR_NBRXBYTES, &SX1272LR->RegNbRxBytes );
    fd8e:	4b50      	ldr	r3, [pc, #320]	; (fed0 <AppLoraTask+0x1bc>)
    fd90:	681b      	ldr	r3, [r3, #0]
    fd92:	3313      	adds	r3, #19
    fd94:	2013      	movs	r0, #19
    fd96:	1c19      	adds	r1, r3, #0
    fd98:	4b4e      	ldr	r3, [pc, #312]	; (fed4 <AppLoraTask+0x1c0>)
    fd9a:	4798      	blx	r3
				RxPacketSize = SX1272LR->RegNbRxBytes;
    fd9c:	4b4c      	ldr	r3, [pc, #304]	; (fed0 <AppLoraTask+0x1bc>)
    fd9e:	681b      	ldr	r3, [r3, #0]
    fda0:	7cdb      	ldrb	r3, [r3, #19]
    fda2:	1c1a      	adds	r2, r3, #0
    fda4:	4b50      	ldr	r3, [pc, #320]	; (fee8 <AppLoraTask+0x1d4>)
    fda6:	801a      	strh	r2, [r3, #0]
				RFBufferLora[0] = RxPacketSize; 
    fda8:	4b4f      	ldr	r3, [pc, #316]	; (fee8 <AppLoraTask+0x1d4>)
    fdaa:	881b      	ldrh	r3, [r3, #0]
    fdac:	b2da      	uxtb	r2, r3
    fdae:	4b4f      	ldr	r3, [pc, #316]	; (feec <AppLoraTask+0x1d8>)
    fdb0:	701a      	strb	r2, [r3, #0]
				SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxCurrentAddr;
    fdb2:	4b47      	ldr	r3, [pc, #284]	; (fed0 <AppLoraTask+0x1bc>)
    fdb4:	681a      	ldr	r2, [r3, #0]
    fdb6:	4b46      	ldr	r3, [pc, #280]	; (fed0 <AppLoraTask+0x1bc>)
    fdb8:	681b      	ldr	r3, [r3, #0]
    fdba:	7c1b      	ldrb	r3, [r3, #16]
    fdbc:	7353      	strb	r3, [r2, #13]
				SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
    fdbe:	4b44      	ldr	r3, [pc, #272]	; (fed0 <AppLoraTask+0x1bc>)
    fdc0:	681b      	ldr	r3, [r3, #0]
    fdc2:	7b5b      	ldrb	r3, [r3, #13]
    fdc4:	200d      	movs	r0, #13
    fdc6:	1c19      	adds	r1, r3, #0
    fdc8:	4b44      	ldr	r3, [pc, #272]	; (fedc <AppLoraTask+0x1c8>)
    fdca:	4798      	blx	r3
				SX1272ReadFifo( RFBufferLora+1, SX1272LR->RegNbRxBytes );
    fdcc:	4b40      	ldr	r3, [pc, #256]	; (fed0 <AppLoraTask+0x1bc>)
    fdce:	681b      	ldr	r3, [r3, #0]
    fdd0:	7cdb      	ldrb	r3, [r3, #19]
    fdd2:	4a47      	ldr	r2, [pc, #284]	; (fef0 <AppLoraTask+0x1dc>)
    fdd4:	1c10      	adds	r0, r2, #0
    fdd6:	1c19      	adds	r1, r3, #0
    fdd8:	4b46      	ldr	r3, [pc, #280]	; (fef4 <AppLoraTask+0x1e0>)
    fdda:	4798      	blx	r3
 
				if (testRFBufferOffset >= MAXPACKETS2)
    fddc:	4b46      	ldr	r3, [pc, #280]	; (fef8 <AppLoraTask+0x1e4>)
    fdde:	781b      	ldrb	r3, [r3, #0]
    fde0:	2b03      	cmp	r3, #3
    fde2:	d902      	bls.n	fdea <AppLoraTask+0xd6>
				{
					testRFBufferOffset = 0; 
    fde4:	4b44      	ldr	r3, [pc, #272]	; (fef8 <AppLoraTask+0x1e4>)
    fde6:	2200      	movs	r2, #0
    fde8:	701a      	strb	r2, [r3, #0]
				}
				testRFBuffer[testRFBufferOffset].Length = RFBufferLora[1];  //0];
    fdea:	4b43      	ldr	r3, [pc, #268]	; (fef8 <AppLoraTask+0x1e4>)
    fdec:	781b      	ldrb	r3, [r3, #0]
    fdee:	1c1a      	adds	r2, r3, #0
    fdf0:	4b3e      	ldr	r3, [pc, #248]	; (feec <AppLoraTask+0x1d8>)
    fdf2:	7858      	ldrb	r0, [r3, #1]
    fdf4:	4941      	ldr	r1, [pc, #260]	; (fefc <AppLoraTask+0x1e8>)
    fdf6:	1c13      	adds	r3, r2, #0
    fdf8:	005b      	lsls	r3, r3, #1
    fdfa:	189b      	adds	r3, r3, r2
    fdfc:	1c02      	adds	r2, r0, #0
    fdfe:	545a      	strb	r2, [r3, r1]
				testRFBuffer[testRFBufferOffset].Command[0] = RFBufferLora[3]; //2]; 
    fe00:	4b3d      	ldr	r3, [pc, #244]	; (fef8 <AppLoraTask+0x1e4>)
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	1c1a      	adds	r2, r3, #0
    fe06:	4b39      	ldr	r3, [pc, #228]	; (feec <AppLoraTask+0x1d8>)
    fe08:	78d9      	ldrb	r1, [r3, #3]
    fe0a:	483c      	ldr	r0, [pc, #240]	; (fefc <AppLoraTask+0x1e8>)
    fe0c:	1c13      	adds	r3, r2, #0
    fe0e:	005b      	lsls	r3, r3, #1
    fe10:	189b      	adds	r3, r3, r2
    fe12:	18c3      	adds	r3, r0, r3
    fe14:	1c0a      	adds	r2, r1, #0
    fe16:	705a      	strb	r2, [r3, #1]
				testRFBuffer[testRFBufferOffset].Command[1] = RFBufferLora[4]; //3]; 
    fe18:	4b37      	ldr	r3, [pc, #220]	; (fef8 <AppLoraTask+0x1e4>)
    fe1a:	781b      	ldrb	r3, [r3, #0]
    fe1c:	1c1a      	adds	r2, r3, #0
    fe1e:	4b33      	ldr	r3, [pc, #204]	; (feec <AppLoraTask+0x1d8>)
    fe20:	7919      	ldrb	r1, [r3, #4]
    fe22:	4836      	ldr	r0, [pc, #216]	; (fefc <AppLoraTask+0x1e8>)
    fe24:	1c13      	adds	r3, r2, #0
    fe26:	005b      	lsls	r3, r3, #1
    fe28:	189b      	adds	r3, r3, r2
    fe2a:	18c3      	adds	r3, r0, r3
    fe2c:	3301      	adds	r3, #1
    fe2e:	1c0a      	adds	r2, r1, #0
    fe30:	705a      	strb	r2, [r3, #1]
		#if REMOTEBOARD		
				AppScreenFSKReadingIn(&RFBufferLora[1],testRFBufferOffset);
		#endif		
				testRFBufferOffset++;	
    fe32:	4b31      	ldr	r3, [pc, #196]	; (fef8 <AppLoraTask+0x1e4>)
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	3301      	adds	r3, #1
    fe38:	b2da      	uxtb	r2, r3
    fe3a:	4b2f      	ldr	r3, [pc, #188]	; (fef8 <AppLoraTask+0x1e4>)
    fe3c:	701a      	strb	r2, [r3, #0]
				if (testRFBufferOffset >= MAXPACKETS2)
    fe3e:	4b2e      	ldr	r3, [pc, #184]	; (fef8 <AppLoraTask+0x1e4>)
    fe40:	781b      	ldrb	r3, [r3, #0]
    fe42:	2b03      	cmp	r3, #3
    fe44:	d902      	bls.n	fe4c <AppLoraTask+0x138>
				{
					testRFBufferOffset = 0;
    fe46:	4b2c      	ldr	r3, [pc, #176]	; (fef8 <AppLoraTask+0x1e4>)
    fe48:	2200      	movs	r2, #0
    fe4a:	701a      	strb	r2, [r3, #0]
				}	
		#if BRAKEBOARD		
				AppProtocolBrake(&RFBufferLora[1]);
    fe4c:	4b28      	ldr	r3, [pc, #160]	; (fef0 <AppLoraTask+0x1dc>)
    fe4e:	1c18      	adds	r0, r3, #0
    fe50:	4b2b      	ldr	r3, [pc, #172]	; (ff00 <AppLoraTask+0x1ec>)
    fe52:	4798      	blx	r3
		#endif						
			}
			//----------------------------
			/// see if packetSent
			//----------------------------
 			if ((SX1272LR->RegIrqFlags & 0x08)!= 0)  
    fe54:	4b1e      	ldr	r3, [pc, #120]	; (fed0 <AppLoraTask+0x1bc>)
    fe56:	681b      	ldr	r3, [r3, #0]
    fe58:	7c9b      	ldrb	r3, [r3, #18]
    fe5a:	1c1a      	adds	r2, r3, #0
    fe5c:	2308      	movs	r3, #8
    fe5e:	4013      	ands	r3, r2
    fe60:	d02e      	beq.n	fec0 <AppLoraTask+0x1ac>
			{
				SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
    fe62:	2001      	movs	r0, #1
    fe64:	4b27      	ldr	r3, [pc, #156]	; (ff04 <AppLoraTask+0x1f0>)
    fe66:	4798      	blx	r3
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE  );	
    fe68:	2012      	movs	r0, #18
    fe6a:	2108      	movs	r1, #8
    fe6c:	4b1b      	ldr	r3, [pc, #108]	; (fedc <AppLoraTask+0x1c8>)
    fe6e:	4798      	blx	r3
				//--------------------------------
				// set interrupt pin to processor
				SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
    fe70:	4b17      	ldr	r3, [pc, #92]	; (fed0 <AppLoraTask+0x1bc>)
    fe72:	681a      	ldr	r2, [r3, #0]
    fe74:	233f      	movs	r3, #63	; 0x3f
    fe76:	2100      	movs	r1, #0
    fe78:	54d1      	strb	r1, [r2, r3]
				SX1272LR->RegDioMapping2 = 0;
    fe7a:	4b15      	ldr	r3, [pc, #84]	; (fed0 <AppLoraTask+0x1bc>)
    fe7c:	681a      	ldr	r2, [r3, #0]
    fe7e:	2340      	movs	r3, #64	; 0x40
    fe80:	2100      	movs	r1, #0
    fe82:	54d1      	strb	r1, [r2, r3]
				SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
    fe84:	4b12      	ldr	r3, [pc, #72]	; (fed0 <AppLoraTask+0x1bc>)
    fe86:	681b      	ldr	r3, [r3, #0]
    fe88:	333f      	adds	r3, #63	; 0x3f
    fe8a:	2040      	movs	r0, #64	; 0x40
    fe8c:	1c19      	adds	r1, r3, #0
    fe8e:	2202      	movs	r2, #2
    fe90:	4b1d      	ldr	r3, [pc, #116]	; (ff08 <AppLoraTask+0x1f4>)
    fe92:	4798      	blx	r3
				SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
    fe94:	2005      	movs	r0, #5
    fe96:	4b1b      	ldr	r3, [pc, #108]	; (ff04 <AppLoraTask+0x1f0>)
    fe98:	4798      	blx	r3
		#if REMOTEBOARD
				commSupTimer = COMM_SUP_TIME_REMOTE; 
		#endif		
				if (switchOnTransmit != 0)
    fe9a:	4b1c      	ldr	r3, [pc, #112]	; (ff0c <AppLoraTask+0x1f8>)
    fe9c:	781b      	ldrb	r3, [r3, #0]
    fe9e:	2b00      	cmp	r3, #0
    fea0:	d008      	beq.n	feb4 <AppLoraTask+0x1a0>
				{
					whichRadio = switchOnTransmit; 
    fea2:	4b1a      	ldr	r3, [pc, #104]	; (ff0c <AppLoraTask+0x1f8>)
    fea4:	781a      	ldrb	r2, [r3, #0]
    fea6:	4b09      	ldr	r3, [pc, #36]	; (fecc <AppLoraTask+0x1b8>)
    fea8:	701a      	strb	r2, [r3, #0]
					CommInit();
    feaa:	4b19      	ldr	r3, [pc, #100]	; (ff10 <AppLoraTask+0x1fc>)
    feac:	4798      	blx	r3
					switchOnTransmit = 0; 
    feae:	4b17      	ldr	r3, [pc, #92]	; (ff0c <AppLoraTask+0x1f8>)
    feb0:	2200      	movs	r2, #0
    feb2:	701a      	strb	r2, [r3, #0]
				}
				if (setTXContinuous!=0)
    feb4:	4b08      	ldr	r3, [pc, #32]	; (fed8 <AppLoraTask+0x1c4>)
    feb6:	781b      	ldrb	r3, [r3, #0]
    feb8:	2b00      	cmp	r3, #0
    feba:	d001      	beq.n	fec0 <AppLoraTask+0x1ac>
				{
					SendOneMessage();
    febc:	4b15      	ldr	r3, [pc, #84]	; (ff14 <AppLoraTask+0x200>)
    febe:	4798      	blx	r3
				}
			}
		}
	}
}
    fec0:	46bd      	mov	sp, r7
    fec2:	bd80      	pop	{r7, pc}
    fec4:	2000365c 	.word	0x2000365c
    fec8:	2000365d 	.word	0x2000365d
    fecc:	2000369a 	.word	0x2000369a
    fed0:	200037cc 	.word	0x200037cc
    fed4:	00010919 	.word	0x00010919
    fed8:	2000365f 	.word	0x2000365f
    fedc:	000108e5 	.word	0x000108e5
    fee0:	200004e6 	.word	0x200004e6
    fee4:	200004ee 	.word	0x200004ee
    fee8:	200004e8 	.word	0x200004e8
    feec:	200037d0 	.word	0x200037d0
    fef0:	200037d1 	.word	0x200037d1
    fef4:	000109ed 	.word	0x000109ed
    fef8:	200004f0 	.word	0x200004f0
    fefc:	20003948 	.word	0x20003948
    ff00:	00009079 	.word	0x00009079
    ff04:	0000fc3d 	.word	0x0000fc3d
    ff08:	00010955 	.word	0x00010955
    ff0c:	200004d1 	.word	0x200004d1
    ff10:	0000e45d 	.word	0x0000e45d
    ff14:	00009fd5 	.word	0x00009fd5

0000ff18 <AppLoraReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraReceiveStart(void)
{
    ff18:	b580      	push	{r7, lr}
    ff1a:	af00      	add	r7, sp, #0
	 
 
 	//------------------------
	// set up receive.
	//------------------------
	SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
    ff1c:	4b39      	ldr	r3, [pc, #228]	; (10004 <AppLoraReceiveStart+0xec>)
    ff1e:	681b      	ldr	r3, [r3, #0]
    ff20:	3312      	adds	r3, #18
    ff22:	2012      	movs	r0, #18
    ff24:	1c19      	adds	r1, r3, #0
    ff26:	4b38      	ldr	r3, [pc, #224]	; (10008 <AppLoraReceiveStart+0xf0>)
    ff28:	4798      	blx	r3
    memset( RFBufferLora, 0, ( size_t )RF_BUFFER_SIZE );
    ff2a:	4a38      	ldr	r2, [pc, #224]	; (1000c <AppLoraReceiveStart+0xf4>)
    ff2c:	2380      	movs	r3, #128	; 0x80
    ff2e:	005b      	lsls	r3, r3, #1
    ff30:	1c10      	adds	r0, r2, #0
    ff32:	2100      	movs	r1, #0
    ff34:	1c1a      	adds	r2, r3, #0
    ff36:	4b36      	ldr	r3, [pc, #216]	; (10010 <AppLoraReceiveStart+0xf8>)
    ff38:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintLORA_channel();
    ff3a:	4b36      	ldr	r3, [pc, #216]	; (10014 <AppLoraReceiveStart+0xfc>)
    ff3c:	4798      	blx	r3
	configure_extintLORA_callbacks();
    ff3e:	4b36      	ldr	r3, [pc, #216]	; (10018 <AppLoraReceiveStart+0x100>)
    ff40:	4798      	blx	r3

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
    ff42:	2001      	movs	r0, #1
    ff44:	4b35      	ldr	r3, [pc, #212]	; (1001c <AppLoraReceiveStart+0x104>)
    ff46:	4798      	blx	r3
 
	SX1272LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
    ff48:	4b2e      	ldr	r3, [pc, #184]	; (10004 <AppLoraReceiveStart+0xec>)
    ff4a:	681b      	ldr	r3, [r3, #0]
    ff4c:	22b7      	movs	r2, #183	; 0xb7
    ff4e:	745a      	strb	r2, [r3, #17]
        RFLR_IRQFLAGS_VALIDHEADER |
        //RFLR_IRQFLAGS_TXDONE |
        RFLR_IRQFLAGS_CADDONE |
        RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
        RFLR_IRQFLAGS_CADDETECTED;
	SX1272Write( REG_LR_IRQFLAGSMASK, SX1272LR->RegIrqFlagsMask );	
    ff50:	4b2c      	ldr	r3, [pc, #176]	; (10004 <AppLoraReceiveStart+0xec>)
    ff52:	681b      	ldr	r3, [r3, #0]
    ff54:	7c5b      	ldrb	r3, [r3, #17]
    ff56:	2011      	movs	r0, #17
    ff58:	1c19      	adds	r1, r3, #0
    ff5a:	4b31      	ldr	r3, [pc, #196]	; (10020 <AppLoraReceiveStart+0x108>)
    ff5c:	4798      	blx	r3
    // Clear Irq
    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
    ff5e:	2012      	movs	r0, #18
    ff60:	2140      	movs	r1, #64	; 0x40
    ff62:	4b2f      	ldr	r3, [pc, #188]	; (10020 <AppLoraReceiveStart+0x108>)
    ff64:	4798      	blx	r3
    
	if( LoRaSettings.FreqHopOn == true )
    ff66:	4b2f      	ldr	r3, [pc, #188]	; (10024 <AppLoraReceiveStart+0x10c>)
    ff68:	7adb      	ldrb	r3, [r3, #11]
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d019      	beq.n	ffa2 <AppLoraReceiveStart+0x8a>
    {
	    SX1272LR->RegHopPeriod = LoRaSettings.HopPeriod;
    ff6e:	4b25      	ldr	r3, [pc, #148]	; (10004 <AppLoraReceiveStart+0xec>)
    ff70:	681a      	ldr	r2, [r3, #0]
    ff72:	4b2c      	ldr	r3, [pc, #176]	; (10024 <AppLoraReceiveStart+0x10c>)
    ff74:	7b19      	ldrb	r1, [r3, #12]
    ff76:	2324      	movs	r3, #36	; 0x24
    ff78:	54d1      	strb	r1, [r2, r3]
		SX1272Read( REG_LR_HOPCHANNEL, &SX1272LR->RegHopChannel );
    ff7a:	4b22      	ldr	r3, [pc, #136]	; (10004 <AppLoraReceiveStart+0xec>)
    ff7c:	681b      	ldr	r3, [r3, #0]
    ff7e:	331c      	adds	r3, #28
    ff80:	201c      	movs	r0, #28
    ff82:	1c19      	adds	r1, r3, #0
    ff84:	4b20      	ldr	r3, [pc, #128]	; (10008 <AppLoraReceiveStart+0xf0>)
    ff86:	4798      	blx	r3
		SX1272LoRaSetRFFrequency( HoppingFrequencies[SX1272LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
    ff88:	4b1e      	ldr	r3, [pc, #120]	; (10004 <AppLoraReceiveStart+0xec>)
    ff8a:	681b      	ldr	r3, [r3, #0]
    ff8c:	7f1b      	ldrb	r3, [r3, #28]
    ff8e:	1c1a      	adds	r2, r3, #0
    ff90:	233f      	movs	r3, #63	; 0x3f
    ff92:	401a      	ands	r2, r3
    ff94:	4b24      	ldr	r3, [pc, #144]	; (10028 <AppLoraReceiveStart+0x110>)
    ff96:	0092      	lsls	r2, r2, #2
    ff98:	58d3      	ldr	r3, [r2, r3]
    ff9a:	1c18      	adds	r0, r3, #0
    ff9c:	4b23      	ldr	r3, [pc, #140]	; (1002c <AppLoraReceiveStart+0x114>)
    ff9e:	4798      	blx	r3
    ffa0:	e004      	b.n	ffac <AppLoraReceiveStart+0x94>
    }
    else
    {
		SX1272LR->RegHopPeriod = 255;   //or 0 with transmit
    ffa2:	4b18      	ldr	r3, [pc, #96]	; (10004 <AppLoraReceiveStart+0xec>)
    ffa4:	681a      	ldr	r2, [r3, #0]
    ffa6:	2324      	movs	r3, #36	; 0x24
    ffa8:	21ff      	movs	r1, #255	; 0xff
    ffaa:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_HOPPERIOD, SX1272LR->RegHopPeriod );	
    ffac:	4b15      	ldr	r3, [pc, #84]	; (10004 <AppLoraReceiveStart+0xec>)
    ffae:	681a      	ldr	r2, [r3, #0]
    ffb0:	2324      	movs	r3, #36	; 0x24
    ffb2:	5cd3      	ldrb	r3, [r2, r3]
    ffb4:	2024      	movs	r0, #36	; 0x24
    ffb6:	1c19      	adds	r1, r3, #0
    ffb8:	4b19      	ldr	r3, [pc, #100]	; (10020 <AppLoraReceiveStart+0x108>)
    ffba:	4798      	blx	r3
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
    ffbc:	4b11      	ldr	r3, [pc, #68]	; (10004 <AppLoraReceiveStart+0xec>)
    ffbe:	681a      	ldr	r2, [r3, #0]
    ffc0:	233f      	movs	r3, #63	; 0x3f
    ffc2:	2100      	movs	r1, #0
    ffc4:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
    ffc6:	4b0f      	ldr	r3, [pc, #60]	; (10004 <AppLoraReceiveStart+0xec>)
    ffc8:	681a      	ldr	r2, [r3, #0]
    ffca:	2340      	movs	r3, #64	; 0x40
    ffcc:	2100      	movs	r1, #0
    ffce:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );	
    ffd0:	4b0c      	ldr	r3, [pc, #48]	; (10004 <AppLoraReceiveStart+0xec>)
    ffd2:	681b      	ldr	r3, [r3, #0]
    ffd4:	333f      	adds	r3, #63	; 0x3f
    ffd6:	2040      	movs	r0, #64	; 0x40
    ffd8:	1c19      	adds	r1, r3, #0
    ffda:	2202      	movs	r2, #2
    ffdc:	4b14      	ldr	r3, [pc, #80]	; (10030 <AppLoraReceiveStart+0x118>)
    ffde:	4798      	blx	r3

    SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxBaseAddr;
    ffe0:	4b08      	ldr	r3, [pc, #32]	; (10004 <AppLoraReceiveStart+0xec>)
    ffe2:	681a      	ldr	r2, [r3, #0]
    ffe4:	4b07      	ldr	r3, [pc, #28]	; (10004 <AppLoraReceiveStart+0xec>)
    ffe6:	681b      	ldr	r3, [r3, #0]
    ffe8:	7bdb      	ldrb	r3, [r3, #15]
    ffea:	7353      	strb	r3, [r2, #13]
    SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
    ffec:	4b05      	ldr	r3, [pc, #20]	; (10004 <AppLoraReceiveStart+0xec>)
    ffee:	681b      	ldr	r3, [r3, #0]
    fff0:	7b5b      	ldrb	r3, [r3, #13]
    fff2:	200d      	movs	r0, #13
    fff4:	1c19      	adds	r1, r3, #0
    fff6:	4b0a      	ldr	r3, [pc, #40]	; (10020 <AppLoraReceiveStart+0x108>)
    fff8:	4798      	blx	r3
    
    SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
    fffa:	2005      	movs	r0, #5
    fffc:	4b07      	ldr	r3, [pc, #28]	; (1001c <AppLoraReceiveStart+0x104>)
    fffe:	4798      	blx	r3


}
   10000:	46bd      	mov	sp, r7
   10002:	bd80      	pop	{r7, pc}
   10004:	200037cc 	.word	0x200037cc
   10008:	00010919 	.word	0x00010919
   1000c:	200037d0 	.word	0x200037d0
   10010:	00016d81 	.word	0x00016d81
   10014:	0000fc85 	.word	0x0000fc85
   10018:	0000fcc5 	.word	0x0000fcc5
   1001c:	0000fc3d 	.word	0x0000fc3d
   10020:	000108e5 	.word	0x000108e5
   10024:	20000028 	.word	0x20000028
   10028:	0001730c 	.word	0x0001730c
   1002c:	00010189 	.word	0x00010189
   10030:	00010955 	.word	0x00010955

00010034 <SX1272LoraTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272LoraTransmit(uint8_t *txBuffer,uint16_t length)
{
   10034:	b580      	push	{r7, lr}
   10036:	b086      	sub	sp, #24
   10038:	af00      	add	r7, sp, #0
   1003a:	6078      	str	r0, [r7, #4]
   1003c:	1c0a      	adds	r2, r1, #0
   1003e:	1cbb      	adds	r3, r7, #2
   10040:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint8_t *ptr; 
    uint8_t status; 
	status = 1; 
   10042:	1c3b      	adds	r3, r7, #0
   10044:	330f      	adds	r3, #15
   10046:	2201      	movs	r2, #1
   10048:	701a      	strb	r2, [r3, #0]
 		  
	loraTransmitCount++;	   
   1004a:	4b45      	ldr	r3, [pc, #276]	; (10160 <SX1272LoraTransmit+0x12c>)
   1004c:	881b      	ldrh	r3, [r3, #0]
   1004e:	3301      	adds	r3, #1
   10050:	b29a      	uxth	r2, r3
   10052:	4b43      	ldr	r3, [pc, #268]	; (10160 <SX1272LoraTransmit+0x12c>)
   10054:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_LR_OPMODE, &SX1272LR->RegOpMode );   		
   10056:	4b43      	ldr	r3, [pc, #268]	; (10164 <SX1272LoraTransmit+0x130>)
   10058:	681b      	ldr	r3, [r3, #0]
   1005a:	3301      	adds	r3, #1
   1005c:	2001      	movs	r0, #1
   1005e:	1c19      	adds	r1, r3, #0
   10060:	4b41      	ldr	r3, [pc, #260]	; (10168 <SX1272LoraTransmit+0x134>)
   10062:	4798      	blx	r3
	if ((SX1272LR->RegOpMode & ~RFLR_OPMODE_MASK)!= 0x01)
   10064:	4b3f      	ldr	r3, [pc, #252]	; (10164 <SX1272LoraTransmit+0x130>)
   10066:	681b      	ldr	r3, [r3, #0]
   10068:	785b      	ldrb	r3, [r3, #1]
   1006a:	22f8      	movs	r2, #248	; 0xf8
   1006c:	4393      	bics	r3, r2
   1006e:	2b01      	cmp	r3, #1
   10070:	d002      	beq.n	10078 <SX1272LoraTransmit+0x44>
	{	 
		SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );  		
   10072:	2001      	movs	r0, #1
   10074:	4b3d      	ldr	r3, [pc, #244]	; (1016c <SX1272LoraTransmit+0x138>)
   10076:	4798      	blx	r3
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
   10078:	687b      	ldr	r3, [r7, #4]
   1007a:	613b      	str	r3, [r7, #16]
	RFBufferLora[0] = length;
   1007c:	1cbb      	adds	r3, r7, #2
   1007e:	881b      	ldrh	r3, [r3, #0]
   10080:	b2da      	uxtb	r2, r3
   10082:	4b3b      	ldr	r3, [pc, #236]	; (10170 <SX1272LoraTransmit+0x13c>)
   10084:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
   10086:	1c3b      	adds	r3, r7, #0
   10088:	3316      	adds	r3, #22
   1008a:	2200      	movs	r2, #0
   1008c:	801a      	strh	r2, [r3, #0]
   1008e:	e010      	b.n	100b2 <SX1272LoraTransmit+0x7e>
	{
		RFBufferLora[i+1] = *ptr++;
   10090:	1c3b      	adds	r3, r7, #0
   10092:	3316      	adds	r3, #22
   10094:	881b      	ldrh	r3, [r3, #0]
   10096:	1c5a      	adds	r2, r3, #1
   10098:	693b      	ldr	r3, [r7, #16]
   1009a:	1c59      	adds	r1, r3, #1
   1009c:	6139      	str	r1, [r7, #16]
   1009e:	7819      	ldrb	r1, [r3, #0]
   100a0:	4b33      	ldr	r3, [pc, #204]	; (10170 <SX1272LoraTransmit+0x13c>)
   100a2:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBufferLora[0] = length;
	for (i=0;i<length;i++)
   100a4:	1c3b      	adds	r3, r7, #0
   100a6:	3316      	adds	r3, #22
   100a8:	881a      	ldrh	r2, [r3, #0]
   100aa:	1c3b      	adds	r3, r7, #0
   100ac:	3316      	adds	r3, #22
   100ae:	3201      	adds	r2, #1
   100b0:	801a      	strh	r2, [r3, #0]
   100b2:	1c3a      	adds	r2, r7, #0
   100b4:	3216      	adds	r2, #22
   100b6:	1cbb      	adds	r3, r7, #2
   100b8:	8812      	ldrh	r2, [r2, #0]
   100ba:	881b      	ldrh	r3, [r3, #0]
   100bc:	429a      	cmp	r2, r3
   100be:	d3e7      	bcc.n	10090 <SX1272LoraTransmit+0x5c>
	{
		RFBufferLora[i+1] = *ptr++;
	}
	 
    TxPacketSize = length+1; 
   100c0:	1cbb      	adds	r3, r7, #2
   100c2:	881b      	ldrh	r3, [r3, #0]
   100c4:	3301      	adds	r3, #1
   100c6:	b29a      	uxth	r2, r3
   100c8:	4b2a      	ldr	r3, [pc, #168]	; (10174 <SX1272LoraTransmit+0x140>)
   100ca:	801a      	strh	r2, [r3, #0]
        // Initializes the payload size
        SX1272LR->RegPayloadLength = TxPacketSize;
   100cc:	4b25      	ldr	r3, [pc, #148]	; (10164 <SX1272LoraTransmit+0x130>)
   100ce:	681a      	ldr	r2, [r3, #0]
   100d0:	4b28      	ldr	r3, [pc, #160]	; (10174 <SX1272LoraTransmit+0x140>)
   100d2:	881b      	ldrh	r3, [r3, #0]
   100d4:	b2d9      	uxtb	r1, r3
   100d6:	2322      	movs	r3, #34	; 0x22
   100d8:	54d1      	strb	r1, [r2, r3]
        SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   100da:	4b22      	ldr	r3, [pc, #136]	; (10164 <SX1272LoraTransmit+0x130>)
   100dc:	681a      	ldr	r2, [r3, #0]
   100de:	2322      	movs	r3, #34	; 0x22
   100e0:	5cd3      	ldrb	r3, [r2, r3]
   100e2:	2022      	movs	r0, #34	; 0x22
   100e4:	1c19      	adds	r1, r3, #0
   100e6:	4b24      	ldr	r3, [pc, #144]	; (10178 <SX1272LoraTransmit+0x144>)
   100e8:	4798      	blx	r3
        
        SX1272LR->RegFifoTxBaseAddr = 0x00; // Full buffer used for Tx
   100ea:	4b1e      	ldr	r3, [pc, #120]	; (10164 <SX1272LoraTransmit+0x130>)
   100ec:	681b      	ldr	r3, [r3, #0]
   100ee:	2200      	movs	r2, #0
   100f0:	739a      	strb	r2, [r3, #14]
        SX1272Write( REG_LR_FIFOTXBASEADDR, SX1272LR->RegFifoTxBaseAddr );
   100f2:	4b1c      	ldr	r3, [pc, #112]	; (10164 <SX1272LoraTransmit+0x130>)
   100f4:	681b      	ldr	r3, [r3, #0]
   100f6:	7b9b      	ldrb	r3, [r3, #14]
   100f8:	200e      	movs	r0, #14
   100fa:	1c19      	adds	r1, r3, #0
   100fc:	4b1e      	ldr	r3, [pc, #120]	; (10178 <SX1272LoraTransmit+0x144>)
   100fe:	4798      	blx	r3

        SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoTxBaseAddr;
   10100:	4b18      	ldr	r3, [pc, #96]	; (10164 <SX1272LoraTransmit+0x130>)
   10102:	681a      	ldr	r2, [r3, #0]
   10104:	4b17      	ldr	r3, [pc, #92]	; (10164 <SX1272LoraTransmit+0x130>)
   10106:	681b      	ldr	r3, [r3, #0]
   10108:	7b9b      	ldrb	r3, [r3, #14]
   1010a:	7353      	strb	r3, [r2, #13]
        SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   1010c:	4b15      	ldr	r3, [pc, #84]	; (10164 <SX1272LoraTransmit+0x130>)
   1010e:	681b      	ldr	r3, [r3, #0]
   10110:	7b5b      	ldrb	r3, [r3, #13]
   10112:	200d      	movs	r0, #13
   10114:	1c19      	adds	r1, r3, #0
   10116:	4b18      	ldr	r3, [pc, #96]	; (10178 <SX1272LoraTransmit+0x144>)
   10118:	4798      	blx	r3
        
        // Write payload buffer to LORA modem
        SX1272WriteFifo( RFBufferLora, TxPacketSize);  //SX1272LR->RegPayloadLength );
   1011a:	4b16      	ldr	r3, [pc, #88]	; (10174 <SX1272LoraTransmit+0x140>)
   1011c:	881b      	ldrh	r3, [r3, #0]
   1011e:	4a14      	ldr	r2, [pc, #80]	; (10170 <SX1272LoraTransmit+0x13c>)
   10120:	1c10      	adds	r0, r2, #0
   10122:	1c19      	adds	r1, r3, #0
   10124:	4b15      	ldr	r3, [pc, #84]	; (1017c <SX1272LoraTransmit+0x148>)
   10126:	4798      	blx	r3
		
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00| RFLR_DIOMAPPING1_DIO0_01;
   10128:	4b0e      	ldr	r3, [pc, #56]	; (10164 <SX1272LoraTransmit+0x130>)
   1012a:	681a      	ldr	r2, [r3, #0]
   1012c:	233f      	movs	r3, #63	; 0x3f
   1012e:	2140      	movs	r1, #64	; 0x40
   10130:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
   10132:	4b0c      	ldr	r3, [pc, #48]	; (10164 <SX1272LoraTransmit+0x130>)
   10134:	681a      	ldr	r2, [r3, #0]
   10136:	2340      	movs	r3, #64	; 0x40
   10138:	2100      	movs	r1, #0
   1013a:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
   1013c:	4b09      	ldr	r3, [pc, #36]	; (10164 <SX1272LoraTransmit+0x130>)
   1013e:	681b      	ldr	r3, [r3, #0]
   10140:	333f      	adds	r3, #63	; 0x3f
   10142:	2040      	movs	r0, #64	; 0x40
   10144:	1c19      	adds	r1, r3, #0
   10146:	2202      	movs	r2, #2
   10148:	4b0d      	ldr	r3, [pc, #52]	; (10180 <SX1272LoraTransmit+0x14c>)
   1014a:	4798      	blx	r3
	//------------------
	// turn on transmitter
    SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER );     		
   1014c:	2003      	movs	r0, #3
   1014e:	4b07      	ldr	r3, [pc, #28]	; (1016c <SX1272LoraTransmit+0x138>)
   10150:	4798      	blx	r3
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
   10152:	1c3b      	adds	r3, r7, #0
   10154:	330f      	adds	r3, #15
   10156:	781b      	ldrb	r3, [r3, #0]
}
   10158:	1c18      	adds	r0, r3, #0
   1015a:	46bd      	mov	sp, r7
   1015c:	b006      	add	sp, #24
   1015e:	bd80      	pop	{r7, pc}
   10160:	200004ec 	.word	0x200004ec
   10164:	200037cc 	.word	0x200037cc
   10168:	00010919 	.word	0x00010919
   1016c:	0000fc3d 	.word	0x0000fc3d
   10170:	200037d0 	.word	0x200037d0
   10174:	200004ea 	.word	0x200004ea
   10178:	000108e5 	.word	0x000108e5
   1017c:	000109c5 	.word	0x000109c5
   10180:	00010955 	.word	0x00010955
   10184:	00000000 	.word	0x00000000

00010188 <SX1272LoRaSetRFFrequency>:
#define FREQ_STEP                                   61.03515625

extern tLoRaSettings LoRaSettings;

void SX1272LoRaSetRFFrequency( uint32_t freq )
{
   10188:	b5b0      	push	{r4, r5, r7, lr}
   1018a:	b082      	sub	sp, #8
   1018c:	af00      	add	r7, sp, #0
   1018e:	6078      	str	r0, [r7, #4]
    LoRaSettings.RFFrequency = freq;
   10190:	4b1b      	ldr	r3, [pc, #108]	; (10200 <SX1272LoRaSetRFFrequency+0x78>)
   10192:	687a      	ldr	r2, [r7, #4]
   10194:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   10196:	4b1b      	ldr	r3, [pc, #108]	; (10204 <SX1272LoRaSetRFFrequency+0x7c>)
   10198:	6878      	ldr	r0, [r7, #4]
   1019a:	4798      	blx	r3
   1019c:	1c03      	adds	r3, r0, #0
   1019e:	1c0c      	adds	r4, r1, #0
   101a0:	4d19      	ldr	r5, [pc, #100]	; (10208 <SX1272LoRaSetRFFrequency+0x80>)
   101a2:	1c18      	adds	r0, r3, #0
   101a4:	1c21      	adds	r1, r4, #0
   101a6:	4b15      	ldr	r3, [pc, #84]	; (101fc <SX1272LoRaSetRFFrequency+0x74>)
   101a8:	4a13      	ldr	r2, [pc, #76]	; (101f8 <SX1272LoRaSetRFFrequency+0x70>)
   101aa:	47a8      	blx	r5
   101ac:	1c03      	adds	r3, r0, #0
   101ae:	1c0c      	adds	r4, r1, #0
   101b0:	4a16      	ldr	r2, [pc, #88]	; (1020c <SX1272LoRaSetRFFrequency+0x84>)
   101b2:	1c18      	adds	r0, r3, #0
   101b4:	1c21      	adds	r1, r4, #0
   101b6:	4790      	blx	r2
   101b8:	1c03      	adds	r3, r0, #0
   101ba:	607b      	str	r3, [r7, #4]
    SX1272LR->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
   101bc:	4b14      	ldr	r3, [pc, #80]	; (10210 <SX1272LoRaSetRFFrequency+0x88>)
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	687a      	ldr	r2, [r7, #4]
   101c2:	0c12      	lsrs	r2, r2, #16
   101c4:	b2d2      	uxtb	r2, r2
   101c6:	719a      	strb	r2, [r3, #6]
    SX1272LR->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
   101c8:	4b11      	ldr	r3, [pc, #68]	; (10210 <SX1272LoRaSetRFFrequency+0x88>)
   101ca:	681b      	ldr	r3, [r3, #0]
   101cc:	687a      	ldr	r2, [r7, #4]
   101ce:	0a12      	lsrs	r2, r2, #8
   101d0:	b2d2      	uxtb	r2, r2
   101d2:	71da      	strb	r2, [r3, #7]
    SX1272LR->RegFrfLsb = ( uint8_t )( freq & 0xFF );
   101d4:	4b0e      	ldr	r3, [pc, #56]	; (10210 <SX1272LoRaSetRFFrequency+0x88>)
   101d6:	681b      	ldr	r3, [r3, #0]
   101d8:	687a      	ldr	r2, [r7, #4]
   101da:	b2d2      	uxtb	r2, r2
   101dc:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_LR_FRFMSB, &SX1272LR->RegFrfMsb, 3 );
   101de:	4b0c      	ldr	r3, [pc, #48]	; (10210 <SX1272LoRaSetRFFrequency+0x88>)
   101e0:	681b      	ldr	r3, [r3, #0]
   101e2:	3306      	adds	r3, #6
   101e4:	2006      	movs	r0, #6
   101e6:	1c19      	adds	r1, r3, #0
   101e8:	2203      	movs	r2, #3
   101ea:	4b0a      	ldr	r3, [pc, #40]	; (10214 <SX1272LoRaSetRFFrequency+0x8c>)
   101ec:	4798      	blx	r3
}
   101ee:	46bd      	mov	sp, r7
   101f0:	b002      	add	sp, #8
   101f2:	bdb0      	pop	{r4, r5, r7, pc}
   101f4:	46c0      	nop			; (mov r8, r8)
   101f6:	46c0      	nop			; (mov r8, r8)
   101f8:	00000000 	.word	0x00000000
   101fc:	404e8480 	.word	0x404e8480
   10200:	20000028 	.word	0x20000028
   10204:	000164c9 	.word	0x000164c9
   10208:	00014f89 	.word	0x00014f89
   1020c:	00014899 	.word	0x00014899
   10210:	200037cc 	.word	0x200037cc
   10214:	00010955 	.word	0x00010955

00010218 <SX1272LoRaSetRFPower>:

    return LoRaSettings.RFFrequency;
}

void SX1272LoRaSetRFPower( int8_t power )
{
   10218:	b580      	push	{r7, lr}
   1021a:	b082      	sub	sp, #8
   1021c:	af00      	add	r7, sp, #0
   1021e:	1c02      	adds	r2, r0, #0
   10220:	1dfb      	adds	r3, r7, #7
   10222:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PACONFIG, &SX1272LR->RegPaConfig );
   10224:	4b4f      	ldr	r3, [pc, #316]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10226:	681b      	ldr	r3, [r3, #0]
   10228:	3309      	adds	r3, #9
   1022a:	2009      	movs	r0, #9
   1022c:	1c19      	adds	r1, r3, #0
   1022e:	4b4e      	ldr	r3, [pc, #312]	; (10368 <SX1272LoRaSetRFPower+0x150>)
   10230:	4798      	blx	r3
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   10232:	4b4c      	ldr	r3, [pc, #304]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10234:	681b      	ldr	r3, [r3, #0]
   10236:	3359      	adds	r3, #89	; 0x59
   10238:	205a      	movs	r0, #90	; 0x5a
   1023a:	1c19      	adds	r1, r3, #0
   1023c:	4b4a      	ldr	r3, [pc, #296]	; (10368 <SX1272LoRaSetRFPower+0x150>)
   1023e:	4798      	blx	r3
    
    if( ( SX1272LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
   10240:	4b48      	ldr	r3, [pc, #288]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10242:	681b      	ldr	r3, [r3, #0]
   10244:	7a5b      	ldrb	r3, [r3, #9]
   10246:	b2db      	uxtb	r3, r3
   10248:	b25b      	sxtb	r3, r3
   1024a:	2b00      	cmp	r3, #0
   1024c:	da56      	bge.n	102fc <SX1272LoRaSetRFPower+0xe4>
    {
        if( ( SX1272LR->RegPaDac & 0x07 ) == 0x07 )
   1024e:	4b45      	ldr	r3, [pc, #276]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10250:	681a      	ldr	r2, [r3, #0]
   10252:	2359      	movs	r3, #89	; 0x59
   10254:	5cd3      	ldrb	r3, [r2, r3]
   10256:	1c1a      	adds	r2, r3, #0
   10258:	2307      	movs	r3, #7
   1025a:	4013      	ands	r3, r2
   1025c:	2b07      	cmp	r3, #7
   1025e:	d126      	bne.n	102ae <SX1272LoRaSetRFPower+0x96>
        {
            if( power < 5 )
   10260:	1dfb      	adds	r3, r7, #7
   10262:	781b      	ldrb	r3, [r3, #0]
   10264:	b25b      	sxtb	r3, r3
   10266:	2b04      	cmp	r3, #4
   10268:	dc02      	bgt.n	10270 <SX1272LoRaSetRFPower+0x58>
            {
                power = 5;
   1026a:	1dfb      	adds	r3, r7, #7
   1026c:	2205      	movs	r2, #5
   1026e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
   10270:	1dfb      	adds	r3, r7, #7
   10272:	781b      	ldrb	r3, [r3, #0]
   10274:	b25b      	sxtb	r3, r3
   10276:	2b14      	cmp	r3, #20
   10278:	dd02      	ble.n	10280 <SX1272LoRaSetRFPower+0x68>
            {
                power = 20;
   1027a:	1dfb      	adds	r3, r7, #7
   1027c:	2214      	movs	r2, #20
   1027e:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
   10280:	4b38      	ldr	r3, [pc, #224]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10282:	681a      	ldr	r2, [r3, #0]
   10284:	4b37      	ldr	r3, [pc, #220]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10286:	681b      	ldr	r3, [r3, #0]
   10288:	7a5b      	ldrb	r3, [r3, #9]
   1028a:	b2db      	uxtb	r3, r3
   1028c:	210f      	movs	r1, #15
   1028e:	438b      	bics	r3, r1
   10290:	b2d9      	uxtb	r1, r3
   10292:	1dfb      	adds	r3, r7, #7
   10294:	781b      	ldrb	r3, [r3, #0]
   10296:	3b05      	subs	r3, #5
   10298:	b2db      	uxtb	r3, r3
   1029a:	b2db      	uxtb	r3, r3
   1029c:	1c18      	adds	r0, r3, #0
   1029e:	230f      	movs	r3, #15
   102a0:	4003      	ands	r3, r0
   102a2:	b2db      	uxtb	r3, r3
   102a4:	430b      	orrs	r3, r1
   102a6:	b2db      	uxtb	r3, r3
   102a8:	b2db      	uxtb	r3, r3
   102aa:	7253      	strb	r3, [r2, #9]
   102ac:	e04c      	b.n	10348 <SX1272LoRaSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
   102ae:	1dfb      	adds	r3, r7, #7
   102b0:	781b      	ldrb	r3, [r3, #0]
   102b2:	b25b      	sxtb	r3, r3
   102b4:	2b01      	cmp	r3, #1
   102b6:	dc02      	bgt.n	102be <SX1272LoRaSetRFPower+0xa6>
            {
                power = 2;
   102b8:	1dfb      	adds	r3, r7, #7
   102ba:	2202      	movs	r2, #2
   102bc:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
   102be:	1dfb      	adds	r3, r7, #7
   102c0:	781b      	ldrb	r3, [r3, #0]
   102c2:	b25b      	sxtb	r3, r3
   102c4:	2b11      	cmp	r3, #17
   102c6:	dd02      	ble.n	102ce <SX1272LoRaSetRFPower+0xb6>
            {
                power = 17;
   102c8:	1dfb      	adds	r3, r7, #7
   102ca:	2211      	movs	r2, #17
   102cc:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
   102ce:	4b25      	ldr	r3, [pc, #148]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   102d0:	681a      	ldr	r2, [r3, #0]
   102d2:	4b24      	ldr	r3, [pc, #144]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   102d4:	681b      	ldr	r3, [r3, #0]
   102d6:	7a5b      	ldrb	r3, [r3, #9]
   102d8:	b2db      	uxtb	r3, r3
   102da:	210f      	movs	r1, #15
   102dc:	438b      	bics	r3, r1
   102de:	b2d9      	uxtb	r1, r3
   102e0:	1dfb      	adds	r3, r7, #7
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	3b02      	subs	r3, #2
   102e6:	b2db      	uxtb	r3, r3
   102e8:	b2db      	uxtb	r3, r3
   102ea:	1c18      	adds	r0, r3, #0
   102ec:	230f      	movs	r3, #15
   102ee:	4003      	ands	r3, r0
   102f0:	b2db      	uxtb	r3, r3
   102f2:	430b      	orrs	r3, r1
   102f4:	b2db      	uxtb	r3, r3
   102f6:	b2db      	uxtb	r3, r3
   102f8:	7253      	strb	r3, [r2, #9]
   102fa:	e025      	b.n	10348 <SX1272LoRaSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
   102fc:	1dfb      	adds	r3, r7, #7
   102fe:	781b      	ldrb	r3, [r3, #0]
   10300:	b25b      	sxtb	r3, r3
   10302:	3301      	adds	r3, #1
   10304:	da02      	bge.n	1030c <SX1272LoRaSetRFPower+0xf4>
        {
            power = -1;
   10306:	1dfb      	adds	r3, r7, #7
   10308:	22ff      	movs	r2, #255	; 0xff
   1030a:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
   1030c:	1dfb      	adds	r3, r7, #7
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	b25b      	sxtb	r3, r3
   10312:	2b0e      	cmp	r3, #14
   10314:	dd02      	ble.n	1031c <SX1272LoRaSetRFPower+0x104>
        {
            power = 14;
   10316:	1dfb      	adds	r3, r7, #7
   10318:	220e      	movs	r2, #14
   1031a:	701a      	strb	r2, [r3, #0]
        }
        SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
   1031c:	4b11      	ldr	r3, [pc, #68]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   1031e:	681a      	ldr	r2, [r3, #0]
   10320:	4b10      	ldr	r3, [pc, #64]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   10322:	681b      	ldr	r3, [r3, #0]
   10324:	7a5b      	ldrb	r3, [r3, #9]
   10326:	b2db      	uxtb	r3, r3
   10328:	210f      	movs	r1, #15
   1032a:	438b      	bics	r3, r1
   1032c:	b2d9      	uxtb	r1, r3
   1032e:	1dfb      	adds	r3, r7, #7
   10330:	781b      	ldrb	r3, [r3, #0]
   10332:	3301      	adds	r3, #1
   10334:	b2db      	uxtb	r3, r3
   10336:	b2db      	uxtb	r3, r3
   10338:	1c18      	adds	r0, r3, #0
   1033a:	230f      	movs	r3, #15
   1033c:	4003      	ands	r3, r0
   1033e:	b2db      	uxtb	r3, r3
   10340:	430b      	orrs	r3, r1
   10342:	b2db      	uxtb	r3, r3
   10344:	b2db      	uxtb	r3, r3
   10346:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_LR_PACONFIG, SX1272LR->RegPaConfig );
   10348:	4b06      	ldr	r3, [pc, #24]	; (10364 <SX1272LoRaSetRFPower+0x14c>)
   1034a:	681b      	ldr	r3, [r3, #0]
   1034c:	7a5b      	ldrb	r3, [r3, #9]
   1034e:	2009      	movs	r0, #9
   10350:	1c19      	adds	r1, r3, #0
   10352:	4b06      	ldr	r3, [pc, #24]	; (1036c <SX1272LoRaSetRFPower+0x154>)
   10354:	4798      	blx	r3
    LoRaSettings.Power = power;
   10356:	4b06      	ldr	r3, [pc, #24]	; (10370 <SX1272LoRaSetRFPower+0x158>)
   10358:	1dfa      	adds	r2, r7, #7
   1035a:	7812      	ldrb	r2, [r2, #0]
   1035c:	711a      	strb	r2, [r3, #4]
}
   1035e:	46bd      	mov	sp, r7
   10360:	b002      	add	sp, #8
   10362:	bd80      	pop	{r7, pc}
   10364:	200037cc 	.word	0x200037cc
   10368:	00010919 	.word	0x00010919
   1036c:	000108e5 	.word	0x000108e5
   10370:	20000028 	.word	0x20000028

00010374 <SX1272LoRaSetSignalBandwidth>:
    }
    return LoRaSettings.Power;
}

void SX1272LoRaSetSignalBandwidth( uint8_t bw )
{
   10374:	b580      	push	{r7, lr}
   10376:	b082      	sub	sp, #8
   10378:	af00      	add	r7, sp, #0
   1037a:	1c02      	adds	r2, r0, #0
   1037c:	1dfb      	adds	r3, r7, #7
   1037e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   10380:	4b13      	ldr	r3, [pc, #76]	; (103d0 <SX1272LoRaSetSignalBandwidth+0x5c>)
   10382:	681b      	ldr	r3, [r3, #0]
   10384:	331d      	adds	r3, #29
   10386:	201d      	movs	r0, #29
   10388:	1c19      	adds	r1, r3, #0
   1038a:	4b12      	ldr	r3, [pc, #72]	; (103d4 <SX1272LoRaSetSignalBandwidth+0x60>)
   1038c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_BW_MASK ) | ( bw << 6 );
   1038e:	4b10      	ldr	r3, [pc, #64]	; (103d0 <SX1272LoRaSetSignalBandwidth+0x5c>)
   10390:	681a      	ldr	r2, [r3, #0]
   10392:	4b0f      	ldr	r3, [pc, #60]	; (103d0 <SX1272LoRaSetSignalBandwidth+0x5c>)
   10394:	681b      	ldr	r3, [r3, #0]
   10396:	7f5b      	ldrb	r3, [r3, #29]
   10398:	b2db      	uxtb	r3, r3
   1039a:	1c19      	adds	r1, r3, #0
   1039c:	233f      	movs	r3, #63	; 0x3f
   1039e:	400b      	ands	r3, r1
   103a0:	b2d9      	uxtb	r1, r3
   103a2:	1dfb      	adds	r3, r7, #7
   103a4:	781b      	ldrb	r3, [r3, #0]
   103a6:	019b      	lsls	r3, r3, #6
   103a8:	b2db      	uxtb	r3, r3
   103aa:	430b      	orrs	r3, r1
   103ac:	b2db      	uxtb	r3, r3
   103ae:	b2db      	uxtb	r3, r3
   103b0:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   103b2:	4b07      	ldr	r3, [pc, #28]	; (103d0 <SX1272LoRaSetSignalBandwidth+0x5c>)
   103b4:	681b      	ldr	r3, [r3, #0]
   103b6:	7f5b      	ldrb	r3, [r3, #29]
   103b8:	201d      	movs	r0, #29
   103ba:	1c19      	adds	r1, r3, #0
   103bc:	4b06      	ldr	r3, [pc, #24]	; (103d8 <SX1272LoRaSetSignalBandwidth+0x64>)
   103be:	4798      	blx	r3
    LoRaSettings.SignalBw = bw;
   103c0:	4b06      	ldr	r3, [pc, #24]	; (103dc <SX1272LoRaSetSignalBandwidth+0x68>)
   103c2:	1dfa      	adds	r2, r7, #7
   103c4:	7812      	ldrb	r2, [r2, #0]
   103c6:	715a      	strb	r2, [r3, #5]
}
   103c8:	46bd      	mov	sp, r7
   103ca:	b002      	add	sp, #8
   103cc:	bd80      	pop	{r7, pc}
   103ce:	46c0      	nop			; (mov r8, r8)
   103d0:	200037cc 	.word	0x200037cc
   103d4:	00010919 	.word	0x00010919
   103d8:	000108e5 	.word	0x000108e5
   103dc:	20000028 	.word	0x20000028

000103e0 <SX1272LoRaSetSpreadingFactor>:
    LoRaSettings.SignalBw = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_BW_MASK ) >> 6;
    return LoRaSettings.SignalBw;
}

void SX1272LoRaSetSpreadingFactor( uint8_t factor )
{
   103e0:	b580      	push	{r7, lr}
   103e2:	b082      	sub	sp, #8
   103e4:	af00      	add	r7, sp, #0
   103e6:	1c02      	adds	r2, r0, #0
   103e8:	1dfb      	adds	r3, r7, #7
   103ea:	701a      	strb	r2, [r3, #0]

    if( factor > 12 )
   103ec:	1dfb      	adds	r3, r7, #7
   103ee:	781b      	ldrb	r3, [r3, #0]
   103f0:	2b0c      	cmp	r3, #12
   103f2:	d903      	bls.n	103fc <SX1272LoRaSetSpreadingFactor+0x1c>
    {
        factor = 12;
   103f4:	1dfb      	adds	r3, r7, #7
   103f6:	220c      	movs	r2, #12
   103f8:	701a      	strb	r2, [r3, #0]
   103fa:	e006      	b.n	1040a <SX1272LoRaSetSpreadingFactor+0x2a>
    }
    else if( factor < 6 )
   103fc:	1dfb      	adds	r3, r7, #7
   103fe:	781b      	ldrb	r3, [r3, #0]
   10400:	2b05      	cmp	r3, #5
   10402:	d802      	bhi.n	1040a <SX1272LoRaSetSpreadingFactor+0x2a>
    {
        factor = 6;
   10404:	1dfb      	adds	r3, r7, #7
   10406:	2206      	movs	r2, #6
   10408:	701a      	strb	r2, [r3, #0]
    }
    
    if( factor == 6 )
   1040a:	1dfb      	adds	r3, r7, #7
   1040c:	781b      	ldrb	r3, [r3, #0]
   1040e:	2b06      	cmp	r3, #6
   10410:	d103      	bne.n	1041a <SX1272LoRaSetSpreadingFactor+0x3a>
    {
        SX1272LoRaSetNbTrigPeaks( 5 );
   10412:	2005      	movs	r0, #5
   10414:	4b16      	ldr	r3, [pc, #88]	; (10470 <SX1272LoRaSetSpreadingFactor+0x90>)
   10416:	4798      	blx	r3
   10418:	e002      	b.n	10420 <SX1272LoRaSetSpreadingFactor+0x40>
    }
    else
    {
        SX1272LoRaSetNbTrigPeaks( 3 );
   1041a:	2003      	movs	r0, #3
   1041c:	4b14      	ldr	r3, [pc, #80]	; (10470 <SX1272LoRaSetSpreadingFactor+0x90>)
   1041e:	4798      	blx	r3
    }

    SX1272Read( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2 );    
   10420:	4b14      	ldr	r3, [pc, #80]	; (10474 <SX1272LoRaSetSpreadingFactor+0x94>)
   10422:	681b      	ldr	r3, [r3, #0]
   10424:	331e      	adds	r3, #30
   10426:	201e      	movs	r0, #30
   10428:	1c19      	adds	r1, r3, #0
   1042a:	4b13      	ldr	r3, [pc, #76]	; (10478 <SX1272LoRaSetSpreadingFactor+0x98>)
   1042c:	4798      	blx	r3
    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SF_MASK ) | ( factor << 4 );
   1042e:	4b11      	ldr	r3, [pc, #68]	; (10474 <SX1272LoRaSetSpreadingFactor+0x94>)
   10430:	681a      	ldr	r2, [r3, #0]
   10432:	4b10      	ldr	r3, [pc, #64]	; (10474 <SX1272LoRaSetSpreadingFactor+0x94>)
   10434:	681b      	ldr	r3, [r3, #0]
   10436:	7f9b      	ldrb	r3, [r3, #30]
   10438:	b2db      	uxtb	r3, r3
   1043a:	1c19      	adds	r1, r3, #0
   1043c:	230f      	movs	r3, #15
   1043e:	400b      	ands	r3, r1
   10440:	b2d9      	uxtb	r1, r3
   10442:	1dfb      	adds	r3, r7, #7
   10444:	781b      	ldrb	r3, [r3, #0]
   10446:	011b      	lsls	r3, r3, #4
   10448:	b2db      	uxtb	r3, r3
   1044a:	430b      	orrs	r3, r1
   1044c:	b2db      	uxtb	r3, r3
   1044e:	b2db      	uxtb	r3, r3
   10450:	7793      	strb	r3, [r2, #30]
    SX1272Write( REG_LR_MODEMCONFIG2, SX1272LR->RegModemConfig2 );    
   10452:	4b08      	ldr	r3, [pc, #32]	; (10474 <SX1272LoRaSetSpreadingFactor+0x94>)
   10454:	681b      	ldr	r3, [r3, #0]
   10456:	7f9b      	ldrb	r3, [r3, #30]
   10458:	201e      	movs	r0, #30
   1045a:	1c19      	adds	r1, r3, #0
   1045c:	4b07      	ldr	r3, [pc, #28]	; (1047c <SX1272LoRaSetSpreadingFactor+0x9c>)
   1045e:	4798      	blx	r3
    LoRaSettings.SpreadingFactor = factor;
   10460:	4b07      	ldr	r3, [pc, #28]	; (10480 <SX1272LoRaSetSpreadingFactor+0xa0>)
   10462:	1dfa      	adds	r2, r7, #7
   10464:	7812      	ldrb	r2, [r2, #0]
   10466:	719a      	strb	r2, [r3, #6]
}
   10468:	46bd      	mov	sp, r7
   1046a:	b002      	add	sp, #8
   1046c:	bd80      	pop	{r7, pc}
   1046e:	46c0      	nop			; (mov r8, r8)
   10470:	0001078d 	.word	0x0001078d
   10474:	200037cc 	.word	0x200037cc
   10478:	00010919 	.word	0x00010919
   1047c:	000108e5 	.word	0x000108e5
   10480:	20000028 	.word	0x20000028

00010484 <SX1272LoRaSetErrorCoding>:
    LoRaSettings.SpreadingFactor = ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SF_MASK ) >> 4;
    return LoRaSettings.SpreadingFactor;
}

void SX1272LoRaSetErrorCoding( uint8_t value )
{
   10484:	b580      	push	{r7, lr}
   10486:	b082      	sub	sp, #8
   10488:	af00      	add	r7, sp, #0
   1048a:	1c02      	adds	r2, r0, #0
   1048c:	1dfb      	adds	r3, r7, #7
   1048e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   10490:	4b12      	ldr	r3, [pc, #72]	; (104dc <SX1272LoRaSetErrorCoding+0x58>)
   10492:	681b      	ldr	r3, [r3, #0]
   10494:	331d      	adds	r3, #29
   10496:	201d      	movs	r0, #29
   10498:	1c19      	adds	r1, r3, #0
   1049a:	4b11      	ldr	r3, [pc, #68]	; (104e0 <SX1272LoRaSetErrorCoding+0x5c>)
   1049c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_CODINGRATE_MASK ) | ( value << 3 );
   1049e:	4b0f      	ldr	r3, [pc, #60]	; (104dc <SX1272LoRaSetErrorCoding+0x58>)
   104a0:	681a      	ldr	r2, [r3, #0]
   104a2:	4b0e      	ldr	r3, [pc, #56]	; (104dc <SX1272LoRaSetErrorCoding+0x58>)
   104a4:	681b      	ldr	r3, [r3, #0]
   104a6:	7f5b      	ldrb	r3, [r3, #29]
   104a8:	b2db      	uxtb	r3, r3
   104aa:	2138      	movs	r1, #56	; 0x38
   104ac:	438b      	bics	r3, r1
   104ae:	b2d9      	uxtb	r1, r3
   104b0:	1dfb      	adds	r3, r7, #7
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	00db      	lsls	r3, r3, #3
   104b6:	b2db      	uxtb	r3, r3
   104b8:	430b      	orrs	r3, r1
   104ba:	b2db      	uxtb	r3, r3
   104bc:	b2db      	uxtb	r3, r3
   104be:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   104c0:	4b06      	ldr	r3, [pc, #24]	; (104dc <SX1272LoRaSetErrorCoding+0x58>)
   104c2:	681b      	ldr	r3, [r3, #0]
   104c4:	7f5b      	ldrb	r3, [r3, #29]
   104c6:	201d      	movs	r0, #29
   104c8:	1c19      	adds	r1, r3, #0
   104ca:	4b06      	ldr	r3, [pc, #24]	; (104e4 <SX1272LoRaSetErrorCoding+0x60>)
   104cc:	4798      	blx	r3
    LoRaSettings.ErrorCoding = value;
   104ce:	4b06      	ldr	r3, [pc, #24]	; (104e8 <SX1272LoRaSetErrorCoding+0x64>)
   104d0:	1dfa      	adds	r2, r7, #7
   104d2:	7812      	ldrb	r2, [r2, #0]
   104d4:	71da      	strb	r2, [r3, #7]
}
   104d6:	46bd      	mov	sp, r7
   104d8:	b002      	add	sp, #8
   104da:	bd80      	pop	{r7, pc}
   104dc:	200037cc 	.word	0x200037cc
   104e0:	00010919 	.word	0x00010919
   104e4:	000108e5 	.word	0x000108e5
   104e8:	20000028 	.word	0x20000028

000104ec <SX1272LoRaSetPacketCrcOn>:
    LoRaSettings.ErrorCoding = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_CODINGRATE_MASK ) >> 3;
    return LoRaSettings.ErrorCoding;
}

void SX1272LoRaSetPacketCrcOn( bool enable )
{
   104ec:	b580      	push	{r7, lr}
   104ee:	b082      	sub	sp, #8
   104f0:	af00      	add	r7, sp, #0
   104f2:	1c02      	adds	r2, r0, #0
   104f4:	1dfb      	adds	r3, r7, #7
   104f6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   104f8:	4b12      	ldr	r3, [pc, #72]	; (10544 <SX1272LoRaSetPacketCrcOn+0x58>)
   104fa:	681b      	ldr	r3, [r3, #0]
   104fc:	331d      	adds	r3, #29
   104fe:	201d      	movs	r0, #29
   10500:	1c19      	adds	r1, r3, #0
   10502:	4b11      	ldr	r3, [pc, #68]	; (10548 <SX1272LoRaSetPacketCrcOn+0x5c>)
   10504:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK ) | ( enable << 1 );
   10506:	4b0f      	ldr	r3, [pc, #60]	; (10544 <SX1272LoRaSetPacketCrcOn+0x58>)
   10508:	681a      	ldr	r2, [r3, #0]
   1050a:	4b0e      	ldr	r3, [pc, #56]	; (10544 <SX1272LoRaSetPacketCrcOn+0x58>)
   1050c:	681b      	ldr	r3, [r3, #0]
   1050e:	7f5b      	ldrb	r3, [r3, #29]
   10510:	b2db      	uxtb	r3, r3
   10512:	2102      	movs	r1, #2
   10514:	438b      	bics	r3, r1
   10516:	b2d9      	uxtb	r1, r3
   10518:	1dfb      	adds	r3, r7, #7
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	005b      	lsls	r3, r3, #1
   1051e:	b2db      	uxtb	r3, r3
   10520:	430b      	orrs	r3, r1
   10522:	b2db      	uxtb	r3, r3
   10524:	b2db      	uxtb	r3, r3
   10526:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   10528:	4b06      	ldr	r3, [pc, #24]	; (10544 <SX1272LoRaSetPacketCrcOn+0x58>)
   1052a:	681b      	ldr	r3, [r3, #0]
   1052c:	7f5b      	ldrb	r3, [r3, #29]
   1052e:	201d      	movs	r0, #29
   10530:	1c19      	adds	r1, r3, #0
   10532:	4b06      	ldr	r3, [pc, #24]	; (1054c <SX1272LoRaSetPacketCrcOn+0x60>)
   10534:	4798      	blx	r3
    LoRaSettings.CrcOn = enable;
   10536:	4b06      	ldr	r3, [pc, #24]	; (10550 <SX1272LoRaSetPacketCrcOn+0x64>)
   10538:	1dfa      	adds	r2, r7, #7
   1053a:	7812      	ldrb	r2, [r2, #0]
   1053c:	721a      	strb	r2, [r3, #8]
}
   1053e:	46bd      	mov	sp, r7
   10540:	b002      	add	sp, #8
   10542:	bd80      	pop	{r7, pc}
   10544:	200037cc 	.word	0x200037cc
   10548:	00010919 	.word	0x00010919
   1054c:	000108e5 	.word	0x000108e5
   10550:	20000028 	.word	0x20000028

00010554 <SX1272LoRaSetImplicitHeaderOn>:
    LoRaSettings.CrcOn = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_ON ) >> 1;
    return LoRaSettings.CrcOn;
}

void SX1272LoRaSetImplicitHeaderOn( bool enable )
{
   10554:	b580      	push	{r7, lr}
   10556:	b082      	sub	sp, #8
   10558:	af00      	add	r7, sp, #0
   1055a:	1c02      	adds	r2, r0, #0
   1055c:	1dfb      	adds	r3, r7, #7
   1055e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   10560:	4b12      	ldr	r3, [pc, #72]	; (105ac <SX1272LoRaSetImplicitHeaderOn+0x58>)
   10562:	681b      	ldr	r3, [r3, #0]
   10564:	331d      	adds	r3, #29
   10566:	201d      	movs	r0, #29
   10568:	1c19      	adds	r1, r3, #0
   1056a:	4b11      	ldr	r3, [pc, #68]	; (105b0 <SX1272LoRaSetImplicitHeaderOn+0x5c>)
   1056c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) | ( enable << 2 );
   1056e:	4b0f      	ldr	r3, [pc, #60]	; (105ac <SX1272LoRaSetImplicitHeaderOn+0x58>)
   10570:	681a      	ldr	r2, [r3, #0]
   10572:	4b0e      	ldr	r3, [pc, #56]	; (105ac <SX1272LoRaSetImplicitHeaderOn+0x58>)
   10574:	681b      	ldr	r3, [r3, #0]
   10576:	7f5b      	ldrb	r3, [r3, #29]
   10578:	b2db      	uxtb	r3, r3
   1057a:	2104      	movs	r1, #4
   1057c:	438b      	bics	r3, r1
   1057e:	b2d9      	uxtb	r1, r3
   10580:	1dfb      	adds	r3, r7, #7
   10582:	781b      	ldrb	r3, [r3, #0]
   10584:	009b      	lsls	r3, r3, #2
   10586:	b2db      	uxtb	r3, r3
   10588:	430b      	orrs	r3, r1
   1058a:	b2db      	uxtb	r3, r3
   1058c:	b2db      	uxtb	r3, r3
   1058e:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   10590:	4b06      	ldr	r3, [pc, #24]	; (105ac <SX1272LoRaSetImplicitHeaderOn+0x58>)
   10592:	681b      	ldr	r3, [r3, #0]
   10594:	7f5b      	ldrb	r3, [r3, #29]
   10596:	201d      	movs	r0, #29
   10598:	1c19      	adds	r1, r3, #0
   1059a:	4b06      	ldr	r3, [pc, #24]	; (105b4 <SX1272LoRaSetImplicitHeaderOn+0x60>)
   1059c:	4798      	blx	r3
    LoRaSettings.ImplicitHeaderOn = enable;
   1059e:	4b06      	ldr	r3, [pc, #24]	; (105b8 <SX1272LoRaSetImplicitHeaderOn+0x64>)
   105a0:	1dfa      	adds	r2, r7, #7
   105a2:	7812      	ldrb	r2, [r2, #0]
   105a4:	725a      	strb	r2, [r3, #9]
}
   105a6:	46bd      	mov	sp, r7
   105a8:	b002      	add	sp, #8
   105aa:	bd80      	pop	{r7, pc}
   105ac:	200037cc 	.word	0x200037cc
   105b0:	00010919 	.word	0x00010919
   105b4:	000108e5 	.word	0x000108e5
   105b8:	20000028 	.word	0x20000028

000105bc <SX1272LoRaSetPayloadLength>:
{
    return LoRaSettings.RxPacketTimeout;
}

void SX1272LoRaSetPayloadLength( uint8_t value )
{
   105bc:	b580      	push	{r7, lr}
   105be:	b082      	sub	sp, #8
   105c0:	af00      	add	r7, sp, #0
   105c2:	1c02      	adds	r2, r0, #0
   105c4:	1dfb      	adds	r3, r7, #7
   105c6:	701a      	strb	r2, [r3, #0]
    SX1272LR->RegPayloadLength = value;
   105c8:	4b0a      	ldr	r3, [pc, #40]	; (105f4 <SX1272LoRaSetPayloadLength+0x38>)
   105ca:	681a      	ldr	r2, [r3, #0]
   105cc:	1df9      	adds	r1, r7, #7
   105ce:	2322      	movs	r3, #34	; 0x22
   105d0:	7809      	ldrb	r1, [r1, #0]
   105d2:	54d1      	strb	r1, [r2, r3]
    SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   105d4:	4b07      	ldr	r3, [pc, #28]	; (105f4 <SX1272LoRaSetPayloadLength+0x38>)
   105d6:	681a      	ldr	r2, [r3, #0]
   105d8:	2322      	movs	r3, #34	; 0x22
   105da:	5cd3      	ldrb	r3, [r2, r3]
   105dc:	2022      	movs	r0, #34	; 0x22
   105de:	1c19      	adds	r1, r3, #0
   105e0:	4b05      	ldr	r3, [pc, #20]	; (105f8 <SX1272LoRaSetPayloadLength+0x3c>)
   105e2:	4798      	blx	r3
    LoRaSettings.PayloadLength = value;
   105e4:	4b05      	ldr	r3, [pc, #20]	; (105fc <SX1272LoRaSetPayloadLength+0x40>)
   105e6:	1dfa      	adds	r2, r7, #7
   105e8:	7812      	ldrb	r2, [r2, #0]
   105ea:	761a      	strb	r2, [r3, #24]
}
   105ec:	46bd      	mov	sp, r7
   105ee:	b002      	add	sp, #8
   105f0:	bd80      	pop	{r7, pc}
   105f2:	46c0      	nop			; (mov r8, r8)
   105f4:	200037cc 	.word	0x200037cc
   105f8:	000108e5 	.word	0x000108e5
   105fc:	20000028 	.word	0x20000028

00010600 <SX1272LoRaSetPa20dBm>:
    LoRaSettings.PayloadLength = SX1272LR->RegPayloadLength;
    return LoRaSettings.PayloadLength;
}

void SX1272LoRaSetPa20dBm( bool enale )
{
   10600:	b580      	push	{r7, lr}
   10602:	b082      	sub	sp, #8
   10604:	af00      	add	r7, sp, #0
   10606:	1c02      	adds	r2, r0, #0
   10608:	1dfb      	adds	r3, r7, #7
   1060a:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   1060c:	4b10      	ldr	r3, [pc, #64]	; (10650 <SX1272LoRaSetPa20dBm+0x50>)
   1060e:	681b      	ldr	r3, [r3, #0]
   10610:	3359      	adds	r3, #89	; 0x59
   10612:	205a      	movs	r0, #90	; 0x5a
   10614:	1c19      	adds	r1, r3, #0
   10616:	4b0f      	ldr	r3, [pc, #60]	; (10654 <SX1272LoRaSetPa20dBm+0x54>)
   10618:	4798      	blx	r3
    
    if( enale == true )
   1061a:	1dfb      	adds	r3, r7, #7
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	2b00      	cmp	r3, #0
   10620:	d005      	beq.n	1062e <SX1272LoRaSetPa20dBm+0x2e>
    {
        SX1272LR->RegPaDac = 0x87;
   10622:	4b0b      	ldr	r3, [pc, #44]	; (10650 <SX1272LoRaSetPa20dBm+0x50>)
   10624:	681a      	ldr	r2, [r3, #0]
   10626:	2359      	movs	r3, #89	; 0x59
   10628:	2187      	movs	r1, #135	; 0x87
   1062a:	54d1      	strb	r1, [r2, r3]
   1062c:	e004      	b.n	10638 <SX1272LoRaSetPa20dBm+0x38>
    }
    else
    {
        SX1272LR->RegPaDac = 0x84;
   1062e:	4b08      	ldr	r3, [pc, #32]	; (10650 <SX1272LoRaSetPa20dBm+0x50>)
   10630:	681a      	ldr	r2, [r3, #0]
   10632:	2359      	movs	r3, #89	; 0x59
   10634:	2184      	movs	r1, #132	; 0x84
   10636:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_PADAC, SX1272LR->RegPaDac );
   10638:	4b05      	ldr	r3, [pc, #20]	; (10650 <SX1272LoRaSetPa20dBm+0x50>)
   1063a:	681a      	ldr	r2, [r3, #0]
   1063c:	2359      	movs	r3, #89	; 0x59
   1063e:	5cd3      	ldrb	r3, [r2, r3]
   10640:	205a      	movs	r0, #90	; 0x5a
   10642:	1c19      	adds	r1, r3, #0
   10644:	4b04      	ldr	r3, [pc, #16]	; (10658 <SX1272LoRaSetPa20dBm+0x58>)
   10646:	4798      	blx	r3
}
   10648:	46bd      	mov	sp, r7
   1064a:	b002      	add	sp, #8
   1064c:	bd80      	pop	{r7, pc}
   1064e:	46c0      	nop			; (mov r8, r8)
   10650:	200037cc 	.word	0x200037cc
   10654:	00010919 	.word	0x00010919
   10658:	000108e5 	.word	0x000108e5

0001065c <SX1272LoRaSetContinuousTx>:
    SX1272Read( REG_LR_PARAMP, &SX1272LR->RegPaRamp );
    return SX1272LR->RegPaRamp & ~RFLR_PARAMP_MASK;
}

void SX1272LoRaSetContinuousTx( uint16_t value )
{
   1065c:	b580      	push	{r7, lr}
   1065e:	b082      	sub	sp, #8
   10660:	af00      	add	r7, sp, #0
   10662:	1c02      	adds	r2, r0, #0
   10664:	1dbb      	adds	r3, r7, #6
   10666:	801a      	strh	r2, [r3, #0]
	SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   10668:	4b11      	ldr	r3, [pc, #68]	; (106b0 <SX1272LoRaSetContinuousTx+0x54>)
   1066a:	681b      	ldr	r3, [r3, #0]
   1066c:	331e      	adds	r3, #30
   1066e:	201e      	movs	r0, #30
   10670:	1c19      	adds	r1, r3, #0
   10672:	2201      	movs	r2, #1
   10674:	4b0f      	ldr	r3, [pc, #60]	; (106b4 <SX1272LoRaSetContinuousTx+0x58>)
   10676:	4798      	blx	r3

	SX1272LR->RegModemConfig2 = ((SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_MASK ) | (value));
   10678:	4b0d      	ldr	r3, [pc, #52]	; (106b0 <SX1272LoRaSetContinuousTx+0x54>)
   1067a:	681a      	ldr	r2, [r3, #0]
   1067c:	4b0c      	ldr	r3, [pc, #48]	; (106b0 <SX1272LoRaSetContinuousTx+0x54>)
   1067e:	681b      	ldr	r3, [r3, #0]
   10680:	7f9b      	ldrb	r3, [r3, #30]
   10682:	b2db      	uxtb	r3, r3
   10684:	2108      	movs	r1, #8
   10686:	438b      	bics	r3, r1
   10688:	b2d9      	uxtb	r1, r3
   1068a:	1dbb      	adds	r3, r7, #6
   1068c:	881b      	ldrh	r3, [r3, #0]
   1068e:	b2db      	uxtb	r3, r3
   10690:	430b      	orrs	r3, r1
   10692:	b2db      	uxtb	r3, r3
   10694:	b2db      	uxtb	r3, r3
   10696:	7793      	strb	r3, [r2, #30]
	SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   10698:	4b05      	ldr	r3, [pc, #20]	; (106b0 <SX1272LoRaSetContinuousTx+0x54>)
   1069a:	681b      	ldr	r3, [r3, #0]
   1069c:	331e      	adds	r3, #30
   1069e:	201e      	movs	r0, #30
   106a0:	1c19      	adds	r1, r3, #0
   106a2:	2201      	movs	r2, #1
   106a4:	4b04      	ldr	r3, [pc, #16]	; (106b8 <SX1272LoRaSetContinuousTx+0x5c>)
   106a6:	4798      	blx	r3
}
   106a8:	46bd      	mov	sp, r7
   106aa:	b002      	add	sp, #8
   106ac:	bd80      	pop	{r7, pc}
   106ae:	46c0      	nop			; (mov r8, r8)
   106b0:	200037cc 	.word	0x200037cc
   106b4:	0001098d 	.word	0x0001098d
   106b8:	00010955 	.word	0x00010955

000106bc <SX1272LoRaSetSymbTimeout>:

void SX1272LoRaSetSymbTimeout( uint16_t value )
{
   106bc:	b580      	push	{r7, lr}
   106be:	b082      	sub	sp, #8
   106c0:	af00      	add	r7, sp, #0
   106c2:	1c02      	adds	r2, r0, #0
   106c4:	1dbb      	adds	r3, r7, #6
   106c6:	801a      	strh	r2, [r3, #0]
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   106c8:	4b17      	ldr	r3, [pc, #92]	; (10728 <SX1272LoRaSetSymbTimeout+0x6c>)
   106ca:	681b      	ldr	r3, [r3, #0]
   106cc:	331e      	adds	r3, #30
   106ce:	201e      	movs	r0, #30
   106d0:	1c19      	adds	r1, r3, #0
   106d2:	2202      	movs	r2, #2
   106d4:	4b15      	ldr	r3, [pc, #84]	; (1072c <SX1272LoRaSetSymbTimeout+0x70>)
   106d6:	4798      	blx	r3

    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) | ( ( value >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );
   106d8:	4b13      	ldr	r3, [pc, #76]	; (10728 <SX1272LoRaSetSymbTimeout+0x6c>)
   106da:	681a      	ldr	r2, [r3, #0]
   106dc:	4b12      	ldr	r3, [pc, #72]	; (10728 <SX1272LoRaSetSymbTimeout+0x6c>)
   106de:	681b      	ldr	r3, [r3, #0]
   106e0:	7f9b      	ldrb	r3, [r3, #30]
   106e2:	b2db      	uxtb	r3, r3
   106e4:	2103      	movs	r1, #3
   106e6:	438b      	bics	r3, r1
   106e8:	b2d9      	uxtb	r1, r3
   106ea:	1dbb      	adds	r3, r7, #6
   106ec:	881b      	ldrh	r3, [r3, #0]
   106ee:	0a1b      	lsrs	r3, r3, #8
   106f0:	b29b      	uxth	r3, r3
   106f2:	b2db      	uxtb	r3, r3
   106f4:	1c18      	adds	r0, r3, #0
   106f6:	2303      	movs	r3, #3
   106f8:	4003      	ands	r3, r0
   106fa:	b2db      	uxtb	r3, r3
   106fc:	430b      	orrs	r3, r1
   106fe:	b2db      	uxtb	r3, r3
   10700:	b2db      	uxtb	r3, r3
   10702:	7793      	strb	r3, [r2, #30]
    SX1272LR->RegSymbTimeoutLsb = value & 0xFF;
   10704:	4b08      	ldr	r3, [pc, #32]	; (10728 <SX1272LoRaSetSymbTimeout+0x6c>)
   10706:	681b      	ldr	r3, [r3, #0]
   10708:	1dba      	adds	r2, r7, #6
   1070a:	8812      	ldrh	r2, [r2, #0]
   1070c:	b2d2      	uxtb	r2, r2
   1070e:	77da      	strb	r2, [r3, #31]
    SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   10710:	4b05      	ldr	r3, [pc, #20]	; (10728 <SX1272LoRaSetSymbTimeout+0x6c>)
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	331e      	adds	r3, #30
   10716:	201e      	movs	r0, #30
   10718:	1c19      	adds	r1, r3, #0
   1071a:	2202      	movs	r2, #2
   1071c:	4b04      	ldr	r3, [pc, #16]	; (10730 <SX1272LoRaSetSymbTimeout+0x74>)
   1071e:	4798      	blx	r3
}
   10720:	46bd      	mov	sp, r7
   10722:	b002      	add	sp, #8
   10724:	bd80      	pop	{r7, pc}
   10726:	46c0      	nop			; (mov r8, r8)
   10728:	200037cc 	.word	0x200037cc
   1072c:	0001098d 	.word	0x0001098d
   10730:	00010955 	.word	0x00010955

00010734 <SX1272LoRaSetLowDatarateOptimize>:
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
    return ( ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) << 8 ) | SX1272LR->RegSymbTimeoutLsb;
}

void SX1272LoRaSetLowDatarateOptimize( bool enable )
{
   10734:	b580      	push	{r7, lr}
   10736:	b082      	sub	sp, #8
   10738:	af00      	add	r7, sp, #0
   1073a:	1c02      	adds	r2, r0, #0
   1073c:	1dfb      	adds	r3, r7, #7
   1073e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   10740:	4b0f      	ldr	r3, [pc, #60]	; (10780 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   10742:	681b      	ldr	r3, [r3, #0]
   10744:	331d      	adds	r3, #29
   10746:	201d      	movs	r0, #29
   10748:	1c19      	adds	r1, r3, #0
   1074a:	4b0e      	ldr	r3, [pc, #56]	; (10784 <SX1272LoRaSetLowDatarateOptimize+0x50>)
   1074c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK ) | enable;
   1074e:	4b0c      	ldr	r3, [pc, #48]	; (10780 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   10750:	681a      	ldr	r2, [r3, #0]
   10752:	4b0b      	ldr	r3, [pc, #44]	; (10780 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   10754:	681b      	ldr	r3, [r3, #0]
   10756:	7f5b      	ldrb	r3, [r3, #29]
   10758:	b2db      	uxtb	r3, r3
   1075a:	2101      	movs	r1, #1
   1075c:	438b      	bics	r3, r1
   1075e:	b2d9      	uxtb	r1, r3
   10760:	1dfb      	adds	r3, r7, #7
   10762:	781b      	ldrb	r3, [r3, #0]
   10764:	430b      	orrs	r3, r1
   10766:	b2db      	uxtb	r3, r3
   10768:	b2db      	uxtb	r3, r3
   1076a:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   1076c:	4b04      	ldr	r3, [pc, #16]	; (10780 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   1076e:	681b      	ldr	r3, [r3, #0]
   10770:	7f5b      	ldrb	r3, [r3, #29]
   10772:	201d      	movs	r0, #29
   10774:	1c19      	adds	r1, r3, #0
   10776:	4b04      	ldr	r3, [pc, #16]	; (10788 <SX1272LoRaSetLowDatarateOptimize+0x54>)
   10778:	4798      	blx	r3
}
   1077a:	46bd      	mov	sp, r7
   1077c:	b002      	add	sp, #8
   1077e:	bd80      	pop	{r7, pc}
   10780:	200037cc 	.word	0x200037cc
   10784:	00010919 	.word	0x00010919
   10788:	000108e5 	.word	0x000108e5

0001078c <SX1272LoRaSetNbTrigPeaks>:
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
    return ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_ON );
}

void SX1272LoRaSetNbTrigPeaks( uint8_t value )
{
   1078c:	b580      	push	{r7, lr}
   1078e:	b082      	sub	sp, #8
   10790:	af00      	add	r7, sp, #0
   10792:	1c02      	adds	r2, r0, #0
   10794:	1dfb      	adds	r3, r7, #7
   10796:	701a      	strb	r2, [r3, #0]
    SX1272Read( 0x31, &SX1272LR->RegTestReserved31 );
   10798:	4b11      	ldr	r3, [pc, #68]	; (107e0 <SX1272LoRaSetNbTrigPeaks+0x54>)
   1079a:	681b      	ldr	r3, [r3, #0]
   1079c:	3330      	adds	r3, #48	; 0x30
   1079e:	2031      	movs	r0, #49	; 0x31
   107a0:	1c19      	adds	r1, r3, #0
   107a2:	4b10      	ldr	r3, [pc, #64]	; (107e4 <SX1272LoRaSetNbTrigPeaks+0x58>)
   107a4:	4798      	blx	r3
    SX1272LR->RegTestReserved31 = ( SX1272LR->RegTestReserved31 & 0xF8 ) | value;
   107a6:	4b0e      	ldr	r3, [pc, #56]	; (107e0 <SX1272LoRaSetNbTrigPeaks+0x54>)
   107a8:	681a      	ldr	r2, [r3, #0]
   107aa:	4b0d      	ldr	r3, [pc, #52]	; (107e0 <SX1272LoRaSetNbTrigPeaks+0x54>)
   107ac:	6819      	ldr	r1, [r3, #0]
   107ae:	2330      	movs	r3, #48	; 0x30
   107b0:	5ccb      	ldrb	r3, [r1, r3]
   107b2:	b2db      	uxtb	r3, r3
   107b4:	2107      	movs	r1, #7
   107b6:	438b      	bics	r3, r1
   107b8:	b2d9      	uxtb	r1, r3
   107ba:	1dfb      	adds	r3, r7, #7
   107bc:	781b      	ldrb	r3, [r3, #0]
   107be:	430b      	orrs	r3, r1
   107c0:	b2db      	uxtb	r3, r3
   107c2:	b2d9      	uxtb	r1, r3
   107c4:	2330      	movs	r3, #48	; 0x30
   107c6:	54d1      	strb	r1, [r2, r3]
    SX1272Write( 0x31, SX1272LR->RegTestReserved31 );
   107c8:	4b05      	ldr	r3, [pc, #20]	; (107e0 <SX1272LoRaSetNbTrigPeaks+0x54>)
   107ca:	681a      	ldr	r2, [r3, #0]
   107cc:	2330      	movs	r3, #48	; 0x30
   107ce:	5cd3      	ldrb	r3, [r2, r3]
   107d0:	2031      	movs	r0, #49	; 0x31
   107d2:	1c19      	adds	r1, r3, #0
   107d4:	4b04      	ldr	r3, [pc, #16]	; (107e8 <SX1272LoRaSetNbTrigPeaks+0x5c>)
   107d6:	4798      	blx	r3
}
   107d8:	46bd      	mov	sp, r7
   107da:	b002      	add	sp, #8
   107dc:	bd80      	pop	{r7, pc}
   107de:	46c0      	nop			; (mov r8, r8)
   107e0:	200037cc 	.word	0x200037cc
   107e4:	00010919 	.word	0x00010919
   107e8:	000108e5 	.word	0x000108e5

000107ec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   107ec:	b580      	push	{r7, lr}
   107ee:	b084      	sub	sp, #16
   107f0:	af00      	add	r7, sp, #0
   107f2:	1c02      	adds	r2, r0, #0
   107f4:	1dfb      	adds	r3, r7, #7
   107f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   107f8:	1c3b      	adds	r3, r7, #0
   107fa:	330f      	adds	r3, #15
   107fc:	1dfa      	adds	r2, r7, #7
   107fe:	7812      	ldrb	r2, [r2, #0]
   10800:	09d2      	lsrs	r2, r2, #7
   10802:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10804:	1c3b      	adds	r3, r7, #0
   10806:	330e      	adds	r3, #14
   10808:	1dfa      	adds	r2, r7, #7
   1080a:	7812      	ldrb	r2, [r2, #0]
   1080c:	0952      	lsrs	r2, r2, #5
   1080e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10810:	4b0d      	ldr	r3, [pc, #52]	; (10848 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10812:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   10814:	1c3b      	adds	r3, r7, #0
   10816:	330f      	adds	r3, #15
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	2b00      	cmp	r3, #0
   1081c:	d10e      	bne.n	1083c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   1081e:	1c3b      	adds	r3, r7, #0
   10820:	330f      	adds	r3, #15
   10822:	781b      	ldrb	r3, [r3, #0]
   10824:	009b      	lsls	r3, r3, #2
   10826:	2210      	movs	r2, #16
   10828:	19d2      	adds	r2, r2, r7
   1082a:	18d3      	adds	r3, r2, r3
   1082c:	3b08      	subs	r3, #8
   1082e:	681a      	ldr	r2, [r3, #0]
   10830:	1c3b      	adds	r3, r7, #0
   10832:	330e      	adds	r3, #14
   10834:	781b      	ldrb	r3, [r3, #0]
   10836:	01db      	lsls	r3, r3, #7
   10838:	18d3      	adds	r3, r2, r3
   1083a:	e000      	b.n	1083e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   1083c:	2300      	movs	r3, #0
	}
}
   1083e:	1c18      	adds	r0, r3, #0
   10840:	46bd      	mov	sp, r7
   10842:	b004      	add	sp, #16
   10844:	bd80      	pop	{r7, pc}
   10846:	46c0      	nop			; (mov r8, r8)
   10848:	41004400 	.word	0x41004400

0001084c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1084c:	b580      	push	{r7, lr}
   1084e:	b082      	sub	sp, #8
   10850:	af00      	add	r7, sp, #0
   10852:	1c02      	adds	r2, r0, #0
   10854:	1dfb      	adds	r3, r7, #7
   10856:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   10858:	1dfb      	adds	r3, r7, #7
   1085a:	781b      	ldrb	r3, [r3, #0]
   1085c:	1c18      	adds	r0, r3, #0
   1085e:	4b03      	ldr	r3, [pc, #12]	; (1086c <port_get_group_from_gpio_pin+0x20>)
   10860:	4798      	blx	r3
   10862:	1c03      	adds	r3, r0, #0
}
   10864:	1c18      	adds	r0, r3, #0
   10866:	46bd      	mov	sp, r7
   10868:	b002      	add	sp, #8
   1086a:	bd80      	pop	{r7, pc}
   1086c:	000107ed 	.word	0x000107ed

00010870 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   10870:	b580      	push	{r7, lr}
   10872:	b082      	sub	sp, #8
   10874:	af00      	add	r7, sp, #0
   10876:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   10878:	687b      	ldr	r3, [r7, #4]
   1087a:	2200      	movs	r2, #0
   1087c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	2201      	movs	r2, #1
   10882:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   10884:	687b      	ldr	r3, [r7, #4]
   10886:	2200      	movs	r2, #0
   10888:	709a      	strb	r2, [r3, #2]
}
   1088a:	46bd      	mov	sp, r7
   1088c:	b002      	add	sp, #8
   1088e:	bd80      	pop	{r7, pc}

00010890 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   10890:	b580      	push	{r7, lr}
   10892:	b084      	sub	sp, #16
   10894:	af00      	add	r7, sp, #0
   10896:	1c0a      	adds	r2, r1, #0
   10898:	1dfb      	adds	r3, r7, #7
   1089a:	1c01      	adds	r1, r0, #0
   1089c:	7019      	strb	r1, [r3, #0]
   1089e:	1dbb      	adds	r3, r7, #6
   108a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   108a2:	1dfb      	adds	r3, r7, #7
   108a4:	781b      	ldrb	r3, [r3, #0]
   108a6:	1c18      	adds	r0, r3, #0
   108a8:	4b0d      	ldr	r3, [pc, #52]	; (108e0 <port_pin_set_output_level+0x50>)
   108aa:	4798      	blx	r3
   108ac:	1c03      	adds	r3, r0, #0
   108ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   108b0:	1dfb      	adds	r3, r7, #7
   108b2:	781a      	ldrb	r2, [r3, #0]
   108b4:	231f      	movs	r3, #31
   108b6:	4013      	ands	r3, r2
   108b8:	2201      	movs	r2, #1
   108ba:	1c11      	adds	r1, r2, #0
   108bc:	4099      	lsls	r1, r3
   108be:	1c0b      	adds	r3, r1, #0
   108c0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   108c2:	1dbb      	adds	r3, r7, #6
   108c4:	781b      	ldrb	r3, [r3, #0]
   108c6:	2b00      	cmp	r3, #0
   108c8:	d003      	beq.n	108d2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   108ca:	68fb      	ldr	r3, [r7, #12]
   108cc:	68ba      	ldr	r2, [r7, #8]
   108ce:	619a      	str	r2, [r3, #24]
   108d0:	e002      	b.n	108d8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   108d2:	68fb      	ldr	r3, [r7, #12]
   108d4:	68ba      	ldr	r2, [r7, #8]
   108d6:	615a      	str	r2, [r3, #20]
	}
}
   108d8:	46bd      	mov	sp, r7
   108da:	b004      	add	sp, #16
   108dc:	bd80      	pop	{r7, pc}
   108de:	46c0      	nop			; (mov r8, r8)
   108e0:	0001084d 	.word	0x0001084d

000108e4 <SX1272Write>:
bool LoRaOn = false;
bool LoRaOnState = false;


void SX1272Write( uint8_t addr, uint8_t data )
{
   108e4:	b580      	push	{r7, lr}
   108e6:	b082      	sub	sp, #8
   108e8:	af00      	add	r7, sp, #0
   108ea:	1c0a      	adds	r2, r1, #0
   108ec:	1dfb      	adds	r3, r7, #7
   108ee:	1c01      	adds	r1, r0, #0
   108f0:	7019      	strb	r1, [r3, #0]
   108f2:	1dbb      	adds	r3, r7, #6
   108f4:	701a      	strb	r2, [r3, #0]
	SPIXInOut(addr|0x80,&data,1);
   108f6:	1dfb      	adds	r3, r7, #7
   108f8:	781b      	ldrb	r3, [r3, #0]
   108fa:	2280      	movs	r2, #128	; 0x80
   108fc:	4252      	negs	r2, r2
   108fe:	4313      	orrs	r3, r2
   10900:	b2da      	uxtb	r2, r3
   10902:	1dbb      	adds	r3, r7, #6
   10904:	1c10      	adds	r0, r2, #0
   10906:	1c19      	adds	r1, r3, #0
   10908:	2201      	movs	r2, #1
   1090a:	4b02      	ldr	r3, [pc, #8]	; (10914 <SX1272Write+0x30>)
   1090c:	4798      	blx	r3
}
   1090e:	46bd      	mov	sp, r7
   10910:	b002      	add	sp, #8
   10912:	bd80      	pop	{r7, pc}
   10914:	0000d61d 	.word	0x0000d61d

00010918 <SX1272Read>:

void SX1272Read( uint8_t addr, uint8_t *data )
{
   10918:	b580      	push	{r7, lr}
   1091a:	b084      	sub	sp, #16
   1091c:	af00      	add	r7, sp, #0
   1091e:	1c02      	adds	r2, r0, #0
   10920:	6039      	str	r1, [r7, #0]
   10922:	1dfb      	adds	r3, r7, #7
   10924:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[2];
	SPIXInOut2(addr & 0x7f,tempBuffer,1);
   10926:	1dfb      	adds	r3, r7, #7
   10928:	781a      	ldrb	r2, [r3, #0]
   1092a:	237f      	movs	r3, #127	; 0x7f
   1092c:	4013      	ands	r3, r2
   1092e:	b2da      	uxtb	r2, r3
   10930:	1c3b      	adds	r3, r7, #0
   10932:	330c      	adds	r3, #12
   10934:	1c10      	adds	r0, r2, #0
   10936:	1c19      	adds	r1, r3, #0
   10938:	2201      	movs	r2, #1
   1093a:	4b05      	ldr	r3, [pc, #20]	; (10950 <SX1272Read+0x38>)
   1093c:	4798      	blx	r3
	*data = tempBuffer[0];
   1093e:	1c3b      	adds	r3, r7, #0
   10940:	330c      	adds	r3, #12
   10942:	781a      	ldrb	r2, [r3, #0]
   10944:	683b      	ldr	r3, [r7, #0]
   10946:	701a      	strb	r2, [r3, #0]
}
   10948:	46bd      	mov	sp, r7
   1094a:	b004      	add	sp, #16
   1094c:	bd80      	pop	{r7, pc}
   1094e:	46c0      	nop			; (mov r8, r8)
   10950:	0000d715 	.word	0x0000d715

00010954 <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   10954:	b580      	push	{r7, lr}
   10956:	b082      	sub	sp, #8
   10958:	af00      	add	r7, sp, #0
   1095a:	6039      	str	r1, [r7, #0]
   1095c:	1dfb      	adds	r3, r7, #7
   1095e:	1c01      	adds	r1, r0, #0
   10960:	7019      	strb	r1, [r3, #0]
   10962:	1d3b      	adds	r3, r7, #4
   10964:	801a      	strh	r2, [r3, #0]
	SPIXInOut(addr|0x80,buffer,size);
   10966:	1dfb      	adds	r3, r7, #7
   10968:	781b      	ldrb	r3, [r3, #0]
   1096a:	2280      	movs	r2, #128	; 0x80
   1096c:	4252      	negs	r2, r2
   1096e:	4313      	orrs	r3, r2
   10970:	b2d9      	uxtb	r1, r3
   10972:	683a      	ldr	r2, [r7, #0]
   10974:	1d3b      	adds	r3, r7, #4
   10976:	881b      	ldrh	r3, [r3, #0]
   10978:	1c08      	adds	r0, r1, #0
   1097a:	1c11      	adds	r1, r2, #0
   1097c:	1c1a      	adds	r2, r3, #0
   1097e:	4b02      	ldr	r3, [pc, #8]	; (10988 <SX1272WriteBuffer+0x34>)
   10980:	4798      	blx	r3
}
   10982:	46bd      	mov	sp, r7
   10984:	b002      	add	sp, #8
   10986:	bd80      	pop	{r7, pc}
   10988:	0000d61d 	.word	0x0000d61d

0001098c <SX1272ReadBuffer2>:

void SX1272ReadBuffer2( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   1098c:	b580      	push	{r7, lr}
   1098e:	b082      	sub	sp, #8
   10990:	af00      	add	r7, sp, #0
   10992:	6039      	str	r1, [r7, #0]
   10994:	1dfb      	adds	r3, r7, #7
   10996:	1c01      	adds	r1, r0, #0
   10998:	7019      	strb	r1, [r3, #0]
   1099a:	1d3b      	adds	r3, r7, #4
   1099c:	801a      	strh	r2, [r3, #0]
	SPIXInOut2(addr & 0x7f,buffer,size);
   1099e:	1dfb      	adds	r3, r7, #7
   109a0:	781a      	ldrb	r2, [r3, #0]
   109a2:	237f      	movs	r3, #127	; 0x7f
   109a4:	4013      	ands	r3, r2
   109a6:	b2d9      	uxtb	r1, r3
   109a8:	683a      	ldr	r2, [r7, #0]
   109aa:	1d3b      	adds	r3, r7, #4
   109ac:	881b      	ldrh	r3, [r3, #0]
   109ae:	1c08      	adds	r0, r1, #0
   109b0:	1c11      	adds	r1, r2, #0
   109b2:	1c1a      	adds	r2, r3, #0
   109b4:	4b02      	ldr	r3, [pc, #8]	; (109c0 <SX1272ReadBuffer2+0x34>)
   109b6:	4798      	blx	r3
}
   109b8:	46bd      	mov	sp, r7
   109ba:	b002      	add	sp, #8
   109bc:	bd80      	pop	{r7, pc}
   109be:	46c0      	nop			; (mov r8, r8)
   109c0:	0000d715 	.word	0x0000d715

000109c4 <SX1272WriteFifo>:

 
void SX1272WriteFifo( uint8_t *buffer, uint16_t size )
{
   109c4:	b580      	push	{r7, lr}
   109c6:	b082      	sub	sp, #8
   109c8:	af00      	add	r7, sp, #0
   109ca:	6078      	str	r0, [r7, #4]
   109cc:	1c0a      	adds	r2, r1, #0
   109ce:	1cbb      	adds	r3, r7, #2
   109d0:	801a      	strh	r2, [r3, #0]
//	SX1272WriteBuffer( 0, buffer, size );
	SPIXInOut(0x80,buffer,size);
   109d2:	687a      	ldr	r2, [r7, #4]
   109d4:	1cbb      	adds	r3, r7, #2
   109d6:	881b      	ldrh	r3, [r3, #0]
   109d8:	2080      	movs	r0, #128	; 0x80
   109da:	1c11      	adds	r1, r2, #0
   109dc:	1c1a      	adds	r2, r3, #0
   109de:	4b02      	ldr	r3, [pc, #8]	; (109e8 <SX1272WriteFifo+0x24>)
   109e0:	4798      	blx	r3
}
   109e2:	46bd      	mov	sp, r7
   109e4:	b002      	add	sp, #8
   109e6:	bd80      	pop	{r7, pc}
   109e8:	0000d61d 	.word	0x0000d61d

000109ec <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint16_t size )
{
   109ec:	b580      	push	{r7, lr}
   109ee:	b082      	sub	sp, #8
   109f0:	af00      	add	r7, sp, #0
   109f2:	6078      	str	r0, [r7, #4]
   109f4:	1c0a      	adds	r2, r1, #0
   109f6:	1cbb      	adds	r3, r7, #2
   109f8:	801a      	strh	r2, [r3, #0]
//	SX1272ReadBuffer2( 0, buffer, size );
	SPIXInOut2(0,buffer,size);	
   109fa:	687a      	ldr	r2, [r7, #4]
   109fc:	1cbb      	adds	r3, r7, #2
   109fe:	881b      	ldrh	r3, [r3, #0]
   10a00:	2000      	movs	r0, #0
   10a02:	1c11      	adds	r1, r2, #0
   10a04:	1c1a      	adds	r2, r3, #0
   10a06:	4b02      	ldr	r3, [pc, #8]	; (10a10 <SX1272ReadFifo+0x24>)
   10a08:	4798      	blx	r3
}
   10a0a:	46bd      	mov	sp, r7
   10a0c:	b002      	add	sp, #8
   10a0e:	bd80      	pop	{r7, pc}
   10a10:	0000d715 	.word	0x0000d715

00010a14 <SX1272Init>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Init(uint8_t radiowhich )
{
   10a14:	b580      	push	{r7, lr}
   10a16:	b082      	sub	sp, #8
   10a18:	af00      	add	r7, sp, #0
   10a1a:	1c02      	adds	r2, r0, #0
   10a1c:	1dfb      	adds	r3, r7, #7
   10a1e:	701a      	strb	r2, [r3, #0]
    // Initialize FSK and LoRa registers structure
	if (radiowhich == WHICHRADIO_LORA)
   10a20:	1dfb      	adds	r3, r7, #7
   10a22:	781b      	ldrb	r3, [r3, #0]
   10a24:	2b99      	cmp	r3, #153	; 0x99
   10a26:	d10f      	bne.n	10a48 <SX1272Init+0x34>
	{
		SX1272LR = ( tSX1272LR* )SX1272Regs;
   10a28:	4b10      	ldr	r3, [pc, #64]	; (10a6c <SX1272Init+0x58>)
   10a2a:	4a11      	ldr	r2, [pc, #68]	; (10a70 <SX1272Init+0x5c>)
   10a2c:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   10a2e:	4b11      	ldr	r3, [pc, #68]	; (10a74 <SX1272Init+0x60>)
   10a30:	4798      	blx	r3
		LoRaOn = true;
   10a32:	4b11      	ldr	r3, [pc, #68]	; (10a78 <SX1272Init+0x64>)
   10a34:	2201      	movs	r2, #1
   10a36:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   10a38:	4b0f      	ldr	r3, [pc, #60]	; (10a78 <SX1272Init+0x64>)
   10a3a:	781b      	ldrb	r3, [r3, #0]
   10a3c:	1c18      	adds	r0, r3, #0
   10a3e:	4b0f      	ldr	r3, [pc, #60]	; (10a7c <SX1272Init+0x68>)
   10a40:	4798      	blx	r3
		// Initialize LoRa modem
		SX1272LoRaInit( );		
   10a42:	4b0f      	ldr	r3, [pc, #60]	; (10a80 <SX1272Init+0x6c>)
   10a44:	4798      	blx	r3
   10a46:	e00e      	b.n	10a66 <SX1272Init+0x52>
	}
	else
	{
		SX1272 = ( tSX1272* )SX1272Regs;
   10a48:	4b0e      	ldr	r3, [pc, #56]	; (10a84 <SX1272Init+0x70>)
   10a4a:	4a09      	ldr	r2, [pc, #36]	; (10a70 <SX1272Init+0x5c>)
   10a4c:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   10a4e:	4b09      	ldr	r3, [pc, #36]	; (10a74 <SX1272Init+0x60>)
   10a50:	4798      	blx	r3
		LoRaOn = false;
   10a52:	4b09      	ldr	r3, [pc, #36]	; (10a78 <SX1272Init+0x64>)
   10a54:	2200      	movs	r2, #0
   10a56:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   10a58:	4b07      	ldr	r3, [pc, #28]	; (10a78 <SX1272Init+0x64>)
   10a5a:	781b      	ldrb	r3, [r3, #0]
   10a5c:	1c18      	adds	r0, r3, #0
   10a5e:	4b07      	ldr	r3, [pc, #28]	; (10a7c <SX1272Init+0x68>)
   10a60:	4798      	blx	r3
		// Initialize FSK modem
		SX1272FskInit( );		
   10a62:	4b09      	ldr	r3, [pc, #36]	; (10a88 <SX1272Init+0x74>)
   10a64:	4798      	blx	r3
	}
}
   10a66:	46bd      	mov	sp, r7
   10a68:	b002      	add	sp, #8
   10a6a:	bd80      	pop	{r7, pc}
   10a6c:	200037cc 	.word	0x200037cc
   10a70:	200038d0 	.word	0x200038d0
   10a74:	00010a8d 	.word	0x00010a8d
   10a78:	200004f1 	.word	0x200004f1
   10a7c:	00010b09 	.word	0x00010b09
   10a80:	0000fac5 	.word	0x0000fac5
   10a84:	200036c8 	.word	0x200036c8
   10a88:	0000ecdd 	.word	0x0000ecdd

00010a8c <SX1272Reset>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Reset( void )
{
   10a8c:	b580      	push	{r7, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	af00      	add	r7, sp, #0
	uint32_t i; 
  	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   10a92:	1c3b      	adds	r3, r7, #0
   10a94:	1c18      	adds	r0, r3, #0
   10a96:	4b18      	ldr	r3, [pc, #96]	; (10af8 <SX1272Reset+0x6c>)
   10a98:	4798      	blx	r3
	//--------------------------
	// Set RESET pin to 1
	port_pin_set_output_level(LORA_XRESET, 1);
   10a9a:	2028      	movs	r0, #40	; 0x28
   10a9c:	2101      	movs	r1, #1
   10a9e:	4b17      	ldr	r3, [pc, #92]	; (10afc <SX1272Reset+0x70>)
   10aa0:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   10aa2:	1c3b      	adds	r3, r7, #0
   10aa4:	2201      	movs	r2, #1
   10aa6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
   10aa8:	1c3b      	adds	r3, r7, #0
   10aaa:	2028      	movs	r0, #40	; 0x28
   10aac:	1c19      	adds	r1, r3, #0
   10aae:	4b14      	ldr	r3, [pc, #80]	; (10b00 <SX1272Reset+0x74>)
   10ab0:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   10ab2:	2300      	movs	r3, #0
   10ab4:	607b      	str	r3, [r7, #4]
   10ab6:	e002      	b.n	10abe <SX1272Reset+0x32>
   10ab8:	687b      	ldr	r3, [r7, #4]
   10aba:	3301      	adds	r3, #1
   10abc:	607b      	str	r3, [r7, #4]
   10abe:	687a      	ldr	r2, [r7, #4]
   10ac0:	4b10      	ldr	r3, [pc, #64]	; (10b04 <SX1272Reset+0x78>)
   10ac2:	429a      	cmp	r2, r3
   10ac4:	d9f8      	bls.n	10ab8 <SX1272Reset+0x2c>
	{
		
	}
  	port_pin_set_output_level(LORA_XRESET, 0);
   10ac6:	2028      	movs	r0, #40	; 0x28
   10ac8:	2100      	movs	r1, #0
   10aca:	4b0c      	ldr	r3, [pc, #48]	; (10afc <SX1272Reset+0x70>)
   10acc:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;		
   10ace:	1c3b      	adds	r3, r7, #0
   10ad0:	2201      	movs	r2, #1
   10ad2:	701a      	strb	r2, [r3, #0]
    port_pin_set_config(LORA_XRESET, &pin_conf);   
   10ad4:	1c3b      	adds	r3, r7, #0
   10ad6:	2028      	movs	r0, #40	; 0x28
   10ad8:	1c19      	adds	r1, r3, #0
   10ada:	4b09      	ldr	r3, [pc, #36]	; (10b00 <SX1272Reset+0x74>)
   10adc:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   10ade:	2300      	movs	r3, #0
   10ae0:	607b      	str	r3, [r7, #4]
   10ae2:	e002      	b.n	10aea <SX1272Reset+0x5e>
   10ae4:	687b      	ldr	r3, [r7, #4]
   10ae6:	3301      	adds	r3, #1
   10ae8:	607b      	str	r3, [r7, #4]
   10aea:	687a      	ldr	r2, [r7, #4]
   10aec:	4b05      	ldr	r3, [pc, #20]	; (10b04 <SX1272Reset+0x78>)
   10aee:	429a      	cmp	r2, r3
   10af0:	d9f8      	bls.n	10ae4 <SX1272Reset+0x58>
	{
		
	}
}
   10af2:	46bd      	mov	sp, r7
   10af4:	b002      	add	sp, #8
   10af6:	bd80      	pop	{r7, pc}
   10af8:	00010871 	.word	0x00010871
   10afc:	00010891 	.word	0x00010891
   10b00:	00010c95 	.word	0x00010c95
   10b04:	00006fff 	.word	0x00006fff

00010b08 <SX1272SetLoRaOn>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272SetLoRaOn( bool enable )
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	1c02      	adds	r2, r0, #0
   10b10:	1dfb      	adds	r3, r7, #7
   10b12:	701a      	strb	r2, [r3, #0]
 
    LoRaOnState = enable;
   10b14:	4b28      	ldr	r3, [pc, #160]	; (10bb8 <SX1272SetLoRaOn+0xb0>)
   10b16:	1dfa      	adds	r2, r7, #7
   10b18:	7812      	ldrb	r2, [r2, #0]
   10b1a:	701a      	strb	r2, [r3, #0]

    if( LoRaOn == true )
   10b1c:	4b27      	ldr	r3, [pc, #156]	; (10bbc <SX1272SetLoRaOn+0xb4>)
   10b1e:	781b      	ldrb	r3, [r3, #0]
   10b20:	2b00      	cmp	r3, #0
   10b22:	d023      	beq.n	10b6c <SX1272SetLoRaOn+0x64>
    {
		//---------------------------------------
		// set up the LORA RADIO
		//---------------------------------------
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   10b24:	4b26      	ldr	r3, [pc, #152]	; (10bc0 <SX1272SetLoRaOn+0xb8>)
   10b26:	2001      	movs	r0, #1
   10b28:	1c19      	adds	r1, r3, #0
   10b2a:	226f      	movs	r2, #111	; 0x6f
   10b2c:	4b25      	ldr	r3, [pc, #148]	; (10bc4 <SX1272SetLoRaOn+0xbc>)
   10b2e:	4798      	blx	r3
	    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
   10b30:	2000      	movs	r0, #0
   10b32:	4b25      	ldr	r3, [pc, #148]	; (10bc8 <SX1272SetLoRaOn+0xc0>)
   10b34:	4798      	blx	r3
	    
	    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
   10b36:	4b25      	ldr	r3, [pc, #148]	; (10bcc <SX1272SetLoRaOn+0xc4>)
   10b38:	681a      	ldr	r2, [r3, #0]
   10b3a:	4b24      	ldr	r3, [pc, #144]	; (10bcc <SX1272SetLoRaOn+0xc4>)
   10b3c:	681b      	ldr	r3, [r3, #0]
   10b3e:	785b      	ldrb	r3, [r3, #1]
   10b40:	2180      	movs	r1, #128	; 0x80
   10b42:	4249      	negs	r1, r1
   10b44:	430b      	orrs	r3, r1
   10b46:	b2db      	uxtb	r3, r3
   10b48:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );
   10b4a:	4b20      	ldr	r3, [pc, #128]	; (10bcc <SX1272SetLoRaOn+0xc4>)
   10b4c:	681b      	ldr	r3, [r3, #0]
   10b4e:	785b      	ldrb	r3, [r3, #1]
   10b50:	2001      	movs	r0, #1
   10b52:	1c19      	adds	r1, r3, #0
   10b54:	4b1e      	ldr	r3, [pc, #120]	; (10bd0 <SX1272SetLoRaOn+0xc8>)
   10b56:	4798      	blx	r3
	    
	    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10b58:	2001      	movs	r0, #1
   10b5a:	4b1b      	ldr	r3, [pc, #108]	; (10bc8 <SX1272SetLoRaOn+0xc0>)
   10b5c:	4798      	blx	r3
	    //        SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
	    // CadDetected          ModeReady
	    //        SX1272LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
	    //        SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );
	    
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   10b5e:	4b18      	ldr	r3, [pc, #96]	; (10bc0 <SX1272SetLoRaOn+0xb8>)
   10b60:	2001      	movs	r0, #1
   10b62:	1c19      	adds	r1, r3, #0
   10b64:	226f      	movs	r2, #111	; 0x6f
   10b66:	4b17      	ldr	r3, [pc, #92]	; (10bc4 <SX1272SetLoRaOn+0xbc>)
   10b68:	4798      	blx	r3
   10b6a:	e021      	b.n	10bb0 <SX1272SetLoRaOn+0xa8>
    else
    {
		//-----------------------------
		// set up FSK RADIO
		//-----------------------------
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10b6c:	4b19      	ldr	r3, [pc, #100]	; (10bd4 <SX1272SetLoRaOn+0xcc>)
   10b6e:	2001      	movs	r0, #1
   10b70:	1c19      	adds	r1, r3, #0
   10b72:	226f      	movs	r2, #111	; 0x6f
   10b74:	4b13      	ldr	r3, [pc, #76]	; (10bc4 <SX1272SetLoRaOn+0xbc>)
   10b76:	4798      	blx	r3
	    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
   10b78:	2000      	movs	r0, #0
   10b7a:	4b17      	ldr	r3, [pc, #92]	; (10bd8 <SX1272SetLoRaOn+0xd0>)
   10b7c:	4798      	blx	r3
	    
	    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
   10b7e:	4b17      	ldr	r3, [pc, #92]	; (10bdc <SX1272SetLoRaOn+0xd4>)
   10b80:	681a      	ldr	r2, [r3, #0]
   10b82:	4b16      	ldr	r3, [pc, #88]	; (10bdc <SX1272SetLoRaOn+0xd4>)
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	7859      	ldrb	r1, [r3, #1]
   10b88:	237f      	movs	r3, #127	; 0x7f
   10b8a:	400b      	ands	r3, r1
   10b8c:	b2db      	uxtb	r3, r3
   10b8e:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_OPMODE, SX1272->RegOpMode );
   10b90:	4b12      	ldr	r3, [pc, #72]	; (10bdc <SX1272SetLoRaOn+0xd4>)
   10b92:	681b      	ldr	r3, [r3, #0]
   10b94:	785b      	ldrb	r3, [r3, #1]
   10b96:	2001      	movs	r0, #1
   10b98:	1c19      	adds	r1, r3, #0
   10b9a:	4b0d      	ldr	r3, [pc, #52]	; (10bd0 <SX1272SetLoRaOn+0xc8>)
   10b9c:	4798      	blx	r3
	    
	    SX1272FskSetOpMode( RFLR_OPMODE_STANDBY );
   10b9e:	2001      	movs	r0, #1
   10ba0:	4b0d      	ldr	r3, [pc, #52]	; (10bd8 <SX1272SetLoRaOn+0xd0>)
   10ba2:	4798      	blx	r3
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10ba4:	4b0b      	ldr	r3, [pc, #44]	; (10bd4 <SX1272SetLoRaOn+0xcc>)
   10ba6:	2001      	movs	r0, #1
   10ba8:	1c19      	adds	r1, r3, #0
   10baa:	226f      	movs	r2, #111	; 0x6f
   10bac:	4b05      	ldr	r3, [pc, #20]	; (10bc4 <SX1272SetLoRaOn+0xbc>)
   10bae:	4798      	blx	r3
    }
}
   10bb0:	46bd      	mov	sp, r7
   10bb2:	b002      	add	sp, #8
   10bb4:	bd80      	pop	{r7, pc}
   10bb6:	46c0      	nop			; (mov r8, r8)
   10bb8:	200004f2 	.word	0x200004f2
   10bbc:	200004f1 	.word	0x200004f1
   10bc0:	200038d0 	.word	0x200038d0
   10bc4:	0001098d 	.word	0x0001098d
   10bc8:	0000fc3d 	.word	0x0000fc3d
   10bcc:	200037cc 	.word	0x200037cc
   10bd0:	000108e5 	.word	0x000108e5
   10bd4:	200038d1 	.word	0x200038d1
   10bd8:	0000ef09 	.word	0x0000ef09
   10bdc:	200036c8 	.word	0x200036c8

00010be0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   10be0:	b580      	push	{r7, lr}
   10be2:	b082      	sub	sp, #8
   10be4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10be6:	4b0f      	ldr	r3, [pc, #60]	; (10c24 <cpu_irq_enter_critical+0x44>)
   10be8:	681b      	ldr	r3, [r3, #0]
   10bea:	2b00      	cmp	r3, #0
   10bec:	d112      	bne.n	10c14 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10bee:	f3ef 8310 	mrs	r3, PRIMASK
   10bf2:	607b      	str	r3, [r7, #4]
  return(result);
   10bf4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d109      	bne.n	10c0e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   10bfa:	b672      	cpsid	i
   10bfc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10c00:	4b09      	ldr	r3, [pc, #36]	; (10c28 <cpu_irq_enter_critical+0x48>)
   10c02:	2200      	movs	r2, #0
   10c04:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10c06:	4b09      	ldr	r3, [pc, #36]	; (10c2c <cpu_irq_enter_critical+0x4c>)
   10c08:	2201      	movs	r2, #1
   10c0a:	701a      	strb	r2, [r3, #0]
   10c0c:	e002      	b.n	10c14 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   10c0e:	4b07      	ldr	r3, [pc, #28]	; (10c2c <cpu_irq_enter_critical+0x4c>)
   10c10:	2200      	movs	r2, #0
   10c12:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10c14:	4b03      	ldr	r3, [pc, #12]	; (10c24 <cpu_irq_enter_critical+0x44>)
   10c16:	681b      	ldr	r3, [r3, #0]
   10c18:	1c5a      	adds	r2, r3, #1
   10c1a:	4b02      	ldr	r3, [pc, #8]	; (10c24 <cpu_irq_enter_critical+0x44>)
   10c1c:	601a      	str	r2, [r3, #0]
}
   10c1e:	46bd      	mov	sp, r7
   10c20:	b002      	add	sp, #8
   10c22:	bd80      	pop	{r7, pc}
   10c24:	200004f4 	.word	0x200004f4
   10c28:	20000044 	.word	0x20000044
   10c2c:	200004f8 	.word	0x200004f8

00010c30 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10c30:	b580      	push	{r7, lr}
   10c32:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10c34:	4b0a      	ldr	r3, [pc, #40]	; (10c60 <cpu_irq_leave_critical+0x30>)
   10c36:	681b      	ldr	r3, [r3, #0]
   10c38:	1e5a      	subs	r2, r3, #1
   10c3a:	4b09      	ldr	r3, [pc, #36]	; (10c60 <cpu_irq_leave_critical+0x30>)
   10c3c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10c3e:	4b08      	ldr	r3, [pc, #32]	; (10c60 <cpu_irq_leave_critical+0x30>)
   10c40:	681b      	ldr	r3, [r3, #0]
   10c42:	2b00      	cmp	r3, #0
   10c44:	d10a      	bne.n	10c5c <cpu_irq_leave_critical+0x2c>
   10c46:	4b07      	ldr	r3, [pc, #28]	; (10c64 <cpu_irq_leave_critical+0x34>)
   10c48:	781b      	ldrb	r3, [r3, #0]
   10c4a:	b2db      	uxtb	r3, r3
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d005      	beq.n	10c5c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10c50:	4b05      	ldr	r3, [pc, #20]	; (10c68 <cpu_irq_leave_critical+0x38>)
   10c52:	2201      	movs	r2, #1
   10c54:	701a      	strb	r2, [r3, #0]
   10c56:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   10c5a:	b662      	cpsie	i
	}
}
   10c5c:	46bd      	mov	sp, r7
   10c5e:	bd80      	pop	{r7, pc}
   10c60:	200004f4 	.word	0x200004f4
   10c64:	200004f8 	.word	0x200004f8
   10c68:	20000044 	.word	0x20000044

00010c6c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   10c6c:	b580      	push	{r7, lr}
   10c6e:	b082      	sub	sp, #8
   10c70:	af00      	add	r7, sp, #0
   10c72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10c74:	687b      	ldr	r3, [r7, #4]
   10c76:	2280      	movs	r2, #128	; 0x80
   10c78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10c7a:	687b      	ldr	r3, [r7, #4]
   10c7c:	2200      	movs	r2, #0
   10c7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10c80:	687b      	ldr	r3, [r7, #4]
   10c82:	2201      	movs	r2, #1
   10c84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10c86:	687b      	ldr	r3, [r7, #4]
   10c88:	2200      	movs	r2, #0
   10c8a:	70da      	strb	r2, [r3, #3]
}
   10c8c:	46bd      	mov	sp, r7
   10c8e:	b002      	add	sp, #8
   10c90:	bd80      	pop	{r7, pc}
   10c92:	46c0      	nop			; (mov r8, r8)

00010c94 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   10c94:	b580      	push	{r7, lr}
   10c96:	b084      	sub	sp, #16
   10c98:	af00      	add	r7, sp, #0
   10c9a:	1c02      	adds	r2, r0, #0
   10c9c:	6039      	str	r1, [r7, #0]
   10c9e:	1dfb      	adds	r3, r7, #7
   10ca0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   10ca2:	1c3b      	adds	r3, r7, #0
   10ca4:	330c      	adds	r3, #12
   10ca6:	1c18      	adds	r0, r3, #0
   10ca8:	4b0f      	ldr	r3, [pc, #60]	; (10ce8 <port_pin_set_config+0x54>)
   10caa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   10cac:	1c3b      	adds	r3, r7, #0
   10cae:	330c      	adds	r3, #12
   10cb0:	2280      	movs	r2, #128	; 0x80
   10cb2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   10cb4:	683b      	ldr	r3, [r7, #0]
   10cb6:	781a      	ldrb	r2, [r3, #0]
   10cb8:	1c3b      	adds	r3, r7, #0
   10cba:	330c      	adds	r3, #12
   10cbc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   10cbe:	683b      	ldr	r3, [r7, #0]
   10cc0:	785a      	ldrb	r2, [r3, #1]
   10cc2:	1c3b      	adds	r3, r7, #0
   10cc4:	330c      	adds	r3, #12
   10cc6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   10cc8:	683b      	ldr	r3, [r7, #0]
   10cca:	789a      	ldrb	r2, [r3, #2]
   10ccc:	1c3b      	adds	r3, r7, #0
   10cce:	330c      	adds	r3, #12
   10cd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   10cd2:	1dfb      	adds	r3, r7, #7
   10cd4:	781a      	ldrb	r2, [r3, #0]
   10cd6:	1c3b      	adds	r3, r7, #0
   10cd8:	330c      	adds	r3, #12
   10cda:	1c10      	adds	r0, r2, #0
   10cdc:	1c19      	adds	r1, r3, #0
   10cde:	4b03      	ldr	r3, [pc, #12]	; (10cec <port_pin_set_config+0x58>)
   10ce0:	4798      	blx	r3
}
   10ce2:	46bd      	mov	sp, r7
   10ce4:	b004      	add	sp, #16
   10ce6:	bd80      	pop	{r7, pc}
   10ce8:	00010c6d 	.word	0x00010c6d
   10cec:	000131c5 	.word	0x000131c5

00010cf0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   10cf0:	b580      	push	{r7, lr}
   10cf2:	b082      	sub	sp, #8
   10cf4:	af00      	add	r7, sp, #0
   10cf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   10cf8:	687b      	ldr	r3, [r7, #4]
   10cfa:	2200      	movs	r2, #0
   10cfc:	701a      	strb	r2, [r3, #0]
}
   10cfe:	46bd      	mov	sp, r7
   10d00:	b002      	add	sp, #8
   10d02:	bd80      	pop	{r7, pc}

00010d04 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   10d04:	b580      	push	{r7, lr}
   10d06:	b082      	sub	sp, #8
   10d08:	af00      	add	r7, sp, #0
   10d0a:	1c02      	adds	r2, r0, #0
   10d0c:	6039      	str	r1, [r7, #0]
   10d0e:	1dfb      	adds	r3, r7, #7
   10d10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   10d12:	1dfb      	adds	r3, r7, #7
   10d14:	781b      	ldrb	r3, [r3, #0]
   10d16:	2b01      	cmp	r3, #1
   10d18:	d00a      	beq.n	10d30 <system_apb_clock_set_mask+0x2c>
   10d1a:	2b02      	cmp	r3, #2
   10d1c:	d00f      	beq.n	10d3e <system_apb_clock_set_mask+0x3a>
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d114      	bne.n	10d4c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   10d22:	4b0e      	ldr	r3, [pc, #56]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d24:	4a0d      	ldr	r2, [pc, #52]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d26:	6991      	ldr	r1, [r2, #24]
   10d28:	683a      	ldr	r2, [r7, #0]
   10d2a:	430a      	orrs	r2, r1
   10d2c:	619a      	str	r2, [r3, #24]
			break;
   10d2e:	e00f      	b.n	10d50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   10d30:	4b0a      	ldr	r3, [pc, #40]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d32:	4a0a      	ldr	r2, [pc, #40]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d34:	69d1      	ldr	r1, [r2, #28]
   10d36:	683a      	ldr	r2, [r7, #0]
   10d38:	430a      	orrs	r2, r1
   10d3a:	61da      	str	r2, [r3, #28]
			break;
   10d3c:	e008      	b.n	10d50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   10d3e:	4b07      	ldr	r3, [pc, #28]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d40:	4a06      	ldr	r2, [pc, #24]	; (10d5c <system_apb_clock_set_mask+0x58>)
   10d42:	6a11      	ldr	r1, [r2, #32]
   10d44:	683a      	ldr	r2, [r7, #0]
   10d46:	430a      	orrs	r2, r1
   10d48:	621a      	str	r2, [r3, #32]
			break;
   10d4a:	e001      	b.n	10d50 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   10d4c:	2317      	movs	r3, #23
   10d4e:	e000      	b.n	10d52 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   10d50:	2300      	movs	r3, #0
}
   10d52:	1c18      	adds	r0, r3, #0
   10d54:	46bd      	mov	sp, r7
   10d56:	b002      	add	sp, #8
   10d58:	bd80      	pop	{r7, pc}
   10d5a:	46c0      	nop			; (mov r8, r8)
   10d5c:	40000400 	.word	0x40000400

00010d60 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   10d60:	b580      	push	{r7, lr}
   10d62:	b082      	sub	sp, #8
   10d64:	af00      	add	r7, sp, #0
   10d66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10d68:	687b      	ldr	r3, [r7, #4]
   10d6a:	2280      	movs	r2, #128	; 0x80
   10d6c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10d6e:	687b      	ldr	r3, [r7, #4]
   10d70:	2200      	movs	r2, #0
   10d72:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10d74:	687b      	ldr	r3, [r7, #4]
   10d76:	2201      	movs	r2, #1
   10d78:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10d7a:	687b      	ldr	r3, [r7, #4]
   10d7c:	2200      	movs	r2, #0
   10d7e:	70da      	strb	r2, [r3, #3]
}
   10d80:	46bd      	mov	sp, r7
   10d82:	b002      	add	sp, #8
   10d84:	bd80      	pop	{r7, pc}
   10d86:	46c0      	nop			; (mov r8, r8)

00010d88 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   10d88:	b580      	push	{r7, lr}
   10d8a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10d8c:	4b05      	ldr	r3, [pc, #20]	; (10da4 <system_is_debugger_present+0x1c>)
   10d8e:	789b      	ldrb	r3, [r3, #2]
   10d90:	b2db      	uxtb	r3, r3
   10d92:	1c1a      	adds	r2, r3, #0
   10d94:	2302      	movs	r3, #2
   10d96:	4013      	ands	r3, r2
   10d98:	1e5a      	subs	r2, r3, #1
   10d9a:	4193      	sbcs	r3, r2
   10d9c:	b2db      	uxtb	r3, r3
}
   10d9e:	1c18      	adds	r0, r3, #0
   10da0:	46bd      	mov	sp, r7
   10da2:	bd80      	pop	{r7, pc}
   10da4:	41002000 	.word	0x41002000

00010da8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   10da8:	b580      	push	{r7, lr}
   10daa:	b084      	sub	sp, #16
   10dac:	af00      	add	r7, sp, #0
   10dae:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   10db0:	687b      	ldr	r3, [r7, #4]
   10db2:	681b      	ldr	r3, [r3, #0]
   10db4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
   10db6:	68fb      	ldr	r3, [r7, #12]
   10db8:	8a1b      	ldrh	r3, [r3, #16]
   10dba:	b29b      	uxth	r3, r3
   10dbc:	1c1a      	adds	r2, r3, #0
   10dbe:	2380      	movs	r3, #128	; 0x80
   10dc0:	021b      	lsls	r3, r3, #8
   10dc2:	4013      	ands	r3, r2
   10dc4:	1e5a      	subs	r2, r3, #1
   10dc6:	4193      	sbcs	r3, r2
   10dc8:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   10dca:	1c18      	adds	r0, r3, #0
   10dcc:	46bd      	mov	sp, r7
   10dce:	b004      	add	sp, #16
   10dd0:	bd80      	pop	{r7, pc}
   10dd2:	46c0      	nop			; (mov r8, r8)

00010dd4 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   10dd4:	b580      	push	{r7, lr}
   10dd6:	b082      	sub	sp, #8
   10dd8:	af00      	add	r7, sp, #0
   10dda:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   10ddc:	46c0      	nop			; (mov r8, r8)
   10dde:	687b      	ldr	r3, [r7, #4]
   10de0:	1c18      	adds	r0, r3, #0
   10de2:	4b04      	ldr	r3, [pc, #16]	; (10df4 <_i2c_master_wait_for_sync+0x20>)
   10de4:	4798      	blx	r3
   10de6:	1c03      	adds	r3, r0, #0
   10de8:	2b00      	cmp	r3, #0
   10dea:	d1f8      	bne.n	10dde <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   10dec:	46bd      	mov	sp, r7
   10dee:	b002      	add	sp, #8
   10df0:	bd80      	pop	{r7, pc}
   10df2:	46c0      	nop			; (mov r8, r8)
   10df4:	00010da9 	.word	0x00010da9

00010df8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   10df8:	b590      	push	{r4, r7, lr}
   10dfa:	b08d      	sub	sp, #52	; 0x34
   10dfc:	af00      	add	r7, sp, #0
   10dfe:	6078      	str	r0, [r7, #4]
   10e00:	6039      	str	r1, [r7, #0]
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
   10e02:	1c3b      	adds	r3, r7, #0
   10e04:	332b      	adds	r3, #43	; 0x2b
   10e06:	2200      	movs	r2, #0
   10e08:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   10e0a:	687b      	ldr	r3, [r7, #4]
   10e0c:	681b      	ldr	r3, [r3, #0]
   10e0e:	61fb      	str	r3, [r7, #28]
	Sercom *const sercom_hw = module->hw;
   10e10:	687b      	ldr	r3, [r7, #4]
   10e12:	681b      	ldr	r3, [r3, #0]
   10e14:	61bb      	str	r3, [r7, #24]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   10e16:	1c3c      	adds	r4, r7, #0
   10e18:	3417      	adds	r4, #23
   10e1a:	69bb      	ldr	r3, [r7, #24]
   10e1c:	1c18      	adds	r0, r3, #0
   10e1e:	4b5a      	ldr	r3, [pc, #360]	; (10f88 <_i2c_master_set_config+0x190>)
   10e20:	4798      	blx	r3
   10e22:	1c03      	adds	r3, r0, #0
   10e24:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   10e26:	1c3b      	adds	r3, r7, #0
   10e28:	330c      	adds	r3, #12
   10e2a:	1c18      	adds	r0, r3, #0
   10e2c:	4b57      	ldr	r3, [pc, #348]	; (10f8c <_i2c_master_set_config+0x194>)
   10e2e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   10e30:	683b      	ldr	r3, [r7, #0]
   10e32:	695b      	ldr	r3, [r3, #20]
   10e34:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad1 = config->pinmux_pad1;
   10e36:	683b      	ldr	r3, [r7, #0]
   10e38:	699b      	ldr	r3, [r3, #24]
   10e3a:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   10e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d106      	bne.n	10e50 <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   10e42:	69bb      	ldr	r3, [r7, #24]
   10e44:	1c18      	adds	r0, r3, #0
   10e46:	2100      	movs	r1, #0
   10e48:	4b51      	ldr	r3, [pc, #324]	; (10f90 <_i2c_master_set_config+0x198>)
   10e4a:	4798      	blx	r3
   10e4c:	1c03      	adds	r3, r0, #0
   10e4e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   10e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e52:	b2da      	uxtb	r2, r3
   10e54:	1c3b      	adds	r3, r7, #0
   10e56:	330c      	adds	r3, #12
   10e58:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   10e5a:	1c3b      	adds	r3, r7, #0
   10e5c:	330c      	adds	r3, #12
   10e5e:	2202      	movs	r2, #2
   10e60:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   10e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e64:	0c1b      	lsrs	r3, r3, #16
   10e66:	b2da      	uxtb	r2, r3
   10e68:	1c3b      	adds	r3, r7, #0
   10e6a:	330c      	adds	r3, #12
   10e6c:	1c10      	adds	r0, r2, #0
   10e6e:	1c19      	adds	r1, r3, #0
   10e70:	4b48      	ldr	r3, [pc, #288]	; (10f94 <_i2c_master_set_config+0x19c>)
   10e72:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   10e74:	6a3b      	ldr	r3, [r7, #32]
   10e76:	2b00      	cmp	r3, #0
   10e78:	d106      	bne.n	10e88 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   10e7a:	69bb      	ldr	r3, [r7, #24]
   10e7c:	1c18      	adds	r0, r3, #0
   10e7e:	2101      	movs	r1, #1
   10e80:	4b43      	ldr	r3, [pc, #268]	; (10f90 <_i2c_master_set_config+0x198>)
   10e82:	4798      	blx	r3
   10e84:	1c03      	adds	r3, r0, #0
   10e86:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   10e88:	6a3b      	ldr	r3, [r7, #32]
   10e8a:	b2da      	uxtb	r2, r3
   10e8c:	1c3b      	adds	r3, r7, #0
   10e8e:	330c      	adds	r3, #12
   10e90:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   10e92:	1c3b      	adds	r3, r7, #0
   10e94:	330c      	adds	r3, #12
   10e96:	2202      	movs	r2, #2
   10e98:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   10e9a:	6a3b      	ldr	r3, [r7, #32]
   10e9c:	0c1b      	lsrs	r3, r3, #16
   10e9e:	b2da      	uxtb	r2, r3
   10ea0:	1c3b      	adds	r3, r7, #0
   10ea2:	330c      	adds	r3, #12
   10ea4:	1c10      	adds	r0, r2, #0
   10ea6:	1c19      	adds	r1, r3, #0
   10ea8:	4b3a      	ldr	r3, [pc, #232]	; (10f94 <_i2c_master_set_config+0x19c>)
   10eaa:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   10eac:	683b      	ldr	r3, [r7, #0]
   10eae:	899a      	ldrh	r2, [r3, #12]
   10eb0:	687b      	ldr	r3, [r7, #4]
   10eb2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   10eb4:	683b      	ldr	r3, [r7, #0]
   10eb6:	89da      	ldrh	r2, [r3, #14]
   10eb8:	687b      	ldr	r3, [r7, #4]
   10eba:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   10ebc:	683b      	ldr	r3, [r7, #0]
   10ebe:	7c1b      	ldrb	r3, [r3, #16]
   10ec0:	2b00      	cmp	r3, #0
   10ec2:	d104      	bne.n	10ece <_i2c_master_set_config+0xd6>
   10ec4:	4b34      	ldr	r3, [pc, #208]	; (10f98 <_i2c_master_set_config+0x1a0>)
   10ec6:	4798      	blx	r3
   10ec8:	1c03      	adds	r3, r0, #0
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d002      	beq.n	10ed4 <_i2c_master_set_config+0xdc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   10ece:	2380      	movs	r3, #128	; 0x80
   10ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   10ed2:	e001      	b.n	10ed8 <_i2c_master_set_config+0xe0>
	} else {
		tmp_ctrla = 0;
   10ed4:	2300      	movs	r3, #0
   10ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   10ed8:	683b      	ldr	r3, [r7, #0]
   10eda:	689b      	ldr	r3, [r3, #8]
   10edc:	2b00      	cmp	r3, #0
   10ede:	d004      	beq.n	10eea <_i2c_master_set_config+0xf2>
		tmp_ctrla |= config->start_hold_time;
   10ee0:	683b      	ldr	r3, [r7, #0]
   10ee2:	689b      	ldr	r3, [r3, #8]
   10ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10ee6:	4313      	orrs	r3, r2
   10ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   10eea:	683b      	ldr	r3, [r7, #0]
   10eec:	7f1b      	ldrb	r3, [r3, #28]
   10eee:	2b00      	cmp	r3, #0
   10ef0:	d004      	beq.n	10efc <_i2c_master_set_config+0x104>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
   10ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ef4:	2280      	movs	r2, #128	; 0x80
   10ef6:	05d2      	lsls	r2, r2, #23
   10ef8:	4313      	orrs	r3, r2
   10efa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   10efc:	683b      	ldr	r3, [r7, #0]
   10efe:	6a1b      	ldr	r3, [r3, #32]
   10f00:	2b00      	cmp	r3, #0
   10f02:	d004      	beq.n	10f0e <_i2c_master_set_config+0x116>
		tmp_ctrla |= config->inactive_timeout;
   10f04:	683b      	ldr	r3, [r7, #0]
   10f06:	6a1b      	ldr	r3, [r3, #32]
   10f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10f0a:	4313      	orrs	r3, r2
   10f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   10f0e:	69fb      	ldr	r3, [r7, #28]
   10f10:	681a      	ldr	r2, [r3, #0]
   10f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f14:	431a      	orrs	r2, r3
   10f16:	69fb      	ldr	r3, [r7, #28]
   10f18:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   10f1a:	69fb      	ldr	r3, [r7, #28]
   10f1c:	2280      	movs	r2, #128	; 0x80
   10f1e:	0052      	lsls	r2, r2, #1
   10f20:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   10f22:	1c3b      	adds	r3, r7, #0
   10f24:	3317      	adds	r3, #23
   10f26:	781b      	ldrb	r3, [r3, #0]
   10f28:	330d      	adds	r3, #13
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	1c18      	adds	r0, r3, #0
   10f2e:	4b1b      	ldr	r3, [pc, #108]	; (10f9c <_i2c_master_set_config+0x1a4>)
   10f30:	4798      	blx	r3
   10f32:	1c02      	adds	r2, r0, #0
   10f34:	683b      	ldr	r3, [r7, #0]
   10f36:	681b      	ldr	r3, [r3, #0]
   10f38:	21fa      	movs	r1, #250	; 0xfa
   10f3a:	00c9      	lsls	r1, r1, #3
   10f3c:	434b      	muls	r3, r1
   10f3e:	18d3      	adds	r3, r2, r3
   10f40:	1e59      	subs	r1, r3, #1
   10f42:	683b      	ldr	r3, [r7, #0]
   10f44:	681b      	ldr	r3, [r3, #0]
   10f46:	22fa      	movs	r2, #250	; 0xfa
   10f48:	00d2      	lsls	r2, r2, #3
   10f4a:	435a      	muls	r2, r3
   10f4c:	4b14      	ldr	r3, [pc, #80]	; (10fa0 <_i2c_master_set_config+0x1a8>)
   10f4e:	1c08      	adds	r0, r1, #0
   10f50:	1c11      	adds	r1, r2, #0
   10f52:	4798      	blx	r3
   10f54:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
   10f56:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   10f58:	613b      	str	r3, [r7, #16]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
   10f5a:	693b      	ldr	r3, [r7, #16]
   10f5c:	2bff      	cmp	r3, #255	; 0xff
   10f5e:	dc02      	bgt.n	10f66 <_i2c_master_set_config+0x16e>
   10f60:	693b      	ldr	r3, [r7, #16]
   10f62:	2b00      	cmp	r3, #0
   10f64:	da04      	bge.n	10f70 <_i2c_master_set_config+0x178>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   10f66:	1c3b      	adds	r3, r7, #0
   10f68:	332b      	adds	r3, #43	; 0x2b
   10f6a:	2240      	movs	r2, #64	; 0x40
   10f6c:	701a      	strb	r2, [r3, #0]
   10f6e:	e004      	b.n	10f7a <_i2c_master_set_config+0x182>
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
   10f70:	693b      	ldr	r3, [r7, #16]
   10f72:	b2db      	uxtb	r3, r3
   10f74:	1c1a      	adds	r2, r3, #0
   10f76:	69fb      	ldr	r3, [r7, #28]
   10f78:	815a      	strh	r2, [r3, #10]
	}

	return tmp_status_code;
   10f7a:	1c3b      	adds	r3, r7, #0
   10f7c:	332b      	adds	r3, #43	; 0x2b
   10f7e:	781b      	ldrb	r3, [r3, #0]
}
   10f80:	1c18      	adds	r0, r3, #0
   10f82:	46bd      	mov	sp, r7
   10f84:	b00d      	add	sp, #52	; 0x34
   10f86:	bd90      	pop	{r4, r7, pc}
   10f88:	00011885 	.word	0x00011885
   10f8c:	00010d61 	.word	0x00010d61
   10f90:	000116b5 	.word	0x000116b5
   10f94:	000131c5 	.word	0x000131c5
   10f98:	00010d89 	.word	0x00010d89
   10f9c:	00013005 	.word	0x00013005
   10fa0:	00014639 	.word	0x00014639

00010fa4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   10fa4:	b580      	push	{r7, lr}
   10fa6:	b08a      	sub	sp, #40	; 0x28
   10fa8:	af00      	add	r7, sp, #0
   10faa:	60f8      	str	r0, [r7, #12]
   10fac:	60b9      	str	r1, [r7, #8]
   10fae:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   10fb0:	68fb      	ldr	r3, [r7, #12]
   10fb2:	68ba      	ldr	r2, [r7, #8]
   10fb4:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   10fb6:	68fb      	ldr	r3, [r7, #12]
   10fb8:	681b      	ldr	r3, [r3, #0]
   10fba:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10fbc:	68fb      	ldr	r3, [r7, #12]
   10fbe:	681b      	ldr	r3, [r3, #0]
   10fc0:	1c18      	adds	r0, r3, #0
   10fc2:	4b26      	ldr	r3, [pc, #152]	; (1105c <i2c_master_init+0xb8>)
   10fc4:	4798      	blx	r3
   10fc6:	1c03      	adds	r3, r0, #0
   10fc8:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   10fca:	6a3b      	ldr	r3, [r7, #32]
   10fcc:	3302      	adds	r3, #2
   10fce:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10fd0:	6a3b      	ldr	r3, [r7, #32]
   10fd2:	330d      	adds	r3, #13
   10fd4:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10fd6:	69fb      	ldr	r3, [r7, #28]
   10fd8:	2201      	movs	r2, #1
   10fda:	1c11      	adds	r1, r2, #0
   10fdc:	4099      	lsls	r1, r3
   10fde:	1c0b      	adds	r3, r1, #0
   10fe0:	2002      	movs	r0, #2
   10fe2:	1c19      	adds	r1, r3, #0
   10fe4:	4b1e      	ldr	r3, [pc, #120]	; (11060 <i2c_master_init+0xbc>)
   10fe6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10fe8:	1c3b      	adds	r3, r7, #0
   10fea:	3314      	adds	r3, #20
   10fec:	1c18      	adds	r0, r3, #0
   10fee:	4b1d      	ldr	r3, [pc, #116]	; (11064 <i2c_master_init+0xc0>)
   10ff0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   10ff2:	687b      	ldr	r3, [r7, #4]
   10ff4:	791a      	ldrb	r2, [r3, #4]
   10ff6:	1c3b      	adds	r3, r7, #0
   10ff8:	3314      	adds	r3, #20
   10ffa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10ffc:	69bb      	ldr	r3, [r7, #24]
   10ffe:	b2da      	uxtb	r2, r3
   11000:	1c3b      	adds	r3, r7, #0
   11002:	3314      	adds	r3, #20
   11004:	1c10      	adds	r0, r2, #0
   11006:	1c19      	adds	r1, r3, #0
   11008:	4b17      	ldr	r3, [pc, #92]	; (11068 <i2c_master_init+0xc4>)
   1100a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1100c:	69bb      	ldr	r3, [r7, #24]
   1100e:	b2db      	uxtb	r3, r3
   11010:	1c18      	adds	r0, r3, #0
   11012:	4b16      	ldr	r3, [pc, #88]	; (1106c <i2c_master_init+0xc8>)
   11014:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   11016:	687b      	ldr	r3, [r7, #4]
   11018:	791b      	ldrb	r3, [r3, #4]
   1101a:	1c18      	adds	r0, r3, #0
   1101c:	2100      	movs	r1, #0
   1101e:	4b14      	ldr	r3, [pc, #80]	; (11070 <i2c_master_init+0xcc>)
   11020:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   11022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11024:	681a      	ldr	r2, [r3, #0]
   11026:	2302      	movs	r3, #2
   11028:	4013      	ands	r3, r2
   1102a:	d001      	beq.n	11030 <i2c_master_init+0x8c>
		return STATUS_ERR_DENIED;
   1102c:	231c      	movs	r3, #28
   1102e:	e010      	b.n	11052 <i2c_master_init+0xae>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   11030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11032:	681a      	ldr	r2, [r3, #0]
   11034:	2301      	movs	r3, #1
   11036:	4013      	ands	r3, r2
   11038:	d001      	beq.n	1103e <i2c_master_init+0x9a>
		return STATUS_BUSY;
   1103a:	2305      	movs	r3, #5
   1103c:	e009      	b.n	11052 <i2c_master_init+0xae>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
   1103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11040:	2214      	movs	r2, #20
   11042:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   11044:	68fa      	ldr	r2, [r7, #12]
   11046:	687b      	ldr	r3, [r7, #4]
   11048:	1c10      	adds	r0, r2, #0
   1104a:	1c19      	adds	r1, r3, #0
   1104c:	4b09      	ldr	r3, [pc, #36]	; (11074 <i2c_master_init+0xd0>)
   1104e:	4798      	blx	r3
   11050:	1c03      	adds	r3, r0, #0
}
   11052:	1c18      	adds	r0, r3, #0
   11054:	46bd      	mov	sp, r7
   11056:	b00a      	add	sp, #40	; 0x28
   11058:	bd80      	pop	{r7, pc}
   1105a:	46c0      	nop			; (mov r8, r8)
   1105c:	00011885 	.word	0x00011885
   11060:	00010d05 	.word	0x00010d05
   11064:	00010cf1 	.word	0x00010cf1
   11068:	00012ea5 	.word	0x00012ea5
   1106c:	00012ee5 	.word	0x00012ee5
   11070:	00011629 	.word	0x00011629
   11074:	00010df9 	.word	0x00010df9

00011078 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   11078:	b580      	push	{r7, lr}
   1107a:	b084      	sub	sp, #16
   1107c:	af00      	add	r7, sp, #0
   1107e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11080:	687b      	ldr	r3, [r7, #4]
   11082:	681b      	ldr	r3, [r3, #0]
   11084:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   11086:	68fb      	ldr	r3, [r7, #12]
   11088:	7b9b      	ldrb	r3, [r3, #14]
   1108a:	b2db      	uxtb	r3, r3
   1108c:	1c1a      	adds	r2, r3, #0
   1108e:	2302      	movs	r3, #2
   11090:	4013      	ands	r3, r2
   11092:	d00b      	beq.n	110ac <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   11094:	68fb      	ldr	r3, [r7, #12]
   11096:	2202      	movs	r2, #2
   11098:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1109a:	68fb      	ldr	r3, [r7, #12]
   1109c:	8a1b      	ldrh	r3, [r3, #16]
   1109e:	b29b      	uxth	r3, r3
   110a0:	1c1a      	adds	r2, r3, #0
   110a2:	2302      	movs	r3, #2
   110a4:	4013      	ands	r3, r2
   110a6:	d011      	beq.n	110cc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   110a8:	2341      	movs	r3, #65	; 0x41
   110aa:	e010      	b.n	110ce <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   110ac:	68fb      	ldr	r3, [r7, #12]
   110ae:	8a1b      	ldrh	r3, [r3, #16]
   110b0:	b29b      	uxth	r3, r3
   110b2:	1c1a      	adds	r2, r3, #0
   110b4:	2304      	movs	r3, #4
   110b6:	4013      	ands	r3, r2
   110b8:	d008      	beq.n	110cc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   110ba:	68fb      	ldr	r3, [r7, #12]
   110bc:	685b      	ldr	r3, [r3, #4]
   110be:	22c0      	movs	r2, #192	; 0xc0
   110c0:	0292      	lsls	r2, r2, #10
   110c2:	431a      	orrs	r2, r3
   110c4:	68fb      	ldr	r3, [r7, #12]
   110c6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   110c8:	2318      	movs	r3, #24
   110ca:	e000      	b.n	110ce <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   110cc:	2300      	movs	r3, #0
}
   110ce:	1c18      	adds	r0, r3, #0
   110d0:	46bd      	mov	sp, r7
   110d2:	b004      	add	sp, #16
   110d4:	bd80      	pop	{r7, pc}
   110d6:	46c0      	nop			; (mov r8, r8)

000110d8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   110d8:	b580      	push	{r7, lr}
   110da:	b084      	sub	sp, #16
   110dc:	af00      	add	r7, sp, #0
   110de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   110e0:	687b      	ldr	r3, [r7, #4]
   110e2:	681b      	ldr	r3, [r3, #0]
   110e4:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   110e6:	1c3b      	adds	r3, r7, #0
   110e8:	330e      	adds	r3, #14
   110ea:	2200      	movs	r2, #0
   110ec:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   110ee:	e00f      	b.n	11110 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   110f0:	1c3b      	adds	r3, r7, #0
   110f2:	330e      	adds	r3, #14
   110f4:	1c3a      	adds	r2, r7, #0
   110f6:	320e      	adds	r2, #14
   110f8:	8812      	ldrh	r2, [r2, #0]
   110fa:	3201      	adds	r2, #1
   110fc:	801a      	strh	r2, [r3, #0]
   110fe:	687b      	ldr	r3, [r7, #4]
   11100:	891b      	ldrh	r3, [r3, #8]
   11102:	1c3a      	adds	r2, r7, #0
   11104:	320e      	adds	r2, #14
   11106:	8812      	ldrh	r2, [r2, #0]
   11108:	429a      	cmp	r2, r3
   1110a:	d301      	bcc.n	11110 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1110c:	2312      	movs	r3, #18
   1110e:	e00e      	b.n	1112e <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   11110:	68bb      	ldr	r3, [r7, #8]
   11112:	7b9b      	ldrb	r3, [r3, #14]
   11114:	b2db      	uxtb	r3, r3
   11116:	1c1a      	adds	r2, r3, #0
   11118:	2301      	movs	r3, #1
   1111a:	4013      	ands	r3, r2
   1111c:	d106      	bne.n	1112c <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1111e:	68bb      	ldr	r3, [r7, #8]
   11120:	7b9b      	ldrb	r3, [r3, #14]
   11122:	b2db      	uxtb	r3, r3
   11124:	1c1a      	adds	r2, r3, #0
   11126:	2302      	movs	r3, #2
   11128:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1112a:	d0e1      	beq.n	110f0 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
   1112c:	2300      	movs	r3, #0
}
   1112e:	1c18      	adds	r0, r3, #0
   11130:	46bd      	mov	sp, r7
   11132:	b004      	add	sp, #16
   11134:	bd80      	pop	{r7, pc}
   11136:	46c0      	nop			; (mov r8, r8)

00011138 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   11138:	b590      	push	{r4, r7, lr}
   1113a:	b087      	sub	sp, #28
   1113c:	af00      	add	r7, sp, #0
   1113e:	6078      	str	r0, [r7, #4]
   11140:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11142:	687b      	ldr	r3, [r7, #4]
   11144:	681b      	ldr	r3, [r3, #0]
   11146:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   11148:	1c3b      	adds	r3, r7, #0
   1114a:	3314      	adds	r3, #20
   1114c:	683a      	ldr	r2, [r7, #0]
   1114e:	8852      	ldrh	r2, [r2, #2]
   11150:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   11152:	1c3b      	adds	r3, r7, #0
   11154:	3312      	adds	r3, #18
   11156:	2200      	movs	r2, #0
   11158:	801a      	strh	r2, [r3, #0]

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
   1115a:	683b      	ldr	r3, [r7, #0]
   1115c:	881b      	ldrh	r3, [r3, #0]
   1115e:	005b      	lsls	r3, r3, #1
   11160:	b2db      	uxtb	r3, r3
   11162:	2201      	movs	r2, #1
   11164:	4313      	orrs	r3, r2
   11166:	b2db      	uxtb	r3, r3
   11168:	b2da      	uxtb	r2, r3
   1116a:	68fb      	ldr	r3, [r7, #12]
   1116c:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1116e:	1c3c      	adds	r4, r7, #0
   11170:	3417      	adds	r4, #23
   11172:	687b      	ldr	r3, [r7, #4]
   11174:	1c18      	adds	r0, r3, #0
   11176:	4b40      	ldr	r3, [pc, #256]	; (11278 <_i2c_master_read_packet+0x140>)
   11178:	4798      	blx	r3
   1117a:	1c03      	adds	r3, r0, #0
   1117c:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1117e:	68fb      	ldr	r3, [r7, #12]
   11180:	685a      	ldr	r2, [r3, #4]
   11182:	4b3e      	ldr	r3, [pc, #248]	; (1127c <_i2c_master_read_packet+0x144>)
   11184:	401a      	ands	r2, r3
   11186:	68fb      	ldr	r3, [r7, #12]
   11188:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   1118a:	1c3b      	adds	r3, r7, #0
   1118c:	3317      	adds	r3, #23
   1118e:	781b      	ldrb	r3, [r3, #0]
   11190:	2b00      	cmp	r3, #0
   11192:	d107      	bne.n	111a4 <_i2c_master_read_packet+0x6c>
		tmp_status = _i2c_master_address_response(module);
   11194:	1c3c      	adds	r4, r7, #0
   11196:	3417      	adds	r4, #23
   11198:	687b      	ldr	r3, [r7, #4]
   1119a:	1c18      	adds	r0, r3, #0
   1119c:	4b38      	ldr	r3, [pc, #224]	; (11280 <_i2c_master_read_packet+0x148>)
   1119e:	4798      	blx	r3
   111a0:	1c03      	adds	r3, r0, #0
   111a2:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   111a4:	1c3b      	adds	r3, r7, #0
   111a6:	3317      	adds	r3, #23
   111a8:	781b      	ldrb	r3, [r3, #0]
   111aa:	2b00      	cmp	r3, #0
   111ac:	d15c      	bne.n	11268 <_i2c_master_read_packet+0x130>
		/* Read data buffer. */
		while (tmp_data_length--) {
   111ae:	e035      	b.n	1121c <_i2c_master_read_packet+0xe4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   111b0:	68fb      	ldr	r3, [r7, #12]
   111b2:	8a1b      	ldrh	r3, [r3, #16]
   111b4:	b29b      	uxth	r3, r3
   111b6:	1c1a      	adds	r2, r3, #0
   111b8:	2320      	movs	r3, #32
   111ba:	4013      	ands	r3, r2
   111bc:	d101      	bne.n	111c2 <_i2c_master_read_packet+0x8a>
				return STATUS_ERR_PACKET_COLLISION;
   111be:	2341      	movs	r3, #65	; 0x41
   111c0:	e055      	b.n	1126e <_i2c_master_read_packet+0x136>
			}

			if (tmp_data_length == 0) {
   111c2:	1c3b      	adds	r3, r7, #0
   111c4:	3314      	adds	r3, #20
   111c6:	881b      	ldrh	r3, [r3, #0]
   111c8:	2b00      	cmp	r3, #0
   111ca:	d107      	bne.n	111dc <_i2c_master_read_packet+0xa4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   111cc:	68fb      	ldr	r3, [r7, #12]
   111ce:	685b      	ldr	r3, [r3, #4]
   111d0:	2280      	movs	r2, #128	; 0x80
   111d2:	02d2      	lsls	r2, r2, #11
   111d4:	431a      	orrs	r2, r3
   111d6:	68fb      	ldr	r3, [r7, #12]
   111d8:	605a      	str	r2, [r3, #4]
   111da:	e019      	b.n	11210 <_i2c_master_read_packet+0xd8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   111dc:	687b      	ldr	r3, [r7, #4]
   111de:	1c18      	adds	r0, r3, #0
   111e0:	4b28      	ldr	r3, [pc, #160]	; (11284 <_i2c_master_read_packet+0x14c>)
   111e2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   111e4:	683b      	ldr	r3, [r7, #0]
   111e6:	685a      	ldr	r2, [r3, #4]
   111e8:	1c3b      	adds	r3, r7, #0
   111ea:	3312      	adds	r3, #18
   111ec:	881b      	ldrh	r3, [r3, #0]
   111ee:	1c39      	adds	r1, r7, #0
   111f0:	3112      	adds	r1, #18
   111f2:	1c58      	adds	r0, r3, #1
   111f4:	8008      	strh	r0, [r1, #0]
   111f6:	18d3      	adds	r3, r2, r3
   111f8:	68fa      	ldr	r2, [r7, #12]
   111fa:	7e12      	ldrb	r2, [r2, #24]
   111fc:	b2d2      	uxtb	r2, r2
   111fe:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   11200:	1c3c      	adds	r4, r7, #0
   11202:	3417      	adds	r4, #23
   11204:	687b      	ldr	r3, [r7, #4]
   11206:	1c18      	adds	r0, r3, #0
   11208:	4b1b      	ldr	r3, [pc, #108]	; (11278 <_i2c_master_read_packet+0x140>)
   1120a:	4798      	blx	r3
   1120c:	1c03      	adds	r3, r0, #0
   1120e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   11210:	1c3b      	adds	r3, r7, #0
   11212:	3317      	adds	r3, #23
   11214:	781b      	ldrb	r3, [r3, #0]
   11216:	2b00      	cmp	r3, #0
   11218:	d000      	beq.n	1121c <_i2c_master_read_packet+0xe4>
				break;
   1121a:	e008      	b.n	1122e <_i2c_master_read_packet+0xf6>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
   1121c:	1c3b      	adds	r3, r7, #0
   1121e:	3314      	adds	r3, #20
   11220:	881b      	ldrh	r3, [r3, #0]
   11222:	1c3a      	adds	r2, r7, #0
   11224:	3214      	adds	r2, #20
   11226:	1e59      	subs	r1, r3, #1
   11228:	8011      	strh	r1, [r2, #0]
   1122a:	2b00      	cmp	r3, #0
   1122c:	d1c0      	bne.n	111b0 <_i2c_master_read_packet+0x78>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
   1122e:	687b      	ldr	r3, [r7, #4]
   11230:	7a9b      	ldrb	r3, [r3, #10]
   11232:	2b00      	cmp	r3, #0
   11234:	d00a      	beq.n	1124c <_i2c_master_read_packet+0x114>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   11236:	687b      	ldr	r3, [r7, #4]
   11238:	1c18      	adds	r0, r3, #0
   1123a:	4b12      	ldr	r3, [pc, #72]	; (11284 <_i2c_master_read_packet+0x14c>)
   1123c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1123e:	68fb      	ldr	r3, [r7, #12]
   11240:	685b      	ldr	r3, [r3, #4]
   11242:	22c0      	movs	r2, #192	; 0xc0
   11244:	0292      	lsls	r2, r2, #10
   11246:	431a      	orrs	r2, r3
   11248:	68fb      	ldr	r3, [r7, #12]
   1124a:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   1124c:	687b      	ldr	r3, [r7, #4]
   1124e:	1c18      	adds	r0, r3, #0
   11250:	4b0c      	ldr	r3, [pc, #48]	; (11284 <_i2c_master_read_packet+0x14c>)
   11252:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   11254:	683b      	ldr	r3, [r7, #0]
   11256:	685a      	ldr	r2, [r3, #4]
   11258:	1c3b      	adds	r3, r7, #0
   1125a:	3312      	adds	r3, #18
   1125c:	881b      	ldrh	r3, [r3, #0]
   1125e:	18d3      	adds	r3, r2, r3
   11260:	68fa      	ldr	r2, [r7, #12]
   11262:	7e12      	ldrb	r2, [r2, #24]
   11264:	b2d2      	uxtb	r2, r2
   11266:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   11268:	1c3b      	adds	r3, r7, #0
   1126a:	3317      	adds	r3, #23
   1126c:	781b      	ldrb	r3, [r3, #0]
}
   1126e:	1c18      	adds	r0, r3, #0
   11270:	46bd      	mov	sp, r7
   11272:	b007      	add	sp, #28
   11274:	bd90      	pop	{r4, r7, pc}
   11276:	46c0      	nop			; (mov r8, r8)
   11278:	000110d9 	.word	0x000110d9
   1127c:	fffbffff 	.word	0xfffbffff
   11280:	00011079 	.word	0x00011079
   11284:	00010dd5 	.word	0x00010dd5

00011288 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   11288:	b580      	push	{r7, lr}
   1128a:	b082      	sub	sp, #8
   1128c:	af00      	add	r7, sp, #0
   1128e:	6078      	str	r0, [r7, #4]
   11290:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   11292:	687b      	ldr	r3, [r7, #4]
   11294:	2201      	movs	r2, #1
   11296:	729a      	strb	r2, [r3, #10]

	return _i2c_master_read_packet(module, packet);
   11298:	687a      	ldr	r2, [r7, #4]
   1129a:	683b      	ldr	r3, [r7, #0]
   1129c:	1c10      	adds	r0, r2, #0
   1129e:	1c19      	adds	r1, r3, #0
   112a0:	4b03      	ldr	r3, [pc, #12]	; (112b0 <i2c_master_read_packet_wait+0x28>)
   112a2:	4798      	blx	r3
   112a4:	1c03      	adds	r3, r0, #0
}
   112a6:	1c18      	adds	r0, r3, #0
   112a8:	46bd      	mov	sp, r7
   112aa:	b002      	add	sp, #8
   112ac:	bd80      	pop	{r7, pc}
   112ae:	46c0      	nop			; (mov r8, r8)
   112b0:	00011139 	.word	0x00011139

000112b4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   112b4:	b590      	push	{r4, r7, lr}
   112b6:	b087      	sub	sp, #28
   112b8:	af00      	add	r7, sp, #0
   112ba:	6078      	str	r0, [r7, #4]
   112bc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	681b      	ldr	r3, [r3, #0]
   112c2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   112c4:	1c3b      	adds	r3, r7, #0
   112c6:	3314      	adds	r3, #20
   112c8:	683a      	ldr	r2, [r7, #0]
   112ca:	8852      	ldrh	r2, [r2, #2]
   112cc:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   112ce:	687b      	ldr	r3, [r7, #4]
   112d0:	1c18      	adds	r0, r3, #0
   112d2:	4b3d      	ldr	r3, [pc, #244]	; (113c8 <_i2c_master_write_packet+0x114>)
   112d4:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
   112d6:	683b      	ldr	r3, [r7, #0]
   112d8:	881b      	ldrh	r3, [r3, #0]
   112da:	b2db      	uxtb	r3, r3
   112dc:	18db      	adds	r3, r3, r3
   112de:	b2da      	uxtb	r2, r3
   112e0:	68fb      	ldr	r3, [r7, #12]
   112e2:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   112e4:	1c3c      	adds	r4, r7, #0
   112e6:	3417      	adds	r4, #23
   112e8:	687b      	ldr	r3, [r7, #4]
   112ea:	1c18      	adds	r0, r3, #0
   112ec:	4b37      	ldr	r3, [pc, #220]	; (113cc <_i2c_master_write_packet+0x118>)
   112ee:	4798      	blx	r3
   112f0:	1c03      	adds	r3, r0, #0
   112f2:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   112f4:	1c3b      	adds	r3, r7, #0
   112f6:	3317      	adds	r3, #23
   112f8:	781b      	ldrb	r3, [r3, #0]
   112fa:	2b00      	cmp	r3, #0
   112fc:	d107      	bne.n	1130e <_i2c_master_write_packet+0x5a>
		tmp_status = _i2c_master_address_response(module);
   112fe:	1c3c      	adds	r4, r7, #0
   11300:	3417      	adds	r4, #23
   11302:	687b      	ldr	r3, [r7, #4]
   11304:	1c18      	adds	r0, r3, #0
   11306:	4b32      	ldr	r3, [pc, #200]	; (113d0 <_i2c_master_write_packet+0x11c>)
   11308:	4798      	blx	r3
   1130a:	1c03      	adds	r3, r0, #0
   1130c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   1130e:	1c3b      	adds	r3, r7, #0
   11310:	3317      	adds	r3, #23
   11312:	781b      	ldrb	r3, [r3, #0]
   11314:	2b00      	cmp	r3, #0
   11316:	d150      	bne.n	113ba <_i2c_master_write_packet+0x106>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   11318:	1c3b      	adds	r3, r7, #0
   1131a:	3312      	adds	r3, #18
   1131c:	2200      	movs	r2, #0
   1131e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   11320:	e033      	b.n	1138a <_i2c_master_write_packet+0xd6>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   11322:	68fb      	ldr	r3, [r7, #12]
   11324:	8a1b      	ldrh	r3, [r3, #16]
   11326:	b29b      	uxth	r3, r3
   11328:	1c1a      	adds	r2, r3, #0
   1132a:	2320      	movs	r3, #32
   1132c:	4013      	ands	r3, r2
   1132e:	d101      	bne.n	11334 <_i2c_master_write_packet+0x80>
				return STATUS_ERR_PACKET_COLLISION;
   11330:	2341      	movs	r3, #65	; 0x41
   11332:	e045      	b.n	113c0 <_i2c_master_write_packet+0x10c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   11334:	687b      	ldr	r3, [r7, #4]
   11336:	1c18      	adds	r0, r3, #0
   11338:	4b23      	ldr	r3, [pc, #140]	; (113c8 <_i2c_master_write_packet+0x114>)
   1133a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   1133c:	683b      	ldr	r3, [r7, #0]
   1133e:	685a      	ldr	r2, [r3, #4]
   11340:	1c3b      	adds	r3, r7, #0
   11342:	3312      	adds	r3, #18
   11344:	881b      	ldrh	r3, [r3, #0]
   11346:	1c39      	adds	r1, r7, #0
   11348:	3112      	adds	r1, #18
   1134a:	1c58      	adds	r0, r3, #1
   1134c:	8008      	strh	r0, [r1, #0]
   1134e:	18d3      	adds	r3, r2, r3
   11350:	781a      	ldrb	r2, [r3, #0]
   11352:	68fb      	ldr	r3, [r7, #12]
   11354:	761a      	strb	r2, [r3, #24]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   11356:	1c3c      	adds	r4, r7, #0
   11358:	3417      	adds	r4, #23
   1135a:	687b      	ldr	r3, [r7, #4]
   1135c:	1c18      	adds	r0, r3, #0
   1135e:	4b1b      	ldr	r3, [pc, #108]	; (113cc <_i2c_master_write_packet+0x118>)
   11360:	4798      	blx	r3
   11362:	1c03      	adds	r3, r0, #0
   11364:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   11366:	1c3b      	adds	r3, r7, #0
   11368:	3317      	adds	r3, #23
   1136a:	781b      	ldrb	r3, [r3, #0]
   1136c:	2b00      	cmp	r3, #0
   1136e:	d000      	beq.n	11372 <_i2c_master_write_packet+0xbe>
				break;
   11370:	e014      	b.n	1139c <_i2c_master_write_packet+0xe8>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   11372:	68fb      	ldr	r3, [r7, #12]
   11374:	8a1b      	ldrh	r3, [r3, #16]
   11376:	b29b      	uxth	r3, r3
   11378:	1c1a      	adds	r2, r3, #0
   1137a:	2304      	movs	r3, #4
   1137c:	4013      	ands	r3, r2
   1137e:	d004      	beq.n	1138a <_i2c_master_write_packet+0xd6>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   11380:	1c3b      	adds	r3, r7, #0
   11382:	3317      	adds	r3, #23
   11384:	221e      	movs	r2, #30
   11386:	701a      	strb	r2, [r3, #0]
				break;
   11388:	e008      	b.n	1139c <_i2c_master_write_packet+0xe8>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
   1138a:	1c3b      	adds	r3, r7, #0
   1138c:	3314      	adds	r3, #20
   1138e:	881b      	ldrh	r3, [r3, #0]
   11390:	1c3a      	adds	r2, r7, #0
   11392:	3214      	adds	r2, #20
   11394:	1e59      	subs	r1, r3, #1
   11396:	8011      	strh	r1, [r2, #0]
   11398:	2b00      	cmp	r3, #0
   1139a:	d1c2      	bne.n	11322 <_i2c_master_write_packet+0x6e>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
   1139c:	687b      	ldr	r3, [r7, #4]
   1139e:	7a9b      	ldrb	r3, [r3, #10]
   113a0:	2b00      	cmp	r3, #0
   113a2:	d00a      	beq.n	113ba <_i2c_master_write_packet+0x106>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   113a4:	687b      	ldr	r3, [r7, #4]
   113a6:	1c18      	adds	r0, r3, #0
   113a8:	4b07      	ldr	r3, [pc, #28]	; (113c8 <_i2c_master_write_packet+0x114>)
   113aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   113ac:	68fb      	ldr	r3, [r7, #12]
   113ae:	685b      	ldr	r3, [r3, #4]
   113b0:	22c0      	movs	r2, #192	; 0xc0
   113b2:	0292      	lsls	r2, r2, #10
   113b4:	431a      	orrs	r2, r3
   113b6:	68fb      	ldr	r3, [r7, #12]
   113b8:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   113ba:	1c3b      	adds	r3, r7, #0
   113bc:	3317      	adds	r3, #23
   113be:	781b      	ldrb	r3, [r3, #0]
}
   113c0:	1c18      	adds	r0, r3, #0
   113c2:	46bd      	mov	sp, r7
   113c4:	b007      	add	sp, #28
   113c6:	bd90      	pop	{r4, r7, pc}
   113c8:	00010dd5 	.word	0x00010dd5
   113cc:	000110d9 	.word	0x000110d9
   113d0:	00011079 	.word	0x00011079

000113d4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   113d4:	b580      	push	{r7, lr}
   113d6:	b082      	sub	sp, #8
   113d8:	af00      	add	r7, sp, #0
   113da:	6078      	str	r0, [r7, #4]
   113dc:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   113de:	687b      	ldr	r3, [r7, #4]
   113e0:	2201      	movs	r2, #1
   113e2:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
   113e4:	687a      	ldr	r2, [r7, #4]
   113e6:	683b      	ldr	r3, [r7, #0]
   113e8:	1c10      	adds	r0, r2, #0
   113ea:	1c19      	adds	r1, r3, #0
   113ec:	4b03      	ldr	r3, [pc, #12]	; (113fc <i2c_master_write_packet_wait+0x28>)
   113ee:	4798      	blx	r3
   113f0:	1c03      	adds	r3, r0, #0
}
   113f2:	1c18      	adds	r0, r3, #0
   113f4:	46bd      	mov	sp, r7
   113f6:	b002      	add	sp, #8
   113f8:	bd80      	pop	{r7, pc}
   113fa:	46c0      	nop			; (mov r8, r8)
   113fc:	000112b5 	.word	0x000112b5

00011400 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   11400:	b580      	push	{r7, lr}
   11402:	b082      	sub	sp, #8
   11404:	af00      	add	r7, sp, #0
   11406:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   11408:	687b      	ldr	r3, [r7, #4]
   1140a:	2200      	movs	r2, #0
   1140c:	701a      	strb	r2, [r3, #0]
}
   1140e:	46bd      	mov	sp, r7
   11410:	b002      	add	sp, #8
   11412:	bd80      	pop	{r7, pc}

00011414 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   11414:	b580      	push	{r7, lr}
   11416:	b086      	sub	sp, #24
   11418:	af00      	add	r7, sp, #0
   1141a:	60f8      	str	r0, [r7, #12]
   1141c:	60b9      	str	r1, [r7, #8]
   1141e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   11420:	1c3b      	adds	r3, r7, #0
   11422:	3316      	adds	r3, #22
   11424:	2200      	movs	r2, #0
   11426:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
   11428:	68bb      	ldr	r3, [r7, #8]
   1142a:	085a      	lsrs	r2, r3, #1
   1142c:	68fb      	ldr	r3, [r7, #12]
   1142e:	429a      	cmp	r2, r3
   11430:	d201      	bcs.n	11436 <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   11432:	2340      	movs	r3, #64	; 0x40
   11434:	e018      	b.n	11468 <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
   11436:	68fb      	ldr	r3, [r7, #12]
   11438:	005a      	lsls	r2, r3, #1
   1143a:	4b0d      	ldr	r3, [pc, #52]	; (11470 <_sercom_get_sync_baud_val+0x5c>)
   1143c:	68b8      	ldr	r0, [r7, #8]
   1143e:	1c11      	adds	r1, r2, #0
   11440:	4798      	blx	r3
   11442:	1c03      	adds	r3, r0, #0
   11444:	b29a      	uxth	r2, r3
   11446:	1c3b      	adds	r3, r7, #0
   11448:	3316      	adds	r3, #22
   1144a:	3a01      	subs	r2, #1
   1144c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1144e:	1c3b      	adds	r3, r7, #0
   11450:	3316      	adds	r3, #22
   11452:	881b      	ldrh	r3, [r3, #0]
   11454:	2bff      	cmp	r3, #255	; 0xff
   11456:	d901      	bls.n	1145c <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   11458:	2340      	movs	r3, #64	; 0x40
   1145a:	e005      	b.n	11468 <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
   1145c:	687b      	ldr	r3, [r7, #4]
   1145e:	1c3a      	adds	r2, r7, #0
   11460:	3216      	adds	r2, #22
   11462:	8812      	ldrh	r2, [r2, #0]
   11464:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   11466:	2300      	movs	r3, #0
	}
}
   11468:	1c18      	adds	r0, r3, #0
   1146a:	46bd      	mov	sp, r7
   1146c:	b006      	add	sp, #24
   1146e:	bd80      	pop	{r7, pc}
   11470:	00014639 	.word	0x00014639
   11474:	00000000 	.word	0x00000000

00011478 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   11478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1147a:	b09d      	sub	sp, #116	; 0x74
   1147c:	af00      	add	r7, sp, #0
   1147e:	64f8      	str	r0, [r7, #76]	; 0x4c
   11480:	64b9      	str	r1, [r7, #72]	; 0x48
   11482:	647a      	str	r2, [r7, #68]	; 0x44
   11484:	1c3a      	adds	r2, r7, #0
   11486:	3243      	adds	r2, #67	; 0x43
   11488:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1148a:	2300      	movs	r3, #0
   1148c:	2400      	movs	r4, #0
   1148e:	65bb      	str	r3, [r7, #88]	; 0x58
   11490:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
   11492:	2300      	movs	r3, #0
   11494:	2400      	movs	r4, #0
   11496:	653b      	str	r3, [r7, #80]	; 0x50
   11498:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
   1149a:	2300      	movs	r3, #0
   1149c:	2400      	movs	r4, #0
   1149e:	66bb      	str	r3, [r7, #104]	; 0x68
   114a0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
   114a2:	1c3b      	adds	r3, r7, #0
   114a4:	3388      	adds	r3, #136	; 0x88
   114a6:	781a      	ldrb	r2, [r3, #0]
   114a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   114aa:	435a      	muls	r2, r3
   114ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   114ae:	429a      	cmp	r2, r3
   114b0:	d301      	bcc.n	114b6 <_sercom_get_async_baud_val+0x3e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   114b2:	2340      	movs	r3, #64	; 0x40
   114b4:	e0a6      	b.n	11604 <_sercom_get_async_baud_val+0x18c>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   114b6:	1c3b      	adds	r3, r7, #0
   114b8:	3343      	adds	r3, #67	; 0x43
   114ba:	781b      	ldrb	r3, [r3, #0]
   114bc:	2b00      	cmp	r3, #0
   114be:	d13c      	bne.n	1153a <_sercom_get_async_baud_val+0xc2>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
   114c0:	1c3b      	adds	r3, r7, #0
   114c2:	3388      	adds	r3, #136	; 0x88
   114c4:	781b      	ldrb	r3, [r3, #0]
   114c6:	b2db      	uxtb	r3, r3
   114c8:	63bb      	str	r3, [r7, #56]	; 0x38
   114ca:	2300      	movs	r3, #0
   114cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   114ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   114d0:	633b      	str	r3, [r7, #48]	; 0x30
   114d2:	2300      	movs	r3, #0
   114d4:	637b      	str	r3, [r7, #52]	; 0x34
   114d6:	4c50      	ldr	r4, [pc, #320]	; (11618 <_sercom_get_async_baud_val+0x1a0>)
   114d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   114da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   114dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   114de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   114e0:	47a0      	blx	r4
   114e2:	1c03      	adds	r3, r0, #0
   114e4:	1c0c      	adds	r4, r1, #0
   114e6:	001a      	movs	r2, r3
   114e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   114ea:	2300      	movs	r3, #0
   114ec:	62bb      	str	r3, [r7, #40]	; 0x28
   114ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   114f0:	623b      	str	r3, [r7, #32]
   114f2:	2300      	movs	r3, #0
   114f4:	627b      	str	r3, [r7, #36]	; 0x24
   114f6:	4c49      	ldr	r4, [pc, #292]	; (1161c <_sercom_get_async_baud_val+0x1a4>)
   114f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   114fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   114fc:	6a3a      	ldr	r2, [r7, #32]
   114fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11500:	47a0      	blx	r4
   11502:	1c03      	adds	r3, r0, #0
   11504:	1c0c      	adds	r4, r1, #0
   11506:	65bb      	str	r3, [r7, #88]	; 0x58
   11508:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1150a:	4a42      	ldr	r2, [pc, #264]	; (11614 <_sercom_get_async_baud_val+0x19c>)
   1150c:	4940      	ldr	r1, [pc, #256]	; (11610 <_sercom_get_async_baud_val+0x198>)
   1150e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   11510:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   11512:	1c0d      	adds	r5, r1, #0
   11514:	1c16      	adds	r6, r2, #0
   11516:	1aed      	subs	r5, r5, r3
   11518:	41a6      	sbcs	r6, r4
   1151a:	1c2b      	adds	r3, r5, #0
   1151c:	1c34      	adds	r4, r6, #0
   1151e:	653b      	str	r3, [r7, #80]	; 0x50
   11520:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
   11522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11524:	0c1b      	lsrs	r3, r3, #16
   11526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   11528:	0416      	lsls	r6, r2, #16
   1152a:	431e      	orrs	r6, r3
   1152c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1152e:	041d      	lsls	r5, r3, #16
   11530:	0033      	movs	r3, r6
   11532:	66bb      	str	r3, [r7, #104]	; 0x68
   11534:	2300      	movs	r3, #0
   11536:	66fb      	str	r3, [r7, #108]	; 0x6c
   11538:	e05e      	b.n	115f8 <_sercom_get_async_baud_val+0x180>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1153a:	1c3b      	adds	r3, r7, #0
   1153c:	3343      	adds	r3, #67	; 0x43
   1153e:	781b      	ldrb	r3, [r3, #0]
   11540:	2b01      	cmp	r3, #1
   11542:	d159      	bne.n	115f8 <_sercom_get_async_baud_val+0x180>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   11544:	1c3b      	adds	r3, r7, #0
   11546:	3367      	adds	r3, #103	; 0x67
   11548:	2200      	movs	r2, #0
   1154a:	701a      	strb	r2, [r3, #0]
   1154c:	e03e      	b.n	115cc <_sercom_get_async_baud_val+0x154>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
   1154e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11550:	61bb      	str	r3, [r7, #24]
   11552:	2300      	movs	r3, #0
   11554:	61fb      	str	r3, [r7, #28]
   11556:	69be      	ldr	r6, [r7, #24]
   11558:	0f73      	lsrs	r3, r6, #29
   1155a:	69fa      	ldr	r2, [r7, #28]
   1155c:	00d2      	lsls	r2, r2, #3
   1155e:	617a      	str	r2, [r7, #20]
   11560:	697d      	ldr	r5, [r7, #20]
   11562:	431d      	orrs	r5, r3
   11564:	617d      	str	r5, [r7, #20]
   11566:	69be      	ldr	r6, [r7, #24]
   11568:	00f6      	lsls	r6, r6, #3
   1156a:	613e      	str	r6, [r7, #16]
   1156c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1156e:	60bb      	str	r3, [r7, #8]
   11570:	2300      	movs	r3, #0
   11572:	60fb      	str	r3, [r7, #12]
   11574:	1c3b      	adds	r3, r7, #0
   11576:	3388      	adds	r3, #136	; 0x88
   11578:	781b      	ldrb	r3, [r3, #0]
   1157a:	b2db      	uxtb	r3, r3
   1157c:	603b      	str	r3, [r7, #0]
   1157e:	2300      	movs	r3, #0
   11580:	607b      	str	r3, [r7, #4]
   11582:	4c25      	ldr	r4, [pc, #148]	; (11618 <_sercom_get_async_baud_val+0x1a0>)
   11584:	68b8      	ldr	r0, [r7, #8]
   11586:	68f9      	ldr	r1, [r7, #12]
   11588:	683a      	ldr	r2, [r7, #0]
   1158a:	687b      	ldr	r3, [r7, #4]
   1158c:	47a0      	blx	r4
   1158e:	1c03      	adds	r3, r0, #0
   11590:	1c0c      	adds	r4, r1, #0
   11592:	4d22      	ldr	r5, [pc, #136]	; (1161c <_sercom_get_async_baud_val+0x1a4>)
   11594:	6938      	ldr	r0, [r7, #16]
   11596:	6979      	ldr	r1, [r7, #20]
   11598:	1c1a      	adds	r2, r3, #0
   1159a:	1c23      	adds	r3, r4, #0
   1159c:	47a8      	blx	r5
   1159e:	1c03      	adds	r3, r0, #0
   115a0:	1c0c      	adds	r4, r1, #0
   115a2:	1c1a      	adds	r2, r3, #0
   115a4:	1c3b      	adds	r3, r7, #0
   115a6:	3367      	adds	r3, #103	; 0x67
   115a8:	781b      	ldrb	r3, [r3, #0]
   115aa:	1ad3      	subs	r3, r2, r3
   115ac:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
   115ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   115b0:	08db      	lsrs	r3, r3, #3
   115b2:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
   115b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   115b6:	4b1a      	ldr	r3, [pc, #104]	; (11620 <_sercom_get_async_baud_val+0x1a8>)
   115b8:	429a      	cmp	r2, r3
   115ba:	d800      	bhi.n	115be <_sercom_get_async_baud_val+0x146>
				break;
   115bc:	e00b      	b.n	115d6 <_sercom_get_async_baud_val+0x15e>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   115be:	1c3b      	adds	r3, r7, #0
   115c0:	3367      	adds	r3, #103	; 0x67
   115c2:	781a      	ldrb	r2, [r3, #0]
   115c4:	1c3b      	adds	r3, r7, #0
   115c6:	3367      	adds	r3, #103	; 0x67
   115c8:	3201      	adds	r2, #1
   115ca:	701a      	strb	r2, [r3, #0]
   115cc:	1c3b      	adds	r3, r7, #0
   115ce:	3367      	adds	r3, #103	; 0x67
   115d0:	781b      	ldrb	r3, [r3, #0]
   115d2:	2b07      	cmp	r3, #7
   115d4:	d9bb      	bls.n	1154e <_sercom_get_async_baud_val+0xd6>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
   115d6:	1c3b      	adds	r3, r7, #0
   115d8:	3367      	adds	r3, #103	; 0x67
   115da:	781b      	ldrb	r3, [r3, #0]
   115dc:	2b08      	cmp	r3, #8
   115de:	d101      	bne.n	115e4 <_sercom_get_async_baud_val+0x16c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   115e0:	2340      	movs	r3, #64	; 0x40
   115e2:	e00f      	b.n	11604 <_sercom_get_async_baud_val+0x18c>
		}
		baud_calculated = baud_int | (baud_fp << 13);
   115e4:	1c3b      	adds	r3, r7, #0
   115e6:	3367      	adds	r3, #103	; 0x67
   115e8:	781b      	ldrb	r3, [r3, #0]
   115ea:	035b      	lsls	r3, r3, #13
   115ec:	1c1a      	adds	r2, r3, #0
   115ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   115f0:	4313      	orrs	r3, r2
   115f2:	66bb      	str	r3, [r7, #104]	; 0x68
   115f4:	2300      	movs	r3, #0
   115f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
   115f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   115fa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   115fc:	b29a      	uxth	r2, r3
   115fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11600:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   11602:	2300      	movs	r3, #0
}
   11604:	1c18      	adds	r0, r3, #0
   11606:	46bd      	mov	sp, r7
   11608:	b01d      	add	sp, #116	; 0x74
   1160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1160c:	46c0      	nop			; (mov r8, r8)
   1160e:	46c0      	nop			; (mov r8, r8)
   11610:	00000000 	.word	0x00000000
   11614:	00000001 	.word	0x00000001
   11618:	00014855 	.word	0x00014855
   1161c:	00014815 	.word	0x00014815
   11620:	00001fff 	.word	0x00001fff
   11624:	46c0      	nop			; (mov r8, r8)
   11626:	46c0      	nop			; (mov r8, r8)

00011628 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   11628:	b580      	push	{r7, lr}
   1162a:	b084      	sub	sp, #16
   1162c:	af00      	add	r7, sp, #0
   1162e:	1c0a      	adds	r2, r1, #0
   11630:	1dfb      	adds	r3, r7, #7
   11632:	1c01      	adds	r1, r0, #0
   11634:	7019      	strb	r1, [r3, #0]
   11636:	1dbb      	adds	r3, r7, #6
   11638:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
   1163a:	4b1a      	ldr	r3, [pc, #104]	; (116a4 <sercom_set_gclk_generator+0x7c>)
   1163c:	781b      	ldrb	r3, [r3, #0]
   1163e:	2201      	movs	r2, #1
   11640:	4053      	eors	r3, r2
   11642:	b2db      	uxtb	r3, r3
   11644:	2b00      	cmp	r3, #0
   11646:	d103      	bne.n	11650 <sercom_set_gclk_generator+0x28>
   11648:	1dbb      	adds	r3, r7, #6
   1164a:	781b      	ldrb	r3, [r3, #0]
   1164c:	2b00      	cmp	r3, #0
   1164e:	d01b      	beq.n	11688 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   11650:	1c3b      	adds	r3, r7, #0
   11652:	330c      	adds	r3, #12
   11654:	1c18      	adds	r0, r3, #0
   11656:	4b14      	ldr	r3, [pc, #80]	; (116a8 <sercom_set_gclk_generator+0x80>)
   11658:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1165a:	1c3b      	adds	r3, r7, #0
   1165c:	330c      	adds	r3, #12
   1165e:	1dfa      	adds	r2, r7, #7
   11660:	7812      	ldrb	r2, [r2, #0]
   11662:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   11664:	1c3b      	adds	r3, r7, #0
   11666:	330c      	adds	r3, #12
   11668:	200c      	movs	r0, #12
   1166a:	1c19      	adds	r1, r3, #0
   1166c:	4b0f      	ldr	r3, [pc, #60]	; (116ac <sercom_set_gclk_generator+0x84>)
   1166e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   11670:	200c      	movs	r0, #12
   11672:	4b0f      	ldr	r3, [pc, #60]	; (116b0 <sercom_set_gclk_generator+0x88>)
   11674:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
   11676:	4b0b      	ldr	r3, [pc, #44]	; (116a4 <sercom_set_gclk_generator+0x7c>)
   11678:	1dfa      	adds	r2, r7, #7
   1167a:	7812      	ldrb	r2, [r2, #0]
   1167c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1167e:	4b09      	ldr	r3, [pc, #36]	; (116a4 <sercom_set_gclk_generator+0x7c>)
   11680:	2201      	movs	r2, #1
   11682:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   11684:	2300      	movs	r3, #0
   11686:	e008      	b.n	1169a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   11688:	4b06      	ldr	r3, [pc, #24]	; (116a4 <sercom_set_gclk_generator+0x7c>)
   1168a:	785b      	ldrb	r3, [r3, #1]
   1168c:	1dfa      	adds	r2, r7, #7
   1168e:	7812      	ldrb	r2, [r2, #0]
   11690:	429a      	cmp	r2, r3
   11692:	d101      	bne.n	11698 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
   11694:	2300      	movs	r3, #0
   11696:	e000      	b.n	1169a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
   11698:	231d      	movs	r3, #29
}
   1169a:	1c18      	adds	r0, r3, #0
   1169c:	46bd      	mov	sp, r7
   1169e:	b004      	add	sp, #16
   116a0:	bd80      	pop	{r7, pc}
   116a2:	46c0      	nop			; (mov r8, r8)
   116a4:	200004fc 	.word	0x200004fc
   116a8:	00011401 	.word	0x00011401
   116ac:	00012ea5 	.word	0x00012ea5
   116b0:	00012ee5 	.word	0x00012ee5

000116b4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   116b4:	b580      	push	{r7, lr}
   116b6:	b082      	sub	sp, #8
   116b8:	af00      	add	r7, sp, #0
   116ba:	6078      	str	r0, [r7, #4]
   116bc:	1c0a      	adds	r2, r1, #0
   116be:	1cfb      	adds	r3, r7, #3
   116c0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   116c2:	687b      	ldr	r3, [r7, #4]
   116c4:	4a4d      	ldr	r2, [pc, #308]	; (117fc <_sercom_get_default_pad+0x148>)
   116c6:	4293      	cmp	r3, r2
   116c8:	d03f      	beq.n	1174a <_sercom_get_default_pad+0x96>
   116ca:	4a4c      	ldr	r2, [pc, #304]	; (117fc <_sercom_get_default_pad+0x148>)
   116cc:	4293      	cmp	r3, r2
   116ce:	d806      	bhi.n	116de <_sercom_get_default_pad+0x2a>
   116d0:	4a4b      	ldr	r2, [pc, #300]	; (11800 <_sercom_get_default_pad+0x14c>)
   116d2:	4293      	cmp	r3, r2
   116d4:	d00f      	beq.n	116f6 <_sercom_get_default_pad+0x42>
   116d6:	4a4b      	ldr	r2, [pc, #300]	; (11804 <_sercom_get_default_pad+0x150>)
   116d8:	4293      	cmp	r3, r2
   116da:	d021      	beq.n	11720 <_sercom_get_default_pad+0x6c>
   116dc:	e089      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   116de:	4a4a      	ldr	r2, [pc, #296]	; (11808 <_sercom_get_default_pad+0x154>)
   116e0:	4293      	cmp	r3, r2
   116e2:	d100      	bne.n	116e6 <_sercom_get_default_pad+0x32>
   116e4:	e05b      	b.n	1179e <_sercom_get_default_pad+0xea>
   116e6:	4a49      	ldr	r2, [pc, #292]	; (1180c <_sercom_get_default_pad+0x158>)
   116e8:	4293      	cmp	r3, r2
   116ea:	d100      	bne.n	116ee <_sercom_get_default_pad+0x3a>
   116ec:	e06c      	b.n	117c8 <_sercom_get_default_pad+0x114>
   116ee:	4a48      	ldr	r2, [pc, #288]	; (11810 <_sercom_get_default_pad+0x15c>)
   116f0:	4293      	cmp	r3, r2
   116f2:	d03f      	beq.n	11774 <_sercom_get_default_pad+0xc0>
   116f4:	e07d      	b.n	117f2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   116f6:	1cfb      	adds	r3, r7, #3
   116f8:	781b      	ldrb	r3, [r3, #0]
   116fa:	2b01      	cmp	r3, #1
   116fc:	d00a      	beq.n	11714 <_sercom_get_default_pad+0x60>
   116fe:	dc02      	bgt.n	11706 <_sercom_get_default_pad+0x52>
   11700:	2b00      	cmp	r3, #0
   11702:	d005      	beq.n	11710 <_sercom_get_default_pad+0x5c>
   11704:	e075      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   11706:	2b02      	cmp	r3, #2
   11708:	d006      	beq.n	11718 <_sercom_get_default_pad+0x64>
   1170a:	2b03      	cmp	r3, #3
   1170c:	d006      	beq.n	1171c <_sercom_get_default_pad+0x68>
   1170e:	e070      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   11710:	4b40      	ldr	r3, [pc, #256]	; (11814 <_sercom_get_default_pad+0x160>)
   11712:	e06f      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11714:	4b40      	ldr	r3, [pc, #256]	; (11818 <_sercom_get_default_pad+0x164>)
   11716:	e06d      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11718:	4b40      	ldr	r3, [pc, #256]	; (1181c <_sercom_get_default_pad+0x168>)
   1171a:	e06b      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1171c:	4b40      	ldr	r3, [pc, #256]	; (11820 <_sercom_get_default_pad+0x16c>)
   1171e:	e069      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11720:	1cfb      	adds	r3, r7, #3
   11722:	781b      	ldrb	r3, [r3, #0]
   11724:	2b01      	cmp	r3, #1
   11726:	d00a      	beq.n	1173e <_sercom_get_default_pad+0x8a>
   11728:	dc02      	bgt.n	11730 <_sercom_get_default_pad+0x7c>
   1172a:	2b00      	cmp	r3, #0
   1172c:	d005      	beq.n	1173a <_sercom_get_default_pad+0x86>
   1172e:	e060      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   11730:	2b02      	cmp	r3, #2
   11732:	d006      	beq.n	11742 <_sercom_get_default_pad+0x8e>
   11734:	2b03      	cmp	r3, #3
   11736:	d006      	beq.n	11746 <_sercom_get_default_pad+0x92>
   11738:	e05b      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   1173a:	2303      	movs	r3, #3
   1173c:	e05a      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1173e:	4b39      	ldr	r3, [pc, #228]	; (11824 <_sercom_get_default_pad+0x170>)
   11740:	e058      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11742:	4b39      	ldr	r3, [pc, #228]	; (11828 <_sercom_get_default_pad+0x174>)
   11744:	e056      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11746:	4b39      	ldr	r3, [pc, #228]	; (1182c <_sercom_get_default_pad+0x178>)
   11748:	e054      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1174a:	1cfb      	adds	r3, r7, #3
   1174c:	781b      	ldrb	r3, [r3, #0]
   1174e:	2b01      	cmp	r3, #1
   11750:	d00a      	beq.n	11768 <_sercom_get_default_pad+0xb4>
   11752:	dc02      	bgt.n	1175a <_sercom_get_default_pad+0xa6>
   11754:	2b00      	cmp	r3, #0
   11756:	d005      	beq.n	11764 <_sercom_get_default_pad+0xb0>
   11758:	e04b      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   1175a:	2b02      	cmp	r3, #2
   1175c:	d006      	beq.n	1176c <_sercom_get_default_pad+0xb8>
   1175e:	2b03      	cmp	r3, #3
   11760:	d006      	beq.n	11770 <_sercom_get_default_pad+0xbc>
   11762:	e046      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   11764:	4b32      	ldr	r3, [pc, #200]	; (11830 <_sercom_get_default_pad+0x17c>)
   11766:	e045      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11768:	4b32      	ldr	r3, [pc, #200]	; (11834 <_sercom_get_default_pad+0x180>)
   1176a:	e043      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1176c:	4b32      	ldr	r3, [pc, #200]	; (11838 <_sercom_get_default_pad+0x184>)
   1176e:	e041      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11770:	4b32      	ldr	r3, [pc, #200]	; (1183c <_sercom_get_default_pad+0x188>)
   11772:	e03f      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11774:	1cfb      	adds	r3, r7, #3
   11776:	781b      	ldrb	r3, [r3, #0]
   11778:	2b01      	cmp	r3, #1
   1177a:	d00a      	beq.n	11792 <_sercom_get_default_pad+0xde>
   1177c:	dc02      	bgt.n	11784 <_sercom_get_default_pad+0xd0>
   1177e:	2b00      	cmp	r3, #0
   11780:	d005      	beq.n	1178e <_sercom_get_default_pad+0xda>
   11782:	e036      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   11784:	2b02      	cmp	r3, #2
   11786:	d006      	beq.n	11796 <_sercom_get_default_pad+0xe2>
   11788:	2b03      	cmp	r3, #3
   1178a:	d006      	beq.n	1179a <_sercom_get_default_pad+0xe6>
   1178c:	e031      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   1178e:	4b2c      	ldr	r3, [pc, #176]	; (11840 <_sercom_get_default_pad+0x18c>)
   11790:	e030      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11792:	4b2c      	ldr	r3, [pc, #176]	; (11844 <_sercom_get_default_pad+0x190>)
   11794:	e02e      	b.n	117f4 <_sercom_get_default_pad+0x140>
   11796:	4b2c      	ldr	r3, [pc, #176]	; (11848 <_sercom_get_default_pad+0x194>)
   11798:	e02c      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1179a:	4b2c      	ldr	r3, [pc, #176]	; (1184c <_sercom_get_default_pad+0x198>)
   1179c:	e02a      	b.n	117f4 <_sercom_get_default_pad+0x140>
   1179e:	1cfb      	adds	r3, r7, #3
   117a0:	781b      	ldrb	r3, [r3, #0]
   117a2:	2b01      	cmp	r3, #1
   117a4:	d00a      	beq.n	117bc <_sercom_get_default_pad+0x108>
   117a6:	dc02      	bgt.n	117ae <_sercom_get_default_pad+0xfa>
   117a8:	2b00      	cmp	r3, #0
   117aa:	d005      	beq.n	117b8 <_sercom_get_default_pad+0x104>
   117ac:	e021      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   117ae:	2b02      	cmp	r3, #2
   117b0:	d006      	beq.n	117c0 <_sercom_get_default_pad+0x10c>
   117b2:	2b03      	cmp	r3, #3
   117b4:	d006      	beq.n	117c4 <_sercom_get_default_pad+0x110>
   117b6:	e01c      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   117b8:	4b25      	ldr	r3, [pc, #148]	; (11850 <_sercom_get_default_pad+0x19c>)
   117ba:	e01b      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117bc:	4b25      	ldr	r3, [pc, #148]	; (11854 <_sercom_get_default_pad+0x1a0>)
   117be:	e019      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117c0:	4b25      	ldr	r3, [pc, #148]	; (11858 <_sercom_get_default_pad+0x1a4>)
   117c2:	e017      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117c4:	4b25      	ldr	r3, [pc, #148]	; (1185c <_sercom_get_default_pad+0x1a8>)
   117c6:	e015      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117c8:	1cfb      	adds	r3, r7, #3
   117ca:	781b      	ldrb	r3, [r3, #0]
   117cc:	2b01      	cmp	r3, #1
   117ce:	d00a      	beq.n	117e6 <_sercom_get_default_pad+0x132>
   117d0:	dc02      	bgt.n	117d8 <_sercom_get_default_pad+0x124>
   117d2:	2b00      	cmp	r3, #0
   117d4:	d005      	beq.n	117e2 <_sercom_get_default_pad+0x12e>
   117d6:	e00c      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   117d8:	2b02      	cmp	r3, #2
   117da:	d006      	beq.n	117ea <_sercom_get_default_pad+0x136>
   117dc:	2b03      	cmp	r3, #3
   117de:	d006      	beq.n	117ee <_sercom_get_default_pad+0x13a>
   117e0:	e007      	b.n	117f2 <_sercom_get_default_pad+0x13e>
   117e2:	4b1f      	ldr	r3, [pc, #124]	; (11860 <_sercom_get_default_pad+0x1ac>)
   117e4:	e006      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117e6:	4b1f      	ldr	r3, [pc, #124]	; (11864 <_sercom_get_default_pad+0x1b0>)
   117e8:	e004      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117ea:	4b1f      	ldr	r3, [pc, #124]	; (11868 <_sercom_get_default_pad+0x1b4>)
   117ec:	e002      	b.n	117f4 <_sercom_get_default_pad+0x140>
   117ee:	4b1f      	ldr	r3, [pc, #124]	; (1186c <_sercom_get_default_pad+0x1b8>)
   117f0:	e000      	b.n	117f4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   117f2:	2300      	movs	r3, #0
}
   117f4:	1c18      	adds	r0, r3, #0
   117f6:	46bd      	mov	sp, r7
   117f8:	b002      	add	sp, #8
   117fa:	bd80      	pop	{r7, pc}
   117fc:	42001000 	.word	0x42001000
   11800:	42000800 	.word	0x42000800
   11804:	42000c00 	.word	0x42000c00
   11808:	42001800 	.word	0x42001800
   1180c:	42001c00 	.word	0x42001c00
   11810:	42001400 	.word	0x42001400
   11814:	00040003 	.word	0x00040003
   11818:	00050003 	.word	0x00050003
   1181c:	00060003 	.word	0x00060003
   11820:	00070003 	.word	0x00070003
   11824:	00010003 	.word	0x00010003
   11828:	001e0003 	.word	0x001e0003
   1182c:	001f0003 	.word	0x001f0003
   11830:	00080003 	.word	0x00080003
   11834:	00090003 	.word	0x00090003
   11838:	000a0003 	.word	0x000a0003
   1183c:	000b0003 	.word	0x000b0003
   11840:	00100003 	.word	0x00100003
   11844:	00110003 	.word	0x00110003
   11848:	00120003 	.word	0x00120003
   1184c:	00130003 	.word	0x00130003
   11850:	000c0003 	.word	0x000c0003
   11854:	000d0003 	.word	0x000d0003
   11858:	000e0003 	.word	0x000e0003
   1185c:	000f0003 	.word	0x000f0003
   11860:	00160003 	.word	0x00160003
   11864:	00170003 	.word	0x00170003
   11868:	00180003 	.word	0x00180003
   1186c:	00190003 	.word	0x00190003

00011870 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   11870:	b580      	push	{r7, lr}
   11872:	b082      	sub	sp, #8
   11874:	af00      	add	r7, sp, #0
   11876:	1c02      	adds	r2, r0, #0
   11878:	1dfb      	adds	r3, r7, #7
   1187a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   1187c:	46bd      	mov	sp, r7
   1187e:	b002      	add	sp, #8
   11880:	bd80      	pop	{r7, pc}
   11882:	46c0      	nop			; (mov r8, r8)

00011884 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   11884:	b590      	push	{r4, r7, lr}
   11886:	b08b      	sub	sp, #44	; 0x2c
   11888:	af00      	add	r7, sp, #0
   1188a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1188c:	1c3b      	adds	r3, r7, #0
   1188e:	330c      	adds	r3, #12
   11890:	4a0e      	ldr	r2, [pc, #56]	; (118cc <_sercom_get_sercom_inst_index+0x48>)
   11892:	ca13      	ldmia	r2!, {r0, r1, r4}
   11894:	c313      	stmia	r3!, {r0, r1, r4}
   11896:	ca13      	ldmia	r2!, {r0, r1, r4}
   11898:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1189a:	2300      	movs	r3, #0
   1189c:	627b      	str	r3, [r7, #36]	; 0x24
   1189e:	e00d      	b.n	118bc <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   118a0:	687a      	ldr	r2, [r7, #4]
   118a2:	1c3b      	adds	r3, r7, #0
   118a4:	330c      	adds	r3, #12
   118a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   118a8:	0089      	lsls	r1, r1, #2
   118aa:	58cb      	ldr	r3, [r1, r3]
   118ac:	429a      	cmp	r2, r3
   118ae:	d102      	bne.n	118b6 <_sercom_get_sercom_inst_index+0x32>
			return i;
   118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   118b2:	b2db      	uxtb	r3, r3
   118b4:	e006      	b.n	118c4 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   118b8:	3301      	adds	r3, #1
   118ba:	627b      	str	r3, [r7, #36]	; 0x24
   118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   118be:	2b05      	cmp	r3, #5
   118c0:	d9ee      	bls.n	118a0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   118c2:	2300      	movs	r3, #0
}
   118c4:	1c18      	adds	r0, r3, #0
   118c6:	46bd      	mov	sp, r7
   118c8:	b00b      	add	sp, #44	; 0x2c
   118ca:	bd90      	pop	{r4, r7, pc}
   118cc:	000173d8 	.word	0x000173d8

000118d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   118d0:	b580      	push	{r7, lr}
   118d2:	b084      	sub	sp, #16
   118d4:	af00      	add	r7, sp, #0
   118d6:	1c02      	adds	r2, r0, #0
   118d8:	6039      	str	r1, [r7, #0]
   118da:	1dfb      	adds	r3, r7, #7
   118dc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
   118de:	4b13      	ldr	r3, [pc, #76]	; (1192c <_sercom_set_handler+0x5c>)
   118e0:	781b      	ldrb	r3, [r3, #0]
   118e2:	2201      	movs	r2, #1
   118e4:	4053      	eors	r3, r2
   118e6:	b2db      	uxtb	r3, r3
   118e8:	2b00      	cmp	r3, #0
   118ea:	d015      	beq.n	11918 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   118ec:	2300      	movs	r3, #0
   118ee:	60fb      	str	r3, [r7, #12]
   118f0:	e00c      	b.n	1190c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   118f2:	4b0f      	ldr	r3, [pc, #60]	; (11930 <_sercom_set_handler+0x60>)
   118f4:	68fa      	ldr	r2, [r7, #12]
   118f6:	0092      	lsls	r2, r2, #2
   118f8:	490e      	ldr	r1, [pc, #56]	; (11934 <_sercom_set_handler+0x64>)
   118fa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   118fc:	4b0e      	ldr	r3, [pc, #56]	; (11938 <_sercom_set_handler+0x68>)
   118fe:	68fa      	ldr	r2, [r7, #12]
   11900:	0092      	lsls	r2, r2, #2
   11902:	2100      	movs	r1, #0
   11904:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   11906:	68fb      	ldr	r3, [r7, #12]
   11908:	3301      	adds	r3, #1
   1190a:	60fb      	str	r3, [r7, #12]
   1190c:	68fb      	ldr	r3, [r7, #12]
   1190e:	2b05      	cmp	r3, #5
   11910:	d9ef      	bls.n	118f2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   11912:	4b06      	ldr	r3, [pc, #24]	; (1192c <_sercom_set_handler+0x5c>)
   11914:	2201      	movs	r2, #1
   11916:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   11918:	1dfb      	adds	r3, r7, #7
   1191a:	781a      	ldrb	r2, [r3, #0]
   1191c:	4b04      	ldr	r3, [pc, #16]	; (11930 <_sercom_set_handler+0x60>)
   1191e:	0092      	lsls	r2, r2, #2
   11920:	6839      	ldr	r1, [r7, #0]
   11922:	50d1      	str	r1, [r2, r3]
}
   11924:	46bd      	mov	sp, r7
   11926:	b004      	add	sp, #16
   11928:	bd80      	pop	{r7, pc}
   1192a:	46c0      	nop			; (mov r8, r8)
   1192c:	20000500 	.word	0x20000500
   11930:	20000504 	.word	0x20000504
   11934:	00011871 	.word	0x00011871
   11938:	20003954 	.word	0x20003954

0001193c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1193c:	b590      	push	{r4, r7, lr}
   1193e:	b085      	sub	sp, #20
   11940:	af00      	add	r7, sp, #0
   11942:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   11944:	1c3a      	adds	r2, r7, #0
   11946:	3208      	adds	r2, #8
   11948:	4b0e      	ldr	r3, [pc, #56]	; (11984 <_sercom_get_interrupt_vector+0x48>)
   1194a:	1c11      	adds	r1, r2, #0
   1194c:	1c1a      	adds	r2, r3, #0
   1194e:	2306      	movs	r3, #6
   11950:	1c08      	adds	r0, r1, #0
   11952:	1c11      	adds	r1, r2, #0
   11954:	1c1a      	adds	r2, r3, #0
   11956:	4b0c      	ldr	r3, [pc, #48]	; (11988 <_sercom_get_interrupt_vector+0x4c>)
   11958:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1195a:	1c3c      	adds	r4, r7, #0
   1195c:	340f      	adds	r4, #15
   1195e:	687b      	ldr	r3, [r7, #4]
   11960:	1c18      	adds	r0, r3, #0
   11962:	4b0a      	ldr	r3, [pc, #40]	; (1198c <_sercom_get_interrupt_vector+0x50>)
   11964:	4798      	blx	r3
   11966:	1c03      	adds	r3, r0, #0
   11968:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1196a:	1c3b      	adds	r3, r7, #0
   1196c:	330f      	adds	r3, #15
   1196e:	781b      	ldrb	r3, [r3, #0]
   11970:	1c3a      	adds	r2, r7, #0
   11972:	3208      	adds	r2, #8
   11974:	5cd3      	ldrb	r3, [r2, r3]
   11976:	b2db      	uxtb	r3, r3
   11978:	b25b      	sxtb	r3, r3
}
   1197a:	1c18      	adds	r0, r3, #0
   1197c:	46bd      	mov	sp, r7
   1197e:	b005      	add	sp, #20
   11980:	bd90      	pop	{r4, r7, pc}
   11982:	46c0      	nop			; (mov r8, r8)
   11984:	000173f0 	.word	0x000173f0
   11988:	00016cfd 	.word	0x00016cfd
   1198c:	00011885 	.word	0x00011885

00011990 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   11990:	b580      	push	{r7, lr}
   11992:	af00      	add	r7, sp, #0
   11994:	4b02      	ldr	r3, [pc, #8]	; (119a0 <SERCOM0_Handler+0x10>)
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	2000      	movs	r0, #0
   1199a:	4798      	blx	r3
   1199c:	46bd      	mov	sp, r7
   1199e:	bd80      	pop	{r7, pc}
   119a0:	20000504 	.word	0x20000504

000119a4 <SERCOM1_Handler>:
   119a4:	b580      	push	{r7, lr}
   119a6:	af00      	add	r7, sp, #0
   119a8:	4b02      	ldr	r3, [pc, #8]	; (119b4 <SERCOM1_Handler+0x10>)
   119aa:	685b      	ldr	r3, [r3, #4]
   119ac:	2001      	movs	r0, #1
   119ae:	4798      	blx	r3
   119b0:	46bd      	mov	sp, r7
   119b2:	bd80      	pop	{r7, pc}
   119b4:	20000504 	.word	0x20000504

000119b8 <SERCOM2_Handler>:
   119b8:	b580      	push	{r7, lr}
   119ba:	af00      	add	r7, sp, #0
   119bc:	4b02      	ldr	r3, [pc, #8]	; (119c8 <SERCOM2_Handler+0x10>)
   119be:	689b      	ldr	r3, [r3, #8]
   119c0:	2002      	movs	r0, #2
   119c2:	4798      	blx	r3
   119c4:	46bd      	mov	sp, r7
   119c6:	bd80      	pop	{r7, pc}
   119c8:	20000504 	.word	0x20000504

000119cc <SERCOM3_Handler>:
   119cc:	b580      	push	{r7, lr}
   119ce:	af00      	add	r7, sp, #0
   119d0:	4b02      	ldr	r3, [pc, #8]	; (119dc <SERCOM3_Handler+0x10>)
   119d2:	68db      	ldr	r3, [r3, #12]
   119d4:	2003      	movs	r0, #3
   119d6:	4798      	blx	r3
   119d8:	46bd      	mov	sp, r7
   119da:	bd80      	pop	{r7, pc}
   119dc:	20000504 	.word	0x20000504

000119e0 <SERCOM4_Handler>:
   119e0:	b580      	push	{r7, lr}
   119e2:	af00      	add	r7, sp, #0
   119e4:	4b02      	ldr	r3, [pc, #8]	; (119f0 <SERCOM4_Handler+0x10>)
   119e6:	691b      	ldr	r3, [r3, #16]
   119e8:	2004      	movs	r0, #4
   119ea:	4798      	blx	r3
   119ec:	46bd      	mov	sp, r7
   119ee:	bd80      	pop	{r7, pc}
   119f0:	20000504 	.word	0x20000504

000119f4 <SERCOM5_Handler>:
   119f4:	b580      	push	{r7, lr}
   119f6:	af00      	add	r7, sp, #0
   119f8:	4b02      	ldr	r3, [pc, #8]	; (11a04 <SERCOM5_Handler+0x10>)
   119fa:	695b      	ldr	r3, [r3, #20]
   119fc:	2005      	movs	r0, #5
   119fe:	4798      	blx	r3
   11a00:	46bd      	mov	sp, r7
   11a02:	bd80      	pop	{r7, pc}
   11a04:	20000504 	.word	0x20000504

00011a08 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   11a08:	b580      	push	{r7, lr}
   11a0a:	b082      	sub	sp, #8
   11a0c:	af00      	add	r7, sp, #0
   11a0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11a10:	687b      	ldr	r3, [r7, #4]
   11a12:	2280      	movs	r2, #128	; 0x80
   11a14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11a16:	687b      	ldr	r3, [r7, #4]
   11a18:	2200      	movs	r2, #0
   11a1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11a1c:	687b      	ldr	r3, [r7, #4]
   11a1e:	2201      	movs	r2, #1
   11a20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11a22:	687b      	ldr	r3, [r7, #4]
   11a24:	2200      	movs	r2, #0
   11a26:	70da      	strb	r2, [r3, #3]
}
   11a28:	46bd      	mov	sp, r7
   11a2a:	b002      	add	sp, #8
   11a2c:	bd80      	pop	{r7, pc}
   11a2e:	46c0      	nop			; (mov r8, r8)

00011a30 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11a30:	b580      	push	{r7, lr}
   11a32:	b084      	sub	sp, #16
   11a34:	af00      	add	r7, sp, #0
   11a36:	1c02      	adds	r2, r0, #0
   11a38:	1dfb      	adds	r3, r7, #7
   11a3a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11a3c:	1c3b      	adds	r3, r7, #0
   11a3e:	330f      	adds	r3, #15
   11a40:	1dfa      	adds	r2, r7, #7
   11a42:	7812      	ldrb	r2, [r2, #0]
   11a44:	09d2      	lsrs	r2, r2, #7
   11a46:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11a48:	1c3b      	adds	r3, r7, #0
   11a4a:	330e      	adds	r3, #14
   11a4c:	1dfa      	adds	r2, r7, #7
   11a4e:	7812      	ldrb	r2, [r2, #0]
   11a50:	0952      	lsrs	r2, r2, #5
   11a52:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11a54:	4b0d      	ldr	r3, [pc, #52]	; (11a8c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11a56:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11a58:	1c3b      	adds	r3, r7, #0
   11a5a:	330f      	adds	r3, #15
   11a5c:	781b      	ldrb	r3, [r3, #0]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d10e      	bne.n	11a80 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   11a62:	1c3b      	adds	r3, r7, #0
   11a64:	330f      	adds	r3, #15
   11a66:	781b      	ldrb	r3, [r3, #0]
   11a68:	009b      	lsls	r3, r3, #2
   11a6a:	2210      	movs	r2, #16
   11a6c:	19d2      	adds	r2, r2, r7
   11a6e:	18d3      	adds	r3, r2, r3
   11a70:	3b08      	subs	r3, #8
   11a72:	681a      	ldr	r2, [r3, #0]
   11a74:	1c3b      	adds	r3, r7, #0
   11a76:	330e      	adds	r3, #14
   11a78:	781b      	ldrb	r3, [r3, #0]
   11a7a:	01db      	lsls	r3, r3, #7
   11a7c:	18d3      	adds	r3, r2, r3
   11a7e:	e000      	b.n	11a82 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   11a80:	2300      	movs	r3, #0
	}
}
   11a82:	1c18      	adds	r0, r3, #0
   11a84:	46bd      	mov	sp, r7
   11a86:	b004      	add	sp, #16
   11a88:	bd80      	pop	{r7, pc}
   11a8a:	46c0      	nop			; (mov r8, r8)
   11a8c:	41004400 	.word	0x41004400

00011a90 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   11a90:	b580      	push	{r7, lr}
   11a92:	b086      	sub	sp, #24
   11a94:	af00      	add	r7, sp, #0
   11a96:	1c02      	adds	r2, r0, #0
   11a98:	1dfb      	adds	r3, r7, #7
   11a9a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11a9c:	1dfb      	adds	r3, r7, #7
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	1c18      	adds	r0, r3, #0
   11aa2:	4b19      	ldr	r3, [pc, #100]	; (11b08 <system_pinmux_pin_get_mux_position+0x78>)
   11aa4:	4798      	blx	r3
   11aa6:	1c03      	adds	r3, r0, #0
   11aa8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   11aaa:	1dfb      	adds	r3, r7, #7
   11aac:	781a      	ldrb	r2, [r3, #0]
   11aae:	231f      	movs	r3, #31
   11ab0:	4013      	ands	r3, r2
   11ab2:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   11ab4:	6979      	ldr	r1, [r7, #20]
   11ab6:	2340      	movs	r3, #64	; 0x40
   11ab8:	693a      	ldr	r2, [r7, #16]
   11aba:	188a      	adds	r2, r1, r2
   11abc:	18d3      	adds	r3, r2, r3
   11abe:	781b      	ldrb	r3, [r3, #0]
   11ac0:	b2db      	uxtb	r3, r3
   11ac2:	1c1a      	adds	r2, r3, #0
   11ac4:	2301      	movs	r3, #1
   11ac6:	4013      	ands	r3, r2
   11ac8:	d101      	bne.n	11ace <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   11aca:	2380      	movs	r3, #128	; 0x80
   11acc:	e017      	b.n	11afe <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   11ace:	693b      	ldr	r3, [r7, #16]
   11ad0:	085a      	lsrs	r2, r3, #1
   11ad2:	6979      	ldr	r1, [r7, #20]
   11ad4:	2330      	movs	r3, #48	; 0x30
   11ad6:	188a      	adds	r2, r1, r2
   11ad8:	18d3      	adds	r3, r2, r3
   11ada:	781b      	ldrb	r3, [r3, #0]
   11adc:	b2db      	uxtb	r3, r3
   11ade:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   11ae0:	693a      	ldr	r2, [r7, #16]
   11ae2:	2301      	movs	r3, #1
   11ae4:	4013      	ands	r3, r2
   11ae6:	d005      	beq.n	11af4 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   11ae8:	68fa      	ldr	r2, [r7, #12]
   11aea:	23f0      	movs	r3, #240	; 0xf0
   11aec:	4013      	ands	r3, r2
   11aee:	091b      	lsrs	r3, r3, #4
   11af0:	b2db      	uxtb	r3, r3
   11af2:	e004      	b.n	11afe <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   11af4:	68fb      	ldr	r3, [r7, #12]
   11af6:	b2da      	uxtb	r2, r3
   11af8:	230f      	movs	r3, #15
   11afa:	4013      	ands	r3, r2
   11afc:	b2db      	uxtb	r3, r3
	}
}
   11afe:	1c18      	adds	r0, r3, #0
   11b00:	46bd      	mov	sp, r7
   11b02:	b006      	add	sp, #24
   11b04:	bd80      	pop	{r7, pc}
   11b06:	46c0      	nop			; (mov r8, r8)
   11b08:	00011a31 	.word	0x00011a31

00011b0c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	1c02      	adds	r2, r0, #0
   11b14:	1dfb      	adds	r3, r7, #7
   11b16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11b18:	1dfb      	adds	r3, r7, #7
   11b1a:	781b      	ldrb	r3, [r3, #0]
   11b1c:	1c18      	adds	r0, r3, #0
   11b1e:	4b03      	ldr	r3, [pc, #12]	; (11b2c <port_get_group_from_gpio_pin+0x20>)
   11b20:	4798      	blx	r3
   11b22:	1c03      	adds	r3, r0, #0
}
   11b24:	1c18      	adds	r0, r3, #0
   11b26:	46bd      	mov	sp, r7
   11b28:	b002      	add	sp, #8
   11b2a:	bd80      	pop	{r7, pc}
   11b2c:	00011a31 	.word	0x00011a31

00011b30 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11b30:	b580      	push	{r7, lr}
   11b32:	b084      	sub	sp, #16
   11b34:	af00      	add	r7, sp, #0
   11b36:	1c0a      	adds	r2, r1, #0
   11b38:	1dfb      	adds	r3, r7, #7
   11b3a:	1c01      	adds	r1, r0, #0
   11b3c:	7019      	strb	r1, [r3, #0]
   11b3e:	1dbb      	adds	r3, r7, #6
   11b40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11b42:	1dfb      	adds	r3, r7, #7
   11b44:	781b      	ldrb	r3, [r3, #0]
   11b46:	1c18      	adds	r0, r3, #0
   11b48:	4b0d      	ldr	r3, [pc, #52]	; (11b80 <port_pin_set_output_level+0x50>)
   11b4a:	4798      	blx	r3
   11b4c:	1c03      	adds	r3, r0, #0
   11b4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11b50:	1dfb      	adds	r3, r7, #7
   11b52:	781a      	ldrb	r2, [r3, #0]
   11b54:	231f      	movs	r3, #31
   11b56:	4013      	ands	r3, r2
   11b58:	2201      	movs	r2, #1
   11b5a:	1c11      	adds	r1, r2, #0
   11b5c:	4099      	lsls	r1, r3
   11b5e:	1c0b      	adds	r3, r1, #0
   11b60:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11b62:	1dbb      	adds	r3, r7, #6
   11b64:	781b      	ldrb	r3, [r3, #0]
   11b66:	2b00      	cmp	r3, #0
   11b68:	d003      	beq.n	11b72 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   11b6a:	68fb      	ldr	r3, [r7, #12]
   11b6c:	68ba      	ldr	r2, [r7, #8]
   11b6e:	619a      	str	r2, [r3, #24]
   11b70:	e002      	b.n	11b78 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   11b72:	68fb      	ldr	r3, [r7, #12]
   11b74:	68ba      	ldr	r2, [r7, #8]
   11b76:	615a      	str	r2, [r3, #20]
	}
}
   11b78:	46bd      	mov	sp, r7
   11b7a:	b004      	add	sp, #16
   11b7c:	bd80      	pop	{r7, pc}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	00011b0d 	.word	0x00011b0d

00011b84 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   11b84:	b580      	push	{r7, lr}
   11b86:	b082      	sub	sp, #8
   11b88:	af00      	add	r7, sp, #0
   11b8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   11b8c:	687b      	ldr	r3, [r7, #4]
   11b8e:	2200      	movs	r2, #0
   11b90:	701a      	strb	r2, [r3, #0]
}
   11b92:	46bd      	mov	sp, r7
   11b94:	b002      	add	sp, #8
   11b96:	bd80      	pop	{r7, pc}

00011b98 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   11b98:	b580      	push	{r7, lr}
   11b9a:	b082      	sub	sp, #8
   11b9c:	af00      	add	r7, sp, #0
   11b9e:	1c02      	adds	r2, r0, #0
   11ba0:	6039      	str	r1, [r7, #0]
   11ba2:	1dfb      	adds	r3, r7, #7
   11ba4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11ba6:	1dfb      	adds	r3, r7, #7
   11ba8:	781b      	ldrb	r3, [r3, #0]
   11baa:	2b01      	cmp	r3, #1
   11bac:	d00a      	beq.n	11bc4 <system_apb_clock_set_mask+0x2c>
   11bae:	2b02      	cmp	r3, #2
   11bb0:	d00f      	beq.n	11bd2 <system_apb_clock_set_mask+0x3a>
   11bb2:	2b00      	cmp	r3, #0
   11bb4:	d114      	bne.n	11be0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   11bb6:	4b0e      	ldr	r3, [pc, #56]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bb8:	4a0d      	ldr	r2, [pc, #52]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bba:	6991      	ldr	r1, [r2, #24]
   11bbc:	683a      	ldr	r2, [r7, #0]
   11bbe:	430a      	orrs	r2, r1
   11bc0:	619a      	str	r2, [r3, #24]
			break;
   11bc2:	e00f      	b.n	11be4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   11bc4:	4b0a      	ldr	r3, [pc, #40]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bc6:	4a0a      	ldr	r2, [pc, #40]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bc8:	69d1      	ldr	r1, [r2, #28]
   11bca:	683a      	ldr	r2, [r7, #0]
   11bcc:	430a      	orrs	r2, r1
   11bce:	61da      	str	r2, [r3, #28]
			break;
   11bd0:	e008      	b.n	11be4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   11bd2:	4b07      	ldr	r3, [pc, #28]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bd4:	4a06      	ldr	r2, [pc, #24]	; (11bf0 <system_apb_clock_set_mask+0x58>)
   11bd6:	6a11      	ldr	r1, [r2, #32]
   11bd8:	683a      	ldr	r2, [r7, #0]
   11bda:	430a      	orrs	r2, r1
   11bdc:	621a      	str	r2, [r3, #32]
			break;
   11bde:	e001      	b.n	11be4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   11be0:	2317      	movs	r3, #23
   11be2:	e000      	b.n	11be6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   11be4:	2300      	movs	r3, #0
}
   11be6:	1c18      	adds	r0, r3, #0
   11be8:	46bd      	mov	sp, r7
   11bea:	b002      	add	sp, #8
   11bec:	bd80      	pop	{r7, pc}
   11bee:	46c0      	nop			; (mov r8, r8)
   11bf0:	40000400 	.word	0x40000400

00011bf4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   11bf4:	b580      	push	{r7, lr}
   11bf6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   11bf8:	4b05      	ldr	r3, [pc, #20]	; (11c10 <system_is_debugger_present+0x1c>)
   11bfa:	789b      	ldrb	r3, [r3, #2]
   11bfc:	b2db      	uxtb	r3, r3
   11bfe:	1c1a      	adds	r2, r3, #0
   11c00:	2302      	movs	r3, #2
   11c02:	4013      	ands	r3, r2
   11c04:	1e5a      	subs	r2, r3, #1
   11c06:	4193      	sbcs	r3, r2
   11c08:	b2db      	uxtb	r3, r3
}
   11c0a:	1c18      	adds	r0, r3, #0
   11c0c:	46bd      	mov	sp, r7
   11c0e:	bd80      	pop	{r7, pc}
   11c10:	41002000 	.word	0x41002000

00011c14 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   11c14:	b580      	push	{r7, lr}
   11c16:	b084      	sub	sp, #16
   11c18:	af00      	add	r7, sp, #0
   11c1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11c1c:	687b      	ldr	r3, [r7, #4]
   11c1e:	681b      	ldr	r3, [r3, #0]
   11c20:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   11c22:	68fb      	ldr	r3, [r7, #12]
   11c24:	7b9b      	ldrb	r3, [r3, #14]
   11c26:	b2db      	uxtb	r3, r3
   11c28:	1c1a      	adds	r2, r3, #0
   11c2a:	2302      	movs	r3, #2
   11c2c:	4013      	ands	r3, r2
   11c2e:	1e5a      	subs	r2, r3, #1
   11c30:	4193      	sbcs	r3, r2
   11c32:	b2db      	uxtb	r3, r3
}
   11c34:	1c18      	adds	r0, r3, #0
   11c36:	46bd      	mov	sp, r7
   11c38:	b004      	add	sp, #16
   11c3a:	bd80      	pop	{r7, pc}

00011c3c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   11c3c:	b580      	push	{r7, lr}
   11c3e:	b084      	sub	sp, #16
   11c40:	af00      	add	r7, sp, #0
   11c42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	681b      	ldr	r3, [r3, #0]
   11c48:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   11c4a:	68fb      	ldr	r3, [r7, #12]
   11c4c:	7b9b      	ldrb	r3, [r3, #14]
   11c4e:	b2db      	uxtb	r3, r3
   11c50:	1c1a      	adds	r2, r3, #0
   11c52:	2301      	movs	r3, #1
   11c54:	4013      	ands	r3, r2
   11c56:	1e5a      	subs	r2, r3, #1
   11c58:	4193      	sbcs	r3, r2
   11c5a:	b2db      	uxtb	r3, r3
}
   11c5c:	1c18      	adds	r0, r3, #0
   11c5e:	46bd      	mov	sp, r7
   11c60:	b004      	add	sp, #16
   11c62:	bd80      	pop	{r7, pc}

00011c64 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   11c64:	b580      	push	{r7, lr}
   11c66:	b084      	sub	sp, #16
   11c68:	af00      	add	r7, sp, #0
   11c6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11c6c:	687b      	ldr	r3, [r7, #4]
   11c6e:	681b      	ldr	r3, [r3, #0]
   11c70:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   11c72:	68fb      	ldr	r3, [r7, #12]
   11c74:	7b9b      	ldrb	r3, [r3, #14]
   11c76:	b2db      	uxtb	r3, r3
   11c78:	1c1a      	adds	r2, r3, #0
   11c7a:	2304      	movs	r3, #4
   11c7c:	4013      	ands	r3, r2
   11c7e:	1e5a      	subs	r2, r3, #1
   11c80:	4193      	sbcs	r3, r2
   11c82:	b2db      	uxtb	r3, r3
}
   11c84:	1c18      	adds	r0, r3, #0
   11c86:	46bd      	mov	sp, r7
   11c88:	b004      	add	sp, #16
   11c8a:	bd80      	pop	{r7, pc}

00011c8c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   11c8c:	b580      	push	{r7, lr}
   11c8e:	b084      	sub	sp, #16
   11c90:	af00      	add	r7, sp, #0
   11c92:	6078      	str	r0, [r7, #4]
   11c94:	1c0a      	adds	r2, r1, #0
   11c96:	1cbb      	adds	r3, r7, #2
   11c98:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11c9a:	687b      	ldr	r3, [r7, #4]
   11c9c:	681b      	ldr	r3, [r3, #0]
   11c9e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   11ca0:	687b      	ldr	r3, [r7, #4]
   11ca2:	1c18      	adds	r0, r3, #0
   11ca4:	4b0a      	ldr	r3, [pc, #40]	; (11cd0 <spi_write+0x44>)
   11ca6:	4798      	blx	r3
   11ca8:	1c03      	adds	r3, r0, #0
   11caa:	2201      	movs	r2, #1
   11cac:	4053      	eors	r3, r2
   11cae:	b2db      	uxtb	r3, r3
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	d001      	beq.n	11cb8 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   11cb4:	2305      	movs	r3, #5
   11cb6:	e007      	b.n	11cc8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   11cb8:	1cbb      	adds	r3, r7, #2
   11cba:	881b      	ldrh	r3, [r3, #0]
   11cbc:	05db      	lsls	r3, r3, #23
   11cbe:	0ddb      	lsrs	r3, r3, #23
   11cc0:	b29a      	uxth	r2, r3
   11cc2:	68fb      	ldr	r3, [r7, #12]
   11cc4:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
   11cc6:	2300      	movs	r3, #0
}
   11cc8:	1c18      	adds	r0, r3, #0
   11cca:	46bd      	mov	sp, r7
   11ccc:	b004      	add	sp, #16
   11cce:	bd80      	pop	{r7, pc}
   11cd0:	00011c3d 	.word	0x00011c3d

00011cd4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   11cd4:	b580      	push	{r7, lr}
   11cd6:	b084      	sub	sp, #16
   11cd8:	af00      	add	r7, sp, #0
   11cda:	6078      	str	r0, [r7, #4]
   11cdc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11cde:	687b      	ldr	r3, [r7, #4]
   11ce0:	681b      	ldr	r3, [r3, #0]
   11ce2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   11ce4:	687b      	ldr	r3, [r7, #4]
   11ce6:	1c18      	adds	r0, r3, #0
   11ce8:	4b1d      	ldr	r3, [pc, #116]	; (11d60 <spi_read+0x8c>)
   11cea:	4798      	blx	r3
   11cec:	1c03      	adds	r3, r0, #0
   11cee:	2201      	movs	r2, #1
   11cf0:	4053      	eors	r3, r2
   11cf2:	b2db      	uxtb	r3, r3
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d001      	beq.n	11cfc <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   11cf8:	2310      	movs	r3, #16
   11cfa:	e02d      	b.n	11d58 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   11cfc:	1c3b      	adds	r3, r7, #0
   11cfe:	330f      	adds	r3, #15
   11d00:	2200      	movs	r2, #0
   11d02:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   11d04:	68bb      	ldr	r3, [r7, #8]
   11d06:	8a1b      	ldrh	r3, [r3, #16]
   11d08:	b29b      	uxth	r3, r3
   11d0a:	1c1a      	adds	r2, r3, #0
   11d0c:	2304      	movs	r3, #4
   11d0e:	4013      	ands	r3, r2
   11d10:	d00b      	beq.n	11d2a <spi_read+0x56>
		retval = STATUS_ERR_OVERFLOW;
   11d12:	1c3b      	adds	r3, r7, #0
   11d14:	330f      	adds	r3, #15
   11d16:	221e      	movs	r2, #30
   11d18:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
   11d1a:	68bb      	ldr	r3, [r7, #8]
   11d1c:	8a1b      	ldrh	r3, [r3, #16]
   11d1e:	b29b      	uxth	r3, r3
   11d20:	2204      	movs	r2, #4
   11d22:	4313      	orrs	r3, r2
   11d24:	b29a      	uxth	r2, r3
   11d26:	68bb      	ldr	r3, [r7, #8]
   11d28:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   11d2a:	687b      	ldr	r3, [r7, #4]
   11d2c:	799b      	ldrb	r3, [r3, #6]
   11d2e:	2b01      	cmp	r3, #1
   11d30:	d108      	bne.n	11d44 <spi_read+0x70>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   11d32:	68bb      	ldr	r3, [r7, #8]
   11d34:	8b1b      	ldrh	r3, [r3, #24]
   11d36:	b29b      	uxth	r3, r3
   11d38:	05db      	lsls	r3, r3, #23
   11d3a:	0ddb      	lsrs	r3, r3, #23
   11d3c:	b29a      	uxth	r2, r3
   11d3e:	683b      	ldr	r3, [r7, #0]
   11d40:	801a      	strh	r2, [r3, #0]
   11d42:	e006      	b.n	11d52 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   11d44:	68bb      	ldr	r3, [r7, #8]
   11d46:	8b1b      	ldrh	r3, [r3, #24]
   11d48:	b29b      	uxth	r3, r3
   11d4a:	b2db      	uxtb	r3, r3
   11d4c:	1c1a      	adds	r2, r3, #0
   11d4e:	683b      	ldr	r3, [r7, #0]
   11d50:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   11d52:	1c3b      	adds	r3, r7, #0
   11d54:	330f      	adds	r3, #15
   11d56:	781b      	ldrb	r3, [r3, #0]
}
   11d58:	1c18      	adds	r0, r3, #0
   11d5a:	46bd      	mov	sp, r7
   11d5c:	b004      	add	sp, #16
   11d5e:	bd80      	pop	{r7, pc}
   11d60:	00011c65 	.word	0x00011c65

00011d64 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   11d64:	b590      	push	{r4, r7, lr}
   11d66:	b093      	sub	sp, #76	; 0x4c
   11d68:	af00      	add	r7, sp, #0
   11d6a:	6078      	str	r0, [r7, #4]
   11d6c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11d6e:	687b      	ldr	r3, [r7, #4]
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   11d74:	687b      	ldr	r3, [r7, #4]
   11d76:	681b      	ldr	r3, [r3, #0]
   11d78:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   11d7a:	1c3b      	adds	r3, r7, #0
   11d7c:	331c      	adds	r3, #28
   11d7e:	1c18      	adds	r0, r3, #0
   11d80:	4b69      	ldr	r3, [pc, #420]	; (11f28 <_spi_set_config+0x1c4>)
   11d82:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11d84:	1c3b      	adds	r3, r7, #0
   11d86:	331c      	adds	r3, #28
   11d88:	2200      	movs	r2, #0
   11d8a:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   11d8c:	683b      	ldr	r3, [r7, #0]
   11d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   11d90:	1c3b      	adds	r3, r7, #0
   11d92:	330c      	adds	r3, #12
   11d94:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   11d96:	683b      	ldr	r3, [r7, #0]
   11d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   11d9a:	1c3b      	adds	r3, r7, #0
   11d9c:	330c      	adds	r3, #12
   11d9e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   11da0:	683b      	ldr	r3, [r7, #0]
   11da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   11da4:	1c3b      	adds	r3, r7, #0
   11da6:	330c      	adds	r3, #12
   11da8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   11daa:	683b      	ldr	r3, [r7, #0]
   11dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   11dae:	1c3b      	adds	r3, r7, #0
   11db0:	330c      	adds	r3, #12
   11db2:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   11db4:	1c3b      	adds	r3, r7, #0
   11db6:	3347      	adds	r3, #71	; 0x47
   11db8:	2200      	movs	r2, #0
   11dba:	701a      	strb	r2, [r3, #0]
   11dbc:	e02c      	b.n	11e18 <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   11dbe:	1c3b      	adds	r3, r7, #0
   11dc0:	3347      	adds	r3, #71	; 0x47
   11dc2:	781a      	ldrb	r2, [r3, #0]
   11dc4:	1c3b      	adds	r3, r7, #0
   11dc6:	330c      	adds	r3, #12
   11dc8:	0092      	lsls	r2, r2, #2
   11dca:	58d3      	ldr	r3, [r2, r3]
   11dcc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   11dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d109      	bne.n	11de8 <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   11dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   11dd6:	1c3b      	adds	r3, r7, #0
   11dd8:	3347      	adds	r3, #71	; 0x47
   11dda:	781b      	ldrb	r3, [r3, #0]
   11ddc:	1c10      	adds	r0, r2, #0
   11dde:	1c19      	adds	r1, r3, #0
   11de0:	4b52      	ldr	r3, [pc, #328]	; (11f2c <_spi_set_config+0x1c8>)
   11de2:	4798      	blx	r3
   11de4:	1c03      	adds	r3, r0, #0
   11de6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   11de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11dea:	3301      	adds	r3, #1
   11dec:	d00d      	beq.n	11e0a <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   11dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11df0:	b2da      	uxtb	r2, r3
   11df2:	1c3b      	adds	r3, r7, #0
   11df4:	331c      	adds	r3, #28
   11df6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   11df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11dfa:	0c1b      	lsrs	r3, r3, #16
   11dfc:	b2da      	uxtb	r2, r3
   11dfe:	1c3b      	adds	r3, r7, #0
   11e00:	331c      	adds	r3, #28
   11e02:	1c10      	adds	r0, r2, #0
   11e04:	1c19      	adds	r1, r3, #0
   11e06:	4b4a      	ldr	r3, [pc, #296]	; (11f30 <_spi_set_config+0x1cc>)
   11e08:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   11e0a:	1c3b      	adds	r3, r7, #0
   11e0c:	3347      	adds	r3, #71	; 0x47
   11e0e:	781a      	ldrb	r2, [r3, #0]
   11e10:	1c3b      	adds	r3, r7, #0
   11e12:	3347      	adds	r3, #71	; 0x47
   11e14:	3201      	adds	r2, #1
   11e16:	701a      	strb	r2, [r3, #0]
   11e18:	1c3b      	adds	r3, r7, #0
   11e1a:	3347      	adds	r3, #71	; 0x47
   11e1c:	781b      	ldrb	r3, [r3, #0]
   11e1e:	2b03      	cmp	r3, #3
   11e20:	d9cd      	bls.n	11dbe <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
   11e22:	683b      	ldr	r3, [r7, #0]
   11e24:	781a      	ldrb	r2, [r3, #0]
   11e26:	687b      	ldr	r3, [r7, #4]
   11e28:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   11e2a:	683b      	ldr	r3, [r7, #0]
   11e2c:	7c1a      	ldrb	r2, [r3, #16]
   11e2e:	687b      	ldr	r3, [r7, #4]
   11e30:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   11e32:	683b      	ldr	r3, [r7, #0]
   11e34:	7c9a      	ldrb	r2, [r3, #18]
   11e36:	687b      	ldr	r3, [r7, #4]
   11e38:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   11e3a:	1c3b      	adds	r3, r7, #0
   11e3c:	330a      	adds	r3, #10
   11e3e:	2200      	movs	r2, #0
   11e40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   11e42:	2300      	movs	r3, #0
   11e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   11e46:	2300      	movs	r3, #0
   11e48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   11e4a:	683b      	ldr	r3, [r7, #0]
   11e4c:	781b      	ldrb	r3, [r3, #0]
   11e4e:	2b01      	cmp	r3, #1
   11e50:	d12b      	bne.n	11eaa <_spi_set_config+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   11e52:	687b      	ldr	r3, [r7, #4]
   11e54:	681b      	ldr	r3, [r3, #0]
   11e56:	1c18      	adds	r0, r3, #0
   11e58:	4b36      	ldr	r3, [pc, #216]	; (11f34 <_spi_set_config+0x1d0>)
   11e5a:	4798      	blx	r3
   11e5c:	1c03      	adds	r3, r0, #0
   11e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   11e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11e62:	330d      	adds	r3, #13
   11e64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   11e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11e68:	b2db      	uxtb	r3, r3
   11e6a:	1c18      	adds	r0, r3, #0
   11e6c:	4b32      	ldr	r3, [pc, #200]	; (11f38 <_spi_set_config+0x1d4>)
   11e6e:	4798      	blx	r3
   11e70:	1c03      	adds	r3, r0, #0
   11e72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   11e74:	683b      	ldr	r3, [r7, #0]
   11e76:	6959      	ldr	r1, [r3, #20]
   11e78:	1c3c      	adds	r4, r7, #0
   11e7a:	3423      	adds	r4, #35	; 0x23
   11e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11e7e:	1c3b      	adds	r3, r7, #0
   11e80:	330a      	adds	r3, #10
   11e82:	1c08      	adds	r0, r1, #0
   11e84:	1c11      	adds	r1, r2, #0
   11e86:	1c1a      	adds	r2, r3, #0
   11e88:	4b2c      	ldr	r3, [pc, #176]	; (11f3c <_spi_set_config+0x1d8>)
   11e8a:	4798      	blx	r3
   11e8c:	1c03      	adds	r3, r0, #0
   11e8e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   11e90:	1c3b      	adds	r3, r7, #0
   11e92:	3323      	adds	r3, #35	; 0x23
   11e94:	781b      	ldrb	r3, [r3, #0]
   11e96:	2b00      	cmp	r3, #0
   11e98:	d001      	beq.n	11e9e <_spi_set_config+0x13a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   11e9a:	2317      	movs	r3, #23
   11e9c:	e040      	b.n	11f20 <_spi_set_config+0x1bc>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   11e9e:	1c3b      	adds	r3, r7, #0
   11ea0:	330a      	adds	r3, #10
   11ea2:	881b      	ldrh	r3, [r3, #0]
   11ea4:	b2da      	uxtb	r2, r3
   11ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11ea8:	729a      	strb	r2, [r3, #10]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   11eaa:	683b      	ldr	r3, [r7, #0]
   11eac:	685b      	ldr	r3, [r3, #4]
   11eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11eb0:	4313      	orrs	r3, r2
   11eb2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   11eb4:	683b      	ldr	r3, [r7, #0]
   11eb6:	689b      	ldr	r3, [r3, #8]
   11eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11eba:	4313      	orrs	r3, r2
   11ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
   11ebe:	683b      	ldr	r3, [r7, #0]
   11ec0:	68db      	ldr	r3, [r3, #12]
   11ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11ec4:	4313      	orrs	r3, r2
   11ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
	
//---------BETH I SHOEHORNED THIS IN	
	ctrla |=   SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   11ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11eca:	220c      	movs	r2, #12
   11ecc:	4313      	orrs	r3, r2
   11ece:	63fb      	str	r3, [r7, #60]	; 0x3c
	

	/* Set SPI character size */
	ctrlb |= config->character_size;
   11ed0:	683b      	ldr	r3, [r7, #0]
   11ed2:	7c1b      	ldrb	r3, [r3, #16]
   11ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11ed6:	4313      	orrs	r3, r2
   11ed8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   11eda:	683b      	ldr	r3, [r7, #0]
   11edc:	7c5b      	ldrb	r3, [r3, #17]
   11ede:	2b00      	cmp	r3, #0
   11ee0:	d104      	bne.n	11eec <_spi_set_config+0x188>
   11ee2:	4b17      	ldr	r3, [pc, #92]	; (11f40 <_spi_set_config+0x1dc>)
   11ee4:	4798      	blx	r3
   11ee6:	1c03      	adds	r3, r0, #0
   11ee8:	2b00      	cmp	r3, #0
   11eea:	d003      	beq.n	11ef4 <_spi_set_config+0x190>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   11eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11eee:	2280      	movs	r2, #128	; 0x80
   11ef0:	4313      	orrs	r3, r2
   11ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   11ef4:	683b      	ldr	r3, [r7, #0]
   11ef6:	7c9b      	ldrb	r3, [r3, #18]
   11ef8:	2b00      	cmp	r3, #0
   11efa:	d004      	beq.n	11f06 <_spi_set_config+0x1a2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   11efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11efe:	2280      	movs	r2, #128	; 0x80
   11f00:	0292      	lsls	r2, r2, #10
   11f02:	4313      	orrs	r3, r2
   11f04:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   11f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11f08:	681a      	ldr	r2, [r3, #0]
   11f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f0c:	431a      	orrs	r2, r3
   11f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11f10:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   11f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11f14:	685a      	ldr	r2, [r3, #4]
   11f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11f18:	431a      	orrs	r2, r3
   11f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11f1c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11f1e:	2300      	movs	r3, #0
}
   11f20:	1c18      	adds	r0, r3, #0
   11f22:	46bd      	mov	sp, r7
   11f24:	b013      	add	sp, #76	; 0x4c
   11f26:	bd90      	pop	{r4, r7, pc}
   11f28:	00011a09 	.word	0x00011a09
   11f2c:	000116b5 	.word	0x000116b5
   11f30:	000131c5 	.word	0x000131c5
   11f34:	00011885 	.word	0x00011885
   11f38:	00013005 	.word	0x00013005
   11f3c:	00011415 	.word	0x00011415
   11f40:	00011bf5 	.word	0x00011bf5

00011f44 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   11f44:	b590      	push	{r4, r7, lr}
   11f46:	b091      	sub	sp, #68	; 0x44
   11f48:	af00      	add	r7, sp, #0
   11f4a:	6078      	str	r0, [r7, #4]
   11f4c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	681b      	ldr	r3, [r3, #0]
   11f52:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   11f54:	687b      	ldr	r3, [r7, #4]
   11f56:	681b      	ldr	r3, [r3, #0]
   11f58:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   11f5a:	683b      	ldr	r3, [r7, #0]
   11f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   11f5e:	1c3b      	adds	r3, r7, #0
   11f60:	3310      	adds	r3, #16
   11f62:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   11f64:	683b      	ldr	r3, [r7, #0]
   11f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   11f68:	1c3b      	adds	r3, r7, #0
   11f6a:	3310      	adds	r3, #16
   11f6c:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   11f6e:	683b      	ldr	r3, [r7, #0]
   11f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   11f72:	1c3b      	adds	r3, r7, #0
   11f74:	3310      	adds	r3, #16
   11f76:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   11f78:	683b      	ldr	r3, [r7, #0]
   11f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   11f7c:	1c3b      	adds	r3, r7, #0
   11f7e:	3310      	adds	r3, #16
   11f80:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   11f82:	1c3b      	adds	r3, r7, #0
   11f84:	333f      	adds	r3, #63	; 0x3f
   11f86:	2200      	movs	r2, #0
   11f88:	701a      	strb	r2, [r3, #0]
   11f8a:	e030      	b.n	11fee <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   11f8c:	1c3b      	adds	r3, r7, #0
   11f8e:	333f      	adds	r3, #63	; 0x3f
   11f90:	781a      	ldrb	r2, [r3, #0]
   11f92:	1c3b      	adds	r3, r7, #0
   11f94:	3310      	adds	r3, #16
   11f96:	0092      	lsls	r2, r2, #2
   11f98:	58d3      	ldr	r3, [r2, r3]
   11f9a:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   11f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d109      	bne.n	11fb6 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   11fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11fa4:	1c3b      	adds	r3, r7, #0
   11fa6:	333f      	adds	r3, #63	; 0x3f
   11fa8:	781b      	ldrb	r3, [r3, #0]
   11faa:	1c10      	adds	r0, r2, #0
   11fac:	1c19      	adds	r1, r3, #0
   11fae:	4b4d      	ldr	r3, [pc, #308]	; (120e4 <_spi_check_config+0x1a0>)
   11fb0:	4798      	blx	r3
   11fb2:	1c03      	adds	r3, r0, #0
   11fb4:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   11fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11fb8:	3301      	adds	r3, #1
   11fba:	d100      	bne.n	11fbe <_spi_check_config+0x7a>
			continue;
   11fbc:	e010      	b.n	11fe0 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
   11fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11fc0:	041b      	lsls	r3, r3, #16
   11fc2:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   11fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11fc6:	0c1b      	lsrs	r3, r3, #16
   11fc8:	b2db      	uxtb	r3, r3
   11fca:	1c18      	adds	r0, r3, #0
   11fcc:	4b46      	ldr	r3, [pc, #280]	; (120e8 <_spi_check_config+0x1a4>)
   11fce:	4798      	blx	r3
   11fd0:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   11fd2:	429c      	cmp	r4, r3
   11fd4:	d004      	beq.n	11fe0 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
   11fd6:	687b      	ldr	r3, [r7, #4]
   11fd8:	2200      	movs	r2, #0
   11fda:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   11fdc:	231c      	movs	r3, #28
   11fde:	e07d      	b.n	120dc <_spi_check_config+0x198>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   11fe0:	1c3b      	adds	r3, r7, #0
   11fe2:	333f      	adds	r3, #63	; 0x3f
   11fe4:	781a      	ldrb	r2, [r3, #0]
   11fe6:	1c3b      	adds	r3, r7, #0
   11fe8:	333f      	adds	r3, #63	; 0x3f
   11fea:	3201      	adds	r2, #1
   11fec:	701a      	strb	r2, [r3, #0]
   11fee:	1c3b      	adds	r3, r7, #0
   11ff0:	333f      	adds	r3, #63	; 0x3f
   11ff2:	781b      	ldrb	r3, [r3, #0]
   11ff4:	2b03      	cmp	r3, #3
   11ff6:	d9c9      	bls.n	11f8c <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   11ff8:	200c      	movs	r0, #12
   11ffa:	4b3c      	ldr	r3, [pc, #240]	; (120ec <_spi_check_config+0x1a8>)
   11ffc:	4798      	blx	r3
   11ffe:	1c03      	adds	r3, r0, #0
   12000:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   12002:	2300      	movs	r3, #0
   12004:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   12006:	2300      	movs	r3, #0
   12008:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   1200a:	683b      	ldr	r3, [r7, #0]
   1200c:	781b      	ldrb	r3, [r3, #0]
   1200e:	2b01      	cmp	r3, #1
   12010:	d123      	bne.n	1205a <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   12012:	683b      	ldr	r3, [r7, #0]
   12014:	6959      	ldr	r1, [r3, #20]
   12016:	1c3c      	adds	r4, r7, #0
   12018:	3423      	adds	r4, #35	; 0x23
   1201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1201c:	1c3b      	adds	r3, r7, #0
   1201e:	330e      	adds	r3, #14
   12020:	1c08      	adds	r0, r1, #0
   12022:	1c11      	adds	r1, r2, #0
   12024:	1c1a      	adds	r2, r3, #0
   12026:	4b32      	ldr	r3, [pc, #200]	; (120f0 <_spi_check_config+0x1ac>)
   12028:	4798      	blx	r3
   1202a:	1c03      	adds	r3, r0, #0
   1202c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   1202e:	1c3b      	adds	r3, r7, #0
   12030:	3323      	adds	r3, #35	; 0x23
   12032:	781b      	ldrb	r3, [r3, #0]
   12034:	2b00      	cmp	r3, #0
   12036:	d001      	beq.n	1203c <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12038:	2317      	movs	r3, #23
   1203a:	e04f      	b.n	120dc <_spi_check_config+0x198>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   1203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1203e:	7a9b      	ldrb	r3, [r3, #10]
   12040:	b2da      	uxtb	r2, r3
   12042:	1c3b      	adds	r3, r7, #0
   12044:	330e      	adds	r3, #14
   12046:	881b      	ldrh	r3, [r3, #0]
   12048:	b2db      	uxtb	r3, r3
   1204a:	429a      	cmp	r2, r3
   1204c:	d001      	beq.n	12052 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   1204e:	231c      	movs	r3, #28
   12050:	e044      	b.n	120dc <_spi_check_config+0x198>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   12052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12054:	220c      	movs	r2, #12
   12056:	4313      	orrs	r3, r2
   12058:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   1205a:	683b      	ldr	r3, [r7, #0]
   1205c:	685b      	ldr	r3, [r3, #4]
   1205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12060:	4313      	orrs	r3, r2
   12062:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12064:	683b      	ldr	r3, [r7, #0]
   12066:	689b      	ldr	r3, [r3, #8]
   12068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1206a:	4313      	orrs	r3, r2
   1206c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
   1206e:	683b      	ldr	r3, [r7, #0]
   12070:	68db      	ldr	r3, [r3, #12]
   12072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12074:	4313      	orrs	r3, r2
   12076:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12078:	683b      	ldr	r3, [r7, #0]
   1207a:	7c1b      	ldrb	r3, [r3, #16]
   1207c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1207e:	4313      	orrs	r3, r2
   12080:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   12082:	683b      	ldr	r3, [r7, #0]
   12084:	7c5b      	ldrb	r3, [r3, #17]
   12086:	2b00      	cmp	r3, #0
   12088:	d003      	beq.n	12092 <_spi_check_config+0x14e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1208c:	2280      	movs	r2, #128	; 0x80
   1208e:	4313      	orrs	r3, r2
   12090:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   12092:	683b      	ldr	r3, [r7, #0]
   12094:	7c9b      	ldrb	r3, [r3, #18]
   12096:	2b00      	cmp	r3, #0
   12098:	d004      	beq.n	120a4 <_spi_check_config+0x160>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1209c:	2280      	movs	r2, #128	; 0x80
   1209e:	0292      	lsls	r2, r2, #10
   120a0:	4313      	orrs	r3, r2
   120a2:	633b      	str	r3, [r7, #48]	; 0x30
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   120a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   120a6:	2202      	movs	r2, #2
   120a8:	4313      	orrs	r3, r2
   120aa:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   120ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   120ae:	681a      	ldr	r2, [r3, #0]
   120b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   120b2:	429a      	cmp	r2, r3
   120b4:	d10e      	bne.n	120d4 <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
   120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   120b8:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   120bc:	429a      	cmp	r2, r3
   120be:	d109      	bne.n	120d4 <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
   120c0:	683b      	ldr	r3, [r7, #0]
   120c2:	781a      	ldrb	r2, [r3, #0]
   120c4:	687b      	ldr	r3, [r7, #4]
   120c6:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   120c8:	683b      	ldr	r3, [r7, #0]
   120ca:	7c1a      	ldrb	r2, [r3, #16]
   120cc:	687b      	ldr	r3, [r7, #4]
   120ce:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   120d0:	2300      	movs	r3, #0
   120d2:	e003      	b.n	120dc <_spi_check_config+0x198>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   120d4:	687b      	ldr	r3, [r7, #4]
   120d6:	2200      	movs	r2, #0
   120d8:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   120da:	231c      	movs	r3, #28
}
   120dc:	1c18      	adds	r0, r3, #0
   120de:	46bd      	mov	sp, r7
   120e0:	b011      	add	sp, #68	; 0x44
   120e2:	bd90      	pop	{r4, r7, pc}
   120e4:	000116b5 	.word	0x000116b5
   120e8:	00011a91 	.word	0x00011a91
   120ec:	00013005 	.word	0x00013005
   120f0:	00011415 	.word	0x00011415

000120f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   120f4:	b580      	push	{r7, lr}
   120f6:	b08a      	sub	sp, #40	; 0x28
   120f8:	af00      	add	r7, sp, #0
   120fa:	60f8      	str	r0, [r7, #12]
   120fc:	60b9      	str	r1, [r7, #8]
   120fe:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   12100:	68fb      	ldr	r3, [r7, #12]
   12102:	68ba      	ldr	r2, [r7, #8]
   12104:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   12106:	68fb      	ldr	r3, [r7, #12]
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1210e:	681a      	ldr	r2, [r3, #0]
   12110:	2302      	movs	r3, #2
   12112:	4013      	ands	r3, r2
   12114:	d007      	beq.n	12126 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   12116:	68fa      	ldr	r2, [r7, #12]
   12118:	687b      	ldr	r3, [r7, #4]
   1211a:	1c10      	adds	r0, r2, #0
   1211c:	1c19      	adds	r1, r3, #0
   1211e:	4b2a      	ldr	r3, [pc, #168]	; (121c8 <spi_init+0xd4>)
   12120:	4798      	blx	r3
   12122:	1c03      	adds	r3, r0, #0
   12124:	e04c      	b.n	121c0 <spi_init+0xcc>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   12126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12128:	681a      	ldr	r2, [r3, #0]
   1212a:	2301      	movs	r3, #1
   1212c:	4013      	ands	r3, r2
   1212e:	d001      	beq.n	12134 <spi_init+0x40>
		return STATUS_BUSY;
   12130:	2305      	movs	r3, #5
   12132:	e045      	b.n	121c0 <spi_init+0xcc>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12134:	68fb      	ldr	r3, [r7, #12]
   12136:	681b      	ldr	r3, [r3, #0]
   12138:	1c18      	adds	r0, r3, #0
   1213a:	4b24      	ldr	r3, [pc, #144]	; (121cc <spi_init+0xd8>)
   1213c:	4798      	blx	r3
   1213e:	1c03      	adds	r3, r0, #0
   12140:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   12142:	6a3b      	ldr	r3, [r7, #32]
   12144:	3302      	adds	r3, #2
   12146:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12148:	6a3b      	ldr	r3, [r7, #32]
   1214a:	330d      	adds	r3, #13
   1214c:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1214e:	69fb      	ldr	r3, [r7, #28]
   12150:	2201      	movs	r2, #1
   12152:	1c11      	adds	r1, r2, #0
   12154:	4099      	lsls	r1, r3
   12156:	1c0b      	adds	r3, r1, #0
   12158:	2002      	movs	r0, #2
   1215a:	1c19      	adds	r1, r3, #0
   1215c:	4b1c      	ldr	r3, [pc, #112]	; (121d0 <spi_init+0xdc>)
   1215e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12160:	1c3b      	adds	r3, r7, #0
   12162:	3314      	adds	r3, #20
   12164:	1c18      	adds	r0, r3, #0
   12166:	4b1b      	ldr	r3, [pc, #108]	; (121d4 <spi_init+0xe0>)
   12168:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1216a:	687a      	ldr	r2, [r7, #4]
   1216c:	2320      	movs	r3, #32
   1216e:	5cd2      	ldrb	r2, [r2, r3]
   12170:	1c3b      	adds	r3, r7, #0
   12172:	3314      	adds	r3, #20
   12174:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12176:	69bb      	ldr	r3, [r7, #24]
   12178:	b2da      	uxtb	r2, r3
   1217a:	1c3b      	adds	r3, r7, #0
   1217c:	3314      	adds	r3, #20
   1217e:	1c10      	adds	r0, r2, #0
   12180:	1c19      	adds	r1, r3, #0
   12182:	4b15      	ldr	r3, [pc, #84]	; (121d8 <spi_init+0xe4>)
   12184:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12186:	69bb      	ldr	r3, [r7, #24]
   12188:	b2db      	uxtb	r3, r3
   1218a:	1c18      	adds	r0, r3, #0
   1218c:	4b13      	ldr	r3, [pc, #76]	; (121dc <spi_init+0xe8>)
   1218e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   12190:	687a      	ldr	r2, [r7, #4]
   12192:	2320      	movs	r3, #32
   12194:	5cd3      	ldrb	r3, [r2, r3]
   12196:	1c18      	adds	r0, r3, #0
   12198:	2100      	movs	r1, #0
   1219a:	4b11      	ldr	r3, [pc, #68]	; (121e0 <spi_init+0xec>)
   1219c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   1219e:	687b      	ldr	r3, [r7, #4]
   121a0:	781b      	ldrb	r3, [r3, #0]
   121a2:	2b01      	cmp	r3, #1
   121a4:	d105      	bne.n	121b2 <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   121a8:	681b      	ldr	r3, [r3, #0]
   121aa:	220c      	movs	r2, #12
   121ac:	431a      	orrs	r2, r3
   121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   121b0:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   121b2:	68fa      	ldr	r2, [r7, #12]
   121b4:	687b      	ldr	r3, [r7, #4]
   121b6:	1c10      	adds	r0, r2, #0
   121b8:	1c19      	adds	r1, r3, #0
   121ba:	4b0a      	ldr	r3, [pc, #40]	; (121e4 <spi_init+0xf0>)
   121bc:	4798      	blx	r3
   121be:	1c03      	adds	r3, r0, #0
}
   121c0:	1c18      	adds	r0, r3, #0
   121c2:	46bd      	mov	sp, r7
   121c4:	b00a      	add	sp, #40	; 0x28
   121c6:	bd80      	pop	{r7, pc}
   121c8:	00011f45 	.word	0x00011f45
   121cc:	00011885 	.word	0x00011885
   121d0:	00011b99 	.word	0x00011b99
   121d4:	00011b85 	.word	0x00011b85
   121d8:	00012ea5 	.word	0x00012ea5
   121dc:	00012ee5 	.word	0x00012ee5
   121e0:	00011629 	.word	0x00011629
   121e4:	00011d65 	.word	0x00011d65

000121e8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   121e8:	b580      	push	{r7, lr}
   121ea:	b086      	sub	sp, #24
   121ec:	af00      	add	r7, sp, #0
   121ee:	60f8      	str	r0, [r7, #12]
   121f0:	60b9      	str	r1, [r7, #8]
   121f2:	1dfb      	adds	r3, r7, #7
   121f4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   121f6:	68fb      	ldr	r3, [r7, #12]
   121f8:	795b      	ldrb	r3, [r3, #5]
   121fa:	2b01      	cmp	r3, #1
   121fc:	d001      	beq.n	12202 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   121fe:	2315      	movs	r3, #21
   12200:	e052      	b.n	122a8 <spi_select_slave+0xc0>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
   12202:	1dfb      	adds	r3, r7, #7
   12204:	781b      	ldrb	r3, [r3, #0]
   12206:	2b00      	cmp	r3, #0
   12208:	d047      	beq.n	1229a <spi_select_slave+0xb2>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   1220a:	68bb      	ldr	r3, [r7, #8]
   1220c:	785b      	ldrb	r3, [r3, #1]
   1220e:	2b00      	cmp	r3, #0
   12210:	d03c      	beq.n	1228c <spi_select_slave+0xa4>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   12212:	68fb      	ldr	r3, [r7, #12]
   12214:	1c18      	adds	r0, r3, #0
   12216:	4b26      	ldr	r3, [pc, #152]	; (122b0 <spi_select_slave+0xc8>)
   12218:	4798      	blx	r3
   1221a:	1c03      	adds	r3, r0, #0
   1221c:	2201      	movs	r2, #1
   1221e:	4053      	eors	r3, r2
   12220:	b2db      	uxtb	r3, r3
   12222:	2b00      	cmp	r3, #0
   12224:	d007      	beq.n	12236 <spi_select_slave+0x4e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   12226:	68bb      	ldr	r3, [r7, #8]
   12228:	781b      	ldrb	r3, [r3, #0]
   1222a:	1c18      	adds	r0, r3, #0
   1222c:	2101      	movs	r1, #1
   1222e:	4b21      	ldr	r3, [pc, #132]	; (122b4 <spi_select_slave+0xcc>)
   12230:	4798      	blx	r3
					return STATUS_BUSY;
   12232:	2305      	movs	r3, #5
   12234:	e038      	b.n	122a8 <spi_select_slave+0xc0>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   12236:	68bb      	ldr	r3, [r7, #8]
   12238:	781b      	ldrb	r3, [r3, #0]
   1223a:	1c18      	adds	r0, r3, #0
   1223c:	2100      	movs	r1, #0
   1223e:	4b1d      	ldr	r3, [pc, #116]	; (122b4 <spi_select_slave+0xcc>)
   12240:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   12242:	68bb      	ldr	r3, [r7, #8]
   12244:	789b      	ldrb	r3, [r3, #2]
   12246:	68fa      	ldr	r2, [r7, #12]
   12248:	1c10      	adds	r0, r2, #0
   1224a:	1c19      	adds	r1, r3, #0
   1224c:	4b1a      	ldr	r3, [pc, #104]	; (122b8 <spi_select_slave+0xd0>)
   1224e:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   12250:	68fb      	ldr	r3, [r7, #12]
   12252:	79db      	ldrb	r3, [r3, #7]
   12254:	2201      	movs	r2, #1
   12256:	4053      	eors	r3, r2
   12258:	b2db      	uxtb	r3, r3
   1225a:	2b00      	cmp	r3, #0
   1225c:	d023      	beq.n	122a6 <spi_select_slave+0xbe>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   1225e:	46c0      	nop			; (mov r8, r8)
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	1c18      	adds	r0, r3, #0
   12264:	4b15      	ldr	r3, [pc, #84]	; (122bc <spi_select_slave+0xd4>)
   12266:	4798      	blx	r3
   12268:	1c03      	adds	r3, r0, #0
   1226a:	2201      	movs	r2, #1
   1226c:	4053      	eors	r3, r2
   1226e:	b2db      	uxtb	r3, r3
   12270:	2b00      	cmp	r3, #0
   12272:	d1f5      	bne.n	12260 <spi_select_slave+0x78>
					}
					uint16_t flush = 0;
   12274:	1c3b      	adds	r3, r7, #0
   12276:	3316      	adds	r3, #22
   12278:	2200      	movs	r2, #0
   1227a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   1227c:	68fa      	ldr	r2, [r7, #12]
   1227e:	1c3b      	adds	r3, r7, #0
   12280:	3316      	adds	r3, #22
   12282:	1c10      	adds	r0, r2, #0
   12284:	1c19      	adds	r1, r3, #0
   12286:	4b0e      	ldr	r3, [pc, #56]	; (122c0 <spi_select_slave+0xd8>)
   12288:	4798      	blx	r3
   1228a:	e00c      	b.n	122a6 <spi_select_slave+0xbe>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1228c:	68bb      	ldr	r3, [r7, #8]
   1228e:	781b      	ldrb	r3, [r3, #0]
   12290:	1c18      	adds	r0, r3, #0
   12292:	2100      	movs	r1, #0
   12294:	4b07      	ldr	r3, [pc, #28]	; (122b4 <spi_select_slave+0xcc>)
   12296:	4798      	blx	r3
   12298:	e005      	b.n	122a6 <spi_select_slave+0xbe>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   1229a:	68bb      	ldr	r3, [r7, #8]
   1229c:	781b      	ldrb	r3, [r3, #0]
   1229e:	1c18      	adds	r0, r3, #0
   122a0:	2101      	movs	r1, #1
   122a2:	4b04      	ldr	r3, [pc, #16]	; (122b4 <spi_select_slave+0xcc>)
   122a4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   122a6:	2300      	movs	r3, #0
}
   122a8:	1c18      	adds	r0, r3, #0
   122aa:	46bd      	mov	sp, r7
   122ac:	b006      	add	sp, #24
   122ae:	bd80      	pop	{r7, pc}
   122b0:	00011c3d 	.word	0x00011c3d
   122b4:	00011b31 	.word	0x00011b31
   122b8:	00011c8d 	.word	0x00011c8d
   122bc:	00011c65 	.word	0x00011c65
   122c0:	00011cd5 	.word	0x00011cd5

000122c4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   122c4:	b590      	push	{r4, r7, lr}
   122c6:	b089      	sub	sp, #36	; 0x24
   122c8:	af00      	add	r7, sp, #0
   122ca:	60f8      	str	r0, [r7, #12]
   122cc:	60b9      	str	r1, [r7, #8]
   122ce:	607a      	str	r2, [r7, #4]
   122d0:	1c1a      	adds	r2, r3, #0
   122d2:	1cbb      	adds	r3, r7, #2
   122d4:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   122d6:	1cbb      	adds	r3, r7, #2
   122d8:	881b      	ldrh	r3, [r3, #0]
   122da:	2b00      	cmp	r3, #0
   122dc:	d101      	bne.n	122e2 <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
   122de:	2317      	movs	r3, #23
   122e0:	e0b2      	b.n	12448 <spi_transceive_buffer_wait+0x184>
	}

	if (!(module->receiver_enabled)) {
   122e2:	68fb      	ldr	r3, [r7, #12]
   122e4:	79db      	ldrb	r3, [r3, #7]
   122e6:	2201      	movs	r2, #1
   122e8:	4053      	eors	r3, r2
   122ea:	b2db      	uxtb	r3, r3
   122ec:	2b00      	cmp	r3, #0
   122ee:	d001      	beq.n	122f4 <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
   122f0:	231c      	movs	r3, #28
   122f2:	e0a9      	b.n	12448 <spi_transceive_buffer_wait+0x184>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   122f4:	1c3b      	adds	r3, r7, #0
   122f6:	331e      	adds	r3, #30
   122f8:	2200      	movs	r2, #0
   122fa:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   122fc:	1c3b      	adds	r3, r7, #0
   122fe:	331c      	adds	r3, #28
   12300:	2200      	movs	r2, #0
   12302:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   12304:	1c3b      	adds	r3, r7, #0
   12306:	331a      	adds	r3, #26
   12308:	1cba      	adds	r2, r7, #2
   1230a:	8812      	ldrh	r2, [r2, #0]
   1230c:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   1230e:	e083      	b.n	12418 <spi_transceive_buffer_wait+0x154>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   12310:	46c0      	nop			; (mov r8, r8)
   12312:	68fb      	ldr	r3, [r7, #12]
   12314:	1c18      	adds	r0, r3, #0
   12316:	4b4e      	ldr	r3, [pc, #312]	; (12450 <spi_transceive_buffer_wait+0x18c>)
   12318:	4798      	blx	r3
   1231a:	1c03      	adds	r3, r0, #0
   1231c:	2201      	movs	r2, #1
   1231e:	4053      	eors	r3, r2
   12320:	b2db      	uxtb	r3, r3
   12322:	2b00      	cmp	r3, #0
   12324:	d1f5      	bne.n	12312 <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   12326:	1c3b      	adds	r3, r7, #0
   12328:	331e      	adds	r3, #30
   1232a:	881b      	ldrh	r3, [r3, #0]
   1232c:	1c3a      	adds	r2, r7, #0
   1232e:	321e      	adds	r2, #30
   12330:	1c59      	adds	r1, r3, #1
   12332:	8011      	strh	r1, [r2, #0]
   12334:	68ba      	ldr	r2, [r7, #8]
   12336:	18d3      	adds	r3, r2, r3
   12338:	781a      	ldrb	r2, [r3, #0]
   1233a:	1c3b      	adds	r3, r7, #0
   1233c:	3318      	adds	r3, #24
   1233e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12340:	68fb      	ldr	r3, [r7, #12]
   12342:	799b      	ldrb	r3, [r3, #6]
   12344:	2b01      	cmp	r3, #1
   12346:	d113      	bne.n	12370 <spi_transceive_buffer_wait+0xac>
			data_to_send |= (tx_data[tx_pos++] << 8);
   12348:	1c3b      	adds	r3, r7, #0
   1234a:	331e      	adds	r3, #30
   1234c:	881b      	ldrh	r3, [r3, #0]
   1234e:	1c3a      	adds	r2, r7, #0
   12350:	321e      	adds	r2, #30
   12352:	1c59      	adds	r1, r3, #1
   12354:	8011      	strh	r1, [r2, #0]
   12356:	68ba      	ldr	r2, [r7, #8]
   12358:	18d3      	adds	r3, r2, r3
   1235a:	781b      	ldrb	r3, [r3, #0]
   1235c:	021b      	lsls	r3, r3, #8
   1235e:	b29a      	uxth	r2, r3
   12360:	1c3b      	adds	r3, r7, #0
   12362:	3318      	adds	r3, #24
   12364:	881b      	ldrh	r3, [r3, #0]
   12366:	4313      	orrs	r3, r2
   12368:	b29a      	uxth	r2, r3
   1236a:	1c3b      	adds	r3, r7, #0
   1236c:	3318      	adds	r3, #24
   1236e:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   12370:	68fa      	ldr	r2, [r7, #12]
   12372:	1c3b      	adds	r3, r7, #0
   12374:	3318      	adds	r3, #24
   12376:	881b      	ldrh	r3, [r3, #0]
   12378:	1c10      	adds	r0, r2, #0
   1237a:	1c19      	adds	r1, r3, #0
   1237c:	4b35      	ldr	r3, [pc, #212]	; (12454 <spi_transceive_buffer_wait+0x190>)
   1237e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   12380:	46c0      	nop			; (mov r8, r8)
   12382:	68fb      	ldr	r3, [r7, #12]
   12384:	1c18      	adds	r0, r3, #0
   12386:	4b34      	ldr	r3, [pc, #208]	; (12458 <spi_transceive_buffer_wait+0x194>)
   12388:	4798      	blx	r3
   1238a:	1c03      	adds	r3, r0, #0
   1238c:	2201      	movs	r2, #1
   1238e:	4053      	eors	r3, r2
   12390:	b2db      	uxtb	r3, r3
   12392:	2b00      	cmp	r3, #0
   12394:	d1f5      	bne.n	12382 <spi_transceive_buffer_wait+0xbe>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   12396:	1c3b      	adds	r3, r7, #0
   12398:	3314      	adds	r3, #20
   1239a:	2200      	movs	r2, #0
   1239c:	801a      	strh	r2, [r3, #0]
		rx_length--;
   1239e:	1c3b      	adds	r3, r7, #0
   123a0:	331a      	adds	r3, #26
   123a2:	881a      	ldrh	r2, [r3, #0]
   123a4:	1c3b      	adds	r3, r7, #0
   123a6:	331a      	adds	r3, #26
   123a8:	3a01      	subs	r2, #1
   123aa:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   123ac:	1c3c      	adds	r4, r7, #0
   123ae:	3417      	adds	r4, #23
   123b0:	68fa      	ldr	r2, [r7, #12]
   123b2:	1c3b      	adds	r3, r7, #0
   123b4:	3314      	adds	r3, #20
   123b6:	1c10      	adds	r0, r2, #0
   123b8:	1c19      	adds	r1, r3, #0
   123ba:	4b28      	ldr	r3, [pc, #160]	; (1245c <spi_transceive_buffer_wait+0x198>)
   123bc:	4798      	blx	r3
   123be:	1c03      	adds	r3, r0, #0
   123c0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   123c2:	1c3b      	adds	r3, r7, #0
   123c4:	3317      	adds	r3, #23
   123c6:	781b      	ldrb	r3, [r3, #0]
   123c8:	2b00      	cmp	r3, #0
   123ca:	d003      	beq.n	123d4 <spi_transceive_buffer_wait+0x110>
			/* Overflow, abort */
			return retval;
   123cc:	1c3b      	adds	r3, r7, #0
   123ce:	3317      	adds	r3, #23
   123d0:	781b      	ldrb	r3, [r3, #0]
   123d2:	e039      	b.n	12448 <spi_transceive_buffer_wait+0x184>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   123d4:	1c3b      	adds	r3, r7, #0
   123d6:	331c      	adds	r3, #28
   123d8:	881b      	ldrh	r3, [r3, #0]
   123da:	1c3a      	adds	r2, r7, #0
   123dc:	321c      	adds	r2, #28
   123de:	1c59      	adds	r1, r3, #1
   123e0:	8011      	strh	r1, [r2, #0]
   123e2:	687a      	ldr	r2, [r7, #4]
   123e4:	18d3      	adds	r3, r2, r3
   123e6:	1c3a      	adds	r2, r7, #0
   123e8:	3214      	adds	r2, #20
   123ea:	8812      	ldrh	r2, [r2, #0]
   123ec:	b2d2      	uxtb	r2, r2
   123ee:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   123f0:	68fb      	ldr	r3, [r7, #12]
   123f2:	799b      	ldrb	r3, [r3, #6]
   123f4:	2b01      	cmp	r3, #1
   123f6:	d10f      	bne.n	12418 <spi_transceive_buffer_wait+0x154>
			rx_data[rx_pos++] = (received_data >> 8);
   123f8:	1c3b      	adds	r3, r7, #0
   123fa:	331c      	adds	r3, #28
   123fc:	881b      	ldrh	r3, [r3, #0]
   123fe:	1c3a      	adds	r2, r7, #0
   12400:	321c      	adds	r2, #28
   12402:	1c59      	adds	r1, r3, #1
   12404:	8011      	strh	r1, [r2, #0]
   12406:	687a      	ldr	r2, [r7, #4]
   12408:	18d3      	adds	r3, r2, r3
   1240a:	1c3a      	adds	r2, r7, #0
   1240c:	3214      	adds	r2, #20
   1240e:	8812      	ldrh	r2, [r2, #0]
   12410:	0a12      	lsrs	r2, r2, #8
   12412:	b292      	uxth	r2, r2
   12414:	b2d2      	uxtb	r2, r2
   12416:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
   12418:	1cbb      	adds	r3, r7, #2
   1241a:	881b      	ldrh	r3, [r3, #0]
   1241c:	1cba      	adds	r2, r7, #2
   1241e:	1e59      	subs	r1, r3, #1
   12420:	8011      	strh	r1, [r2, #0]
   12422:	2b00      	cmp	r3, #0
   12424:	d000      	beq.n	12428 <spi_transceive_buffer_wait+0x164>
   12426:	e773      	b.n	12310 <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   12428:	68fb      	ldr	r3, [r7, #12]
   1242a:	795b      	ldrb	r3, [r3, #5]
   1242c:	2b01      	cmp	r3, #1
   1242e:	d10a      	bne.n	12446 <spi_transceive_buffer_wait+0x182>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   12430:	46c0      	nop			; (mov r8, r8)
   12432:	68fb      	ldr	r3, [r7, #12]
   12434:	1c18      	adds	r0, r3, #0
   12436:	4b0a      	ldr	r3, [pc, #40]	; (12460 <spi_transceive_buffer_wait+0x19c>)
   12438:	4798      	blx	r3
   1243a:	1c03      	adds	r3, r0, #0
   1243c:	2201      	movs	r2, #1
   1243e:	4053      	eors	r3, r2
   12440:	b2db      	uxtb	r3, r3
   12442:	2b00      	cmp	r3, #0
   12444:	d1f5      	bne.n	12432 <spi_transceive_buffer_wait+0x16e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
   12446:	2300      	movs	r3, #0
}
   12448:	1c18      	adds	r0, r3, #0
   1244a:	46bd      	mov	sp, r7
   1244c:	b009      	add	sp, #36	; 0x24
   1244e:	bd90      	pop	{r4, r7, pc}
   12450:	00011c3d 	.word	0x00011c3d
   12454:	00011c8d 	.word	0x00011c8d
   12458:	00011c65 	.word	0x00011c65
   1245c:	00011cd5 	.word	0x00011cd5
   12460:	00011c15 	.word	0x00011c15

00012464 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   12464:	b580      	push	{r7, lr}
   12466:	b082      	sub	sp, #8
   12468:	af00      	add	r7, sp, #0
   1246a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   1246c:	687b      	ldr	r3, [r7, #4]
   1246e:	2201      	movs	r2, #1
   12470:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   12472:	687b      	ldr	r3, [r7, #4]
   12474:	2200      	movs	r2, #0
   12476:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   12478:	687b      	ldr	r3, [r7, #4]
   1247a:	2206      	movs	r2, #6
   1247c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1247e:	687b      	ldr	r3, [r7, #4]
   12480:	2200      	movs	r2, #0
   12482:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   12484:	687b      	ldr	r3, [r7, #4]
   12486:	2200      	movs	r2, #0
   12488:	725a      	strb	r2, [r3, #9]
}
   1248a:	46bd      	mov	sp, r7
   1248c:	b002      	add	sp, #8
   1248e:	bd80      	pop	{r7, pc}

00012490 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12490:	b580      	push	{r7, lr}
   12492:	b082      	sub	sp, #8
   12494:	af00      	add	r7, sp, #0
   12496:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12498:	687b      	ldr	r3, [r7, #4]
   1249a:	2200      	movs	r2, #0
   1249c:	701a      	strb	r2, [r3, #0]
}
   1249e:	46bd      	mov	sp, r7
   124a0:	b002      	add	sp, #8
   124a2:	bd80      	pop	{r7, pc}

000124a4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   124a4:	b580      	push	{r7, lr}
   124a6:	b082      	sub	sp, #8
   124a8:	af00      	add	r7, sp, #0
   124aa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   124ac:	687b      	ldr	r3, [r7, #4]
   124ae:	2203      	movs	r2, #3
   124b0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   124b2:	687b      	ldr	r3, [r7, #4]
   124b4:	2200      	movs	r2, #0
   124b6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   124b8:	687b      	ldr	r3, [r7, #4]
   124ba:	2201      	movs	r2, #1
   124bc:	709a      	strb	r2, [r3, #2]
}
   124be:	46bd      	mov	sp, r7
   124c0:	b002      	add	sp, #8
   124c2:	bd80      	pop	{r7, pc}

000124c4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   124c4:	b580      	push	{r7, lr}
   124c6:	b082      	sub	sp, #8
   124c8:	af00      	add	r7, sp, #0
   124ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	2200      	movs	r2, #0
   124d0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   124d2:	687b      	ldr	r3, [r7, #4]
   124d4:	2200      	movs	r2, #0
   124d6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   124d8:	687b      	ldr	r3, [r7, #4]
   124da:	2200      	movs	r2, #0
   124dc:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   124de:	687b      	ldr	r3, [r7, #4]
   124e0:	2200      	movs	r2, #0
   124e2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   124e4:	687b      	ldr	r3, [r7, #4]
   124e6:	2200      	movs	r2, #0
   124e8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   124ea:	687b      	ldr	r3, [r7, #4]
   124ec:	2201      	movs	r2, #1
   124ee:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   124f0:	687b      	ldr	r3, [r7, #4]
   124f2:	2207      	movs	r2, #7
   124f4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   124f6:	687b      	ldr	r3, [r7, #4]
   124f8:	223f      	movs	r2, #63	; 0x3f
   124fa:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   124fc:	687b      	ldr	r3, [r7, #4]
   124fe:	2201      	movs	r2, #1
   12500:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   12502:	687b      	ldr	r3, [r7, #4]
   12504:	2201      	movs	r2, #1
   12506:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   12508:	687b      	ldr	r3, [r7, #4]
   1250a:	2206      	movs	r2, #6
   1250c:	821a      	strh	r2, [r3, #16]
}
   1250e:	46bd      	mov	sp, r7
   12510:	b002      	add	sp, #8
   12512:	bd80      	pop	{r7, pc}

00012514 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   12514:	b580      	push	{r7, lr}
   12516:	b082      	sub	sp, #8
   12518:	af00      	add	r7, sp, #0
   1251a:	1c02      	adds	r2, r0, #0
   1251c:	1dfb      	adds	r3, r7, #7
   1251e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
   12520:	4b03      	ldr	r3, [pc, #12]	; (12530 <system_cpu_clock_set_divider+0x1c>)
   12522:	1dfa      	adds	r2, r7, #7
   12524:	7812      	ldrb	r2, [r2, #0]
   12526:	721a      	strb	r2, [r3, #8]
}
   12528:	46bd      	mov	sp, r7
   1252a:	b002      	add	sp, #8
   1252c:	bd80      	pop	{r7, pc}
   1252e:	46c0      	nop			; (mov r8, r8)
   12530:	40000400 	.word	0x40000400

00012534 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   12534:	b580      	push	{r7, lr}
   12536:	b082      	sub	sp, #8
   12538:	af00      	add	r7, sp, #0
   1253a:	1c0a      	adds	r2, r1, #0
   1253c:	1dfb      	adds	r3, r7, #7
   1253e:	1c01      	adds	r1, r0, #0
   12540:	7019      	strb	r1, [r3, #0]
   12542:	1dbb      	adds	r3, r7, #6
   12544:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12546:	1dfb      	adds	r3, r7, #7
   12548:	781b      	ldrb	r3, [r3, #0]
   1254a:	2b01      	cmp	r3, #1
   1254c:	d008      	beq.n	12560 <system_apb_clock_set_divider+0x2c>
   1254e:	2b02      	cmp	r3, #2
   12550:	d00b      	beq.n	1256a <system_apb_clock_set_divider+0x36>
   12552:	2b00      	cmp	r3, #0
   12554:	d10e      	bne.n	12574 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   12556:	4b0b      	ldr	r3, [pc, #44]	; (12584 <system_apb_clock_set_divider+0x50>)
   12558:	1dba      	adds	r2, r7, #6
   1255a:	7812      	ldrb	r2, [r2, #0]
   1255c:	725a      	strb	r2, [r3, #9]
			break;
   1255e:	e00b      	b.n	12578 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   12560:	4b08      	ldr	r3, [pc, #32]	; (12584 <system_apb_clock_set_divider+0x50>)
   12562:	1dba      	adds	r2, r7, #6
   12564:	7812      	ldrb	r2, [r2, #0]
   12566:	729a      	strb	r2, [r3, #10]
			break;
   12568:	e006      	b.n	12578 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   1256a:	4b06      	ldr	r3, [pc, #24]	; (12584 <system_apb_clock_set_divider+0x50>)
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	72da      	strb	r2, [r3, #11]
			break;
   12572:	e001      	b.n	12578 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12574:	2317      	movs	r3, #23
   12576:	e000      	b.n	1257a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
   12578:	2300      	movs	r3, #0
}
   1257a:	1c18      	adds	r0, r3, #0
   1257c:	46bd      	mov	sp, r7
   1257e:	b002      	add	sp, #8
   12580:	bd80      	pop	{r7, pc}
   12582:	46c0      	nop			; (mov r8, r8)
   12584:	40000400 	.word	0x40000400

00012588 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   12588:	b580      	push	{r7, lr}
   1258a:	b082      	sub	sp, #8
   1258c:	af00      	add	r7, sp, #0
   1258e:	1c02      	adds	r2, r0, #0
   12590:	1dfb      	adds	r3, r7, #7
   12592:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   12594:	4b08      	ldr	r3, [pc, #32]	; (125b8 <system_flash_set_waitstates+0x30>)
   12596:	1dfa      	adds	r2, r7, #7
   12598:	7811      	ldrb	r1, [r2, #0]
   1259a:	220f      	movs	r2, #15
   1259c:	400a      	ands	r2, r1
   1259e:	b2d1      	uxtb	r1, r2
   125a0:	220f      	movs	r2, #15
   125a2:	400a      	ands	r2, r1
   125a4:	0052      	lsls	r2, r2, #1
   125a6:	6859      	ldr	r1, [r3, #4]
   125a8:	201e      	movs	r0, #30
   125aa:	4381      	bics	r1, r0
   125ac:	430a      	orrs	r2, r1
   125ae:	605a      	str	r2, [r3, #4]
}
   125b0:	46bd      	mov	sp, r7
   125b2:	b002      	add	sp, #8
   125b4:	bd80      	pop	{r7, pc}
   125b6:	46c0      	nop			; (mov r8, r8)
   125b8:	41004000 	.word	0x41004000

000125bc <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
   125bc:	b580      	push	{r7, lr}
   125be:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
   125c0:	4b02      	ldr	r3, [pc, #8]	; (125cc <system_get_device_id+0x10>)
   125c2:	699b      	ldr	r3, [r3, #24]
}
   125c4:	1c18      	adds	r0, r3, #0
   125c6:	46bd      	mov	sp, r7
   125c8:	bd80      	pop	{r7, pc}
   125ca:	46c0      	nop			; (mov r8, r8)
   125cc:	41002000 	.word	0x41002000

000125d0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
   125d0:	b580      	push	{r7, lr}
   125d2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   125d4:	46c0      	nop			; (mov r8, r8)
   125d6:	4b03      	ldr	r3, [pc, #12]	; (125e4 <_system_dfll_wait_for_sync+0x14>)
   125d8:	68da      	ldr	r2, [r3, #12]
   125da:	2310      	movs	r3, #16
   125dc:	4013      	ands	r3, r2
   125de:	d0fa      	beq.n	125d6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   125e0:	46bd      	mov	sp, r7
   125e2:	bd80      	pop	{r7, pc}
   125e4:	40000800 	.word	0x40000800

000125e8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   125e8:	b580      	push	{r7, lr}
   125ea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
   125ec:	4a0c      	ldr	r2, [pc, #48]	; (12620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   125ee:	4b0d      	ldr	r3, [pc, #52]	; (12624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   125f0:	681b      	ldr	r3, [r3, #0]
   125f2:	b29b      	uxth	r3, r3
   125f4:	2180      	movs	r1, #128	; 0x80
   125f6:	438b      	bics	r3, r1
   125f8:	b29b      	uxth	r3, r3
   125fa:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
   125fc:	4b0a      	ldr	r3, [pc, #40]	; (12628 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   125fe:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   12600:	4b07      	ldr	r3, [pc, #28]	; (12620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12602:	4a08      	ldr	r2, [pc, #32]	; (12624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12604:	6892      	ldr	r2, [r2, #8]
   12606:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   12608:	4b05      	ldr	r3, [pc, #20]	; (12620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1260a:	4a06      	ldr	r2, [pc, #24]	; (12624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1260c:	6852      	ldr	r2, [r2, #4]
   1260e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   12610:	4a03      	ldr	r2, [pc, #12]	; (12620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12612:	4b04      	ldr	r3, [pc, #16]	; (12624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12614:	681b      	ldr	r3, [r3, #0]
   12616:	b29b      	uxth	r3, r3
   12618:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1261a:	46bd      	mov	sp, r7
   1261c:	bd80      	pop	{r7, pc}
   1261e:	46c0      	nop			; (mov r8, r8)
   12620:	40000800 	.word	0x40000800
   12624:	2000051c 	.word	0x2000051c
   12628:	000125d1 	.word	0x000125d1

0001262c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1262c:	b580      	push	{r7, lr}
   1262e:	b082      	sub	sp, #8
   12630:	af00      	add	r7, sp, #0
   12632:	1c02      	adds	r2, r0, #0
   12634:	1dfb      	adds	r3, r7, #7
   12636:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12638:	1dfb      	adds	r3, r7, #7
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	2b07      	cmp	r3, #7
   1263e:	d836      	bhi.n	126ae <system_clock_source_get_hz+0x82>
   12640:	009a      	lsls	r2, r3, #2
   12642:	4b1d      	ldr	r3, [pc, #116]	; (126b8 <system_clock_source_get_hz+0x8c>)
   12644:	18d3      	adds	r3, r2, r3
   12646:	681b      	ldr	r3, [r3, #0]
   12648:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1264a:	4b1c      	ldr	r3, [pc, #112]	; (126bc <system_clock_source_get_hz+0x90>)
   1264c:	68db      	ldr	r3, [r3, #12]
   1264e:	e02f      	b.n	126b0 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   12650:	4b1b      	ldr	r3, [pc, #108]	; (126c0 <system_clock_source_get_hz+0x94>)
   12652:	6a1b      	ldr	r3, [r3, #32]
   12654:	0a1b      	lsrs	r3, r3, #8
   12656:	1c1a      	adds	r2, r3, #0
   12658:	2303      	movs	r3, #3
   1265a:	4013      	ands	r3, r2
   1265c:	b2db      	uxtb	r3, r3
   1265e:	4a19      	ldr	r2, [pc, #100]	; (126c4 <system_clock_source_get_hz+0x98>)
   12660:	1c11      	adds	r1, r2, #0
   12662:	40d9      	lsrs	r1, r3
   12664:	1c0b      	adds	r3, r1, #0
   12666:	e023      	b.n	126b0 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   12668:	2380      	movs	r3, #128	; 0x80
   1266a:	021b      	lsls	r3, r3, #8
   1266c:	e020      	b.n	126b0 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   1266e:	2380      	movs	r3, #128	; 0x80
   12670:	021b      	lsls	r3, r3, #8
   12672:	e01d      	b.n	126b0 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   12674:	4b11      	ldr	r3, [pc, #68]	; (126bc <system_clock_source_get_hz+0x90>)
   12676:	691b      	ldr	r3, [r3, #16]
   12678:	e01a      	b.n	126b0 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1267a:	4b10      	ldr	r3, [pc, #64]	; (126bc <system_clock_source_get_hz+0x90>)
   1267c:	681a      	ldr	r2, [r3, #0]
   1267e:	2302      	movs	r3, #2
   12680:	4013      	ands	r3, r2
   12682:	d101      	bne.n	12688 <system_clock_source_get_hz+0x5c>
			return 0;
   12684:	2300      	movs	r3, #0
   12686:	e013      	b.n	126b0 <system_clock_source_get_hz+0x84>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   12688:	4b0f      	ldr	r3, [pc, #60]	; (126c8 <system_clock_source_get_hz+0x9c>)
   1268a:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   1268c:	4b0b      	ldr	r3, [pc, #44]	; (126bc <system_clock_source_get_hz+0x90>)
   1268e:	681a      	ldr	r2, [r3, #0]
   12690:	2304      	movs	r3, #4
   12692:	4013      	ands	r3, r2
   12694:	d009      	beq.n	126aa <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12696:	2000      	movs	r0, #0
   12698:	4b0c      	ldr	r3, [pc, #48]	; (126cc <system_clock_source_get_hz+0xa0>)
   1269a:	4798      	blx	r3
   1269c:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
   1269e:	4b07      	ldr	r3, [pc, #28]	; (126bc <system_clock_source_get_hz+0x90>)
   126a0:	689b      	ldr	r3, [r3, #8]
   126a2:	041b      	lsls	r3, r3, #16
   126a4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   126a6:	4353      	muls	r3, r2
   126a8:	e002      	b.n	126b0 <system_clock_source_get_hz+0x84>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   126aa:	4b09      	ldr	r3, [pc, #36]	; (126d0 <system_clock_source_get_hz+0xa4>)
   126ac:	e000      	b.n	126b0 <system_clock_source_get_hz+0x84>

	default:
		return 0;
   126ae:	2300      	movs	r3, #0
	}
}
   126b0:	1c18      	adds	r0, r3, #0
   126b2:	46bd      	mov	sp, r7
   126b4:	b002      	add	sp, #8
   126b6:	bd80      	pop	{r7, pc}
   126b8:	000173f8 	.word	0x000173f8
   126bc:	2000051c 	.word	0x2000051c
   126c0:	40000800 	.word	0x40000800
   126c4:	007a1200 	.word	0x007a1200
   126c8:	000125d1 	.word	0x000125d1
   126cc:	00013005 	.word	0x00013005
   126d0:	02dc6c00 	.word	0x02dc6c00

000126d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   126d4:	b580      	push	{r7, lr}
   126d6:	b084      	sub	sp, #16
   126d8:	af00      	add	r7, sp, #0
   126da:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   126dc:	4b16      	ldr	r3, [pc, #88]	; (12738 <system_clock_source_osc8m_set_config+0x64>)
   126de:	6a1b      	ldr	r3, [r3, #32]
   126e0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   126e2:	687b      	ldr	r3, [r7, #4]
   126e4:	781b      	ldrb	r3, [r3, #0]
   126e6:	1c1a      	adds	r2, r3, #0
   126e8:	2303      	movs	r3, #3
   126ea:	4013      	ands	r3, r2
   126ec:	b2d9      	uxtb	r1, r3
   126ee:	1c3b      	adds	r3, r7, #0
   126f0:	330d      	adds	r3, #13
   126f2:	2203      	movs	r2, #3
   126f4:	400a      	ands	r2, r1
   126f6:	7819      	ldrb	r1, [r3, #0]
   126f8:	2003      	movs	r0, #3
   126fa:	4381      	bics	r1, r0
   126fc:	430a      	orrs	r2, r1
   126fe:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	789a      	ldrb	r2, [r3, #2]
   12704:	1c3b      	adds	r3, r7, #0
   12706:	330c      	adds	r3, #12
   12708:	01d2      	lsls	r2, r2, #7
   1270a:	7818      	ldrb	r0, [r3, #0]
   1270c:	217f      	movs	r1, #127	; 0x7f
   1270e:	4001      	ands	r1, r0
   12710:	430a      	orrs	r2, r1
   12712:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	7859      	ldrb	r1, [r3, #1]
   12718:	1c3b      	adds	r3, r7, #0
   1271a:	330c      	adds	r3, #12
   1271c:	2201      	movs	r2, #1
   1271e:	400a      	ands	r2, r1
   12720:	0192      	lsls	r2, r2, #6
   12722:	7819      	ldrb	r1, [r3, #0]
   12724:	2040      	movs	r0, #64	; 0x40
   12726:	4381      	bics	r1, r0
   12728:	430a      	orrs	r2, r1
   1272a:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   1272c:	4b02      	ldr	r3, [pc, #8]	; (12738 <system_clock_source_osc8m_set_config+0x64>)
   1272e:	68fa      	ldr	r2, [r7, #12]
   12730:	621a      	str	r2, [r3, #32]
}
   12732:	46bd      	mov	sp, r7
   12734:	b004      	add	sp, #16
   12736:	bd80      	pop	{r7, pc}
   12738:	40000800 	.word	0x40000800

0001273c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   1273c:	b580      	push	{r7, lr}
   1273e:	b084      	sub	sp, #16
   12740:	af00      	add	r7, sp, #0
   12742:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
   12744:	4b39      	ldr	r3, [pc, #228]	; (1282c <system_clock_source_dfll_set_config+0xf0>)
   12746:	4798      	blx	r3
   12748:	1c03      	adds	r3, r0, #0
   1274a:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   1274c:	68fa      	ldr	r2, [r7, #12]
   1274e:	23f0      	movs	r3, #240	; 0xf0
   12750:	011b      	lsls	r3, r3, #4
   12752:	4013      	ands	r3, r2
   12754:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	0a1b      	lsrs	r3, r3, #8
   1275a:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
   1275c:	68fb      	ldr	r3, [r7, #12]
   1275e:	2b02      	cmp	r3, #2
   12760:	d80f      	bhi.n	12782 <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   12762:	687b      	ldr	r3, [r7, #4]
   12764:	7a1b      	ldrb	r3, [r3, #8]
   12766:	021b      	lsls	r3, r3, #8
   12768:	1c1a      	adds	r2, r3, #0
   1276a:	23f8      	movs	r3, #248	; 0xf8
   1276c:	015b      	lsls	r3, r3, #5
   1276e:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
   12770:	687b      	ldr	r3, [r7, #4]
   12772:	895b      	ldrh	r3, [r3, #10]
   12774:	1c19      	adds	r1, r3, #0
   12776:	23ff      	movs	r3, #255	; 0xff
   12778:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   1277a:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
   1277c:	4b2c      	ldr	r3, [pc, #176]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   1277e:	605a      	str	r2, [r3, #4]
   12780:	e00b      	b.n	1279a <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   12782:	687b      	ldr	r3, [r7, #4]
   12784:	7a1b      	ldrb	r3, [r3, #8]
   12786:	029b      	lsls	r3, r3, #10
   12788:	041b      	lsls	r3, r3, #16
   1278a:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
   1278c:	687b      	ldr	r3, [r7, #4]
   1278e:	895b      	ldrh	r3, [r3, #10]
   12790:	059b      	lsls	r3, r3, #22
   12792:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   12794:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
   12796:	4b26      	ldr	r3, [pc, #152]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   12798:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1279a:	687b      	ldr	r3, [r7, #4]
   1279c:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   1279e:	687b      	ldr	r3, [r7, #4]
   127a0:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   127a2:	4313      	orrs	r3, r2
   127a4:	b2db      	uxtb	r3, r3
   127a6:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   127a8:	687b      	ldr	r3, [r7, #4]
   127aa:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   127ac:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   127ae:	687b      	ldr	r3, [r7, #4]
   127b0:	889b      	ldrh	r3, [r3, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   127b2:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   127b4:	687b      	ldr	r3, [r7, #4]
   127b6:	785b      	ldrb	r3, [r3, #1]
   127b8:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   127ba:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
   127bc:	4b1c      	ldr	r3, [pc, #112]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   127be:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   127c0:	687b      	ldr	r3, [r7, #4]
   127c2:	781b      	ldrb	r3, [r3, #0]
   127c4:	2b04      	cmp	r3, #4
   127c6:	d12e      	bne.n	12826 <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
   127c8:	68fb      	ldr	r3, [r7, #12]
   127ca:	2b02      	cmp	r3, #2
   127cc:	d814      	bhi.n	127f8 <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   127ce:	687b      	ldr	r3, [r7, #4]
   127d0:	7b1b      	ldrb	r3, [r3, #12]
   127d2:	061b      	lsls	r3, r3, #24
   127d4:	1c1a      	adds	r2, r3, #0
   127d6:	23f8      	movs	r3, #248	; 0xf8
   127d8:	055b      	lsls	r3, r3, #21
   127da:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   127dc:	687b      	ldr	r3, [r7, #4]
   127de:	89db      	ldrh	r3, [r3, #14]
   127e0:	041b      	lsls	r3, r3, #16
   127e2:	1c19      	adds	r1, r3, #0
   127e4:	23ff      	movs	r3, #255	; 0xff
   127e6:	041b      	lsls	r3, r3, #16
   127e8:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   127ea:	431a      	orrs	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	8a1b      	ldrh	r3, [r3, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   127f0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
   127f2:	4b0f      	ldr	r3, [pc, #60]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   127f4:	609a      	str	r2, [r3, #8]
   127f6:	e00f      	b.n	12818 <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   127f8:	687b      	ldr	r3, [r7, #4]
   127fa:	7b1b      	ldrb	r3, [r3, #12]
   127fc:	069b      	lsls	r3, r3, #26
   127fe:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	89db      	ldrh	r3, [r3, #14]
   12804:	041b      	lsls	r3, r3, #16
   12806:	1c19      	adds	r1, r3, #0
   12808:	4b0a      	ldr	r3, [pc, #40]	; (12834 <system_clock_source_dfll_set_config+0xf8>)
   1280a:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   1280c:	431a      	orrs	r2, r3
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   1280e:	687b      	ldr	r3, [r7, #4]
   12810:	8a1b      	ldrh	r3, [r3, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   12812:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
   12814:	4b06      	ldr	r3, [pc, #24]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   12816:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   12818:	4b05      	ldr	r3, [pc, #20]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   1281a:	681a      	ldr	r2, [r3, #0]
   1281c:	687b      	ldr	r3, [r7, #4]
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	431a      	orrs	r2, r3
   12822:	4b03      	ldr	r3, [pc, #12]	; (12830 <system_clock_source_dfll_set_config+0xf4>)
   12824:	601a      	str	r2, [r3, #0]
	}
}
   12826:	46bd      	mov	sp, r7
   12828:	b004      	add	sp, #16
   1282a:	bd80      	pop	{r7, pc}
   1282c:	000125bd 	.word	0x000125bd
   12830:	2000051c 	.word	0x2000051c
   12834:	03ff0000 	.word	0x03ff0000

00012838 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   12838:	b580      	push	{r7, lr}
   1283a:	b082      	sub	sp, #8
   1283c:	af00      	add	r7, sp, #0
   1283e:	1c02      	adds	r2, r0, #0
   12840:	1dfb      	adds	r3, r7, #7
   12842:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12844:	1dfb      	adds	r3, r7, #7
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	2b07      	cmp	r3, #7
   1284a:	d830      	bhi.n	128ae <system_clock_source_enable+0x76>
   1284c:	009a      	lsls	r2, r3, #2
   1284e:	4b1b      	ldr	r3, [pc, #108]	; (128bc <system_clock_source_enable+0x84>)
   12850:	18d3      	adds	r3, r2, r3
   12852:	681b      	ldr	r3, [r3, #0]
   12854:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   12856:	4b1a      	ldr	r3, [pc, #104]	; (128c0 <system_clock_source_enable+0x88>)
   12858:	4a19      	ldr	r2, [pc, #100]	; (128c0 <system_clock_source_enable+0x88>)
   1285a:	6a12      	ldr	r2, [r2, #32]
   1285c:	2102      	movs	r1, #2
   1285e:	430a      	orrs	r2, r1
   12860:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   12862:	2300      	movs	r3, #0
   12864:	e026      	b.n	128b4 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   12866:	4b16      	ldr	r3, [pc, #88]	; (128c0 <system_clock_source_enable+0x88>)
   12868:	4a15      	ldr	r2, [pc, #84]	; (128c0 <system_clock_source_enable+0x88>)
   1286a:	6992      	ldr	r2, [r2, #24]
   1286c:	2102      	movs	r1, #2
   1286e:	430a      	orrs	r2, r1
   12870:	619a      	str	r2, [r3, #24]
		break;
   12872:	e01e      	b.n	128b2 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   12874:	4b12      	ldr	r3, [pc, #72]	; (128c0 <system_clock_source_enable+0x88>)
   12876:	4a12      	ldr	r2, [pc, #72]	; (128c0 <system_clock_source_enable+0x88>)
   12878:	8a12      	ldrh	r2, [r2, #16]
   1287a:	b292      	uxth	r2, r2
   1287c:	2102      	movs	r1, #2
   1287e:	430a      	orrs	r2, r1
   12880:	b292      	uxth	r2, r2
   12882:	821a      	strh	r2, [r3, #16]
		break;
   12884:	e015      	b.n	128b2 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   12886:	4b0e      	ldr	r3, [pc, #56]	; (128c0 <system_clock_source_enable+0x88>)
   12888:	4a0d      	ldr	r2, [pc, #52]	; (128c0 <system_clock_source_enable+0x88>)
   1288a:	8a92      	ldrh	r2, [r2, #20]
   1288c:	b292      	uxth	r2, r2
   1288e:	2102      	movs	r1, #2
   12890:	430a      	orrs	r2, r1
   12892:	b292      	uxth	r2, r2
   12894:	829a      	strh	r2, [r3, #20]
		break;
   12896:	e00c      	b.n	128b2 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   12898:	4b0a      	ldr	r3, [pc, #40]	; (128c4 <system_clock_source_enable+0x8c>)
   1289a:	681b      	ldr	r3, [r3, #0]
   1289c:	2202      	movs	r2, #2
   1289e:	431a      	orrs	r2, r3
   128a0:	4b08      	ldr	r3, [pc, #32]	; (128c4 <system_clock_source_enable+0x8c>)
   128a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   128a4:	4b08      	ldr	r3, [pc, #32]	; (128c8 <system_clock_source_enable+0x90>)
   128a6:	4798      	blx	r3
		break;
   128a8:	e003      	b.n	128b2 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   128aa:	2300      	movs	r3, #0
   128ac:	e002      	b.n	128b4 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   128ae:	2317      	movs	r3, #23
   128b0:	e000      	b.n	128b4 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
   128b2:	2300      	movs	r3, #0
}
   128b4:	1c18      	adds	r0, r3, #0
   128b6:	46bd      	mov	sp, r7
   128b8:	b002      	add	sp, #8
   128ba:	bd80      	pop	{r7, pc}
   128bc:	00017418 	.word	0x00017418
   128c0:	40000800 	.word	0x40000800
   128c4:	2000051c 	.word	0x2000051c
   128c8:	000125e9 	.word	0x000125e9

000128cc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   128cc:	b580      	push	{r7, lr}
   128ce:	b084      	sub	sp, #16
   128d0:	af00      	add	r7, sp, #0
   128d2:	1c02      	adds	r2, r0, #0
   128d4:	1dfb      	adds	r3, r7, #7
   128d6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   128d8:	2300      	movs	r3, #0
   128da:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   128dc:	1dfb      	adds	r3, r7, #7
   128de:	781b      	ldrb	r3, [r3, #0]
   128e0:	2b07      	cmp	r3, #7
   128e2:	d815      	bhi.n	12910 <system_clock_source_is_ready+0x44>
   128e4:	009a      	lsls	r2, r3, #2
   128e6:	4b12      	ldr	r3, [pc, #72]	; (12930 <system_clock_source_is_ready+0x64>)
   128e8:	18d3      	adds	r3, r2, r3
   128ea:	681b      	ldr	r3, [r3, #0]
   128ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   128ee:	2308      	movs	r3, #8
   128f0:	60fb      	str	r3, [r7, #12]
		break;
   128f2:	e00f      	b.n	12914 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   128f4:	2304      	movs	r3, #4
   128f6:	60fb      	str	r3, [r7, #12]
		break;
   128f8:	e00c      	b.n	12914 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   128fa:	2301      	movs	r3, #1
   128fc:	60fb      	str	r3, [r7, #12]
		break;
   128fe:	e009      	b.n	12914 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   12900:	2302      	movs	r3, #2
   12902:	60fb      	str	r3, [r7, #12]
		break;
   12904:	e006      	b.n	12914 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   12906:	23d0      	movs	r3, #208	; 0xd0
   12908:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   1290a:	e003      	b.n	12914 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1290c:	2301      	movs	r3, #1
   1290e:	e00a      	b.n	12926 <system_clock_source_is_ready+0x5a>

	default:
		return false;
   12910:	2300      	movs	r3, #0
   12912:	e008      	b.n	12926 <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   12914:	4b07      	ldr	r3, [pc, #28]	; (12934 <system_clock_source_is_ready+0x68>)
   12916:	68db      	ldr	r3, [r3, #12]
   12918:	68fa      	ldr	r2, [r7, #12]
   1291a:	401a      	ands	r2, r3
   1291c:	68fb      	ldr	r3, [r7, #12]
   1291e:	1ad3      	subs	r3, r2, r3
   12920:	425a      	negs	r2, r3
   12922:	4153      	adcs	r3, r2
   12924:	b2db      	uxtb	r3, r3
}
   12926:	1c18      	adds	r0, r3, #0
   12928:	46bd      	mov	sp, r7
   1292a:	b004      	add	sp, #16
   1292c:	bd80      	pop	{r7, pc}
   1292e:	46c0      	nop			; (mov r8, r8)
   12930:	00017438 	.word	0x00017438
   12934:	40000800 	.word	0x40000800

00012938 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
   12938:	b580      	push	{r7, lr}
   1293a:	b0a2      	sub	sp, #136	; 0x88
   1293c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
   1293e:	4b77      	ldr	r3, [pc, #476]	; (12b1c <system_clock_init+0x1e4>)
   12940:	4a77      	ldr	r2, [pc, #476]	; (12b20 <system_clock_init+0x1e8>)
   12942:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_BOD12DET | SYSCTRL_INTFLAG_BOD33DET |
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   12944:	2003      	movs	r0, #3
   12946:	4b77      	ldr	r3, [pc, #476]	; (12b24 <system_clock_init+0x1ec>)
   12948:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   1294a:	1c3b      	adds	r3, r7, #0
   1294c:	3374      	adds	r3, #116	; 0x74
   1294e:	1c18      	adds	r0, r3, #0
   12950:	4b75      	ldr	r3, [pc, #468]	; (12b28 <system_clock_init+0x1f0>)
   12952:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   12954:	1c3b      	adds	r3, r7, #0
   12956:	3374      	adds	r3, #116	; 0x74
   12958:	2204      	movs	r2, #4
   1295a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   1295c:	1c3b      	adds	r3, r7, #0
   1295e:	3374      	adds	r3, #116	; 0x74
   12960:	2200      	movs	r2, #0
   12962:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   12964:	1c3b      	adds	r3, r7, #0
   12966:	3374      	adds	r3, #116	; 0x74
   12968:	2200      	movs	r2, #0
   1296a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   1296c:	1c3b      	adds	r3, r7, #0
   1296e:	3374      	adds	r3, #116	; 0x74
   12970:	2200      	movs	r2, #0
   12972:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   12974:	1c3b      	adds	r3, r7, #0
   12976:	3374      	adds	r3, #116	; 0x74
   12978:	2200      	movs	r2, #0
   1297a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1297c:	1c3b      	adds	r3, r7, #0
   1297e:	3374      	adds	r3, #116	; 0x74
   12980:	2200      	movs	r2, #0
   12982:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   12984:	1c3b      	adds	r3, r7, #0
   12986:	3374      	adds	r3, #116	; 0x74
   12988:	2206      	movs	r2, #6
   1298a:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1298c:	1c3b      	adds	r3, r7, #0
   1298e:	3374      	adds	r3, #116	; 0x74
   12990:	2207      	movs	r2, #7
   12992:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   12994:	1c3b      	adds	r3, r7, #0
   12996:	3374      	adds	r3, #116	; 0x74
   12998:	223f      	movs	r2, #63	; 0x3f
   1299a:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
   1299c:	1c3b      	adds	r3, r7, #0
   1299e:	3374      	adds	r3, #116	; 0x74
   129a0:	1c18      	adds	r0, r3, #0
   129a2:	4b62      	ldr	r3, [pc, #392]	; (12b2c <system_clock_init+0x1f4>)
   129a4:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   129a6:	1c3b      	adds	r3, r7, #0
   129a8:	3370      	adds	r3, #112	; 0x70
   129aa:	1c18      	adds	r0, r3, #0
   129ac:	4b60      	ldr	r3, [pc, #384]	; (12b30 <system_clock_init+0x1f8>)
   129ae:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   129b0:	1c3b      	adds	r3, r7, #0
   129b2:	3370      	adds	r3, #112	; 0x70
   129b4:	2200      	movs	r2, #0
   129b6:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   129b8:	1c3b      	adds	r3, r7, #0
   129ba:	3370      	adds	r3, #112	; 0x70
   129bc:	2201      	movs	r2, #1
   129be:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   129c0:	1c3b      	adds	r3, r7, #0
   129c2:	3370      	adds	r3, #112	; 0x70
   129c4:	2200      	movs	r2, #0
   129c6:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   129c8:	1c3b      	adds	r3, r7, #0
   129ca:	3370      	adds	r3, #112	; 0x70
   129cc:	1c18      	adds	r0, r3, #0
   129ce:	4b59      	ldr	r3, [pc, #356]	; (12b34 <system_clock_init+0x1fc>)
   129d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   129d2:	2006      	movs	r0, #6
   129d4:	4b58      	ldr	r3, [pc, #352]	; (12b38 <system_clock_init+0x200>)
   129d6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   129d8:	4b58      	ldr	r3, [pc, #352]	; (12b3c <system_clock_init+0x204>)
   129da:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   129dc:	1c3b      	adds	r3, r7, #0
   129de:	3358      	adds	r3, #88	; 0x58
   129e0:	1c18      	adds	r0, r3, #0
   129e2:	4b57      	ldr	r3, [pc, #348]	; (12b40 <system_clock_init+0x208>)
   129e4:	4798      	blx	r3
   129e6:	1c3b      	adds	r3, r7, #0
   129e8:	3358      	adds	r3, #88	; 0x58
   129ea:	2206      	movs	r2, #6
   129ec:	701a      	strb	r2, [r3, #0]
   129ee:	1c3b      	adds	r3, r7, #0
   129f0:	3358      	adds	r3, #88	; 0x58
   129f2:	2201      	movs	r2, #1
   129f4:	605a      	str	r2, [r3, #4]
   129f6:	1c3b      	adds	r3, r7, #0
   129f8:	3358      	adds	r3, #88	; 0x58
   129fa:	2200      	movs	r2, #0
   129fc:	721a      	strb	r2, [r3, #8]
   129fe:	1c3b      	adds	r3, r7, #0
   12a00:	3358      	adds	r3, #88	; 0x58
   12a02:	2200      	movs	r2, #0
   12a04:	725a      	strb	r2, [r3, #9]
   12a06:	1c3b      	adds	r3, r7, #0
   12a08:	3358      	adds	r3, #88	; 0x58
   12a0a:	2001      	movs	r0, #1
   12a0c:	1c19      	adds	r1, r3, #0
   12a0e:	4b4d      	ldr	r3, [pc, #308]	; (12b44 <system_clock_init+0x20c>)
   12a10:	4798      	blx	r3
   12a12:	2001      	movs	r0, #1
   12a14:	4b4c      	ldr	r3, [pc, #304]	; (12b48 <system_clock_init+0x210>)
   12a16:	4798      	blx	r3
   12a18:	1c3b      	adds	r3, r7, #0
   12a1a:	3340      	adds	r3, #64	; 0x40
   12a1c:	1c18      	adds	r0, r3, #0
   12a1e:	4b48      	ldr	r3, [pc, #288]	; (12b40 <system_clock_init+0x208>)
   12a20:	4798      	blx	r3
   12a22:	1c3b      	adds	r3, r7, #0
   12a24:	3340      	adds	r3, #64	; 0x40
   12a26:	2206      	movs	r2, #6
   12a28:	701a      	strb	r2, [r3, #0]
   12a2a:	1c3b      	adds	r3, r7, #0
   12a2c:	3340      	adds	r3, #64	; 0x40
   12a2e:	2201      	movs	r2, #1
   12a30:	605a      	str	r2, [r3, #4]
   12a32:	1c3b      	adds	r3, r7, #0
   12a34:	3340      	adds	r3, #64	; 0x40
   12a36:	2200      	movs	r2, #0
   12a38:	721a      	strb	r2, [r3, #8]
   12a3a:	1c3b      	adds	r3, r7, #0
   12a3c:	3340      	adds	r3, #64	; 0x40
   12a3e:	2200      	movs	r2, #0
   12a40:	725a      	strb	r2, [r3, #9]
   12a42:	1c3b      	adds	r3, r7, #0
   12a44:	3340      	adds	r3, #64	; 0x40
   12a46:	2003      	movs	r0, #3
   12a48:	1c19      	adds	r1, r3, #0
   12a4a:	4b3e      	ldr	r3, [pc, #248]	; (12b44 <system_clock_init+0x20c>)
   12a4c:	4798      	blx	r3
   12a4e:	2003      	movs	r0, #3
   12a50:	4b3d      	ldr	r3, [pc, #244]	; (12b48 <system_clock_init+0x210>)
   12a52:	4798      	blx	r3
   12a54:	1c3b      	adds	r3, r7, #0
   12a56:	3334      	adds	r3, #52	; 0x34
   12a58:	1c18      	adds	r0, r3, #0
   12a5a:	4b39      	ldr	r3, [pc, #228]	; (12b40 <system_clock_init+0x208>)
   12a5c:	4798      	blx	r3
   12a5e:	1c3b      	adds	r3, r7, #0
   12a60:	3334      	adds	r3, #52	; 0x34
   12a62:	2206      	movs	r2, #6
   12a64:	701a      	strb	r2, [r3, #0]
   12a66:	1c3b      	adds	r3, r7, #0
   12a68:	3334      	adds	r3, #52	; 0x34
   12a6a:	2201      	movs	r2, #1
   12a6c:	605a      	str	r2, [r3, #4]
   12a6e:	1c3b      	adds	r3, r7, #0
   12a70:	3334      	adds	r3, #52	; 0x34
   12a72:	2200      	movs	r2, #0
   12a74:	721a      	strb	r2, [r3, #8]
   12a76:	1c3b      	adds	r3, r7, #0
   12a78:	3334      	adds	r3, #52	; 0x34
   12a7a:	2200      	movs	r2, #0
   12a7c:	725a      	strb	r2, [r3, #9]
   12a7e:	1c3b      	adds	r3, r7, #0
   12a80:	3334      	adds	r3, #52	; 0x34
   12a82:	2004      	movs	r0, #4
   12a84:	1c19      	adds	r1, r3, #0
   12a86:	4b2f      	ldr	r3, [pc, #188]	; (12b44 <system_clock_init+0x20c>)
   12a88:	4798      	blx	r3
   12a8a:	2004      	movs	r0, #4
   12a8c:	4b2e      	ldr	r3, [pc, #184]	; (12b48 <system_clock_init+0x210>)
   12a8e:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   12a90:	1c3b      	adds	r3, r7, #0
   12a92:	330c      	adds	r3, #12
   12a94:	1c18      	adds	r0, r3, #0
   12a96:	4b2d      	ldr	r3, [pc, #180]	; (12b4c <system_clock_init+0x214>)
   12a98:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   12a9a:	1c3b      	adds	r3, r7, #0
   12a9c:	330c      	adds	r3, #12
   12a9e:	2201      	movs	r2, #1
   12aa0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   12aa2:	1c3b      	adds	r3, r7, #0
   12aa4:	330c      	adds	r3, #12
   12aa6:	2000      	movs	r0, #0
   12aa8:	1c19      	adds	r1, r3, #0
   12aaa:	4b29      	ldr	r3, [pc, #164]	; (12b50 <system_clock_init+0x218>)
   12aac:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   12aae:	2000      	movs	r0, #0
   12ab0:	4b28      	ldr	r3, [pc, #160]	; (12b54 <system_clock_init+0x21c>)
   12ab2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   12ab4:	2007      	movs	r0, #7
   12ab6:	4b20      	ldr	r3, [pc, #128]	; (12b38 <system_clock_init+0x200>)
   12ab8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   12aba:	46c0      	nop			; (mov r8, r8)
   12abc:	2007      	movs	r0, #7
   12abe:	4b26      	ldr	r3, [pc, #152]	; (12b58 <system_clock_init+0x220>)
   12ac0:	4798      	blx	r3
   12ac2:	1c03      	adds	r3, r0, #0
   12ac4:	2201      	movs	r2, #1
   12ac6:	4053      	eors	r3, r2
   12ac8:	b2db      	uxtb	r3, r3
   12aca:	2b00      	cmp	r3, #0
   12acc:	d1f6      	bne.n	12abc <system_clock_init+0x184>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   12ace:	2000      	movs	r0, #0
   12ad0:	4b22      	ldr	r3, [pc, #136]	; (12b5c <system_clock_init+0x224>)
   12ad2:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   12ad4:	2000      	movs	r0, #0
   12ad6:	2100      	movs	r1, #0
   12ad8:	4b21      	ldr	r3, [pc, #132]	; (12b60 <system_clock_init+0x228>)
   12ada:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   12adc:	2001      	movs	r0, #1
   12ade:	2100      	movs	r1, #0
   12ae0:	4b1f      	ldr	r3, [pc, #124]	; (12b60 <system_clock_init+0x228>)
   12ae2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   12ae4:	1c3b      	adds	r3, r7, #0
   12ae6:	1c18      	adds	r0, r3, #0
   12ae8:	4b15      	ldr	r3, [pc, #84]	; (12b40 <system_clock_init+0x208>)
   12aea:	4798      	blx	r3
   12aec:	1c3b      	adds	r3, r7, #0
   12aee:	2207      	movs	r2, #7
   12af0:	701a      	strb	r2, [r3, #0]
   12af2:	1c3b      	adds	r3, r7, #0
   12af4:	2201      	movs	r2, #1
   12af6:	605a      	str	r2, [r3, #4]
   12af8:	1c3b      	adds	r3, r7, #0
   12afa:	2200      	movs	r2, #0
   12afc:	721a      	strb	r2, [r3, #8]
   12afe:	1c3b      	adds	r3, r7, #0
   12b00:	2200      	movs	r2, #0
   12b02:	725a      	strb	r2, [r3, #9]
   12b04:	1c3b      	adds	r3, r7, #0
   12b06:	2000      	movs	r0, #0
   12b08:	1c19      	adds	r1, r3, #0
   12b0a:	4b0e      	ldr	r3, [pc, #56]	; (12b44 <system_clock_init+0x20c>)
   12b0c:	4798      	blx	r3
   12b0e:	2000      	movs	r0, #0
   12b10:	4b0d      	ldr	r3, [pc, #52]	; (12b48 <system_clock_init+0x210>)
   12b12:	4798      	blx	r3
#endif
}
   12b14:	46bd      	mov	sp, r7
   12b16:	b022      	add	sp, #136	; 0x88
   12b18:	bd80      	pop	{r7, pc}
   12b1a:	46c0      	nop			; (mov r8, r8)
   12b1c:	40000800 	.word	0x40000800
   12b20:	00003610 	.word	0x00003610
   12b24:	00012589 	.word	0x00012589
   12b28:	000124c5 	.word	0x000124c5
   12b2c:	0001273d 	.word	0x0001273d
   12b30:	000124a5 	.word	0x000124a5
   12b34:	000126d5 	.word	0x000126d5
   12b38:	00012839 	.word	0x00012839
   12b3c:	00012c05 	.word	0x00012c05
   12b40:	00012465 	.word	0x00012465
   12b44:	00012c35 	.word	0x00012c35
   12b48:	00012d5d 	.word	0x00012d5d
   12b4c:	00012491 	.word	0x00012491
   12b50:	00012ea5 	.word	0x00012ea5
   12b54:	00012ee5 	.word	0x00012ee5
   12b58:	000128cd 	.word	0x000128cd
   12b5c:	00012515 	.word	0x00012515
   12b60:	00012535 	.word	0x00012535

00012b64 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   12b64:	b580      	push	{r7, lr}
   12b66:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
   12b68:	4b06      	ldr	r3, [pc, #24]	; (12b84 <system_gclk_is_syncing+0x20>)
   12b6a:	785b      	ldrb	r3, [r3, #1]
   12b6c:	b2db      	uxtb	r3, r3
   12b6e:	b2db      	uxtb	r3, r3
   12b70:	b25b      	sxtb	r3, r3
   12b72:	2b00      	cmp	r3, #0
   12b74:	da01      	bge.n	12b7a <system_gclk_is_syncing+0x16>
		return true;
   12b76:	2301      	movs	r3, #1
   12b78:	e000      	b.n	12b7c <system_gclk_is_syncing+0x18>
	}

	return false;
   12b7a:	2300      	movs	r3, #0
}
   12b7c:	1c18      	adds	r0, r3, #0
   12b7e:	46bd      	mov	sp, r7
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	40000c00 	.word	0x40000c00

00012b88 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12b88:	b580      	push	{r7, lr}
   12b8a:	b082      	sub	sp, #8
   12b8c:	af00      	add	r7, sp, #0
   12b8e:	1c02      	adds	r2, r0, #0
   12b90:	6039      	str	r1, [r7, #0]
   12b92:	1dfb      	adds	r3, r7, #7
   12b94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12b96:	1dfb      	adds	r3, r7, #7
   12b98:	781b      	ldrb	r3, [r3, #0]
   12b9a:	2b01      	cmp	r3, #1
   12b9c:	d00a      	beq.n	12bb4 <system_apb_clock_set_mask+0x2c>
   12b9e:	2b02      	cmp	r3, #2
   12ba0:	d00f      	beq.n	12bc2 <system_apb_clock_set_mask+0x3a>
   12ba2:	2b00      	cmp	r3, #0
   12ba4:	d114      	bne.n	12bd0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12ba6:	4b0e      	ldr	r3, [pc, #56]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12ba8:	4a0d      	ldr	r2, [pc, #52]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12baa:	6991      	ldr	r1, [r2, #24]
   12bac:	683a      	ldr	r2, [r7, #0]
   12bae:	430a      	orrs	r2, r1
   12bb0:	619a      	str	r2, [r3, #24]
			break;
   12bb2:	e00f      	b.n	12bd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12bb4:	4b0a      	ldr	r3, [pc, #40]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12bb6:	4a0a      	ldr	r2, [pc, #40]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12bb8:	69d1      	ldr	r1, [r2, #28]
   12bba:	683a      	ldr	r2, [r7, #0]
   12bbc:	430a      	orrs	r2, r1
   12bbe:	61da      	str	r2, [r3, #28]
			break;
   12bc0:	e008      	b.n	12bd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12bc2:	4b07      	ldr	r3, [pc, #28]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12bc4:	4a06      	ldr	r2, [pc, #24]	; (12be0 <system_apb_clock_set_mask+0x58>)
   12bc6:	6a11      	ldr	r1, [r2, #32]
   12bc8:	683a      	ldr	r2, [r7, #0]
   12bca:	430a      	orrs	r2, r1
   12bcc:	621a      	str	r2, [r3, #32]
			break;
   12bce:	e001      	b.n	12bd4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12bd0:	2317      	movs	r3, #23
   12bd2:	e000      	b.n	12bd6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12bd4:	2300      	movs	r3, #0
}
   12bd6:	1c18      	adds	r0, r3, #0
   12bd8:	46bd      	mov	sp, r7
   12bda:	b002      	add	sp, #8
   12bdc:	bd80      	pop	{r7, pc}
   12bde:	46c0      	nop			; (mov r8, r8)
   12be0:	40000400 	.word	0x40000400

00012be4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   12be4:	b580      	push	{r7, lr}
   12be6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12be8:	4b01      	ldr	r3, [pc, #4]	; (12bf0 <system_interrupt_enter_critical_section+0xc>)
   12bea:	4798      	blx	r3
}
   12bec:	46bd      	mov	sp, r7
   12bee:	bd80      	pop	{r7, pc}
   12bf0:	00010be1 	.word	0x00010be1

00012bf4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   12bf4:	b580      	push	{r7, lr}
   12bf6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12bf8:	4b01      	ldr	r3, [pc, #4]	; (12c00 <system_interrupt_leave_critical_section+0xc>)
   12bfa:	4798      	blx	r3
}
   12bfc:	46bd      	mov	sp, r7
   12bfe:	bd80      	pop	{r7, pc}
   12c00:	00010c31 	.word	0x00010c31

00012c04 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   12c04:	b580      	push	{r7, lr}
   12c06:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   12c08:	2000      	movs	r0, #0
   12c0a:	2108      	movs	r1, #8
   12c0c:	4b07      	ldr	r3, [pc, #28]	; (12c2c <system_gclk_init+0x28>)
   12c0e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   12c10:	4b07      	ldr	r3, [pc, #28]	; (12c30 <system_gclk_init+0x2c>)
   12c12:	2201      	movs	r2, #1
   12c14:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   12c16:	46c0      	nop			; (mov r8, r8)
   12c18:	4b05      	ldr	r3, [pc, #20]	; (12c30 <system_gclk_init+0x2c>)
   12c1a:	781b      	ldrb	r3, [r3, #0]
   12c1c:	b2db      	uxtb	r3, r3
   12c1e:	1c1a      	adds	r2, r3, #0
   12c20:	2301      	movs	r3, #1
   12c22:	4013      	ands	r3, r2
   12c24:	d1f8      	bne.n	12c18 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   12c26:	46bd      	mov	sp, r7
   12c28:	bd80      	pop	{r7, pc}
   12c2a:	46c0      	nop			; (mov r8, r8)
   12c2c:	00012b89 	.word	0x00012b89
   12c30:	40000c00 	.word	0x40000c00

00012c34 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   12c34:	b580      	push	{r7, lr}
   12c36:	b086      	sub	sp, #24
   12c38:	af00      	add	r7, sp, #0
   12c3a:	1c02      	adds	r2, r0, #0
   12c3c:	6039      	str	r1, [r7, #0]
   12c3e:	1dfb      	adds	r3, r7, #7
   12c40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   12c42:	1dfb      	adds	r3, r7, #7
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   12c48:	1dfb      	adds	r3, r7, #7
   12c4a:	781b      	ldrb	r3, [r3, #0]
   12c4c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   12c4e:	683b      	ldr	r3, [r7, #0]
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	021b      	lsls	r3, r3, #8
   12c54:	697a      	ldr	r2, [r7, #20]
   12c56:	4313      	orrs	r3, r2
   12c58:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   12c5a:	683b      	ldr	r3, [r7, #0]
   12c5c:	785b      	ldrb	r3, [r3, #1]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	d004      	beq.n	12c6c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   12c62:	697b      	ldr	r3, [r7, #20]
   12c64:	2280      	movs	r2, #128	; 0x80
   12c66:	02d2      	lsls	r2, r2, #11
   12c68:	4313      	orrs	r3, r2
   12c6a:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   12c6c:	683b      	ldr	r3, [r7, #0]
   12c6e:	7a5b      	ldrb	r3, [r3, #9]
   12c70:	2b00      	cmp	r3, #0
   12c72:	d004      	beq.n	12c7e <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2280      	movs	r2, #128	; 0x80
   12c78:	0312      	lsls	r2, r2, #12
   12c7a:	4313      	orrs	r3, r2
   12c7c:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   12c7e:	683b      	ldr	r3, [r7, #0]
   12c80:	685b      	ldr	r3, [r3, #4]
   12c82:	2b01      	cmp	r3, #1
   12c84:	d92c      	bls.n	12ce0 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   12c86:	683b      	ldr	r3, [r7, #0]
   12c88:	685a      	ldr	r2, [r3, #4]
   12c8a:	683b      	ldr	r3, [r7, #0]
   12c8c:	685b      	ldr	r3, [r3, #4]
   12c8e:	3b01      	subs	r3, #1
   12c90:	4013      	ands	r3, r2
   12c92:	d11a      	bne.n	12cca <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   12c94:	2300      	movs	r3, #0
   12c96:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   12c98:	2302      	movs	r3, #2
   12c9a:	60bb      	str	r3, [r7, #8]
   12c9c:	e005      	b.n	12caa <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
   12c9e:	68fb      	ldr	r3, [r7, #12]
   12ca0:	3301      	adds	r3, #1
   12ca2:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   12ca4:	68bb      	ldr	r3, [r7, #8]
   12ca6:	005b      	lsls	r3, r3, #1
   12ca8:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   12caa:	683b      	ldr	r3, [r7, #0]
   12cac:	685a      	ldr	r2, [r3, #4]
   12cae:	68bb      	ldr	r3, [r7, #8]
   12cb0:	429a      	cmp	r2, r3
   12cb2:	d8f4      	bhi.n	12c9e <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   12cb4:	68fb      	ldr	r3, [r7, #12]
   12cb6:	021b      	lsls	r3, r3, #8
   12cb8:	693a      	ldr	r2, [r7, #16]
   12cba:	4313      	orrs	r3, r2
   12cbc:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   12cbe:	697b      	ldr	r3, [r7, #20]
   12cc0:	2280      	movs	r2, #128	; 0x80
   12cc2:	0352      	lsls	r2, r2, #13
   12cc4:	4313      	orrs	r3, r2
   12cc6:	617b      	str	r3, [r7, #20]
   12cc8:	e00a      	b.n	12ce0 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   12cca:	683b      	ldr	r3, [r7, #0]
   12ccc:	685b      	ldr	r3, [r3, #4]
   12cce:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   12cd0:	693a      	ldr	r2, [r7, #16]
   12cd2:	4313      	orrs	r3, r2
   12cd4:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   12cd6:	697b      	ldr	r3, [r7, #20]
   12cd8:	2280      	movs	r2, #128	; 0x80
   12cda:	0292      	lsls	r2, r2, #10
   12cdc:	4313      	orrs	r3, r2
   12cde:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   12ce0:	683b      	ldr	r3, [r7, #0]
   12ce2:	7a1b      	ldrb	r3, [r3, #8]
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d005      	beq.n	12cf4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   12ce8:	697b      	ldr	r3, [r7, #20]
   12cea:	2280      	movs	r2, #128	; 0x80
   12cec:	0392      	lsls	r2, r2, #14
   12cee:	4313      	orrs	r3, r2
   12cf0:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   12cf2:	e7ff      	b.n	12cf4 <system_gclk_gen_set_config+0xc0>
   12cf4:	46c0      	nop			; (mov r8, r8)
   12cf6:	4b14      	ldr	r3, [pc, #80]	; (12d48 <system_gclk_gen_set_config+0x114>)
   12cf8:	4798      	blx	r3
   12cfa:	1c03      	adds	r3, r0, #0
   12cfc:	2b00      	cmp	r3, #0
   12cfe:	d1fa      	bne.n	12cf6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   12d00:	4b12      	ldr	r3, [pc, #72]	; (12d4c <system_gclk_gen_set_config+0x118>)
   12d02:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   12d04:	4b12      	ldr	r3, [pc, #72]	; (12d50 <system_gclk_gen_set_config+0x11c>)
   12d06:	1dfa      	adds	r2, r7, #7
   12d08:	7812      	ldrb	r2, [r2, #0]
   12d0a:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   12d0c:	46c0      	nop			; (mov r8, r8)
   12d0e:	4b0e      	ldr	r3, [pc, #56]	; (12d48 <system_gclk_gen_set_config+0x114>)
   12d10:	4798      	blx	r3
   12d12:	1c03      	adds	r3, r0, #0
   12d14:	2b00      	cmp	r3, #0
   12d16:	d1fa      	bne.n	12d0e <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   12d18:	4b0e      	ldr	r3, [pc, #56]	; (12d54 <system_gclk_gen_set_config+0x120>)
   12d1a:	693a      	ldr	r2, [r7, #16]
   12d1c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   12d1e:	46c0      	nop			; (mov r8, r8)
   12d20:	4b09      	ldr	r3, [pc, #36]	; (12d48 <system_gclk_gen_set_config+0x114>)
   12d22:	4798      	blx	r3
   12d24:	1c03      	adds	r3, r0, #0
   12d26:	2b00      	cmp	r3, #0
   12d28:	d1fa      	bne.n	12d20 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   12d2a:	4b0a      	ldr	r3, [pc, #40]	; (12d54 <system_gclk_gen_set_config+0x120>)
   12d2c:	4a09      	ldr	r2, [pc, #36]	; (12d54 <system_gclk_gen_set_config+0x120>)
   12d2e:	6851      	ldr	r1, [r2, #4]
   12d30:	2280      	movs	r2, #128	; 0x80
   12d32:	0252      	lsls	r2, r2, #9
   12d34:	4011      	ands	r1, r2
   12d36:	697a      	ldr	r2, [r7, #20]
   12d38:	430a      	orrs	r2, r1
   12d3a:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   12d3c:	4b06      	ldr	r3, [pc, #24]	; (12d58 <system_gclk_gen_set_config+0x124>)
   12d3e:	4798      	blx	r3
}
   12d40:	46bd      	mov	sp, r7
   12d42:	b006      	add	sp, #24
   12d44:	bd80      	pop	{r7, pc}
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	00012b65 	.word	0x00012b65
   12d4c:	00012be5 	.word	0x00012be5
   12d50:	40000c08 	.word	0x40000c08
   12d54:	40000c00 	.word	0x40000c00
   12d58:	00012bf5 	.word	0x00012bf5

00012d5c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   12d5c:	b580      	push	{r7, lr}
   12d5e:	b082      	sub	sp, #8
   12d60:	af00      	add	r7, sp, #0
   12d62:	1c02      	adds	r2, r0, #0
   12d64:	1dfb      	adds	r3, r7, #7
   12d66:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   12d68:	46c0      	nop			; (mov r8, r8)
   12d6a:	4b0e      	ldr	r3, [pc, #56]	; (12da4 <system_gclk_gen_enable+0x48>)
   12d6c:	4798      	blx	r3
   12d6e:	1c03      	adds	r3, r0, #0
   12d70:	2b00      	cmp	r3, #0
   12d72:	d1fa      	bne.n	12d6a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   12d74:	4b0c      	ldr	r3, [pc, #48]	; (12da8 <system_gclk_gen_enable+0x4c>)
   12d76:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   12d78:	4b0c      	ldr	r3, [pc, #48]	; (12dac <system_gclk_gen_enable+0x50>)
   12d7a:	1dfa      	adds	r2, r7, #7
   12d7c:	7812      	ldrb	r2, [r2, #0]
   12d7e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   12d80:	46c0      	nop			; (mov r8, r8)
   12d82:	4b08      	ldr	r3, [pc, #32]	; (12da4 <system_gclk_gen_enable+0x48>)
   12d84:	4798      	blx	r3
   12d86:	1c03      	adds	r3, r0, #0
   12d88:	2b00      	cmp	r3, #0
   12d8a:	d1fa      	bne.n	12d82 <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   12d8c:	4b08      	ldr	r3, [pc, #32]	; (12db0 <system_gclk_gen_enable+0x54>)
   12d8e:	4a08      	ldr	r2, [pc, #32]	; (12db0 <system_gclk_gen_enable+0x54>)
   12d90:	6852      	ldr	r2, [r2, #4]
   12d92:	2180      	movs	r1, #128	; 0x80
   12d94:	0249      	lsls	r1, r1, #9
   12d96:	430a      	orrs	r2, r1
   12d98:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   12d9a:	4b06      	ldr	r3, [pc, #24]	; (12db4 <system_gclk_gen_enable+0x58>)
   12d9c:	4798      	blx	r3
}
   12d9e:	46bd      	mov	sp, r7
   12da0:	b002      	add	sp, #8
   12da2:	bd80      	pop	{r7, pc}
   12da4:	00012b65 	.word	0x00012b65
   12da8:	00012be5 	.word	0x00012be5
   12dac:	40000c04 	.word	0x40000c04
   12db0:	40000c00 	.word	0x40000c00
   12db4:	00012bf5 	.word	0x00012bf5

00012db8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   12db8:	b580      	push	{r7, lr}
   12dba:	b086      	sub	sp, #24
   12dbc:	af00      	add	r7, sp, #0
   12dbe:	1c02      	adds	r2, r0, #0
   12dc0:	1dfb      	adds	r3, r7, #7
   12dc2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   12dc4:	46c0      	nop			; (mov r8, r8)
   12dc6:	4b2f      	ldr	r3, [pc, #188]	; (12e84 <system_gclk_gen_get_hz+0xcc>)
   12dc8:	4798      	blx	r3
   12dca:	1c03      	adds	r3, r0, #0
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d1fa      	bne.n	12dc6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   12dd0:	4b2d      	ldr	r3, [pc, #180]	; (12e88 <system_gclk_gen_get_hz+0xd0>)
   12dd2:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   12dd4:	4b2d      	ldr	r3, [pc, #180]	; (12e8c <system_gclk_gen_get_hz+0xd4>)
   12dd6:	1dfa      	adds	r2, r7, #7
   12dd8:	7812      	ldrb	r2, [r2, #0]
   12dda:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   12ddc:	46c0      	nop			; (mov r8, r8)
   12dde:	4b29      	ldr	r3, [pc, #164]	; (12e84 <system_gclk_gen_get_hz+0xcc>)
   12de0:	4798      	blx	r3
   12de2:	1c03      	adds	r3, r0, #0
   12de4:	2b00      	cmp	r3, #0
   12de6:	d1fa      	bne.n	12dde <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   12de8:	4b29      	ldr	r3, [pc, #164]	; (12e90 <system_gclk_gen_get_hz+0xd8>)
   12dea:	685b      	ldr	r3, [r3, #4]
   12dec:	0a1b      	lsrs	r3, r3, #8
   12dee:	1c1a      	adds	r2, r3, #0
   12df0:	231f      	movs	r3, #31
   12df2:	4013      	ands	r3, r2
   12df4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   12df6:	1c18      	adds	r0, r3, #0
   12df8:	4b26      	ldr	r3, [pc, #152]	; (12e94 <system_gclk_gen_get_hz+0xdc>)
   12dfa:	4798      	blx	r3
   12dfc:	1c03      	adds	r3, r0, #0
   12dfe:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   12e00:	4b22      	ldr	r3, [pc, #136]	; (12e8c <system_gclk_gen_get_hz+0xd4>)
   12e02:	1dfa      	adds	r2, r7, #7
   12e04:	7812      	ldrb	r2, [r2, #0]
   12e06:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   12e08:	4b21      	ldr	r3, [pc, #132]	; (12e90 <system_gclk_gen_get_hz+0xd8>)
   12e0a:	685b      	ldr	r3, [r3, #4]
   12e0c:	0d1b      	lsrs	r3, r3, #20
   12e0e:	1c1a      	adds	r2, r3, #0
   12e10:	2301      	movs	r3, #1
   12e12:	4013      	ands	r3, r2
   12e14:	b2da      	uxtb	r2, r3
   12e16:	1c3b      	adds	r3, r7, #0
   12e18:	3313      	adds	r3, #19
   12e1a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   12e1c:	4b1e      	ldr	r3, [pc, #120]	; (12e98 <system_gclk_gen_get_hz+0xe0>)
   12e1e:	1dfa      	adds	r2, r7, #7
   12e20:	7812      	ldrb	r2, [r2, #0]
   12e22:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   12e24:	46c0      	nop			; (mov r8, r8)
   12e26:	4b17      	ldr	r3, [pc, #92]	; (12e84 <system_gclk_gen_get_hz+0xcc>)
   12e28:	4798      	blx	r3
   12e2a:	1c03      	adds	r3, r0, #0
   12e2c:	2b00      	cmp	r3, #0
   12e2e:	d1fa      	bne.n	12e26 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   12e30:	4b17      	ldr	r3, [pc, #92]	; (12e90 <system_gclk_gen_get_hz+0xd8>)
   12e32:	689b      	ldr	r3, [r3, #8]
   12e34:	0a1b      	lsrs	r3, r3, #8
   12e36:	2200      	movs	r2, #0
   12e38:	4393      	bics	r3, r2
   12e3a:	b29b      	uxth	r3, r3
   12e3c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   12e3e:	4b17      	ldr	r3, [pc, #92]	; (12e9c <system_gclk_gen_get_hz+0xe4>)
   12e40:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   12e42:	1c3b      	adds	r3, r7, #0
   12e44:	3313      	adds	r3, #19
   12e46:	781b      	ldrb	r3, [r3, #0]
   12e48:	2b00      	cmp	r3, #0
   12e4a:	d109      	bne.n	12e60 <system_gclk_gen_get_hz+0xa8>
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	2b01      	cmp	r3, #1
   12e50:	d906      	bls.n	12e60 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
   12e52:	4b13      	ldr	r3, [pc, #76]	; (12ea0 <system_gclk_gen_get_hz+0xe8>)
   12e54:	6978      	ldr	r0, [r7, #20]
   12e56:	68f9      	ldr	r1, [r7, #12]
   12e58:	4798      	blx	r3
   12e5a:	1c03      	adds	r3, r0, #0
   12e5c:	617b      	str	r3, [r7, #20]
   12e5e:	e00b      	b.n	12e78 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
   12e60:	1c3b      	adds	r3, r7, #0
   12e62:	3313      	adds	r3, #19
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	2b00      	cmp	r3, #0
   12e68:	d006      	beq.n	12e78 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
   12e6a:	68fb      	ldr	r3, [r7, #12]
   12e6c:	3301      	adds	r3, #1
   12e6e:	697a      	ldr	r2, [r7, #20]
   12e70:	1c11      	adds	r1, r2, #0
   12e72:	40d9      	lsrs	r1, r3
   12e74:	1c0b      	adds	r3, r1, #0
   12e76:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   12e78:	697b      	ldr	r3, [r7, #20]
}
   12e7a:	1c18      	adds	r0, r3, #0
   12e7c:	46bd      	mov	sp, r7
   12e7e:	b006      	add	sp, #24
   12e80:	bd80      	pop	{r7, pc}
   12e82:	46c0      	nop			; (mov r8, r8)
   12e84:	00012b65 	.word	0x00012b65
   12e88:	00012be5 	.word	0x00012be5
   12e8c:	40000c04 	.word	0x40000c04
   12e90:	40000c00 	.word	0x40000c00
   12e94:	0001262d 	.word	0x0001262d
   12e98:	40000c08 	.word	0x40000c08
   12e9c:	00012bf5 	.word	0x00012bf5
   12ea0:	00014639 	.word	0x00014639

00012ea4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   12ea4:	b580      	push	{r7, lr}
   12ea6:	b084      	sub	sp, #16
   12ea8:	af00      	add	r7, sp, #0
   12eaa:	1c02      	adds	r2, r0, #0
   12eac:	6039      	str	r1, [r7, #0]
   12eae:	1dfb      	adds	r3, r7, #7
   12eb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   12eb2:	1dfb      	adds	r3, r7, #7
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   12eb8:	683b      	ldr	r3, [r7, #0]
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	021b      	lsls	r3, r3, #8
   12ebe:	68fa      	ldr	r2, [r7, #12]
   12ec0:	4313      	orrs	r3, r2
   12ec2:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   12ec4:	1dfb      	adds	r3, r7, #7
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	1c18      	adds	r0, r3, #0
   12eca:	4b04      	ldr	r3, [pc, #16]	; (12edc <system_gclk_chan_set_config+0x38>)
   12ecc:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   12ece:	4b04      	ldr	r3, [pc, #16]	; (12ee0 <system_gclk_chan_set_config+0x3c>)
   12ed0:	68fa      	ldr	r2, [r7, #12]
   12ed2:	b292      	uxth	r2, r2
   12ed4:	805a      	strh	r2, [r3, #2]
}
   12ed6:	46bd      	mov	sp, r7
   12ed8:	b004      	add	sp, #16
   12eda:	bd80      	pop	{r7, pc}
   12edc:	00012f29 	.word	0x00012f29
   12ee0:	40000c00 	.word	0x40000c00

00012ee4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   12ee4:	b580      	push	{r7, lr}
   12ee6:	b082      	sub	sp, #8
   12ee8:	af00      	add	r7, sp, #0
   12eea:	1c02      	adds	r2, r0, #0
   12eec:	1dfb      	adds	r3, r7, #7
   12eee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   12ef0:	4b09      	ldr	r3, [pc, #36]	; (12f18 <system_gclk_chan_enable+0x34>)
   12ef2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   12ef4:	4b09      	ldr	r3, [pc, #36]	; (12f1c <system_gclk_chan_enable+0x38>)
   12ef6:	1dfa      	adds	r2, r7, #7
   12ef8:	7812      	ldrb	r2, [r2, #0]
   12efa:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   12efc:	4b08      	ldr	r3, [pc, #32]	; (12f20 <system_gclk_chan_enable+0x3c>)
   12efe:	4a08      	ldr	r2, [pc, #32]	; (12f20 <system_gclk_chan_enable+0x3c>)
   12f00:	8852      	ldrh	r2, [r2, #2]
   12f02:	b292      	uxth	r2, r2
   12f04:	2180      	movs	r1, #128	; 0x80
   12f06:	01c9      	lsls	r1, r1, #7
   12f08:	430a      	orrs	r2, r1
   12f0a:	b292      	uxth	r2, r2
   12f0c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   12f0e:	4b05      	ldr	r3, [pc, #20]	; (12f24 <system_gclk_chan_enable+0x40>)
   12f10:	4798      	blx	r3
}
   12f12:	46bd      	mov	sp, r7
   12f14:	b002      	add	sp, #8
   12f16:	bd80      	pop	{r7, pc}
   12f18:	00012be5 	.word	0x00012be5
   12f1c:	40000c02 	.word	0x40000c02
   12f20:	40000c00 	.word	0x40000c00
   12f24:	00012bf5 	.word	0x00012bf5

00012f28 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   12f28:	b580      	push	{r7, lr}
   12f2a:	b084      	sub	sp, #16
   12f2c:	af00      	add	r7, sp, #0
   12f2e:	1c02      	adds	r2, r0, #0
   12f30:	1dfb      	adds	r3, r7, #7
   12f32:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   12f34:	4b1c      	ldr	r3, [pc, #112]	; (12fa8 <system_gclk_chan_disable+0x80>)
   12f36:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   12f38:	4b1c      	ldr	r3, [pc, #112]	; (12fac <system_gclk_chan_disable+0x84>)
   12f3a:	1dfa      	adds	r2, r7, #7
   12f3c:	7812      	ldrb	r2, [r2, #0]
   12f3e:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   12f40:	4b1b      	ldr	r3, [pc, #108]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f42:	885b      	ldrh	r3, [r3, #2]
   12f44:	b29b      	uxth	r3, r3
   12f46:	0a1b      	lsrs	r3, r3, #8
   12f48:	1c1a      	adds	r2, r3, #0
   12f4a:	230f      	movs	r3, #15
   12f4c:	4013      	ands	r3, r2
   12f4e:	b2db      	uxtb	r3, r3
   12f50:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   12f52:	4b17      	ldr	r3, [pc, #92]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f54:	8859      	ldrh	r1, [r3, #2]
   12f56:	4a17      	ldr	r2, [pc, #92]	; (12fb4 <system_gclk_chan_disable+0x8c>)
   12f58:	400a      	ands	r2, r1
   12f5a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   12f5c:	4b14      	ldr	r3, [pc, #80]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f5e:	4a14      	ldr	r2, [pc, #80]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f60:	8852      	ldrh	r2, [r2, #2]
   12f62:	b291      	uxth	r1, r2
   12f64:	4a14      	ldr	r2, [pc, #80]	; (12fb8 <system_gclk_chan_disable+0x90>)
   12f66:	400a      	ands	r2, r1
   12f68:	b292      	uxth	r2, r2
   12f6a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   12f6c:	46c0      	nop			; (mov r8, r8)
   12f6e:	4b10      	ldr	r3, [pc, #64]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f70:	885b      	ldrh	r3, [r3, #2]
   12f72:	b29b      	uxth	r3, r3
   12f74:	1c1a      	adds	r2, r3, #0
   12f76:	2380      	movs	r3, #128	; 0x80
   12f78:	01db      	lsls	r3, r3, #7
   12f7a:	4013      	ands	r3, r2
   12f7c:	d1f7      	bne.n	12f6e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   12f7e:	4b0c      	ldr	r3, [pc, #48]	; (12fb0 <system_gclk_chan_disable+0x88>)
   12f80:	68fa      	ldr	r2, [r7, #12]
   12f82:	b2d2      	uxtb	r2, r2
   12f84:	1c11      	adds	r1, r2, #0
   12f86:	220f      	movs	r2, #15
   12f88:	400a      	ands	r2, r1
   12f8a:	b2d1      	uxtb	r1, r2
   12f8c:	220f      	movs	r2, #15
   12f8e:	400a      	ands	r2, r1
   12f90:	0212      	lsls	r2, r2, #8
   12f92:	8858      	ldrh	r0, [r3, #2]
   12f94:	4907      	ldr	r1, [pc, #28]	; (12fb4 <system_gclk_chan_disable+0x8c>)
   12f96:	4001      	ands	r1, r0
   12f98:	430a      	orrs	r2, r1
   12f9a:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   12f9c:	4b07      	ldr	r3, [pc, #28]	; (12fbc <system_gclk_chan_disable+0x94>)
   12f9e:	4798      	blx	r3
}
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b004      	add	sp, #16
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	00012be5 	.word	0x00012be5
   12fac:	40000c02 	.word	0x40000c02
   12fb0:	40000c00 	.word	0x40000c00
   12fb4:	fffff0ff 	.word	0xfffff0ff
   12fb8:	ffffbfff 	.word	0xffffbfff
   12fbc:	00012bf5 	.word	0x00012bf5

00012fc0 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
   12fc0:	b580      	push	{r7, lr}
   12fc2:	b082      	sub	sp, #8
   12fc4:	af00      	add	r7, sp, #0
   12fc6:	1c02      	adds	r2, r0, #0
   12fc8:	1dfb      	adds	r3, r7, #7
   12fca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   12fcc:	4b09      	ldr	r3, [pc, #36]	; (12ff4 <system_gclk_chan_lock+0x34>)
   12fce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   12fd0:	4b09      	ldr	r3, [pc, #36]	; (12ff8 <system_gclk_chan_lock+0x38>)
   12fd2:	1dfa      	adds	r2, r7, #7
   12fd4:	7812      	ldrb	r2, [r2, #0]
   12fd6:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   12fd8:	4b08      	ldr	r3, [pc, #32]	; (12ffc <system_gclk_chan_lock+0x3c>)
   12fda:	4a08      	ldr	r2, [pc, #32]	; (12ffc <system_gclk_chan_lock+0x3c>)
   12fdc:	8852      	ldrh	r2, [r2, #2]
   12fde:	b292      	uxth	r2, r2
   12fe0:	2180      	movs	r1, #128	; 0x80
   12fe2:	01c9      	lsls	r1, r1, #7
   12fe4:	430a      	orrs	r2, r1
   12fe6:	b292      	uxth	r2, r2
   12fe8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   12fea:	4b05      	ldr	r3, [pc, #20]	; (13000 <system_gclk_chan_lock+0x40>)
   12fec:	4798      	blx	r3
}
   12fee:	46bd      	mov	sp, r7
   12ff0:	b002      	add	sp, #8
   12ff2:	bd80      	pop	{r7, pc}
   12ff4:	00012be5 	.word	0x00012be5
   12ff8:	40000c02 	.word	0x40000c02
   12ffc:	40000c00 	.word	0x40000c00
   13000:	00012bf5 	.word	0x00012bf5

00013004 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   13004:	b580      	push	{r7, lr}
   13006:	b084      	sub	sp, #16
   13008:	af00      	add	r7, sp, #0
   1300a:	1c02      	adds	r2, r0, #0
   1300c:	1dfb      	adds	r3, r7, #7
   1300e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   13010:	4b0e      	ldr	r3, [pc, #56]	; (1304c <system_gclk_chan_get_hz+0x48>)
   13012:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13014:	4b0e      	ldr	r3, [pc, #56]	; (13050 <system_gclk_chan_get_hz+0x4c>)
   13016:	1dfa      	adds	r2, r7, #7
   13018:	7812      	ldrb	r2, [r2, #0]
   1301a:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1301c:	4b0d      	ldr	r3, [pc, #52]	; (13054 <system_gclk_chan_get_hz+0x50>)
   1301e:	885b      	ldrh	r3, [r3, #2]
   13020:	b29b      	uxth	r3, r3
   13022:	0a1b      	lsrs	r3, r3, #8
   13024:	1c1a      	adds	r2, r3, #0
   13026:	230f      	movs	r3, #15
   13028:	4013      	ands	r3, r2
   1302a:	b2da      	uxtb	r2, r3
   1302c:	1c3b      	adds	r3, r7, #0
   1302e:	330f      	adds	r3, #15
   13030:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   13032:	4b09      	ldr	r3, [pc, #36]	; (13058 <system_gclk_chan_get_hz+0x54>)
   13034:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   13036:	1c3b      	adds	r3, r7, #0
   13038:	330f      	adds	r3, #15
   1303a:	781b      	ldrb	r3, [r3, #0]
   1303c:	1c18      	adds	r0, r3, #0
   1303e:	4b07      	ldr	r3, [pc, #28]	; (1305c <system_gclk_chan_get_hz+0x58>)
   13040:	4798      	blx	r3
   13042:	1c03      	adds	r3, r0, #0
}
   13044:	1c18      	adds	r0, r3, #0
   13046:	46bd      	mov	sp, r7
   13048:	b004      	add	sp, #16
   1304a:	bd80      	pop	{r7, pc}
   1304c:	00012be5 	.word	0x00012be5
   13050:	40000c02 	.word	0x40000c02
   13054:	40000c00 	.word	0x40000c00
   13058:	00012bf5 	.word	0x00012bf5
   1305c:	00012db9 	.word	0x00012db9

00013060 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13060:	b580      	push	{r7, lr}
   13062:	b084      	sub	sp, #16
   13064:	af00      	add	r7, sp, #0
   13066:	1c02      	adds	r2, r0, #0
   13068:	1dfb      	adds	r3, r7, #7
   1306a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1306c:	1c3b      	adds	r3, r7, #0
   1306e:	330f      	adds	r3, #15
   13070:	1dfa      	adds	r2, r7, #7
   13072:	7812      	ldrb	r2, [r2, #0]
   13074:	09d2      	lsrs	r2, r2, #7
   13076:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13078:	1c3b      	adds	r3, r7, #0
   1307a:	330e      	adds	r3, #14
   1307c:	1dfa      	adds	r2, r7, #7
   1307e:	7812      	ldrb	r2, [r2, #0]
   13080:	0952      	lsrs	r2, r2, #5
   13082:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13084:	4b0d      	ldr	r3, [pc, #52]	; (130bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13086:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   13088:	1c3b      	adds	r3, r7, #0
   1308a:	330f      	adds	r3, #15
   1308c:	781b      	ldrb	r3, [r3, #0]
   1308e:	2b00      	cmp	r3, #0
   13090:	d10e      	bne.n	130b0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   13092:	1c3b      	adds	r3, r7, #0
   13094:	330f      	adds	r3, #15
   13096:	781b      	ldrb	r3, [r3, #0]
   13098:	009b      	lsls	r3, r3, #2
   1309a:	2210      	movs	r2, #16
   1309c:	19d2      	adds	r2, r2, r7
   1309e:	18d3      	adds	r3, r2, r3
   130a0:	3b08      	subs	r3, #8
   130a2:	681a      	ldr	r2, [r3, #0]
   130a4:	1c3b      	adds	r3, r7, #0
   130a6:	330e      	adds	r3, #14
   130a8:	781b      	ldrb	r3, [r3, #0]
   130aa:	01db      	lsls	r3, r3, #7
   130ac:	18d3      	adds	r3, r2, r3
   130ae:	e000      	b.n	130b2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   130b0:	2300      	movs	r3, #0
	}
}
   130b2:	1c18      	adds	r0, r3, #0
   130b4:	46bd      	mov	sp, r7
   130b6:	b004      	add	sp, #16
   130b8:	bd80      	pop	{r7, pc}
   130ba:	46c0      	nop			; (mov r8, r8)
   130bc:	41004400 	.word	0x41004400

000130c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   130c0:	b580      	push	{r7, lr}
   130c2:	b088      	sub	sp, #32
   130c4:	af00      	add	r7, sp, #0
   130c6:	60f8      	str	r0, [r7, #12]
   130c8:	60b9      	str	r1, [r7, #8]
   130ca:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   130cc:	2300      	movs	r3, #0
   130ce:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   130d0:	687b      	ldr	r3, [r7, #4]
   130d2:	78db      	ldrb	r3, [r3, #3]
   130d4:	2201      	movs	r2, #1
   130d6:	4053      	eors	r3, r2
   130d8:	b2db      	uxtb	r3, r3
   130da:	2b00      	cmp	r3, #0
   130dc:	d033      	beq.n	13146 <_system_pinmux_config+0x86>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   130de:	687b      	ldr	r3, [r7, #4]
   130e0:	781b      	ldrb	r3, [r3, #0]
   130e2:	2b80      	cmp	r3, #128	; 0x80
   130e4:	d00a      	beq.n	130fc <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   130e6:	69fb      	ldr	r3, [r7, #28]
   130e8:	2280      	movs	r2, #128	; 0x80
   130ea:	0252      	lsls	r2, r2, #9
   130ec:	4313      	orrs	r3, r2
   130ee:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   130f0:	687b      	ldr	r3, [r7, #4]
   130f2:	781b      	ldrb	r3, [r3, #0]
   130f4:	061b      	lsls	r3, r3, #24
   130f6:	69fa      	ldr	r2, [r7, #28]
   130f8:	4313      	orrs	r3, r2
   130fa:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   130fc:	687b      	ldr	r3, [r7, #4]
   130fe:	785b      	ldrb	r3, [r3, #1]
   13100:	2b00      	cmp	r3, #0
   13102:	d003      	beq.n	1310c <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13108:	2b02      	cmp	r3, #2
   1310a:	d110      	bne.n	1312e <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1310c:	69fb      	ldr	r3, [r7, #28]
   1310e:	2280      	movs	r2, #128	; 0x80
   13110:	0292      	lsls	r2, r2, #10
   13112:	4313      	orrs	r3, r2
   13114:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	789b      	ldrb	r3, [r3, #2]
   1311a:	2b00      	cmp	r3, #0
   1311c:	d004      	beq.n	13128 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1311e:	69fb      	ldr	r3, [r7, #28]
   13120:	2280      	movs	r2, #128	; 0x80
   13122:	02d2      	lsls	r2, r2, #11
   13124:	4313      	orrs	r3, r2
   13126:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   13128:	68fb      	ldr	r3, [r7, #12]
   1312a:	68ba      	ldr	r2, [r7, #8]
   1312c:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	785b      	ldrb	r3, [r3, #1]
   13132:	2b01      	cmp	r3, #1
   13134:	d003      	beq.n	1313e <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1313a:	2b02      	cmp	r3, #2
   1313c:	d103      	bne.n	13146 <_system_pinmux_config+0x86>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1313e:	69fa      	ldr	r2, [r7, #28]
   13140:	4b1f      	ldr	r3, [pc, #124]	; (131c0 <_system_pinmux_config+0x100>)
   13142:	4013      	ands	r3, r2
   13144:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   13146:	68bb      	ldr	r3, [r7, #8]
   13148:	041b      	lsls	r3, r3, #16
   1314a:	0c1b      	lsrs	r3, r3, #16
   1314c:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1314e:	68bb      	ldr	r3, [r7, #8]
   13150:	0c1b      	lsrs	r3, r3, #16
   13152:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13154:	69ba      	ldr	r2, [r7, #24]
   13156:	69fb      	ldr	r3, [r7, #28]
   13158:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1315a:	22a0      	movs	r2, #160	; 0xa0
   1315c:	05d2      	lsls	r2, r2, #23
   1315e:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13160:	68fb      	ldr	r3, [r7, #12]
   13162:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13164:	697a      	ldr	r2, [r7, #20]
   13166:	69fb      	ldr	r3, [r7, #28]
   13168:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1316a:	22d0      	movs	r2, #208	; 0xd0
   1316c:	0612      	lsls	r2, r2, #24
   1316e:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	78db      	ldrb	r3, [r3, #3]
   13178:	2201      	movs	r2, #1
   1317a:	4053      	eors	r3, r2
   1317c:	b2db      	uxtb	r3, r3
   1317e:	2b00      	cmp	r3, #0
   13180:	d01a      	beq.n	131b8 <_system_pinmux_config+0xf8>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   13182:	69fa      	ldr	r2, [r7, #28]
   13184:	2380      	movs	r3, #128	; 0x80
   13186:	02db      	lsls	r3, r3, #11
   13188:	4013      	ands	r3, r2
   1318a:	d00a      	beq.n	131a2 <_system_pinmux_config+0xe2>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1318c:	687b      	ldr	r3, [r7, #4]
   1318e:	789b      	ldrb	r3, [r3, #2]
   13190:	2b01      	cmp	r3, #1
   13192:	d103      	bne.n	1319c <_system_pinmux_config+0xdc>
				port->OUTSET.reg = pin_mask;
   13194:	68fb      	ldr	r3, [r7, #12]
   13196:	68ba      	ldr	r2, [r7, #8]
   13198:	619a      	str	r2, [r3, #24]
   1319a:	e002      	b.n	131a2 <_system_pinmux_config+0xe2>
			} else {
				port->OUTCLR.reg = pin_mask;
   1319c:	68fb      	ldr	r3, [r7, #12]
   1319e:	68ba      	ldr	r2, [r7, #8]
   131a0:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	785b      	ldrb	r3, [r3, #1]
   131a6:	2b01      	cmp	r3, #1
   131a8:	d003      	beq.n	131b2 <_system_pinmux_config+0xf2>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   131ae:	2b02      	cmp	r3, #2
   131b0:	d102      	bne.n	131b8 <_system_pinmux_config+0xf8>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   131b2:	68fb      	ldr	r3, [r7, #12]
   131b4:	68ba      	ldr	r2, [r7, #8]
   131b6:	609a      	str	r2, [r3, #8]
		}
	}
}
   131b8:	46bd      	mov	sp, r7
   131ba:	b008      	add	sp, #32
   131bc:	bd80      	pop	{r7, pc}
   131be:	46c0      	nop			; (mov r8, r8)
   131c0:	fffbffff 	.word	0xfffbffff

000131c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   131c4:	b580      	push	{r7, lr}
   131c6:	b084      	sub	sp, #16
   131c8:	af00      	add	r7, sp, #0
   131ca:	1c02      	adds	r2, r0, #0
   131cc:	6039      	str	r1, [r7, #0]
   131ce:	1dfb      	adds	r3, r7, #7
   131d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   131d2:	1dfb      	adds	r3, r7, #7
   131d4:	781b      	ldrb	r3, [r3, #0]
   131d6:	1c18      	adds	r0, r3, #0
   131d8:	4b0b      	ldr	r3, [pc, #44]	; (13208 <system_pinmux_pin_set_config+0x44>)
   131da:	4798      	blx	r3
   131dc:	1c03      	adds	r3, r0, #0
   131de:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   131e0:	1dfb      	adds	r3, r7, #7
   131e2:	781a      	ldrb	r2, [r3, #0]
   131e4:	231f      	movs	r3, #31
   131e6:	4013      	ands	r3, r2
   131e8:	2201      	movs	r2, #1
   131ea:	1c11      	adds	r1, r2, #0
   131ec:	4099      	lsls	r1, r3
   131ee:	1c0b      	adds	r3, r1, #0
   131f0:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   131f2:	68f9      	ldr	r1, [r7, #12]
   131f4:	68ba      	ldr	r2, [r7, #8]
   131f6:	683b      	ldr	r3, [r7, #0]
   131f8:	1c08      	adds	r0, r1, #0
   131fa:	1c11      	adds	r1, r2, #0
   131fc:	1c1a      	adds	r2, r3, #0
   131fe:	4b03      	ldr	r3, [pc, #12]	; (1320c <system_pinmux_pin_set_config+0x48>)
   13200:	4798      	blx	r3
}
   13202:	46bd      	mov	sp, r7
   13204:	b004      	add	sp, #16
   13206:	bd80      	pop	{r7, pc}
   13208:	00013061 	.word	0x00013061
   1320c:	000130c1 	.word	0x000130c1

00013210 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   13210:	b580      	push	{r7, lr}
   13212:	af00      	add	r7, sp, #0
	return;
   13214:	46c0      	nop			; (mov r8, r8)
}
   13216:	46bd      	mov	sp, r7
   13218:	bd80      	pop	{r7, pc}
   1321a:	46c0      	nop			; (mov r8, r8)

0001321c <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
   1321c:	b580      	push	{r7, lr}
   1321e:	af00      	add	r7, sp, #0
	while (1) {
	 
		Assert(false);
	}
	*/
}
   13220:	46bd      	mov	sp, r7
   13222:	bd80      	pop	{r7, pc}

00013224 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   13224:	b580      	push	{r7, lr}
   13226:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   13228:	4b03      	ldr	r3, [pc, #12]	; (13238 <system_init+0x14>)
   1322a:	4798      	blx	r3

	/* Initialize board hardware */
//BAM	system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
   1322c:	4b03      	ldr	r3, [pc, #12]	; (1323c <system_init+0x18>)
   1322e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   13230:	4b03      	ldr	r3, [pc, #12]	; (13240 <system_init+0x1c>)
   13232:	4798      	blx	r3
}
   13234:	46bd      	mov	sp, r7
   13236:	bd80      	pop	{r7, pc}
   13238:	00012939 	.word	0x00012939
   1323c:	00013211 	.word	0x00013211
   13240:	00003f31 	.word	0x00003f31

00013244 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   13244:	b580      	push	{r7, lr}
   13246:	b082      	sub	sp, #8
   13248:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1324a:	4b16      	ldr	r3, [pc, #88]	; (132a4 <Reset_Handler+0x60>)
   1324c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1324e:	4b16      	ldr	r3, [pc, #88]	; (132a8 <Reset_Handler+0x64>)
   13250:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   13252:	687a      	ldr	r2, [r7, #4]
   13254:	683b      	ldr	r3, [r7, #0]
   13256:	429a      	cmp	r2, r3
   13258:	d00c      	beq.n	13274 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   1325a:	e007      	b.n	1326c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   1325c:	683b      	ldr	r3, [r7, #0]
   1325e:	1d1a      	adds	r2, r3, #4
   13260:	603a      	str	r2, [r7, #0]
   13262:	687a      	ldr	r2, [r7, #4]
   13264:	1d11      	adds	r1, r2, #4
   13266:	6079      	str	r1, [r7, #4]
   13268:	6812      	ldr	r2, [r2, #0]
   1326a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   1326c:	683a      	ldr	r2, [r7, #0]
   1326e:	4b0f      	ldr	r3, [pc, #60]	; (132ac <Reset_Handler+0x68>)
   13270:	429a      	cmp	r2, r3
   13272:	d3f3      	bcc.n	1325c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   13274:	4b0e      	ldr	r3, [pc, #56]	; (132b0 <Reset_Handler+0x6c>)
   13276:	603b      	str	r3, [r7, #0]
   13278:	e004      	b.n	13284 <Reset_Handler+0x40>
                *pDest++ = 0;
   1327a:	683b      	ldr	r3, [r7, #0]
   1327c:	1d1a      	adds	r2, r3, #4
   1327e:	603a      	str	r2, [r7, #0]
   13280:	2200      	movs	r2, #0
   13282:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   13284:	683a      	ldr	r2, [r7, #0]
   13286:	4b0b      	ldr	r3, [pc, #44]	; (132b4 <Reset_Handler+0x70>)
   13288:	429a      	cmp	r2, r3
   1328a:	d3f6      	bcc.n	1327a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   1328c:	4b0a      	ldr	r3, [pc, #40]	; (132b8 <Reset_Handler+0x74>)
   1328e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   13290:	4b0a      	ldr	r3, [pc, #40]	; (132bc <Reset_Handler+0x78>)
   13292:	687a      	ldr	r2, [r7, #4]
   13294:	217f      	movs	r1, #127	; 0x7f
   13296:	438a      	bics	r2, r1
   13298:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
   1329a:	4b09      	ldr	r3, [pc, #36]	; (132c0 <Reset_Handler+0x7c>)
   1329c:	4798      	blx	r3

        /* Branch to main function */
        main();
   1329e:	4b09      	ldr	r3, [pc, #36]	; (132c4 <Reset_Handler+0x80>)
   132a0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   132a2:	e7fe      	b.n	132a2 <Reset_Handler+0x5e>
   132a4:	0001755c 	.word	0x0001755c
   132a8:	20000000 	.word	0x20000000
   132ac:	20000474 	.word	0x20000474
   132b0:	20000474 	.word	0x20000474
   132b4:	2000396c 	.word	0x2000396c
   132b8:	00003100 	.word	0x00003100
   132bc:	e000ed00 	.word	0xe000ed00
   132c0:	00016cb5 	.word	0x00016cb5
   132c4:	0000dced 	.word	0x0000dced

000132c8 <Dummy_Handler1>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler1(void)
{
   132c8:	b580      	push	{r7, lr}
   132ca:	af00      	add	r7, sp, #0
        while (1) {
        }
   132cc:	e7fe      	b.n	132cc <Dummy_Handler1+0x4>
   132ce:	46c0      	nop			; (mov r8, r8)

000132d0 <Dummy_Handler2>:
}
void Dummy_Handler2(void)
{
   132d0:	b580      	push	{r7, lr}
   132d2:	af00      	add	r7, sp, #0
        while (1) {
        }
   132d4:	e7fe      	b.n	132d4 <Dummy_Handler2+0x4>
   132d6:	46c0      	nop			; (mov r8, r8)

000132d8 <pow>:
   132d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   132da:	4646      	mov	r6, r8
   132dc:	464f      	mov	r7, r9
   132de:	b4c0      	push	{r6, r7}
   132e0:	b08f      	sub	sp, #60	; 0x3c
   132e2:	1c16      	adds	r6, r2, #0
   132e4:	1c1f      	adds	r7, r3, #0
   132e6:	9000      	str	r0, [sp, #0]
   132e8:	9101      	str	r1, [sp, #4]
   132ea:	f000 f9ad 	bl	13648 <__ieee754_pow>
   132ee:	4abc      	ldr	r2, [pc, #752]	; (135e0 <pow+0x308>)
   132f0:	2300      	movs	r3, #0
   132f2:	56d3      	ldrsb	r3, [r2, r3]
   132f4:	1c04      	adds	r4, r0, #0
   132f6:	1c0d      	adds	r5, r1, #0
   132f8:	4690      	mov	r8, r2
   132fa:	9402      	str	r4, [sp, #8]
   132fc:	9503      	str	r5, [sp, #12]
   132fe:	3301      	adds	r3, #1
   13300:	d005      	beq.n	1330e <pow+0x36>
   13302:	1c30      	adds	r0, r6, #0
   13304:	1c39      	adds	r1, r7, #0
   13306:	f001 f821 	bl	1434c <__fpclassifyd>
   1330a:	2800      	cmp	r0, #0
   1330c:	d106      	bne.n	1331c <pow+0x44>
   1330e:	9802      	ldr	r0, [sp, #8]
   13310:	9903      	ldr	r1, [sp, #12]
   13312:	b00f      	add	sp, #60	; 0x3c
   13314:	bc0c      	pop	{r2, r3}
   13316:	4690      	mov	r8, r2
   13318:	4699      	mov	r9, r3
   1331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1331c:	9800      	ldr	r0, [sp, #0]
   1331e:	9901      	ldr	r1, [sp, #4]
   13320:	f001 f814 	bl	1434c <__fpclassifyd>
   13324:	4681      	mov	r9, r0
   13326:	2800      	cmp	r0, #0
   13328:	d131      	bne.n	1338e <pow+0xb6>
   1332a:	1c30      	adds	r0, r6, #0
   1332c:	1c39      	adds	r1, r7, #0
   1332e:	4ba1      	ldr	r3, [pc, #644]	; (135b4 <pow+0x2dc>)
   13330:	4a9f      	ldr	r2, [pc, #636]	; (135b0 <pow+0x2d8>)
   13332:	f001 fa41 	bl	147b8 <__aeabi_dcmpeq>
   13336:	2800      	cmp	r0, #0
   13338:	d0e9      	beq.n	1330e <pow+0x36>
   1333a:	2301      	movs	r3, #1
   1333c:	9304      	str	r3, [sp, #16]
   1333e:	4ba9      	ldr	r3, [pc, #676]	; (135e4 <pow+0x30c>)
   13340:	ac04      	add	r4, sp, #16
   13342:	6063      	str	r3, [r4, #4]
   13344:	464b      	mov	r3, r9
   13346:	6223      	str	r3, [r4, #32]
   13348:	9a00      	ldr	r2, [sp, #0]
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	60a2      	str	r2, [r4, #8]
   1334e:	60e3      	str	r3, [r4, #12]
   13350:	4a99      	ldr	r2, [pc, #612]	; (135b8 <pow+0x2e0>)
   13352:	4b9a      	ldr	r3, [pc, #616]	; (135bc <pow+0x2e4>)
   13354:	61a2      	str	r2, [r4, #24]
   13356:	61e3      	str	r3, [r4, #28]
   13358:	4642      	mov	r2, r8
   1335a:	2300      	movs	r3, #0
   1335c:	56d3      	ldrsb	r3, [r2, r3]
   1335e:	6126      	str	r6, [r4, #16]
   13360:	6167      	str	r7, [r4, #20]
   13362:	1c5a      	adds	r2, r3, #1
   13364:	d00e      	beq.n	13384 <pow+0xac>
   13366:	2b02      	cmp	r3, #2
   13368:	d00c      	beq.n	13384 <pow+0xac>
   1336a:	1c20      	adds	r0, r4, #0
   1336c:	f001 f81e 	bl	143ac <matherr>
   13370:	2800      	cmp	r0, #0
   13372:	d100      	bne.n	13376 <pow+0x9e>
   13374:	e07b      	b.n	1346e <pow+0x196>
   13376:	6a23      	ldr	r3, [r4, #32]
   13378:	2b00      	cmp	r3, #0
   1337a:	d003      	beq.n	13384 <pow+0xac>
   1337c:	f003 fc94 	bl	16ca8 <__errno>
   13380:	6a23      	ldr	r3, [r4, #32]
   13382:	6003      	str	r3, [r0, #0]
   13384:	69a2      	ldr	r2, [r4, #24]
   13386:	69e3      	ldr	r3, [r4, #28]
   13388:	9202      	str	r2, [sp, #8]
   1338a:	9303      	str	r3, [sp, #12]
   1338c:	e7bf      	b.n	1330e <pow+0x36>
   1338e:	9800      	ldr	r0, [sp, #0]
   13390:	9901      	ldr	r1, [sp, #4]
   13392:	4b88      	ldr	r3, [pc, #544]	; (135b4 <pow+0x2dc>)
   13394:	4a86      	ldr	r2, [pc, #536]	; (135b0 <pow+0x2d8>)
   13396:	f001 fa0f 	bl	147b8 <__aeabi_dcmpeq>
   1339a:	2800      	cmp	r0, #0
   1339c:	d022      	beq.n	133e4 <pow+0x10c>
   1339e:	1c30      	adds	r0, r6, #0
   133a0:	1c39      	adds	r1, r7, #0
   133a2:	4b84      	ldr	r3, [pc, #528]	; (135b4 <pow+0x2dc>)
   133a4:	4a82      	ldr	r2, [pc, #520]	; (135b0 <pow+0x2d8>)
   133a6:	f001 fa07 	bl	147b8 <__aeabi_dcmpeq>
   133aa:	1e05      	subs	r5, r0, #0
   133ac:	d02c      	beq.n	13408 <pow+0x130>
   133ae:	2301      	movs	r3, #1
   133b0:	9304      	str	r3, [sp, #16]
   133b2:	4b8c      	ldr	r3, [pc, #560]	; (135e4 <pow+0x30c>)
   133b4:	ac04      	add	r4, sp, #16
   133b6:	6063      	str	r3, [r4, #4]
   133b8:	2300      	movs	r3, #0
   133ba:	6223      	str	r3, [r4, #32]
   133bc:	9a00      	ldr	r2, [sp, #0]
   133be:	9b01      	ldr	r3, [sp, #4]
   133c0:	60a2      	str	r2, [r4, #8]
   133c2:	60e3      	str	r3, [r4, #12]
   133c4:	4b7b      	ldr	r3, [pc, #492]	; (135b4 <pow+0x2dc>)
   133c6:	4a7a      	ldr	r2, [pc, #488]	; (135b0 <pow+0x2d8>)
   133c8:	61a2      	str	r2, [r4, #24]
   133ca:	61e3      	str	r3, [r4, #28]
   133cc:	4642      	mov	r2, r8
   133ce:	2300      	movs	r3, #0
   133d0:	56d3      	ldrsb	r3, [r2, r3]
   133d2:	6126      	str	r6, [r4, #16]
   133d4:	6167      	str	r7, [r4, #20]
   133d6:	2b00      	cmp	r3, #0
   133d8:	d0c7      	beq.n	1336a <pow+0x92>
   133da:	4a77      	ldr	r2, [pc, #476]	; (135b8 <pow+0x2e0>)
   133dc:	4b77      	ldr	r3, [pc, #476]	; (135bc <pow+0x2e4>)
   133de:	61a2      	str	r2, [r4, #24]
   133e0:	61e3      	str	r3, [r4, #28]
   133e2:	e7cf      	b.n	13384 <pow+0xac>
   133e4:	1c20      	adds	r0, r4, #0
   133e6:	1c29      	adds	r1, r5, #0
   133e8:	f000 ffa8 	bl	1433c <finite>
   133ec:	4681      	mov	r9, r0
   133ee:	2800      	cmp	r0, #0
   133f0:	d042      	beq.n	13478 <pow+0x1a0>
   133f2:	1c20      	adds	r0, r4, #0
   133f4:	1c29      	adds	r1, r5, #0
   133f6:	4b6f      	ldr	r3, [pc, #444]	; (135b4 <pow+0x2dc>)
   133f8:	4a6d      	ldr	r2, [pc, #436]	; (135b0 <pow+0x2d8>)
   133fa:	f001 f9dd 	bl	147b8 <__aeabi_dcmpeq>
   133fe:	2800      	cmp	r0, #0
   13400:	d16c      	bne.n	134dc <pow+0x204>
   13402:	9402      	str	r4, [sp, #8]
   13404:	9503      	str	r5, [sp, #12]
   13406:	e782      	b.n	1330e <pow+0x36>
   13408:	1c30      	adds	r0, r6, #0
   1340a:	1c39      	adds	r1, r7, #0
   1340c:	f000 ff96 	bl	1433c <finite>
   13410:	2800      	cmp	r0, #0
   13412:	d100      	bne.n	13416 <pow+0x13e>
   13414:	e77b      	b.n	1330e <pow+0x36>
   13416:	1c30      	adds	r0, r6, #0
   13418:	1c39      	adds	r1, r7, #0
   1341a:	4b66      	ldr	r3, [pc, #408]	; (135b4 <pow+0x2dc>)
   1341c:	4a64      	ldr	r2, [pc, #400]	; (135b0 <pow+0x2d8>)
   1341e:	f001 f9d1 	bl	147c4 <__aeabi_dcmplt>
   13422:	2800      	cmp	r0, #0
   13424:	d100      	bne.n	13428 <pow+0x150>
   13426:	e772      	b.n	1330e <pow+0x36>
   13428:	2301      	movs	r3, #1
   1342a:	9304      	str	r3, [sp, #16]
   1342c:	4b6d      	ldr	r3, [pc, #436]	; (135e4 <pow+0x30c>)
   1342e:	ac04      	add	r4, sp, #16
   13430:	6063      	str	r3, [r4, #4]
   13432:	9a00      	ldr	r2, [sp, #0]
   13434:	9b01      	ldr	r3, [sp, #4]
   13436:	60a2      	str	r2, [r4, #8]
   13438:	60e3      	str	r3, [r4, #12]
   1343a:	4643      	mov	r3, r8
   1343c:	7819      	ldrb	r1, [r3, #0]
   1343e:	6225      	str	r5, [r4, #32]
   13440:	6126      	str	r6, [r4, #16]
   13442:	6167      	str	r7, [r4, #20]
   13444:	2900      	cmp	r1, #0
   13446:	d100      	bne.n	1344a <pow+0x172>
   13448:	e07a      	b.n	13540 <pow+0x268>
   1344a:	4a5d      	ldr	r2, [pc, #372]	; (135c0 <pow+0x2e8>)
   1344c:	4b5d      	ldr	r3, [pc, #372]	; (135c4 <pow+0x2ec>)
   1344e:	61a2      	str	r2, [r4, #24]
   13450:	61e3      	str	r3, [r4, #28]
   13452:	2902      	cmp	r1, #2
   13454:	d13c      	bne.n	134d0 <pow+0x1f8>
   13456:	f003 fc27 	bl	16ca8 <__errno>
   1345a:	2321      	movs	r3, #33	; 0x21
   1345c:	6003      	str	r3, [r0, #0]
   1345e:	6a23      	ldr	r3, [r4, #32]
   13460:	2b00      	cmp	r3, #0
   13462:	d08f      	beq.n	13384 <pow+0xac>
   13464:	f003 fc20 	bl	16ca8 <__errno>
   13468:	6a22      	ldr	r2, [r4, #32]
   1346a:	6002      	str	r2, [r0, #0]
   1346c:	e78a      	b.n	13384 <pow+0xac>
   1346e:	f003 fc1b 	bl	16ca8 <__errno>
   13472:	2321      	movs	r3, #33	; 0x21
   13474:	6003      	str	r3, [r0, #0]
   13476:	e77e      	b.n	13376 <pow+0x9e>
   13478:	9800      	ldr	r0, [sp, #0]
   1347a:	9901      	ldr	r1, [sp, #4]
   1347c:	f000 ff5e 	bl	1433c <finite>
   13480:	2800      	cmp	r0, #0
   13482:	d0b6      	beq.n	133f2 <pow+0x11a>
   13484:	1c30      	adds	r0, r6, #0
   13486:	1c39      	adds	r1, r7, #0
   13488:	f000 ff58 	bl	1433c <finite>
   1348c:	2800      	cmp	r0, #0
   1348e:	d0b0      	beq.n	133f2 <pow+0x11a>
   13490:	1c20      	adds	r0, r4, #0
   13492:	1c29      	adds	r1, r5, #0
   13494:	f000 ff5a 	bl	1434c <__fpclassifyd>
   13498:	ac04      	add	r4, sp, #16
   1349a:	2800      	cmp	r0, #0
   1349c:	d155      	bne.n	1354a <pow+0x272>
   1349e:	2301      	movs	r3, #1
   134a0:	9304      	str	r3, [sp, #16]
   134a2:	4b50      	ldr	r3, [pc, #320]	; (135e4 <pow+0x30c>)
   134a4:	6220      	str	r0, [r4, #32]
   134a6:	6063      	str	r3, [r4, #4]
   134a8:	9a00      	ldr	r2, [sp, #0]
   134aa:	9b01      	ldr	r3, [sp, #4]
   134ac:	60a2      	str	r2, [r4, #8]
   134ae:	60e3      	str	r3, [r4, #12]
   134b0:	4643      	mov	r3, r8
   134b2:	781d      	ldrb	r5, [r3, #0]
   134b4:	6126      	str	r6, [r4, #16]
   134b6:	6167      	str	r7, [r4, #20]
   134b8:	2d00      	cmp	r5, #0
   134ba:	d041      	beq.n	13540 <pow+0x268>
   134bc:	493d      	ldr	r1, [pc, #244]	; (135b4 <pow+0x2dc>)
   134be:	483c      	ldr	r0, [pc, #240]	; (135b0 <pow+0x2d8>)
   134c0:	1c02      	adds	r2, r0, #0
   134c2:	1c0b      	adds	r3, r1, #0
   134c4:	f001 fd60 	bl	14f88 <__aeabi_ddiv>
   134c8:	61a0      	str	r0, [r4, #24]
   134ca:	61e1      	str	r1, [r4, #28]
   134cc:	2d02      	cmp	r5, #2
   134ce:	d0c2      	beq.n	13456 <pow+0x17e>
   134d0:	1c20      	adds	r0, r4, #0
   134d2:	f000 ff6b 	bl	143ac <matherr>
   134d6:	2800      	cmp	r0, #0
   134d8:	d1c1      	bne.n	1345e <pow+0x186>
   134da:	e7bc      	b.n	13456 <pow+0x17e>
   134dc:	9800      	ldr	r0, [sp, #0]
   134de:	9901      	ldr	r1, [sp, #4]
   134e0:	f000 ff2c 	bl	1433c <finite>
   134e4:	9402      	str	r4, [sp, #8]
   134e6:	9503      	str	r5, [sp, #12]
   134e8:	2800      	cmp	r0, #0
   134ea:	d100      	bne.n	134ee <pow+0x216>
   134ec:	e70f      	b.n	1330e <pow+0x36>
   134ee:	1c30      	adds	r0, r6, #0
   134f0:	1c39      	adds	r1, r7, #0
   134f2:	f000 ff23 	bl	1433c <finite>
   134f6:	9402      	str	r4, [sp, #8]
   134f8:	9503      	str	r5, [sp, #12]
   134fa:	2800      	cmp	r0, #0
   134fc:	d100      	bne.n	13500 <pow+0x228>
   134fe:	e706      	b.n	1330e <pow+0x36>
   13500:	ac04      	add	r4, sp, #16
   13502:	2304      	movs	r3, #4
   13504:	9304      	str	r3, [sp, #16]
   13506:	6126      	str	r6, [r4, #16]
   13508:	6167      	str	r7, [r4, #20]
   1350a:	4b36      	ldr	r3, [pc, #216]	; (135e4 <pow+0x30c>)
   1350c:	6063      	str	r3, [r4, #4]
   1350e:	2300      	movs	r3, #0
   13510:	6223      	str	r3, [r4, #32]
   13512:	9a00      	ldr	r2, [sp, #0]
   13514:	9b01      	ldr	r3, [sp, #4]
   13516:	60a2      	str	r2, [r4, #8]
   13518:	60e3      	str	r3, [r4, #12]
   1351a:	4b26      	ldr	r3, [pc, #152]	; (135b4 <pow+0x2dc>)
   1351c:	4a24      	ldr	r2, [pc, #144]	; (135b0 <pow+0x2d8>)
   1351e:	61a2      	str	r2, [r4, #24]
   13520:	61e3      	str	r3, [r4, #28]
   13522:	4642      	mov	r2, r8
   13524:	2300      	movs	r3, #0
   13526:	56d3      	ldrsb	r3, [r2, r3]
   13528:	2b02      	cmp	r3, #2
   1352a:	d004      	beq.n	13536 <pow+0x25e>
   1352c:	1c20      	adds	r0, r4, #0
   1352e:	f000 ff3d 	bl	143ac <matherr>
   13532:	2800      	cmp	r0, #0
   13534:	d193      	bne.n	1345e <pow+0x186>
   13536:	f003 fbb7 	bl	16ca8 <__errno>
   1353a:	2322      	movs	r3, #34	; 0x22
   1353c:	6003      	str	r3, [r0, #0]
   1353e:	e78e      	b.n	1345e <pow+0x186>
   13540:	4b1c      	ldr	r3, [pc, #112]	; (135b4 <pow+0x2dc>)
   13542:	4a1b      	ldr	r2, [pc, #108]	; (135b0 <pow+0x2d8>)
   13544:	61a2      	str	r2, [r4, #24]
   13546:	61e3      	str	r3, [r4, #28]
   13548:	e7c2      	b.n	134d0 <pow+0x1f8>
   1354a:	2303      	movs	r3, #3
   1354c:	9304      	str	r3, [sp, #16]
   1354e:	4b25      	ldr	r3, [pc, #148]	; (135e4 <pow+0x30c>)
   13550:	6126      	str	r6, [r4, #16]
   13552:	6167      	str	r7, [r4, #20]
   13554:	6063      	str	r3, [r4, #4]
   13556:	464b      	mov	r3, r9
   13558:	6223      	str	r3, [r4, #32]
   1355a:	9a00      	ldr	r2, [sp, #0]
   1355c:	9b01      	ldr	r3, [sp, #4]
   1355e:	60a2      	str	r2, [r4, #8]
   13560:	60e3      	str	r3, [r4, #12]
   13562:	4642      	mov	r2, r8
   13564:	2300      	movs	r3, #0
   13566:	56d3      	ldrsb	r3, [r2, r3]
   13568:	2b00      	cmp	r3, #0
   1356a:	d13d      	bne.n	135e8 <pow+0x310>
   1356c:	4a16      	ldr	r2, [pc, #88]	; (135c8 <pow+0x2f0>)
   1356e:	4b17      	ldr	r3, [pc, #92]	; (135cc <pow+0x2f4>)
   13570:	9800      	ldr	r0, [sp, #0]
   13572:	9901      	ldr	r1, [sp, #4]
   13574:	61a2      	str	r2, [r4, #24]
   13576:	61e3      	str	r3, [r4, #28]
   13578:	4b0e      	ldr	r3, [pc, #56]	; (135b4 <pow+0x2dc>)
   1357a:	4a0d      	ldr	r2, [pc, #52]	; (135b0 <pow+0x2d8>)
   1357c:	f001 f922 	bl	147c4 <__aeabi_dcmplt>
   13580:	2800      	cmp	r0, #0
   13582:	d0ce      	beq.n	13522 <pow+0x24a>
   13584:	4a12      	ldr	r2, [pc, #72]	; (135d0 <pow+0x2f8>)
   13586:	4b13      	ldr	r3, [pc, #76]	; (135d4 <pow+0x2fc>)
   13588:	1c30      	adds	r0, r6, #0
   1358a:	1c39      	adds	r1, r7, #0
   1358c:	f002 f966 	bl	1585c <__aeabi_dmul>
   13590:	1c06      	adds	r6, r0, #0
   13592:	1c0f      	adds	r7, r1, #0
   13594:	f000 ff14 	bl	143c0 <rint>
   13598:	1c32      	adds	r2, r6, #0
   1359a:	1c3b      	adds	r3, r7, #0
   1359c:	f001 f90c 	bl	147b8 <__aeabi_dcmpeq>
   135a0:	2800      	cmp	r0, #0
   135a2:	d1be      	bne.n	13522 <pow+0x24a>
   135a4:	4a0c      	ldr	r2, [pc, #48]	; (135d8 <pow+0x300>)
   135a6:	4b0d      	ldr	r3, [pc, #52]	; (135dc <pow+0x304>)
   135a8:	61a2      	str	r2, [r4, #24]
   135aa:	61e3      	str	r3, [r4, #28]
   135ac:	e7b9      	b.n	13522 <pow+0x24a>
   135ae:	46c0      	nop			; (mov r8, r8)
	...
   135bc:	3ff00000 	.word	0x3ff00000
   135c0:	00000000 	.word	0x00000000
   135c4:	fff00000 	.word	0xfff00000
   135c8:	e0000000 	.word	0xe0000000
   135cc:	47efffff 	.word	0x47efffff
   135d0:	00000000 	.word	0x00000000
   135d4:	3fe00000 	.word	0x3fe00000
   135d8:	e0000000 	.word	0xe0000000
   135dc:	c7efffff 	.word	0xc7efffff
   135e0:	20000045 	.word	0x20000045
   135e4:	00017458 	.word	0x00017458
   135e8:	4b10      	ldr	r3, [pc, #64]	; (1362c <pow+0x354>)
   135ea:	4a0f      	ldr	r2, [pc, #60]	; (13628 <pow+0x350>)
   135ec:	9800      	ldr	r0, [sp, #0]
   135ee:	9901      	ldr	r1, [sp, #4]
   135f0:	61a2      	str	r2, [r4, #24]
   135f2:	61e3      	str	r3, [r4, #28]
   135f4:	4a0e      	ldr	r2, [pc, #56]	; (13630 <pow+0x358>)
   135f6:	4b0f      	ldr	r3, [pc, #60]	; (13634 <pow+0x35c>)
   135f8:	f001 f8e4 	bl	147c4 <__aeabi_dcmplt>
   135fc:	2800      	cmp	r0, #0
   135fe:	d090      	beq.n	13522 <pow+0x24a>
   13600:	4a0d      	ldr	r2, [pc, #52]	; (13638 <pow+0x360>)
   13602:	4b0e      	ldr	r3, [pc, #56]	; (1363c <pow+0x364>)
   13604:	1c30      	adds	r0, r6, #0
   13606:	1c39      	adds	r1, r7, #0
   13608:	f002 f928 	bl	1585c <__aeabi_dmul>
   1360c:	1c06      	adds	r6, r0, #0
   1360e:	1c0f      	adds	r7, r1, #0
   13610:	f000 fed6 	bl	143c0 <rint>
   13614:	1c32      	adds	r2, r6, #0
   13616:	1c3b      	adds	r3, r7, #0
   13618:	f001 f8ce 	bl	147b8 <__aeabi_dcmpeq>
   1361c:	2800      	cmp	r0, #0
   1361e:	d000      	beq.n	13622 <pow+0x34a>
   13620:	e77f      	b.n	13522 <pow+0x24a>
   13622:	4a07      	ldr	r2, [pc, #28]	; (13640 <pow+0x368>)
   13624:	4b07      	ldr	r3, [pc, #28]	; (13644 <pow+0x36c>)
   13626:	e77a      	b.n	1351e <pow+0x246>
   13628:	00000000 	.word	0x00000000
   1362c:	7ff00000 	.word	0x7ff00000
	...
   1363c:	3fe00000 	.word	0x3fe00000
   13640:	00000000 	.word	0x00000000
   13644:	fff00000 	.word	0xfff00000

00013648 <__ieee754_pow>:
   13648:	b5f0      	push	{r4, r5, r6, r7, lr}
   1364a:	465f      	mov	r7, fp
   1364c:	4656      	mov	r6, sl
   1364e:	464d      	mov	r5, r9
   13650:	4644      	mov	r4, r8
   13652:	b4f0      	push	{r4, r5, r6, r7}
   13654:	4699      	mov	r9, r3
   13656:	464b      	mov	r3, r9
   13658:	005c      	lsls	r4, r3, #1
   1365a:	4693      	mov	fp, r2
   1365c:	0864      	lsrs	r4, r4, #1
   1365e:	b08f      	sub	sp, #60	; 0x3c
   13660:	1c0d      	adds	r5, r1, #0
   13662:	1c0f      	adds	r7, r1, #0
   13664:	465a      	mov	r2, fp
   13666:	1c21      	adds	r1, r4, #0
   13668:	9000      	str	r0, [sp, #0]
   1366a:	1c06      	adds	r6, r0, #0
   1366c:	4682      	mov	sl, r0
   1366e:	9302      	str	r3, [sp, #8]
   13670:	4658      	mov	r0, fp
   13672:	4311      	orrs	r1, r2
   13674:	d037      	beq.n	136e6 <__ieee754_pow+0x9e>
   13676:	0069      	lsls	r1, r5, #1
   13678:	0849      	lsrs	r1, r1, #1
   1367a:	4688      	mov	r8, r1
   1367c:	4968      	ldr	r1, [pc, #416]	; (13820 <__ieee754_pow+0x1d8>)
   1367e:	9504      	str	r5, [sp, #16]
   13680:	4588      	cmp	r8, r1
   13682:	dc2b      	bgt.n	136dc <__ieee754_pow+0x94>
   13684:	d028      	beq.n	136d8 <__ieee754_pow+0x90>
   13686:	4966      	ldr	r1, [pc, #408]	; (13820 <__ieee754_pow+0x1d8>)
   13688:	428c      	cmp	r4, r1
   1368a:	dc27      	bgt.n	136dc <__ieee754_pow+0x94>
   1368c:	d100      	bne.n	13690 <__ieee754_pow+0x48>
   1368e:	e080      	b.n	13792 <__ieee754_pow+0x14a>
   13690:	2100      	movs	r1, #0
   13692:	9108      	str	r1, [sp, #32]
   13694:	9904      	ldr	r1, [sp, #16]
   13696:	2900      	cmp	r1, #0
   13698:	da00      	bge.n	1369c <__ieee754_pow+0x54>
   1369a:	e07e      	b.n	1379a <__ieee754_pow+0x152>
   1369c:	2800      	cmp	r0, #0
   1369e:	d133      	bne.n	13708 <__ieee754_pow+0xc0>
   136a0:	4b5f      	ldr	r3, [pc, #380]	; (13820 <__ieee754_pow+0x1d8>)
   136a2:	429c      	cmp	r4, r3
   136a4:	d100      	bne.n	136a8 <__ieee754_pow+0x60>
   136a6:	e096      	b.n	137d6 <__ieee754_pow+0x18e>
   136a8:	4b5e      	ldr	r3, [pc, #376]	; (13824 <__ieee754_pow+0x1dc>)
   136aa:	429c      	cmp	r4, r3
   136ac:	d06a      	beq.n	13784 <__ieee754_pow+0x13c>
   136ae:	9802      	ldr	r0, [sp, #8]
   136b0:	2380      	movs	r3, #128	; 0x80
   136b2:	05db      	lsls	r3, r3, #23
   136b4:	4298      	cmp	r0, r3
   136b6:	d101      	bne.n	136bc <__ieee754_pow+0x74>
   136b8:	f000 fbe1 	bl	13e7e <__ieee754_pow+0x836>
   136bc:	4b5a      	ldr	r3, [pc, #360]	; (13828 <__ieee754_pow+0x1e0>)
   136be:	9902      	ldr	r1, [sp, #8]
   136c0:	4299      	cmp	r1, r3
   136c2:	d121      	bne.n	13708 <__ieee754_pow+0xc0>
   136c4:	9a04      	ldr	r2, [sp, #16]
   136c6:	2a00      	cmp	r2, #0
   136c8:	db1e      	blt.n	13708 <__ieee754_pow+0xc0>
   136ca:	1c29      	adds	r1, r5, #0
   136cc:	9800      	ldr	r0, [sp, #0]
   136ce:	f000 fd4b 	bl	14168 <__ieee754_sqrt>
   136d2:	1c06      	adds	r6, r0, #0
   136d4:	1c0d      	adds	r5, r1, #0
   136d6:	e008      	b.n	136ea <__ieee754_pow+0xa2>
   136d8:	2e00      	cmp	r6, #0
   136da:	d0d4      	beq.n	13686 <__ieee754_pow+0x3e>
   136dc:	4a53      	ldr	r2, [pc, #332]	; (1382c <__ieee754_pow+0x1e4>)
   136de:	1c13      	adds	r3, r2, #0
   136e0:	4443      	add	r3, r8
   136e2:	4333      	orrs	r3, r6
   136e4:	d10a      	bne.n	136fc <__ieee754_pow+0xb4>
   136e6:	4d4f      	ldr	r5, [pc, #316]	; (13824 <__ieee754_pow+0x1dc>)
   136e8:	2600      	movs	r6, #0
   136ea:	1c30      	adds	r0, r6, #0
   136ec:	1c29      	adds	r1, r5, #0
   136ee:	b00f      	add	sp, #60	; 0x3c
   136f0:	bc3c      	pop	{r2, r3, r4, r5}
   136f2:	4690      	mov	r8, r2
   136f4:	4699      	mov	r9, r3
   136f6:	46a2      	mov	sl, r4
   136f8:	46ab      	mov	fp, r5
   136fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   136fc:	484c      	ldr	r0, [pc, #304]	; (13830 <__ieee754_pow+0x1e8>)
   136fe:	f000 fe57 	bl	143b0 <nan>
   13702:	1c06      	adds	r6, r0, #0
   13704:	1c0d      	adds	r5, r1, #0
   13706:	e7f0      	b.n	136ea <__ieee754_pow+0xa2>
   13708:	9800      	ldr	r0, [sp, #0]
   1370a:	1c29      	adds	r1, r5, #0
   1370c:	f000 fe12 	bl	14334 <fabs>
   13710:	4653      	mov	r3, sl
   13712:	9006      	str	r0, [sp, #24]
   13714:	468c      	mov	ip, r1
   13716:	2b00      	cmp	r3, #0
   13718:	d020      	beq.n	1375c <__ieee754_pow+0x114>
   1371a:	0ffb      	lsrs	r3, r7, #31
   1371c:	3b01      	subs	r3, #1
   1371e:	9304      	str	r3, [sp, #16]
   13720:	9e04      	ldr	r6, [sp, #16]
   13722:	9b08      	ldr	r3, [sp, #32]
   13724:	4333      	orrs	r3, r6
   13726:	d06a      	beq.n	137fe <__ieee754_pow+0x1b6>
   13728:	4b42      	ldr	r3, [pc, #264]	; (13834 <__ieee754_pow+0x1ec>)
   1372a:	429c      	cmp	r4, r3
   1372c:	dc00      	bgt.n	13730 <__ieee754_pow+0xe8>
   1372e:	e08d      	b.n	1384c <__ieee754_pow+0x204>
   13730:	4b41      	ldr	r3, [pc, #260]	; (13838 <__ieee754_pow+0x1f0>)
   13732:	429c      	cmp	r4, r3
   13734:	dc01      	bgt.n	1373a <__ieee754_pow+0xf2>
   13736:	f000 fc35 	bl	13fa4 <__ieee754_pow+0x95c>
   1373a:	4b40      	ldr	r3, [pc, #256]	; (1383c <__ieee754_pow+0x1f4>)
   1373c:	4598      	cmp	r8, r3
   1373e:	dc00      	bgt.n	13742 <__ieee754_pow+0xfa>
   13740:	e389      	b.n	13e56 <__ieee754_pow+0x80e>
   13742:	9e02      	ldr	r6, [sp, #8]
   13744:	2e00      	cmp	r6, #0
   13746:	dc00      	bgt.n	1374a <__ieee754_pow+0x102>
   13748:	e389      	b.n	13e5e <__ieee754_pow+0x816>
   1374a:	4934      	ldr	r1, [pc, #208]	; (1381c <__ieee754_pow+0x1d4>)
   1374c:	4832      	ldr	r0, [pc, #200]	; (13818 <__ieee754_pow+0x1d0>)
   1374e:	1c02      	adds	r2, r0, #0
   13750:	1c0b      	adds	r3, r1, #0
   13752:	f002 f883 	bl	1585c <__aeabi_dmul>
   13756:	1c06      	adds	r6, r0, #0
   13758:	1c0d      	adds	r5, r1, #0
   1375a:	e7c6      	b.n	136ea <__ieee754_pow+0xa2>
   1375c:	4640      	mov	r0, r8
   1375e:	2800      	cmp	r0, #0
   13760:	d004      	beq.n	1376c <__ieee754_pow+0x124>
   13762:	4b30      	ldr	r3, [pc, #192]	; (13824 <__ieee754_pow+0x1dc>)
   13764:	00ba      	lsls	r2, r7, #2
   13766:	0892      	lsrs	r2, r2, #2
   13768:	429a      	cmp	r2, r3
   1376a:	d1d6      	bne.n	1371a <__ieee754_pow+0xd2>
   1376c:	9c02      	ldr	r4, [sp, #8]
   1376e:	2c00      	cmp	r4, #0
   13770:	da01      	bge.n	13776 <__ieee754_pow+0x12e>
   13772:	f000 fbc4 	bl	13efe <__ieee754_pow+0x8b6>
   13776:	9e04      	ldr	r6, [sp, #16]
   13778:	2e00      	cmp	r6, #0
   1377a:	da00      	bge.n	1377e <__ieee754_pow+0x136>
   1377c:	e373      	b.n	13e66 <__ieee754_pow+0x81e>
   1377e:	9e06      	ldr	r6, [sp, #24]
   13780:	4665      	mov	r5, ip
   13782:	e7b2      	b.n	136ea <__ieee754_pow+0xa2>
   13784:	9c02      	ldr	r4, [sp, #8]
   13786:	2c00      	cmp	r4, #0
   13788:	da01      	bge.n	1378e <__ieee754_pow+0x146>
   1378a:	f000 fc76 	bl	1407a <__ieee754_pow+0xa32>
   1378e:	9e00      	ldr	r6, [sp, #0]
   13790:	e7ab      	b.n	136ea <__ieee754_pow+0xa2>
   13792:	2800      	cmp	r0, #0
   13794:	d100      	bne.n	13798 <__ieee754_pow+0x150>
   13796:	e77b      	b.n	13690 <__ieee754_pow+0x48>
   13798:	e7a0      	b.n	136dc <__ieee754_pow+0x94>
   1379a:	4929      	ldr	r1, [pc, #164]	; (13840 <__ieee754_pow+0x1f8>)
   1379c:	428c      	cmp	r4, r1
   1379e:	dc2b      	bgt.n	137f8 <__ieee754_pow+0x1b0>
   137a0:	4926      	ldr	r1, [pc, #152]	; (1383c <__ieee754_pow+0x1f4>)
   137a2:	428c      	cmp	r4, r1
   137a4:	dc00      	bgt.n	137a8 <__ieee754_pow+0x160>
   137a6:	e779      	b.n	1369c <__ieee754_pow+0x54>
   137a8:	1521      	asrs	r1, r4, #20
   137aa:	468c      	mov	ip, r1
   137ac:	4925      	ldr	r1, [pc, #148]	; (13844 <__ieee754_pow+0x1fc>)
   137ae:	458c      	cmp	ip, r1
   137b0:	dc01      	bgt.n	137b6 <__ieee754_pow+0x16e>
   137b2:	f000 fc86 	bl	140c2 <__ieee754_pow+0xa7a>
   137b6:	4b24      	ldr	r3, [pc, #144]	; (13848 <__ieee754_pow+0x200>)
   137b8:	4661      	mov	r1, ip
   137ba:	1a5b      	subs	r3, r3, r1
   137bc:	1c11      	adds	r1, r2, #0
   137be:	40d9      	lsrs	r1, r3
   137c0:	1c0a      	adds	r2, r1, #0
   137c2:	409a      	lsls	r2, r3
   137c4:	4282      	cmp	r2, r0
   137c6:	d000      	beq.n	137ca <__ieee754_pow+0x182>
   137c8:	e768      	b.n	1369c <__ieee754_pow+0x54>
   137ca:	2201      	movs	r2, #1
   137cc:	400a      	ands	r2, r1
   137ce:	2302      	movs	r3, #2
   137d0:	1a9b      	subs	r3, r3, r2
   137d2:	9308      	str	r3, [sp, #32]
   137d4:	e762      	b.n	1369c <__ieee754_pow+0x54>
   137d6:	4a15      	ldr	r2, [pc, #84]	; (1382c <__ieee754_pow+0x1e4>)
   137d8:	1c13      	adds	r3, r2, #0
   137da:	4443      	add	r3, r8
   137dc:	4333      	orrs	r3, r6
   137de:	d100      	bne.n	137e2 <__ieee754_pow+0x19a>
   137e0:	e781      	b.n	136e6 <__ieee754_pow+0x9e>
   137e2:	4b16      	ldr	r3, [pc, #88]	; (1383c <__ieee754_pow+0x1f4>)
   137e4:	4598      	cmp	r8, r3
   137e6:	dc00      	bgt.n	137ea <__ieee754_pow+0x1a2>
   137e8:	e37f      	b.n	13eea <__ieee754_pow+0x8a2>
   137ea:	9c02      	ldr	r4, [sp, #8]
   137ec:	2c00      	cmp	r4, #0
   137ee:	da00      	bge.n	137f2 <__ieee754_pow+0x1aa>
   137f0:	e335      	b.n	13e5e <__ieee754_pow+0x816>
   137f2:	465e      	mov	r6, fp
   137f4:	464d      	mov	r5, r9
   137f6:	e778      	b.n	136ea <__ieee754_pow+0xa2>
   137f8:	2102      	movs	r1, #2
   137fa:	9108      	str	r1, [sp, #32]
   137fc:	e74e      	b.n	1369c <__ieee754_pow+0x54>
   137fe:	9800      	ldr	r0, [sp, #0]
   13800:	9a00      	ldr	r2, [sp, #0]
   13802:	1c29      	adds	r1, r5, #0
   13804:	1c2b      	adds	r3, r5, #0
   13806:	f002 fab9 	bl	15d7c <__aeabi_dsub>
   1380a:	1c02      	adds	r2, r0, #0
   1380c:	1c0b      	adds	r3, r1, #0
   1380e:	f001 fbbb 	bl	14f88 <__aeabi_ddiv>
   13812:	1c06      	adds	r6, r0, #0
   13814:	1c0d      	adds	r5, r1, #0
   13816:	e768      	b.n	136ea <__ieee754_pow+0xa2>
   13818:	8800759c 	.word	0x8800759c
   1381c:	7e37e43c 	.word	0x7e37e43c
   13820:	7ff00000 	.word	0x7ff00000
   13824:	3ff00000 	.word	0x3ff00000
   13828:	3fe00000 	.word	0x3fe00000
   1382c:	c0100000 	.word	0xc0100000
   13830:	00017490 	.word	0x00017490
   13834:	41e00000 	.word	0x41e00000
   13838:	43f00000 	.word	0x43f00000
   1383c:	3fefffff 	.word	0x3fefffff
   13840:	433fffff 	.word	0x433fffff
   13844:	00000413 	.word	0x00000413
   13848:	00000433 	.word	0x00000433
   1384c:	4ae2      	ldr	r2, [pc, #904]	; (13bd8 <__ieee754_pow+0x590>)
   1384e:	2300      	movs	r3, #0
   13850:	4590      	cmp	r8, r2
   13852:	dc09      	bgt.n	13868 <__ieee754_pow+0x220>
   13854:	9806      	ldr	r0, [sp, #24]
   13856:	4bc5      	ldr	r3, [pc, #788]	; (13b6c <__ieee754_pow+0x524>)
   13858:	4ac3      	ldr	r2, [pc, #780]	; (13b68 <__ieee754_pow+0x520>)
   1385a:	4661      	mov	r1, ip
   1385c:	f001 fffe 	bl	1585c <__aeabi_dmul>
   13860:	2335      	movs	r3, #53	; 0x35
   13862:	9006      	str	r0, [sp, #24]
   13864:	4688      	mov	r8, r1
   13866:	425b      	negs	r3, r3
   13868:	4640      	mov	r0, r8
   1386a:	49dc      	ldr	r1, [pc, #880]	; (13bdc <__ieee754_pow+0x594>)
   1386c:	1502      	asrs	r2, r0, #20
   1386e:	1852      	adds	r2, r2, r1
   13870:	18d2      	adds	r2, r2, r3
   13872:	4692      	mov	sl, r2
   13874:	0303      	lsls	r3, r0, #12
   13876:	4dda      	ldr	r5, [pc, #872]	; (13be0 <__ieee754_pow+0x598>)
   13878:	4ada      	ldr	r2, [pc, #872]	; (13be4 <__ieee754_pow+0x59c>)
   1387a:	0b1b      	lsrs	r3, r3, #12
   1387c:	431d      	orrs	r5, r3
   1387e:	4293      	cmp	r3, r2
   13880:	dc01      	bgt.n	13886 <__ieee754_pow+0x23e>
   13882:	f000 fbf6 	bl	14072 <__ieee754_pow+0xa2a>
   13886:	4ad8      	ldr	r2, [pc, #864]	; (13be8 <__ieee754_pow+0x5a0>)
   13888:	4293      	cmp	r3, r2
   1388a:	dc01      	bgt.n	13890 <__ieee754_pow+0x248>
   1388c:	f000 fc36 	bl	140fc <__ieee754_pow+0xab4>
   13890:	4bd6      	ldr	r3, [pc, #856]	; (13bec <__ieee754_pow+0x5a4>)
   13892:	2201      	movs	r2, #1
   13894:	4492      	add	sl, r2
   13896:	18ed      	adds	r5, r5, r3
   13898:	2400      	movs	r4, #0
   1389a:	2100      	movs	r1, #0
   1389c:	9a06      	ldr	r2, [sp, #24]
   1389e:	1c2b      	adds	r3, r5, #0
   138a0:	9206      	str	r2, [sp, #24]
   138a2:	9307      	str	r3, [sp, #28]
   138a4:	00c9      	lsls	r1, r1, #3
   138a6:	4bd2      	ldr	r3, [pc, #840]	; (13bf0 <__ieee754_pow+0x5a8>)
   138a8:	4688      	mov	r8, r1
   138aa:	4443      	add	r3, r8
   138ac:	6818      	ldr	r0, [r3, #0]
   138ae:	6859      	ldr	r1, [r3, #4]
   138b0:	900a      	str	r0, [sp, #40]	; 0x28
   138b2:	910b      	str	r1, [sp, #44]	; 0x2c
   138b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   138b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138b8:	9806      	ldr	r0, [sp, #24]
   138ba:	9907      	ldr	r1, [sp, #28]
   138bc:	f002 fa5e 	bl	15d7c <__aeabi_dsub>
   138c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   138c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138c4:	1c06      	adds	r6, r0, #0
   138c6:	1c0f      	adds	r7, r1, #0
   138c8:	9806      	ldr	r0, [sp, #24]
   138ca:	9907      	ldr	r1, [sp, #28]
   138cc:	f001 f83a 	bl	14944 <__aeabi_dadd>
   138d0:	1c02      	adds	r2, r0, #0
   138d2:	1c0b      	adds	r3, r1, #0
   138d4:	48a6      	ldr	r0, [pc, #664]	; (13b70 <__ieee754_pow+0x528>)
   138d6:	49a7      	ldr	r1, [pc, #668]	; (13b74 <__ieee754_pow+0x52c>)
   138d8:	f001 fb56 	bl	14f88 <__aeabi_ddiv>
   138dc:	900c      	str	r0, [sp, #48]	; 0x30
   138de:	910d      	str	r1, [sp, #52]	; 0x34
   138e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   138e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   138e4:	1c30      	adds	r0, r6, #0
   138e6:	1c39      	adds	r1, r7, #0
   138e8:	f001 ffb8 	bl	1585c <__aeabi_dmul>
   138ec:	9002      	str	r0, [sp, #8]
   138ee:	9103      	str	r1, [sp, #12]
   138f0:	1c0b      	adds	r3, r1, #0
   138f2:	2180      	movs	r1, #128	; 0x80
   138f4:	0589      	lsls	r1, r1, #22
   138f6:	106d      	asrs	r5, r5, #1
   138f8:	2080      	movs	r0, #128	; 0x80
   138fa:	2200      	movs	r2, #0
   138fc:	430d      	orrs	r5, r1
   138fe:	0300      	lsls	r0, r0, #12
   13900:	9200      	str	r2, [sp, #0]
   13902:	9301      	str	r3, [sp, #4]
   13904:	4a9c      	ldr	r2, [pc, #624]	; (13b78 <__ieee754_pow+0x530>)
   13906:	4b9d      	ldr	r3, [pc, #628]	; (13b7c <__ieee754_pow+0x534>)
   13908:	1829      	adds	r1, r5, r0
   1390a:	190b      	adds	r3, r1, r4
   1390c:	9800      	ldr	r0, [sp, #0]
   1390e:	9901      	ldr	r1, [sp, #4]
   13910:	1c14      	adds	r4, r2, #0
   13912:	1c1d      	adds	r5, r3, #0
   13914:	f001 ffa2 	bl	1585c <__aeabi_dmul>
   13918:	1c02      	adds	r2, r0, #0
   1391a:	1c0b      	adds	r3, r1, #0
   1391c:	1c30      	adds	r0, r6, #0
   1391e:	1c39      	adds	r1, r7, #0
   13920:	f002 fa2c 	bl	15d7c <__aeabi_dsub>
   13924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13928:	1c06      	adds	r6, r0, #0
   1392a:	1c0f      	adds	r7, r1, #0
   1392c:	1c20      	adds	r0, r4, #0
   1392e:	1c29      	adds	r1, r5, #0
   13930:	f002 fa24 	bl	15d7c <__aeabi_dsub>
   13934:	1c02      	adds	r2, r0, #0
   13936:	1c0b      	adds	r3, r1, #0
   13938:	9806      	ldr	r0, [sp, #24]
   1393a:	9907      	ldr	r1, [sp, #28]
   1393c:	f002 fa1e 	bl	15d7c <__aeabi_dsub>
   13940:	1c02      	adds	r2, r0, #0
   13942:	1c0b      	adds	r3, r1, #0
   13944:	9800      	ldr	r0, [sp, #0]
   13946:	9901      	ldr	r1, [sp, #4]
   13948:	f001 ff88 	bl	1585c <__aeabi_dmul>
   1394c:	1c02      	adds	r2, r0, #0
   1394e:	1c0b      	adds	r3, r1, #0
   13950:	1c30      	adds	r0, r6, #0
   13952:	1c39      	adds	r1, r7, #0
   13954:	f002 fa12 	bl	15d7c <__aeabi_dsub>
   13958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1395a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1395c:	f001 ff7e 	bl	1585c <__aeabi_dmul>
   13960:	9006      	str	r0, [sp, #24]
   13962:	9107      	str	r1, [sp, #28]
   13964:	9802      	ldr	r0, [sp, #8]
   13966:	9903      	ldr	r1, [sp, #12]
   13968:	1c02      	adds	r2, r0, #0
   1396a:	1c0b      	adds	r3, r1, #0
   1396c:	f001 ff76 	bl	1585c <__aeabi_dmul>
   13970:	1c04      	adds	r4, r0, #0
   13972:	1c0d      	adds	r5, r1, #0
   13974:	1c22      	adds	r2, r4, #0
   13976:	1c2b      	adds	r3, r5, #0
   13978:	f001 ff70 	bl	1585c <__aeabi_dmul>
   1397c:	4a80      	ldr	r2, [pc, #512]	; (13b80 <__ieee754_pow+0x538>)
   1397e:	4b81      	ldr	r3, [pc, #516]	; (13b84 <__ieee754_pow+0x53c>)
   13980:	1c06      	adds	r6, r0, #0
   13982:	1c0f      	adds	r7, r1, #0
   13984:	1c20      	adds	r0, r4, #0
   13986:	1c29      	adds	r1, r5, #0
   13988:	f001 ff68 	bl	1585c <__aeabi_dmul>
   1398c:	4a7e      	ldr	r2, [pc, #504]	; (13b88 <__ieee754_pow+0x540>)
   1398e:	4b7f      	ldr	r3, [pc, #508]	; (13b8c <__ieee754_pow+0x544>)
   13990:	f000 ffd8 	bl	14944 <__aeabi_dadd>
   13994:	1c22      	adds	r2, r4, #0
   13996:	1c2b      	adds	r3, r5, #0
   13998:	f001 ff60 	bl	1585c <__aeabi_dmul>
   1399c:	4a7c      	ldr	r2, [pc, #496]	; (13b90 <__ieee754_pow+0x548>)
   1399e:	4b7d      	ldr	r3, [pc, #500]	; (13b94 <__ieee754_pow+0x54c>)
   139a0:	f000 ffd0 	bl	14944 <__aeabi_dadd>
   139a4:	1c22      	adds	r2, r4, #0
   139a6:	1c2b      	adds	r3, r5, #0
   139a8:	f001 ff58 	bl	1585c <__aeabi_dmul>
   139ac:	4a7a      	ldr	r2, [pc, #488]	; (13b98 <__ieee754_pow+0x550>)
   139ae:	4b7b      	ldr	r3, [pc, #492]	; (13b9c <__ieee754_pow+0x554>)
   139b0:	f000 ffc8 	bl	14944 <__aeabi_dadd>
   139b4:	1c22      	adds	r2, r4, #0
   139b6:	1c2b      	adds	r3, r5, #0
   139b8:	f001 ff50 	bl	1585c <__aeabi_dmul>
   139bc:	4a78      	ldr	r2, [pc, #480]	; (13ba0 <__ieee754_pow+0x558>)
   139be:	4b79      	ldr	r3, [pc, #484]	; (13ba4 <__ieee754_pow+0x55c>)
   139c0:	f000 ffc0 	bl	14944 <__aeabi_dadd>
   139c4:	1c22      	adds	r2, r4, #0
   139c6:	1c2b      	adds	r3, r5, #0
   139c8:	f001 ff48 	bl	1585c <__aeabi_dmul>
   139cc:	4a76      	ldr	r2, [pc, #472]	; (13ba8 <__ieee754_pow+0x560>)
   139ce:	4b77      	ldr	r3, [pc, #476]	; (13bac <__ieee754_pow+0x564>)
   139d0:	f000 ffb8 	bl	14944 <__aeabi_dadd>
   139d4:	1c02      	adds	r2, r0, #0
   139d6:	1c0b      	adds	r3, r1, #0
   139d8:	1c30      	adds	r0, r6, #0
   139da:	1c39      	adds	r1, r7, #0
   139dc:	f001 ff3e 	bl	1585c <__aeabi_dmul>
   139e0:	9a02      	ldr	r2, [sp, #8]
   139e2:	9b03      	ldr	r3, [sp, #12]
   139e4:	1c04      	adds	r4, r0, #0
   139e6:	1c0d      	adds	r5, r1, #0
   139e8:	9800      	ldr	r0, [sp, #0]
   139ea:	9901      	ldr	r1, [sp, #4]
   139ec:	f000 ffaa 	bl	14944 <__aeabi_dadd>
   139f0:	9a06      	ldr	r2, [sp, #24]
   139f2:	9b07      	ldr	r3, [sp, #28]
   139f4:	f001 ff32 	bl	1585c <__aeabi_dmul>
   139f8:	1c22      	adds	r2, r4, #0
   139fa:	1c2b      	adds	r3, r5, #0
   139fc:	f000 ffa2 	bl	14944 <__aeabi_dadd>
   13a00:	1c06      	adds	r6, r0, #0
   13a02:	1c0f      	adds	r7, r1, #0
   13a04:	9800      	ldr	r0, [sp, #0]
   13a06:	9901      	ldr	r1, [sp, #4]
   13a08:	1c02      	adds	r2, r0, #0
   13a0a:	1c0b      	adds	r3, r1, #0
   13a0c:	f001 ff26 	bl	1585c <__aeabi_dmul>
   13a10:	4a67      	ldr	r2, [pc, #412]	; (13bb0 <__ieee754_pow+0x568>)
   13a12:	4b68      	ldr	r3, [pc, #416]	; (13bb4 <__ieee754_pow+0x56c>)
   13a14:	900a      	str	r0, [sp, #40]	; 0x28
   13a16:	910b      	str	r1, [sp, #44]	; 0x2c
   13a18:	f000 ff94 	bl	14944 <__aeabi_dadd>
   13a1c:	1c32      	adds	r2, r6, #0
   13a1e:	1c3b      	adds	r3, r7, #0
   13a20:	f000 ff90 	bl	14944 <__aeabi_dadd>
   13a24:	2400      	movs	r4, #0
   13a26:	1c0d      	adds	r5, r1, #0
   13a28:	1c22      	adds	r2, r4, #0
   13a2a:	9800      	ldr	r0, [sp, #0]
   13a2c:	9901      	ldr	r1, [sp, #4]
   13a2e:	1c2b      	adds	r3, r5, #0
   13a30:	f001 ff14 	bl	1585c <__aeabi_dmul>
   13a34:	1c22      	adds	r2, r4, #0
   13a36:	1c2b      	adds	r3, r5, #0
   13a38:	9000      	str	r0, [sp, #0]
   13a3a:	9101      	str	r1, [sp, #4]
   13a3c:	9806      	ldr	r0, [sp, #24]
   13a3e:	9907      	ldr	r1, [sp, #28]
   13a40:	f001 ff0c 	bl	1585c <__aeabi_dmul>
   13a44:	4a5a      	ldr	r2, [pc, #360]	; (13bb0 <__ieee754_pow+0x568>)
   13a46:	4b5b      	ldr	r3, [pc, #364]	; (13bb4 <__ieee754_pow+0x56c>)
   13a48:	9006      	str	r0, [sp, #24]
   13a4a:	9107      	str	r1, [sp, #28]
   13a4c:	1c20      	adds	r0, r4, #0
   13a4e:	1c29      	adds	r1, r5, #0
   13a50:	f002 f994 	bl	15d7c <__aeabi_dsub>
   13a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a58:	f002 f990 	bl	15d7c <__aeabi_dsub>
   13a5c:	1c02      	adds	r2, r0, #0
   13a5e:	1c0b      	adds	r3, r1, #0
   13a60:	1c30      	adds	r0, r6, #0
   13a62:	1c39      	adds	r1, r7, #0
   13a64:	f002 f98a 	bl	15d7c <__aeabi_dsub>
   13a68:	9a02      	ldr	r2, [sp, #8]
   13a6a:	9b03      	ldr	r3, [sp, #12]
   13a6c:	f001 fef6 	bl	1585c <__aeabi_dmul>
   13a70:	1c02      	adds	r2, r0, #0
   13a72:	1c0b      	adds	r3, r1, #0
   13a74:	9806      	ldr	r0, [sp, #24]
   13a76:	9907      	ldr	r1, [sp, #28]
   13a78:	f000 ff64 	bl	14944 <__aeabi_dadd>
   13a7c:	1c06      	adds	r6, r0, #0
   13a7e:	1c0f      	adds	r7, r1, #0
   13a80:	1c32      	adds	r2, r6, #0
   13a82:	1c3b      	adds	r3, r7, #0
   13a84:	9800      	ldr	r0, [sp, #0]
   13a86:	9901      	ldr	r1, [sp, #4]
   13a88:	f000 ff5c 	bl	14944 <__aeabi_dadd>
   13a8c:	4a4a      	ldr	r2, [pc, #296]	; (13bb8 <__ieee754_pow+0x570>)
   13a8e:	4b4b      	ldr	r3, [pc, #300]	; (13bbc <__ieee754_pow+0x574>)
   13a90:	2400      	movs	r4, #0
   13a92:	1c20      	adds	r0, r4, #0
   13a94:	1c0d      	adds	r5, r1, #0
   13a96:	f001 fee1 	bl	1585c <__aeabi_dmul>
   13a9a:	4a49      	ldr	r2, [pc, #292]	; (13bc0 <__ieee754_pow+0x578>)
   13a9c:	4b49      	ldr	r3, [pc, #292]	; (13bc4 <__ieee754_pow+0x57c>)
   13a9e:	9006      	str	r0, [sp, #24]
   13aa0:	9107      	str	r1, [sp, #28]
   13aa2:	1c20      	adds	r0, r4, #0
   13aa4:	1c29      	adds	r1, r5, #0
   13aa6:	f001 fed9 	bl	1585c <__aeabi_dmul>
   13aaa:	9a00      	ldr	r2, [sp, #0]
   13aac:	9b01      	ldr	r3, [sp, #4]
   13aae:	9002      	str	r0, [sp, #8]
   13ab0:	9103      	str	r1, [sp, #12]
   13ab2:	1c20      	adds	r0, r4, #0
   13ab4:	1c29      	adds	r1, r5, #0
   13ab6:	f002 f961 	bl	15d7c <__aeabi_dsub>
   13aba:	1c02      	adds	r2, r0, #0
   13abc:	1c0b      	adds	r3, r1, #0
   13abe:	1c30      	adds	r0, r6, #0
   13ac0:	1c39      	adds	r1, r7, #0
   13ac2:	f002 f95b 	bl	15d7c <__aeabi_dsub>
   13ac6:	4a40      	ldr	r2, [pc, #256]	; (13bc8 <__ieee754_pow+0x580>)
   13ac8:	4b40      	ldr	r3, [pc, #256]	; (13bcc <__ieee754_pow+0x584>)
   13aca:	f001 fec7 	bl	1585c <__aeabi_dmul>
   13ace:	1c02      	adds	r2, r0, #0
   13ad0:	1c0b      	adds	r3, r1, #0
   13ad2:	9802      	ldr	r0, [sp, #8]
   13ad4:	9903      	ldr	r1, [sp, #12]
   13ad6:	f000 ff35 	bl	14944 <__aeabi_dadd>
   13ada:	4b46      	ldr	r3, [pc, #280]	; (13bf4 <__ieee754_pow+0x5ac>)
   13adc:	4443      	add	r3, r8
   13ade:	681a      	ldr	r2, [r3, #0]
   13ae0:	685b      	ldr	r3, [r3, #4]
   13ae2:	f000 ff2f 	bl	14944 <__aeabi_dadd>
   13ae6:	1c06      	adds	r6, r0, #0
   13ae8:	4650      	mov	r0, sl
   13aea:	1c0f      	adds	r7, r1, #0
   13aec:	f002 fcae 	bl	1644c <__aeabi_i2d>
   13af0:	1c0d      	adds	r5, r1, #0
   13af2:	4941      	ldr	r1, [pc, #260]	; (13bf8 <__ieee754_pow+0x5b0>)
   13af4:	1c04      	adds	r4, r0, #0
   13af6:	4441      	add	r1, r8
   13af8:	680a      	ldr	r2, [r1, #0]
   13afa:	684b      	ldr	r3, [r1, #4]
   13afc:	9806      	ldr	r0, [sp, #24]
   13afe:	9907      	ldr	r1, [sp, #28]
   13b00:	9202      	str	r2, [sp, #8]
   13b02:	9303      	str	r3, [sp, #12]
   13b04:	1c32      	adds	r2, r6, #0
   13b06:	1c3b      	adds	r3, r7, #0
   13b08:	f000 ff1c 	bl	14944 <__aeabi_dadd>
   13b0c:	9a02      	ldr	r2, [sp, #8]
   13b0e:	9b03      	ldr	r3, [sp, #12]
   13b10:	f000 ff18 	bl	14944 <__aeabi_dadd>
   13b14:	1c22      	adds	r2, r4, #0
   13b16:	1c2b      	adds	r3, r5, #0
   13b18:	f000 ff14 	bl	14944 <__aeabi_dadd>
   13b1c:	2200      	movs	r2, #0
   13b1e:	1c0b      	adds	r3, r1, #0
   13b20:	9200      	str	r2, [sp, #0]
   13b22:	9301      	str	r3, [sp, #4]
   13b24:	1c10      	adds	r0, r2, #0
   13b26:	1c2b      	adds	r3, r5, #0
   13b28:	1c22      	adds	r2, r4, #0
   13b2a:	f002 f927 	bl	15d7c <__aeabi_dsub>
   13b2e:	9a02      	ldr	r2, [sp, #8]
   13b30:	9b03      	ldr	r3, [sp, #12]
   13b32:	f002 f923 	bl	15d7c <__aeabi_dsub>
   13b36:	9a06      	ldr	r2, [sp, #24]
   13b38:	9b07      	ldr	r3, [sp, #28]
   13b3a:	f002 f91f 	bl	15d7c <__aeabi_dsub>
   13b3e:	1c02      	adds	r2, r0, #0
   13b40:	1c0b      	adds	r3, r1, #0
   13b42:	1c30      	adds	r0, r6, #0
   13b44:	1c39      	adds	r1, r7, #0
   13b46:	f002 f919 	bl	15d7c <__aeabi_dsub>
   13b4a:	9002      	str	r0, [sp, #8]
   13b4c:	9103      	str	r1, [sp, #12]
   13b4e:	9b08      	ldr	r3, [sp, #32]
   13b50:	9c04      	ldr	r4, [sp, #16]
   13b52:	3b01      	subs	r3, #1
   13b54:	4323      	orrs	r3, r4
   13b56:	d000      	beq.n	13b5a <__ieee754_pow+0x512>
   13b58:	e1c2      	b.n	13ee0 <__ieee754_pow+0x898>
   13b5a:	481d      	ldr	r0, [pc, #116]	; (13bd0 <__ieee754_pow+0x588>)
   13b5c:	491d      	ldr	r1, [pc, #116]	; (13bd4 <__ieee754_pow+0x58c>)
   13b5e:	9004      	str	r0, [sp, #16]
   13b60:	9105      	str	r1, [sp, #20]
   13b62:	e04b      	b.n	13bfc <__ieee754_pow+0x5b4>
   13b64:	46c0      	nop			; (mov r8, r8)
   13b66:	46c0      	nop			; (mov r8, r8)
   13b68:	00000000 	.word	0x00000000
   13b6c:	43400000 	.word	0x43400000
   13b70:	00000000 	.word	0x00000000
   13b74:	3ff00000 	.word	0x3ff00000
	...
   13b80:	4a454eef 	.word	0x4a454eef
   13b84:	3fca7e28 	.word	0x3fca7e28
   13b88:	93c9db65 	.word	0x93c9db65
   13b8c:	3fcd864a 	.word	0x3fcd864a
   13b90:	a91d4101 	.word	0xa91d4101
   13b94:	3fd17460 	.word	0x3fd17460
   13b98:	518f264d 	.word	0x518f264d
   13b9c:	3fd55555 	.word	0x3fd55555
   13ba0:	db6fabff 	.word	0xdb6fabff
   13ba4:	3fdb6db6 	.word	0x3fdb6db6
   13ba8:	33333303 	.word	0x33333303
   13bac:	3fe33333 	.word	0x3fe33333
   13bb0:	00000000 	.word	0x00000000
   13bb4:	40080000 	.word	0x40080000
   13bb8:	e0000000 	.word	0xe0000000
   13bbc:	3feec709 	.word	0x3feec709
   13bc0:	145b01f5 	.word	0x145b01f5
   13bc4:	be3e2fe0 	.word	0xbe3e2fe0
   13bc8:	dc3a03fd 	.word	0xdc3a03fd
   13bcc:	3feec709 	.word	0x3feec709
   13bd0:	00000000 	.word	0x00000000
   13bd4:	bff00000 	.word	0xbff00000
   13bd8:	000fffff 	.word	0x000fffff
   13bdc:	fffffc01 	.word	0xfffffc01
   13be0:	3ff00000 	.word	0x3ff00000
   13be4:	0003988e 	.word	0x0003988e
   13be8:	000bb679 	.word	0x000bb679
   13bec:	fff00000 	.word	0xfff00000
   13bf0:	00017480 	.word	0x00017480
   13bf4:	00017470 	.word	0x00017470
   13bf8:	00017460 	.word	0x00017460
   13bfc:	2600      	movs	r6, #0
   13bfe:	1c32      	adds	r2, r6, #0
   13c00:	464b      	mov	r3, r9
   13c02:	4658      	mov	r0, fp
   13c04:	4649      	mov	r1, r9
   13c06:	f002 f8b9 	bl	15d7c <__aeabi_dsub>
   13c0a:	9a00      	ldr	r2, [sp, #0]
   13c0c:	9b01      	ldr	r3, [sp, #4]
   13c0e:	f001 fe25 	bl	1585c <__aeabi_dmul>
   13c12:	9a02      	ldr	r2, [sp, #8]
   13c14:	9b03      	ldr	r3, [sp, #12]
   13c16:	1c04      	adds	r4, r0, #0
   13c18:	1c0d      	adds	r5, r1, #0
   13c1a:	4658      	mov	r0, fp
   13c1c:	4649      	mov	r1, r9
   13c1e:	f001 fe1d 	bl	1585c <__aeabi_dmul>
   13c22:	1c02      	adds	r2, r0, #0
   13c24:	1c0b      	adds	r3, r1, #0
   13c26:	1c20      	adds	r0, r4, #0
   13c28:	1c29      	adds	r1, r5, #0
   13c2a:	f000 fe8b 	bl	14944 <__aeabi_dadd>
   13c2e:	9a00      	ldr	r2, [sp, #0]
   13c30:	9b01      	ldr	r3, [sp, #4]
   13c32:	9002      	str	r0, [sp, #8]
   13c34:	9103      	str	r1, [sp, #12]
   13c36:	1c30      	adds	r0, r6, #0
   13c38:	4649      	mov	r1, r9
   13c3a:	f001 fe0f 	bl	1585c <__aeabi_dmul>
   13c3e:	9000      	str	r0, [sp, #0]
   13c40:	9101      	str	r1, [sp, #4]
   13c42:	9a00      	ldr	r2, [sp, #0]
   13c44:	9b01      	ldr	r3, [sp, #4]
   13c46:	9802      	ldr	r0, [sp, #8]
   13c48:	9903      	ldr	r1, [sp, #12]
   13c4a:	f000 fe7b 	bl	14944 <__aeabi_dadd>
   13c4e:	4bcc      	ldr	r3, [pc, #816]	; (13f80 <__ieee754_pow+0x938>)
   13c50:	1c04      	adds	r4, r0, #0
   13c52:	1c0d      	adds	r5, r1, #0
   13c54:	1c0f      	adds	r7, r1, #0
   13c56:	4688      	mov	r8, r1
   13c58:	4299      	cmp	r1, r3
   13c5a:	dc00      	bgt.n	13c5e <__ieee754_pow+0x616>
   13c5c:	e119      	b.n	13e92 <__ieee754_pow+0x84a>
   13c5e:	4ac9      	ldr	r2, [pc, #804]	; (13f84 <__ieee754_pow+0x93c>)
   13c60:	188b      	adds	r3, r1, r2
   13c62:	4303      	orrs	r3, r0
   13c64:	d000      	beq.n	13c68 <__ieee754_pow+0x620>
   13c66:	e212      	b.n	1408e <__ieee754_pow+0xa46>
   13c68:	4bac      	ldr	r3, [pc, #688]	; (13f1c <__ieee754_pow+0x8d4>)
   13c6a:	4aab      	ldr	r2, [pc, #684]	; (13f18 <__ieee754_pow+0x8d0>)
   13c6c:	9802      	ldr	r0, [sp, #8]
   13c6e:	9903      	ldr	r1, [sp, #12]
   13c70:	f000 fe68 	bl	14944 <__aeabi_dadd>
   13c74:	9a00      	ldr	r2, [sp, #0]
   13c76:	9b01      	ldr	r3, [sp, #4]
   13c78:	9008      	str	r0, [sp, #32]
   13c7a:	9109      	str	r1, [sp, #36]	; 0x24
   13c7c:	1c20      	adds	r0, r4, #0
   13c7e:	1c29      	adds	r1, r5, #0
   13c80:	f002 f87c 	bl	15d7c <__aeabi_dsub>
   13c84:	1c02      	adds	r2, r0, #0
   13c86:	1c0b      	adds	r3, r1, #0
   13c88:	9808      	ldr	r0, [sp, #32]
   13c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   13c8c:	f000 fdae 	bl	147ec <__aeabi_dcmpgt>
   13c90:	46a9      	mov	r9, r5
   13c92:	2800      	cmp	r0, #0
   13c94:	d000      	beq.n	13c98 <__ieee754_pow+0x650>
   13c96:	e1fa      	b.n	1408e <__ieee754_pow+0xa46>
   13c98:	464a      	mov	r2, r9
   13c9a:	4bbb      	ldr	r3, [pc, #748]	; (13f88 <__ieee754_pow+0x940>)
   13c9c:	2480      	movs	r4, #128	; 0x80
   13c9e:	1511      	asrs	r1, r2, #20
   13ca0:	0364      	lsls	r4, r4, #13
   13ca2:	18c9      	adds	r1, r1, r3
   13ca4:	1c20      	adds	r0, r4, #0
   13ca6:	4108      	asrs	r0, r1
   13ca8:	19c1      	adds	r1, r0, r7
   13caa:	0048      	lsls	r0, r1, #1
   13cac:	4a9c      	ldr	r2, [pc, #624]	; (13f20 <__ieee754_pow+0x8d8>)
   13cae:	4b9d      	ldr	r3, [pc, #628]	; (13f24 <__ieee754_pow+0x8dc>)
   13cb0:	1c0b      	adds	r3, r1, #0
   13cb2:	0309      	lsls	r1, r1, #12
   13cb4:	4eb5      	ldr	r6, [pc, #724]	; (13f8c <__ieee754_pow+0x944>)
   13cb6:	0b09      	lsrs	r1, r1, #12
   13cb8:	0d40      	lsrs	r0, r0, #21
   13cba:	430c      	orrs	r4, r1
   13cbc:	49b4      	ldr	r1, [pc, #720]	; (13f90 <__ieee754_pow+0x948>)
   13cbe:	1985      	adds	r5, r0, r6
   13cc0:	4eb4      	ldr	r6, [pc, #720]	; (13f94 <__ieee754_pow+0x94c>)
   13cc2:	1a08      	subs	r0, r1, r0
   13cc4:	4104      	asrs	r4, r0
   13cc6:	412e      	asrs	r6, r5
   13cc8:	4640      	mov	r0, r8
   13cca:	43b3      	bics	r3, r6
   13ccc:	46a1      	mov	r9, r4
   13cce:	2800      	cmp	r0, #0
   13cd0:	da00      	bge.n	13cd4 <__ieee754_pow+0x68c>
   13cd2:	e21e      	b.n	14112 <__ieee754_pow+0xaca>
   13cd4:	9800      	ldr	r0, [sp, #0]
   13cd6:	9901      	ldr	r1, [sp, #4]
   13cd8:	f002 f850 	bl	15d7c <__aeabi_dsub>
   13cdc:	9000      	str	r0, [sp, #0]
   13cde:	9101      	str	r1, [sp, #4]
   13ce0:	9a00      	ldr	r2, [sp, #0]
   13ce2:	9b01      	ldr	r3, [sp, #4]
   13ce4:	9802      	ldr	r0, [sp, #8]
   13ce6:	9903      	ldr	r1, [sp, #12]
   13ce8:	f000 fe2c 	bl	14944 <__aeabi_dadd>
   13cec:	464a      	mov	r2, r9
   13cee:	0512      	lsls	r2, r2, #20
   13cf0:	4690      	mov	r8, r2
   13cf2:	2400      	movs	r4, #0
   13cf4:	1c20      	adds	r0, r4, #0
   13cf6:	4a8c      	ldr	r2, [pc, #560]	; (13f28 <__ieee754_pow+0x8e0>)
   13cf8:	4b8c      	ldr	r3, [pc, #560]	; (13f2c <__ieee754_pow+0x8e4>)
   13cfa:	1c0d      	adds	r5, r1, #0
   13cfc:	1c0f      	adds	r7, r1, #0
   13cfe:	f001 fdad 	bl	1585c <__aeabi_dmul>
   13d02:	9a00      	ldr	r2, [sp, #0]
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	9008      	str	r0, [sp, #32]
   13d08:	9109      	str	r1, [sp, #36]	; 0x24
   13d0a:	1c20      	adds	r0, r4, #0
   13d0c:	1c29      	adds	r1, r5, #0
   13d0e:	f002 f835 	bl	15d7c <__aeabi_dsub>
   13d12:	1c02      	adds	r2, r0, #0
   13d14:	1c0b      	adds	r3, r1, #0
   13d16:	9802      	ldr	r0, [sp, #8]
   13d18:	9903      	ldr	r1, [sp, #12]
   13d1a:	f002 f82f 	bl	15d7c <__aeabi_dsub>
   13d1e:	4a84      	ldr	r2, [pc, #528]	; (13f30 <__ieee754_pow+0x8e8>)
   13d20:	4b84      	ldr	r3, [pc, #528]	; (13f34 <__ieee754_pow+0x8ec>)
   13d22:	f001 fd9b 	bl	1585c <__aeabi_dmul>
   13d26:	4a84      	ldr	r2, [pc, #528]	; (13f38 <__ieee754_pow+0x8f0>)
   13d28:	4b84      	ldr	r3, [pc, #528]	; (13f3c <__ieee754_pow+0x8f4>)
   13d2a:	1c26      	adds	r6, r4, #0
   13d2c:	1c0d      	adds	r5, r1, #0
   13d2e:	1c04      	adds	r4, r0, #0
   13d30:	1c39      	adds	r1, r7, #0
   13d32:	1c30      	adds	r0, r6, #0
   13d34:	f001 fd92 	bl	1585c <__aeabi_dmul>
   13d38:	1c02      	adds	r2, r0, #0
   13d3a:	1c0b      	adds	r3, r1, #0
   13d3c:	1c20      	adds	r0, r4, #0
   13d3e:	1c29      	adds	r1, r5, #0
   13d40:	f000 fe00 	bl	14944 <__aeabi_dadd>
   13d44:	1c04      	adds	r4, r0, #0
   13d46:	1c0d      	adds	r5, r1, #0
   13d48:	1c22      	adds	r2, r4, #0
   13d4a:	1c2b      	adds	r3, r5, #0
   13d4c:	9808      	ldr	r0, [sp, #32]
   13d4e:	9909      	ldr	r1, [sp, #36]	; 0x24
   13d50:	f000 fdf8 	bl	14944 <__aeabi_dadd>
   13d54:	9a08      	ldr	r2, [sp, #32]
   13d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d58:	1c06      	adds	r6, r0, #0
   13d5a:	1c0f      	adds	r7, r1, #0
   13d5c:	f002 f80e 	bl	15d7c <__aeabi_dsub>
   13d60:	1c02      	adds	r2, r0, #0
   13d62:	1c0b      	adds	r3, r1, #0
   13d64:	1c20      	adds	r0, r4, #0
   13d66:	1c29      	adds	r1, r5, #0
   13d68:	f002 f808 	bl	15d7c <__aeabi_dsub>
   13d6c:	1c32      	adds	r2, r6, #0
   13d6e:	9000      	str	r0, [sp, #0]
   13d70:	9101      	str	r1, [sp, #4]
   13d72:	1c3b      	adds	r3, r7, #0
   13d74:	1c30      	adds	r0, r6, #0
   13d76:	1c39      	adds	r1, r7, #0
   13d78:	f001 fd70 	bl	1585c <__aeabi_dmul>
   13d7c:	4a70      	ldr	r2, [pc, #448]	; (13f40 <__ieee754_pow+0x8f8>)
   13d7e:	4b71      	ldr	r3, [pc, #452]	; (13f44 <__ieee754_pow+0x8fc>)
   13d80:	1c04      	adds	r4, r0, #0
   13d82:	1c0d      	adds	r5, r1, #0
   13d84:	f001 fd6a 	bl	1585c <__aeabi_dmul>
   13d88:	4a6f      	ldr	r2, [pc, #444]	; (13f48 <__ieee754_pow+0x900>)
   13d8a:	4b70      	ldr	r3, [pc, #448]	; (13f4c <__ieee754_pow+0x904>)
   13d8c:	f001 fff6 	bl	15d7c <__aeabi_dsub>
   13d90:	1c22      	adds	r2, r4, #0
   13d92:	1c2b      	adds	r3, r5, #0
   13d94:	f001 fd62 	bl	1585c <__aeabi_dmul>
   13d98:	4a6d      	ldr	r2, [pc, #436]	; (13f50 <__ieee754_pow+0x908>)
   13d9a:	4b6e      	ldr	r3, [pc, #440]	; (13f54 <__ieee754_pow+0x90c>)
   13d9c:	f000 fdd2 	bl	14944 <__aeabi_dadd>
   13da0:	1c22      	adds	r2, r4, #0
   13da2:	1c2b      	adds	r3, r5, #0
   13da4:	f001 fd5a 	bl	1585c <__aeabi_dmul>
   13da8:	4a6b      	ldr	r2, [pc, #428]	; (13f58 <__ieee754_pow+0x910>)
   13daa:	4b6c      	ldr	r3, [pc, #432]	; (13f5c <__ieee754_pow+0x914>)
   13dac:	f001 ffe6 	bl	15d7c <__aeabi_dsub>
   13db0:	1c22      	adds	r2, r4, #0
   13db2:	1c2b      	adds	r3, r5, #0
   13db4:	f001 fd52 	bl	1585c <__aeabi_dmul>
   13db8:	4a69      	ldr	r2, [pc, #420]	; (13f60 <__ieee754_pow+0x918>)
   13dba:	4b6a      	ldr	r3, [pc, #424]	; (13f64 <__ieee754_pow+0x91c>)
   13dbc:	f000 fdc2 	bl	14944 <__aeabi_dadd>
   13dc0:	1c22      	adds	r2, r4, #0
   13dc2:	1c2b      	adds	r3, r5, #0
   13dc4:	f001 fd4a 	bl	1585c <__aeabi_dmul>
   13dc8:	1c02      	adds	r2, r0, #0
   13dca:	1c0b      	adds	r3, r1, #0
   13dcc:	1c30      	adds	r0, r6, #0
   13dce:	1c39      	adds	r1, r7, #0
   13dd0:	f001 ffd4 	bl	15d7c <__aeabi_dsub>
   13dd4:	1c04      	adds	r4, r0, #0
   13dd6:	1c0d      	adds	r5, r1, #0
   13dd8:	1c22      	adds	r2, r4, #0
   13dda:	1c2b      	adds	r3, r5, #0
   13ddc:	1c30      	adds	r0, r6, #0
   13dde:	1c39      	adds	r1, r7, #0
   13de0:	f001 fd3c 	bl	1585c <__aeabi_dmul>
   13de4:	4a60      	ldr	r2, [pc, #384]	; (13f68 <__ieee754_pow+0x920>)
   13de6:	4b61      	ldr	r3, [pc, #388]	; (13f6c <__ieee754_pow+0x924>)
   13de8:	9002      	str	r0, [sp, #8]
   13dea:	9103      	str	r1, [sp, #12]
   13dec:	1c20      	adds	r0, r4, #0
   13dee:	1c29      	adds	r1, r5, #0
   13df0:	f001 ffc4 	bl	15d7c <__aeabi_dsub>
   13df4:	1c02      	adds	r2, r0, #0
   13df6:	1c0b      	adds	r3, r1, #0
   13df8:	9802      	ldr	r0, [sp, #8]
   13dfa:	9903      	ldr	r1, [sp, #12]
   13dfc:	f001 f8c4 	bl	14f88 <__aeabi_ddiv>
   13e00:	9a00      	ldr	r2, [sp, #0]
   13e02:	9b01      	ldr	r3, [sp, #4]
   13e04:	1c04      	adds	r4, r0, #0
   13e06:	1c0d      	adds	r5, r1, #0
   13e08:	1c30      	adds	r0, r6, #0
   13e0a:	1c39      	adds	r1, r7, #0
   13e0c:	f001 fd26 	bl	1585c <__aeabi_dmul>
   13e10:	9a00      	ldr	r2, [sp, #0]
   13e12:	9b01      	ldr	r3, [sp, #4]
   13e14:	f000 fd96 	bl	14944 <__aeabi_dadd>
   13e18:	1c02      	adds	r2, r0, #0
   13e1a:	1c0b      	adds	r3, r1, #0
   13e1c:	1c20      	adds	r0, r4, #0
   13e1e:	1c29      	adds	r1, r5, #0
   13e20:	f001 ffac 	bl	15d7c <__aeabi_dsub>
   13e24:	1c32      	adds	r2, r6, #0
   13e26:	1c3b      	adds	r3, r7, #0
   13e28:	f001 ffa8 	bl	15d7c <__aeabi_dsub>
   13e2c:	1c0b      	adds	r3, r1, #0
   13e2e:	1c02      	adds	r2, r0, #0
   13e30:	484f      	ldr	r0, [pc, #316]	; (13f70 <__ieee754_pow+0x928>)
   13e32:	4950      	ldr	r1, [pc, #320]	; (13f74 <__ieee754_pow+0x92c>)
   13e34:	f001 ffa2 	bl	15d7c <__aeabi_dsub>
   13e38:	4646      	mov	r6, r8
   13e3a:	1873      	adds	r3, r6, r1
   13e3c:	151c      	asrs	r4, r3, #20
   13e3e:	2c00      	cmp	r4, #0
   13e40:	dc00      	bgt.n	13e44 <__ieee754_pow+0x7fc>
   13e42:	e160      	b.n	14106 <__ieee754_pow+0xabe>
   13e44:	1c02      	adds	r2, r0, #0
   13e46:	9804      	ldr	r0, [sp, #16]
   13e48:	9905      	ldr	r1, [sp, #20]
   13e4a:	f001 fd07 	bl	1585c <__aeabi_dmul>
   13e4e:	1c06      	adds	r6, r0, #0
   13e50:	1c0d      	adds	r5, r1, #0
   13e52:	f7ff fc4a 	bl	136ea <__ieee754_pow+0xa2>
   13e56:	9c02      	ldr	r4, [sp, #8]
   13e58:	2c00      	cmp	r4, #0
   13e5a:	da00      	bge.n	13e5e <__ieee754_pow+0x816>
   13e5c:	e475      	b.n	1374a <__ieee754_pow+0x102>
   13e5e:	2600      	movs	r6, #0
   13e60:	2500      	movs	r5, #0
   13e62:	f7ff fc42 	bl	136ea <__ieee754_pow+0xa2>
   13e66:	484c      	ldr	r0, [pc, #304]	; (13f98 <__ieee754_pow+0x950>)
   13e68:	9c08      	ldr	r4, [sp, #32]
   13e6a:	1c03      	adds	r3, r0, #0
   13e6c:	4443      	add	r3, r8
   13e6e:	4323      	orrs	r3, r4
   13e70:	d000      	beq.n	13e74 <__ieee754_pow+0x82c>
   13e72:	e11a      	b.n	140aa <__ieee754_pow+0xa62>
   13e74:	9806      	ldr	r0, [sp, #24]
   13e76:	4661      	mov	r1, ip
   13e78:	9a06      	ldr	r2, [sp, #24]
   13e7a:	4663      	mov	r3, ip
   13e7c:	e4c3      	b.n	13806 <__ieee754_pow+0x1be>
   13e7e:	1c29      	adds	r1, r5, #0
   13e80:	1c2b      	adds	r3, r5, #0
   13e82:	9800      	ldr	r0, [sp, #0]
   13e84:	9a00      	ldr	r2, [sp, #0]
   13e86:	f001 fce9 	bl	1585c <__aeabi_dmul>
   13e8a:	1c06      	adds	r6, r0, #0
   13e8c:	1c0d      	adds	r5, r1, #0
   13e8e:	f7ff fc2c 	bl	136ea <__ieee754_pow+0xa2>
   13e92:	004b      	lsls	r3, r1, #1
   13e94:	085b      	lsrs	r3, r3, #1
   13e96:	4699      	mov	r9, r3
   13e98:	4b40      	ldr	r3, [pc, #256]	; (13f9c <__ieee754_pow+0x954>)
   13e9a:	4599      	cmp	r9, r3
   13e9c:	dc00      	bgt.n	13ea0 <__ieee754_pow+0x858>
   13e9e:	e125      	b.n	140ec <__ieee754_pow+0xaa4>
   13ea0:	483f      	ldr	r0, [pc, #252]	; (13fa0 <__ieee754_pow+0x958>)
   13ea2:	180b      	adds	r3, r1, r0
   13ea4:	4323      	orrs	r3, r4
   13ea6:	d10d      	bne.n	13ec4 <__ieee754_pow+0x87c>
   13ea8:	9a00      	ldr	r2, [sp, #0]
   13eaa:	9b01      	ldr	r3, [sp, #4]
   13eac:	1c20      	adds	r0, r4, #0
   13eae:	f001 ff65 	bl	15d7c <__aeabi_dsub>
   13eb2:	1c02      	adds	r2, r0, #0
   13eb4:	1c0b      	adds	r3, r1, #0
   13eb6:	9802      	ldr	r0, [sp, #8]
   13eb8:	9903      	ldr	r1, [sp, #12]
   13eba:	f000 fc8d 	bl	147d8 <__aeabi_dcmple>
   13ebe:	2800      	cmp	r0, #0
   13ec0:	d100      	bne.n	13ec4 <__ieee754_pow+0x87c>
   13ec2:	e6e9      	b.n	13c98 <__ieee754_pow+0x650>
   13ec4:	4a2c      	ldr	r2, [pc, #176]	; (13f78 <__ieee754_pow+0x930>)
   13ec6:	4b2d      	ldr	r3, [pc, #180]	; (13f7c <__ieee754_pow+0x934>)
   13ec8:	9804      	ldr	r0, [sp, #16]
   13eca:	9905      	ldr	r1, [sp, #20]
   13ecc:	f001 fcc6 	bl	1585c <__aeabi_dmul>
   13ed0:	4a29      	ldr	r2, [pc, #164]	; (13f78 <__ieee754_pow+0x930>)
   13ed2:	4b2a      	ldr	r3, [pc, #168]	; (13f7c <__ieee754_pow+0x934>)
   13ed4:	f001 fcc2 	bl	1585c <__aeabi_dmul>
   13ed8:	1c06      	adds	r6, r0, #0
   13eda:	1c0d      	adds	r5, r1, #0
   13edc:	f7ff fc05 	bl	136ea <__ieee754_pow+0xa2>
   13ee0:	4923      	ldr	r1, [pc, #140]	; (13f70 <__ieee754_pow+0x928>)
   13ee2:	4a24      	ldr	r2, [pc, #144]	; (13f74 <__ieee754_pow+0x92c>)
   13ee4:	9104      	str	r1, [sp, #16]
   13ee6:	9205      	str	r2, [sp, #20]
   13ee8:	e688      	b.n	13bfc <__ieee754_pow+0x5b4>
   13eea:	9e02      	ldr	r6, [sp, #8]
   13eec:	2e00      	cmp	r6, #0
   13eee:	dab6      	bge.n	13e5e <__ieee754_pow+0x816>
   13ef0:	2080      	movs	r0, #128	; 0x80
   13ef2:	0600      	lsls	r0, r0, #24
   13ef4:	1c05      	adds	r5, r0, #0
   13ef6:	465e      	mov	r6, fp
   13ef8:	444d      	add	r5, r9
   13efa:	f7ff fbf6 	bl	136ea <__ieee754_pow+0xa2>
   13efe:	9a06      	ldr	r2, [sp, #24]
   13f00:	4663      	mov	r3, ip
   13f02:	481b      	ldr	r0, [pc, #108]	; (13f70 <__ieee754_pow+0x928>)
   13f04:	491b      	ldr	r1, [pc, #108]	; (13f74 <__ieee754_pow+0x92c>)
   13f06:	f001 f83f 	bl	14f88 <__aeabi_ddiv>
   13f0a:	9006      	str	r0, [sp, #24]
   13f0c:	468c      	mov	ip, r1
   13f0e:	f7ff fc32 	bl	13776 <__ieee754_pow+0x12e>
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	46c0      	nop			; (mov r8, r8)
   13f16:	46c0      	nop			; (mov r8, r8)
   13f18:	652b82fe 	.word	0x652b82fe
   13f1c:	3c971547 	.word	0x3c971547
	...
   13f2c:	3fe62e43 	.word	0x3fe62e43
   13f30:	fefa39ef 	.word	0xfefa39ef
   13f34:	3fe62e42 	.word	0x3fe62e42
   13f38:	0ca86c39 	.word	0x0ca86c39
   13f3c:	be205c61 	.word	0xbe205c61
   13f40:	72bea4d0 	.word	0x72bea4d0
   13f44:	3e663769 	.word	0x3e663769
   13f48:	c5d26bf1 	.word	0xc5d26bf1
   13f4c:	3ebbbd41 	.word	0x3ebbbd41
   13f50:	af25de2c 	.word	0xaf25de2c
   13f54:	3f11566a 	.word	0x3f11566a
   13f58:	16bebd93 	.word	0x16bebd93
   13f5c:	3f66c16c 	.word	0x3f66c16c
   13f60:	5555553e 	.word	0x5555553e
   13f64:	3fc55555 	.word	0x3fc55555
   13f68:	00000000 	.word	0x00000000
   13f6c:	40000000 	.word	0x40000000
   13f70:	00000000 	.word	0x00000000
   13f74:	3ff00000 	.word	0x3ff00000
   13f78:	c2f8f359 	.word	0xc2f8f359
   13f7c:	01a56e1f 	.word	0x01a56e1f
   13f80:	408fffff 	.word	0x408fffff
   13f84:	bf700000 	.word	0xbf700000
   13f88:	fffffc02 	.word	0xfffffc02
   13f8c:	fffffc01 	.word	0xfffffc01
   13f90:	00000413 	.word	0x00000413
   13f94:	000fffff 	.word	0x000fffff
   13f98:	c0100000 	.word	0xc0100000
   13f9c:	4090cbff 	.word	0x4090cbff
   13fa0:	3f6f3400 	.word	0x3f6f3400
   13fa4:	4b6c      	ldr	r3, [pc, #432]	; (14158 <__ieee754_pow+0xb10>)
   13fa6:	4598      	cmp	r8, r3
   13fa8:	dc00      	bgt.n	13fac <__ieee754_pow+0x964>
   13faa:	e754      	b.n	13e56 <__ieee754_pow+0x80e>
   13fac:	4b6b      	ldr	r3, [pc, #428]	; (1415c <__ieee754_pow+0xb14>)
   13fae:	4598      	cmp	r8, r3
   13fb0:	dd01      	ble.n	13fb6 <__ieee754_pow+0x96e>
   13fb2:	f7ff fbc6 	bl	13742 <__ieee754_pow+0xfa>
   13fb6:	4661      	mov	r1, ip
   13fb8:	4b58      	ldr	r3, [pc, #352]	; (1411c <__ieee754_pow+0xad4>)
   13fba:	4a57      	ldr	r2, [pc, #348]	; (14118 <__ieee754_pow+0xad0>)
   13fbc:	9806      	ldr	r0, [sp, #24]
   13fbe:	f001 fedd 	bl	15d7c <__aeabi_dsub>
   13fc2:	4a57      	ldr	r2, [pc, #348]	; (14120 <__ieee754_pow+0xad8>)
   13fc4:	4b57      	ldr	r3, [pc, #348]	; (14124 <__ieee754_pow+0xadc>)
   13fc6:	1c04      	adds	r4, r0, #0
   13fc8:	1c0d      	adds	r5, r1, #0
   13fca:	f001 fc47 	bl	1585c <__aeabi_dmul>
   13fce:	4a56      	ldr	r2, [pc, #344]	; (14128 <__ieee754_pow+0xae0>)
   13fd0:	4b56      	ldr	r3, [pc, #344]	; (1412c <__ieee754_pow+0xae4>)
   13fd2:	1c06      	adds	r6, r0, #0
   13fd4:	1c0f      	adds	r7, r1, #0
   13fd6:	1c20      	adds	r0, r4, #0
   13fd8:	1c29      	adds	r1, r5, #0
   13fda:	f001 fc3f 	bl	1585c <__aeabi_dmul>
   13fde:	1c22      	adds	r2, r4, #0
   13fe0:	9000      	str	r0, [sp, #0]
   13fe2:	9101      	str	r1, [sp, #4]
   13fe4:	1c2b      	adds	r3, r5, #0
   13fe6:	1c20      	adds	r0, r4, #0
   13fe8:	1c29      	adds	r1, r5, #0
   13fea:	f001 fc37 	bl	1585c <__aeabi_dmul>
   13fee:	4a50      	ldr	r2, [pc, #320]	; (14130 <__ieee754_pow+0xae8>)
   13ff0:	4b50      	ldr	r3, [pc, #320]	; (14134 <__ieee754_pow+0xaec>)
   13ff2:	9002      	str	r0, [sp, #8]
   13ff4:	9103      	str	r1, [sp, #12]
   13ff6:	1c20      	adds	r0, r4, #0
   13ff8:	1c29      	adds	r1, r5, #0
   13ffa:	f001 fc2f 	bl	1585c <__aeabi_dmul>
   13ffe:	1c02      	adds	r2, r0, #0
   14000:	1c0b      	adds	r3, r1, #0
   14002:	484d      	ldr	r0, [pc, #308]	; (14138 <__ieee754_pow+0xaf0>)
   14004:	494d      	ldr	r1, [pc, #308]	; (1413c <__ieee754_pow+0xaf4>)
   14006:	f001 feb9 	bl	15d7c <__aeabi_dsub>
   1400a:	1c22      	adds	r2, r4, #0
   1400c:	1c2b      	adds	r3, r5, #0
   1400e:	f001 fc25 	bl	1585c <__aeabi_dmul>
   14012:	1c02      	adds	r2, r0, #0
   14014:	1c0b      	adds	r3, r1, #0
   14016:	484a      	ldr	r0, [pc, #296]	; (14140 <__ieee754_pow+0xaf8>)
   14018:	494a      	ldr	r1, [pc, #296]	; (14144 <__ieee754_pow+0xafc>)
   1401a:	f001 feaf 	bl	15d7c <__aeabi_dsub>
   1401e:	1c02      	adds	r2, r0, #0
   14020:	1c0b      	adds	r3, r1, #0
   14022:	9802      	ldr	r0, [sp, #8]
   14024:	9903      	ldr	r1, [sp, #12]
   14026:	f001 fc19 	bl	1585c <__aeabi_dmul>
   1402a:	4a47      	ldr	r2, [pc, #284]	; (14148 <__ieee754_pow+0xb00>)
   1402c:	4b47      	ldr	r3, [pc, #284]	; (1414c <__ieee754_pow+0xb04>)
   1402e:	f001 fc15 	bl	1585c <__aeabi_dmul>
   14032:	1c02      	adds	r2, r0, #0
   14034:	1c0b      	adds	r3, r1, #0
   14036:	9800      	ldr	r0, [sp, #0]
   14038:	9901      	ldr	r1, [sp, #4]
   1403a:	f001 fe9f 	bl	15d7c <__aeabi_dsub>
   1403e:	1c04      	adds	r4, r0, #0
   14040:	1c0d      	adds	r5, r1, #0
   14042:	1c22      	adds	r2, r4, #0
   14044:	1c2b      	adds	r3, r5, #0
   14046:	1c30      	adds	r0, r6, #0
   14048:	1c39      	adds	r1, r7, #0
   1404a:	f000 fc7b 	bl	14944 <__aeabi_dadd>
   1404e:	2200      	movs	r2, #0
   14050:	1c0b      	adds	r3, r1, #0
   14052:	9200      	str	r2, [sp, #0]
   14054:	9301      	str	r3, [sp, #4]
   14056:	1c10      	adds	r0, r2, #0
   14058:	1c3b      	adds	r3, r7, #0
   1405a:	1c32      	adds	r2, r6, #0
   1405c:	f001 fe8e 	bl	15d7c <__aeabi_dsub>
   14060:	1c02      	adds	r2, r0, #0
   14062:	1c0b      	adds	r3, r1, #0
   14064:	1c20      	adds	r0, r4, #0
   14066:	1c29      	adds	r1, r5, #0
   14068:	f001 fe88 	bl	15d7c <__aeabi_dsub>
   1406c:	9002      	str	r0, [sp, #8]
   1406e:	9103      	str	r1, [sp, #12]
   14070:	e56d      	b.n	13b4e <__ieee754_pow+0x506>
   14072:	2400      	movs	r4, #0
   14074:	2100      	movs	r1, #0
   14076:	f7ff fc11 	bl	1389c <__ieee754_pow+0x254>
   1407a:	1c2b      	adds	r3, r5, #0
   1407c:	4927      	ldr	r1, [pc, #156]	; (1411c <__ieee754_pow+0xad4>)
   1407e:	4826      	ldr	r0, [pc, #152]	; (14118 <__ieee754_pow+0xad0>)
   14080:	9a00      	ldr	r2, [sp, #0]
   14082:	f000 ff81 	bl	14f88 <__aeabi_ddiv>
   14086:	1c06      	adds	r6, r0, #0
   14088:	1c0d      	adds	r5, r1, #0
   1408a:	f7ff fb2e 	bl	136ea <__ieee754_pow+0xa2>
   1408e:	4a30      	ldr	r2, [pc, #192]	; (14150 <__ieee754_pow+0xb08>)
   14090:	4b30      	ldr	r3, [pc, #192]	; (14154 <__ieee754_pow+0xb0c>)
   14092:	9804      	ldr	r0, [sp, #16]
   14094:	9905      	ldr	r1, [sp, #20]
   14096:	f001 fbe1 	bl	1585c <__aeabi_dmul>
   1409a:	4a2d      	ldr	r2, [pc, #180]	; (14150 <__ieee754_pow+0xb08>)
   1409c:	4b2d      	ldr	r3, [pc, #180]	; (14154 <__ieee754_pow+0xb0c>)
   1409e:	f001 fbdd 	bl	1585c <__aeabi_dmul>
   140a2:	1c06      	adds	r6, r0, #0
   140a4:	1c0d      	adds	r5, r1, #0
   140a6:	f7ff fb20 	bl	136ea <__ieee754_pow+0xa2>
   140aa:	9e08      	ldr	r6, [sp, #32]
   140ac:	2e01      	cmp	r6, #1
   140ae:	d001      	beq.n	140b4 <__ieee754_pow+0xa6c>
   140b0:	f7ff fb65 	bl	1377e <__ieee754_pow+0x136>
   140b4:	2080      	movs	r0, #128	; 0x80
   140b6:	0600      	lsls	r0, r0, #24
   140b8:	1c05      	adds	r5, r0, #0
   140ba:	9e06      	ldr	r6, [sp, #24]
   140bc:	4465      	add	r5, ip
   140be:	f7ff fb14 	bl	136ea <__ieee754_pow+0xa2>
   140c2:	2800      	cmp	r0, #0
   140c4:	d001      	beq.n	140ca <__ieee754_pow+0xa82>
   140c6:	f7ff fb1f 	bl	13708 <__ieee754_pow+0xc0>
   140ca:	4663      	mov	r3, ip
   140cc:	1ac9      	subs	r1, r1, r3
   140ce:	1c22      	adds	r2, r4, #0
   140d0:	410a      	asrs	r2, r1
   140d2:	1c10      	adds	r0, r2, #0
   140d4:	4088      	lsls	r0, r1
   140d6:	42a0      	cmp	r0, r4
   140d8:	d001      	beq.n	140de <__ieee754_pow+0xa96>
   140da:	f7ff fae5 	bl	136a8 <__ieee754_pow+0x60>
   140de:	2301      	movs	r3, #1
   140e0:	401a      	ands	r2, r3
   140e2:	2302      	movs	r3, #2
   140e4:	1a9b      	subs	r3, r3, r2
   140e6:	9308      	str	r3, [sp, #32]
   140e8:	f7ff fade 	bl	136a8 <__ieee754_pow+0x60>
   140ec:	4b1c      	ldr	r3, [pc, #112]	; (14160 <__ieee754_pow+0xb18>)
   140ee:	4599      	cmp	r9, r3
   140f0:	dd00      	ble.n	140f4 <__ieee754_pow+0xaac>
   140f2:	e5d1      	b.n	13c98 <__ieee754_pow+0x650>
   140f4:	2300      	movs	r3, #0
   140f6:	4698      	mov	r8, r3
   140f8:	4699      	mov	r9, r3
   140fa:	e5fa      	b.n	13cf2 <__ieee754_pow+0x6aa>
   140fc:	2480      	movs	r4, #128	; 0x80
   140fe:	02e4      	lsls	r4, r4, #11
   14100:	2101      	movs	r1, #1
   14102:	f7ff fbcb 	bl	1389c <__ieee754_pow+0x254>
   14106:	464a      	mov	r2, r9
   14108:	f000 fa06 	bl	14518 <scalbn>
   1410c:	1c02      	adds	r2, r0, #0
   1410e:	1c0b      	adds	r3, r1, #0
   14110:	e699      	b.n	13e46 <__ieee754_pow+0x7fe>
   14112:	4264      	negs	r4, r4
   14114:	46a1      	mov	r9, r4
   14116:	e5dd      	b.n	13cd4 <__ieee754_pow+0x68c>
   14118:	00000000 	.word	0x00000000
   1411c:	3ff00000 	.word	0x3ff00000
   14120:	60000000 	.word	0x60000000
   14124:	3ff71547 	.word	0x3ff71547
   14128:	f85ddf44 	.word	0xf85ddf44
   1412c:	3e54ae0b 	.word	0x3e54ae0b
   14130:	00000000 	.word	0x00000000
   14134:	3fd00000 	.word	0x3fd00000
   14138:	55555555 	.word	0x55555555
   1413c:	3fd55555 	.word	0x3fd55555
   14140:	00000000 	.word	0x00000000
   14144:	3fe00000 	.word	0x3fe00000
   14148:	652b82fe 	.word	0x652b82fe
   1414c:	3ff71547 	.word	0x3ff71547
   14150:	8800759c 	.word	0x8800759c
   14154:	7e37e43c 	.word	0x7e37e43c
   14158:	3feffffe 	.word	0x3feffffe
   1415c:	3ff00000 	.word	0x3ff00000
   14160:	3fe00000 	.word	0x3fe00000
   14164:	46c0      	nop			; (mov r8, r8)
   14166:	46c0      	nop			; (mov r8, r8)

00014168 <__ieee754_sqrt>:
   14168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1416a:	465f      	mov	r7, fp
   1416c:	4656      	mov	r6, sl
   1416e:	464d      	mov	r5, r9
   14170:	4644      	mov	r4, r8
   14172:	b4f0      	push	{r4, r5, r6, r7}
   14174:	4e6c      	ldr	r6, [pc, #432]	; (14328 <__ieee754_sqrt+0x1c0>)
   14176:	1c0d      	adds	r5, r1, #0
   14178:	1c37      	adds	r7, r6, #0
   1417a:	b083      	sub	sp, #12
   1417c:	1c04      	adds	r4, r0, #0
   1417e:	1c02      	adds	r2, r0, #0
   14180:	1c0b      	adds	r3, r1, #0
   14182:	402f      	ands	r7, r5
   14184:	42b7      	cmp	r7, r6
   14186:	d100      	bne.n	1418a <__ieee754_sqrt+0x22>
   14188:	e0ad      	b.n	142e6 <__ieee754_sqrt+0x17e>
   1418a:	2900      	cmp	r1, #0
   1418c:	dc00      	bgt.n	14190 <__ieee754_sqrt+0x28>
   1418e:	e08b      	b.n	142a8 <__ieee754_sqrt+0x140>
   14190:	152f      	asrs	r7, r5, #20
   14192:	d100      	bne.n	14196 <__ieee754_sqrt+0x2e>
   14194:	e094      	b.n	142c0 <__ieee754_sqrt+0x158>
   14196:	4d65      	ldr	r5, [pc, #404]	; (1432c <__ieee754_sqrt+0x1c4>)
   14198:	0309      	lsls	r1, r1, #12
   1419a:	2380      	movs	r3, #128	; 0x80
   1419c:	0b09      	lsrs	r1, r1, #12
   1419e:	035b      	lsls	r3, r3, #13
   141a0:	197f      	adds	r7, r7, r5
   141a2:	430b      	orrs	r3, r1
   141a4:	07fe      	lsls	r6, r7, #31
   141a6:	d500      	bpl.n	141aa <__ieee754_sqrt+0x42>
   141a8:	e070      	b.n	1428c <__ieee754_sqrt+0x124>
   141aa:	107f      	asrs	r7, r7, #1
   141ac:	0fc2      	lsrs	r2, r0, #31
   141ae:	46b8      	mov	r8, r7
   141b0:	005b      	lsls	r3, r3, #1
   141b2:	2700      	movs	r7, #0
   141b4:	2180      	movs	r1, #128	; 0x80
   141b6:	189b      	adds	r3, r3, r2
   141b8:	2416      	movs	r4, #22
   141ba:	0042      	lsls	r2, r0, #1
   141bc:	9700      	str	r7, [sp, #0]
   141be:	2000      	movs	r0, #0
   141c0:	0389      	lsls	r1, r1, #14
   141c2:	1845      	adds	r5, r0, r1
   141c4:	429d      	cmp	r5, r3
   141c6:	dc04      	bgt.n	141d2 <__ieee754_sqrt+0x6a>
   141c8:	1868      	adds	r0, r5, r1
   141ca:	1b5b      	subs	r3, r3, r5
   141cc:	9d00      	ldr	r5, [sp, #0]
   141ce:	186d      	adds	r5, r5, r1
   141d0:	9500      	str	r5, [sp, #0]
   141d2:	0fd5      	lsrs	r5, r2, #31
   141d4:	005b      	lsls	r3, r3, #1
   141d6:	3c01      	subs	r4, #1
   141d8:	195b      	adds	r3, r3, r5
   141da:	0052      	lsls	r2, r2, #1
   141dc:	0849      	lsrs	r1, r1, #1
   141de:	2c00      	cmp	r4, #0
   141e0:	d1ef      	bne.n	141c2 <__ieee754_sqrt+0x5a>
   141e2:	2180      	movs	r1, #128	; 0x80
   141e4:	2600      	movs	r6, #0
   141e6:	0609      	lsls	r1, r1, #24
   141e8:	2520      	movs	r5, #32
   141ea:	9601      	str	r6, [sp, #4]
   141ec:	46b4      	mov	ip, r6
   141ee:	4689      	mov	r9, r1
   141f0:	e009      	b.n	14206 <__ieee754_sqrt+0x9e>
   141f2:	4283      	cmp	r3, r0
   141f4:	d046      	beq.n	14284 <__ieee754_sqrt+0x11c>
   141f6:	0fd4      	lsrs	r4, r2, #31
   141f8:	005b      	lsls	r3, r3, #1
   141fa:	3d01      	subs	r5, #1
   141fc:	191b      	adds	r3, r3, r4
   141fe:	0052      	lsls	r2, r2, #1
   14200:	0849      	lsrs	r1, r1, #1
   14202:	2d00      	cmp	r5, #0
   14204:	d01c      	beq.n	14240 <__ieee754_sqrt+0xd8>
   14206:	4666      	mov	r6, ip
   14208:	198c      	adds	r4, r1, r6
   1420a:	4283      	cmp	r3, r0
   1420c:	ddf1      	ble.n	141f2 <__ieee754_sqrt+0x8a>
   1420e:	1867      	adds	r7, r4, r1
   14210:	0fe6      	lsrs	r6, r4, #31
   14212:	46bc      	mov	ip, r7
   14214:	07f6      	lsls	r6, r6, #31
   14216:	4682      	mov	sl, r0
   14218:	454e      	cmp	r6, r9
   1421a:	d02c      	beq.n	14276 <__ieee754_sqrt+0x10e>
   1421c:	1a1b      	subs	r3, r3, r0
   1421e:	42a2      	cmp	r2, r4
   14220:	4180      	sbcs	r0, r0
   14222:	4240      	negs	r0, r0
   14224:	9f01      	ldr	r7, [sp, #4]
   14226:	1a1b      	subs	r3, r3, r0
   14228:	1b12      	subs	r2, r2, r4
   1422a:	187f      	adds	r7, r7, r1
   1422c:	0fd4      	lsrs	r4, r2, #31
   1422e:	005b      	lsls	r3, r3, #1
   14230:	3d01      	subs	r5, #1
   14232:	9701      	str	r7, [sp, #4]
   14234:	4650      	mov	r0, sl
   14236:	191b      	adds	r3, r3, r4
   14238:	0052      	lsls	r2, r2, #1
   1423a:	0849      	lsrs	r1, r1, #1
   1423c:	2d00      	cmp	r5, #0
   1423e:	d1e2      	bne.n	14206 <__ieee754_sqrt+0x9e>
   14240:	4313      	orrs	r3, r2
   14242:	d128      	bne.n	14296 <__ieee754_sqrt+0x12e>
   14244:	9801      	ldr	r0, [sp, #4]
   14246:	0843      	lsrs	r3, r0, #1
   14248:	9d00      	ldr	r5, [sp, #0]
   1424a:	4e39      	ldr	r6, [pc, #228]	; (14330 <__ieee754_sqrt+0x1c8>)
   1424c:	106a      	asrs	r2, r5, #1
   1424e:	1992      	adds	r2, r2, r6
   14250:	07ed      	lsls	r5, r5, #31
   14252:	d502      	bpl.n	1425a <__ieee754_sqrt+0xf2>
   14254:	2180      	movs	r1, #128	; 0x80
   14256:	0609      	lsls	r1, r1, #24
   14258:	430b      	orrs	r3, r1
   1425a:	4640      	mov	r0, r8
   1425c:	0507      	lsls	r7, r0, #20
   1425e:	18b9      	adds	r1, r7, r2
   14260:	1c1c      	adds	r4, r3, #0
   14262:	1c0d      	adds	r5, r1, #0
   14264:	1c20      	adds	r0, r4, #0
   14266:	1c29      	adds	r1, r5, #0
   14268:	b003      	add	sp, #12
   1426a:	bc3c      	pop	{r2, r3, r4, r5}
   1426c:	4690      	mov	r8, r2
   1426e:	4699      	mov	r9, r3
   14270:	46a2      	mov	sl, r4
   14272:	46ab      	mov	fp, r5
   14274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14276:	0fff      	lsrs	r7, r7, #31
   14278:	07ff      	lsls	r7, r7, #31
   1427a:	427e      	negs	r6, r7
   1427c:	417e      	adcs	r6, r7
   1427e:	46b2      	mov	sl, r6
   14280:	4482      	add	sl, r0
   14282:	e7cb      	b.n	1421c <__ieee754_sqrt+0xb4>
   14284:	4294      	cmp	r4, r2
   14286:	d9c2      	bls.n	1420e <__ieee754_sqrt+0xa6>
   14288:	1c18      	adds	r0, r3, #0
   1428a:	e7b4      	b.n	141f6 <__ieee754_sqrt+0x8e>
   1428c:	0fc2      	lsrs	r2, r0, #31
   1428e:	005b      	lsls	r3, r3, #1
   14290:	189b      	adds	r3, r3, r2
   14292:	0040      	lsls	r0, r0, #1
   14294:	e789      	b.n	141aa <__ieee754_sqrt+0x42>
   14296:	9901      	ldr	r1, [sp, #4]
   14298:	3101      	adds	r1, #1
   1429a:	d02f      	beq.n	142fc <__ieee754_sqrt+0x194>
   1429c:	9c01      	ldr	r4, [sp, #4]
   1429e:	2301      	movs	r3, #1
   142a0:	4023      	ands	r3, r4
   142a2:	191b      	adds	r3, r3, r4
   142a4:	085b      	lsrs	r3, r3, #1
   142a6:	e7cf      	b.n	14248 <__ieee754_sqrt+0xe0>
   142a8:	006b      	lsls	r3, r5, #1
   142aa:	085b      	lsrs	r3, r3, #1
   142ac:	431a      	orrs	r2, r3
   142ae:	d0d9      	beq.n	14264 <__ieee754_sqrt+0xfc>
   142b0:	2700      	movs	r7, #0
   142b2:	2900      	cmp	r1, #0
   142b4:	d12b      	bne.n	1430e <__ieee754_sqrt+0x1a6>
   142b6:	0ac1      	lsrs	r1, r0, #11
   142b8:	3f15      	subs	r7, #21
   142ba:	0540      	lsls	r0, r0, #21
   142bc:	2900      	cmp	r1, #0
   142be:	d0fa      	beq.n	142b6 <__ieee754_sqrt+0x14e>
   142c0:	2280      	movs	r2, #128	; 0x80
   142c2:	0352      	lsls	r2, r2, #13
   142c4:	4211      	tst	r1, r2
   142c6:	d11e      	bne.n	14306 <__ieee754_sqrt+0x19e>
   142c8:	2300      	movs	r3, #0
   142ca:	0049      	lsls	r1, r1, #1
   142cc:	3301      	adds	r3, #1
   142ce:	4211      	tst	r1, r2
   142d0:	d0fb      	beq.n	142ca <__ieee754_sqrt+0x162>
   142d2:	2401      	movs	r4, #1
   142d4:	2220      	movs	r2, #32
   142d6:	1ae4      	subs	r4, r4, r3
   142d8:	1ad2      	subs	r2, r2, r3
   142da:	193f      	adds	r7, r7, r4
   142dc:	1c04      	adds	r4, r0, #0
   142de:	40d4      	lsrs	r4, r2
   142e0:	4321      	orrs	r1, r4
   142e2:	4098      	lsls	r0, r3
   142e4:	e757      	b.n	14196 <__ieee754_sqrt+0x2e>
   142e6:	1c20      	adds	r0, r4, #0
   142e8:	1c29      	adds	r1, r5, #0
   142ea:	f001 fab7 	bl	1585c <__aeabi_dmul>
   142ee:	1c22      	adds	r2, r4, #0
   142f0:	1c2b      	adds	r3, r5, #0
   142f2:	f000 fb27 	bl	14944 <__aeabi_dadd>
   142f6:	1c04      	adds	r4, r0, #0
   142f8:	1c0d      	adds	r5, r1, #0
   142fa:	e7b3      	b.n	14264 <__ieee754_sqrt+0xfc>
   142fc:	9a00      	ldr	r2, [sp, #0]
   142fe:	2300      	movs	r3, #0
   14300:	3201      	adds	r2, #1
   14302:	9200      	str	r2, [sp, #0]
   14304:	e7a0      	b.n	14248 <__ieee754_sqrt+0xe0>
   14306:	2220      	movs	r2, #32
   14308:	2401      	movs	r4, #1
   1430a:	2300      	movs	r3, #0
   1430c:	e7e5      	b.n	142da <__ieee754_sqrt+0x172>
   1430e:	1c22      	adds	r2, r4, #0
   14310:	1c2b      	adds	r3, r5, #0
   14312:	1c20      	adds	r0, r4, #0
   14314:	1c29      	adds	r1, r5, #0
   14316:	f001 fd31 	bl	15d7c <__aeabi_dsub>
   1431a:	1c02      	adds	r2, r0, #0
   1431c:	1c0b      	adds	r3, r1, #0
   1431e:	f000 fe33 	bl	14f88 <__aeabi_ddiv>
   14322:	1c04      	adds	r4, r0, #0
   14324:	1c0d      	adds	r5, r1, #0
   14326:	e79d      	b.n	14264 <__ieee754_sqrt+0xfc>
   14328:	7ff00000 	.word	0x7ff00000
   1432c:	fffffc01 	.word	0xfffffc01
   14330:	3fe00000 	.word	0x3fe00000

00014334 <fabs>:
   14334:	004b      	lsls	r3, r1, #1
   14336:	0859      	lsrs	r1, r3, #1
   14338:	4770      	bx	lr
   1433a:	46c0      	nop			; (mov r8, r8)

0001433c <finite>:
   1433c:	0048      	lsls	r0, r1, #1
   1433e:	4b02      	ldr	r3, [pc, #8]	; (14348 <finite+0xc>)
   14340:	0840      	lsrs	r0, r0, #1
   14342:	18c0      	adds	r0, r0, r3
   14344:	0fc0      	lsrs	r0, r0, #31
   14346:	4770      	bx	lr
   14348:	80100000 	.word	0x80100000

0001434c <__fpclassifyd>:
   1434c:	1c0b      	adds	r3, r1, #0
   1434e:	1c01      	adds	r1, r0, #0
   14350:	1c02      	adds	r2, r0, #0
   14352:	b530      	push	{r4, r5, lr}
   14354:	4319      	orrs	r1, r3
   14356:	2002      	movs	r0, #2
   14358:	2900      	cmp	r1, #0
   1435a:	d100      	bne.n	1435e <__fpclassifyd+0x12>
   1435c:	bd30      	pop	{r4, r5, pc}
   1435e:	2180      	movs	r1, #128	; 0x80
   14360:	0609      	lsls	r1, r1, #24
   14362:	428b      	cmp	r3, r1
   14364:	d016      	beq.n	14394 <__fpclassifyd+0x48>
   14366:	490d      	ldr	r1, [pc, #52]	; (1439c <__fpclassifyd+0x50>)
   14368:	2004      	movs	r0, #4
   1436a:	185c      	adds	r4, r3, r1
   1436c:	490c      	ldr	r1, [pc, #48]	; (143a0 <__fpclassifyd+0x54>)
   1436e:	428c      	cmp	r4, r1
   14370:	d9f4      	bls.n	1435c <__fpclassifyd+0x10>
   14372:	4d0c      	ldr	r5, [pc, #48]	; (143a4 <__fpclassifyd+0x58>)
   14374:	195c      	adds	r4, r3, r5
   14376:	428c      	cmp	r4, r1
   14378:	d9f0      	bls.n	1435c <__fpclassifyd+0x10>
   1437a:	4c0b      	ldr	r4, [pc, #44]	; (143a8 <__fpclassifyd+0x5c>)
   1437c:	0059      	lsls	r1, r3, #1
   1437e:	0849      	lsrs	r1, r1, #1
   14380:	2003      	movs	r0, #3
   14382:	42a1      	cmp	r1, r4
   14384:	d9ea      	bls.n	1435c <__fpclassifyd+0x10>
   14386:	4c07      	ldr	r4, [pc, #28]	; (143a4 <__fpclassifyd+0x58>)
   14388:	2000      	movs	r0, #0
   1438a:	42a1      	cmp	r1, r4
   1438c:	d1e6      	bne.n	1435c <__fpclassifyd+0x10>
   1438e:	4250      	negs	r0, r2
   14390:	4150      	adcs	r0, r2
   14392:	e7e3      	b.n	1435c <__fpclassifyd+0x10>
   14394:	2a00      	cmp	r2, #0
   14396:	d0e1      	beq.n	1435c <__fpclassifyd+0x10>
   14398:	e7ef      	b.n	1437a <__fpclassifyd+0x2e>
   1439a:	46c0      	nop			; (mov r8, r8)
   1439c:	fff00000 	.word	0xfff00000
   143a0:	7fdfffff 	.word	0x7fdfffff
   143a4:	7ff00000 	.word	0x7ff00000
   143a8:	000fffff 	.word	0x000fffff

000143ac <matherr>:
   143ac:	2000      	movs	r0, #0
   143ae:	4770      	bx	lr

000143b0 <nan>:
   143b0:	4902      	ldr	r1, [pc, #8]	; (143bc <nan+0xc>)
   143b2:	4801      	ldr	r0, [pc, #4]	; (143b8 <nan+0x8>)
   143b4:	4770      	bx	lr
   143b6:	46c0      	nop			; (mov r8, r8)
   143b8:	00000000 	.word	0x00000000
   143bc:	7ff80000 	.word	0x7ff80000

000143c0 <rint>:
   143c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   143c2:	4646      	mov	r6, r8
   143c4:	464f      	mov	r7, r9
   143c6:	b4c0      	push	{r6, r7}
   143c8:	0fca      	lsrs	r2, r1, #31
   143ca:	4690      	mov	r8, r2
   143cc:	004b      	lsls	r3, r1, #1
   143ce:	4a4d      	ldr	r2, [pc, #308]	; (14504 <rint+0x144>)
   143d0:	0d5b      	lsrs	r3, r3, #21
   143d2:	189e      	adds	r6, r3, r2
   143d4:	b083      	sub	sp, #12
   143d6:	1c04      	adds	r4, r0, #0
   143d8:	1c0d      	adds	r5, r1, #0
   143da:	468c      	mov	ip, r1
   143dc:	1c07      	adds	r7, r0, #0
   143de:	2e13      	cmp	r6, #19
   143e0:	dc3b      	bgt.n	1445a <rint+0x9a>
   143e2:	2e00      	cmp	r6, #0
   143e4:	db5c      	blt.n	144a0 <rint+0xe0>
   143e6:	4f48      	ldr	r7, [pc, #288]	; (14508 <rint+0x148>)
   143e8:	1c02      	adds	r2, r0, #0
   143ea:	4137      	asrs	r7, r6
   143ec:	1c3b      	adds	r3, r7, #0
   143ee:	400b      	ands	r3, r1
   143f0:	4303      	orrs	r3, r0
   143f2:	4699      	mov	r9, r3
   143f4:	4648      	mov	r0, r9
   143f6:	1c0b      	adds	r3, r1, #0
   143f8:	2800      	cmp	r0, #0
   143fa:	d027      	beq.n	1444c <rint+0x8c>
   143fc:	087b      	lsrs	r3, r7, #1
   143fe:	1c1a      	adds	r2, r3, #0
   14400:	400a      	ands	r2, r1
   14402:	4322      	orrs	r2, r4
   14404:	2700      	movs	r7, #0
   14406:	2a00      	cmp	r2, #0
   14408:	d00a      	beq.n	14420 <rint+0x60>
   1440a:	2e13      	cmp	r6, #19
   1440c:	d100      	bne.n	14410 <rint+0x50>
   1440e:	e076      	b.n	144fe <rint+0x13e>
   14410:	1c29      	adds	r1, r5, #0
   14412:	2280      	movs	r2, #128	; 0x80
   14414:	4399      	bics	r1, r3
   14416:	02d2      	lsls	r2, r2, #11
   14418:	1c0b      	adds	r3, r1, #0
   1441a:	4132      	asrs	r2, r6
   1441c:	4313      	orrs	r3, r2
   1441e:	469c      	mov	ip, r3
   14420:	4640      	mov	r0, r8
   14422:	00c1      	lsls	r1, r0, #3
   14424:	4839      	ldr	r0, [pc, #228]	; (1450c <rint+0x14c>)
   14426:	4663      	mov	r3, ip
   14428:	1841      	adds	r1, r0, r1
   1442a:	680c      	ldr	r4, [r1, #0]
   1442c:	684d      	ldr	r5, [r1, #4]
   1442e:	1c3a      	adds	r2, r7, #0
   14430:	1c20      	adds	r0, r4, #0
   14432:	1c29      	adds	r1, r5, #0
   14434:	f000 fa86 	bl	14944 <__aeabi_dadd>
   14438:	9000      	str	r0, [sp, #0]
   1443a:	9101      	str	r1, [sp, #4]
   1443c:	9800      	ldr	r0, [sp, #0]
   1443e:	9901      	ldr	r1, [sp, #4]
   14440:	1c22      	adds	r2, r4, #0
   14442:	1c2b      	adds	r3, r5, #0
   14444:	f001 fc9a 	bl	15d7c <__aeabi_dsub>
   14448:	1c02      	adds	r2, r0, #0
   1444a:	1c0b      	adds	r3, r1, #0
   1444c:	1c10      	adds	r0, r2, #0
   1444e:	1c19      	adds	r1, r3, #0
   14450:	b003      	add	sp, #12
   14452:	bc0c      	pop	{r2, r3}
   14454:	4690      	mov	r8, r2
   14456:	4699      	mov	r9, r3
   14458:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1445a:	2e33      	cmp	r6, #51	; 0x33
   1445c:	dd0b      	ble.n	14476 <rint+0xb6>
   1445e:	1c0b      	adds	r3, r1, #0
   14460:	2180      	movs	r1, #128	; 0x80
   14462:	1c02      	adds	r2, r0, #0
   14464:	00c9      	lsls	r1, r1, #3
   14466:	428e      	cmp	r6, r1
   14468:	d1f0      	bne.n	1444c <rint+0x8c>
   1446a:	1c29      	adds	r1, r5, #0
   1446c:	f000 fa6a 	bl	14944 <__aeabi_dadd>
   14470:	1c02      	adds	r2, r0, #0
   14472:	1c0b      	adds	r3, r1, #0
   14474:	e7ea      	b.n	1444c <rint+0x8c>
   14476:	4a26      	ldr	r2, [pc, #152]	; (14510 <rint+0x150>)
   14478:	2601      	movs	r6, #1
   1447a:	18d2      	adds	r2, r2, r3
   1447c:	4276      	negs	r6, r6
   1447e:	40d6      	lsrs	r6, r2
   14480:	4691      	mov	r9, r2
   14482:	1c0b      	adds	r3, r1, #0
   14484:	1c02      	adds	r2, r0, #0
   14486:	4206      	tst	r6, r0
   14488:	d0e0      	beq.n	1444c <rint+0x8c>
   1448a:	0876      	lsrs	r6, r6, #1
   1448c:	4206      	tst	r6, r0
   1448e:	d0c7      	beq.n	14420 <rint+0x60>
   14490:	2380      	movs	r3, #128	; 0x80
   14492:	43b4      	bics	r4, r6
   14494:	05db      	lsls	r3, r3, #23
   14496:	4648      	mov	r0, r9
   14498:	4103      	asrs	r3, r0
   1449a:	1c27      	adds	r7, r4, #0
   1449c:	431f      	orrs	r7, r3
   1449e:	e7bf      	b.n	14420 <rint+0x60>
   144a0:	004e      	lsls	r6, r1, #1
   144a2:	0876      	lsrs	r6, r6, #1
   144a4:	4306      	orrs	r6, r0
   144a6:	1c02      	adds	r2, r0, #0
   144a8:	1c0b      	adds	r3, r1, #0
   144aa:	2e00      	cmp	r6, #0
   144ac:	d0ce      	beq.n	1444c <rint+0x8c>
   144ae:	0309      	lsls	r1, r1, #12
   144b0:	0b09      	lsrs	r1, r1, #12
   144b2:	4301      	orrs	r1, r0
   144b4:	4248      	negs	r0, r1
   144b6:	4301      	orrs	r1, r0
   144b8:	2080      	movs	r0, #128	; 0x80
   144ba:	0300      	lsls	r0, r0, #12
   144bc:	0b09      	lsrs	r1, r1, #12
   144be:	4001      	ands	r1, r0
   144c0:	0c68      	lsrs	r0, r5, #17
   144c2:	0440      	lsls	r0, r0, #17
   144c4:	1c0b      	adds	r3, r1, #0
   144c6:	4303      	orrs	r3, r0
   144c8:	4640      	mov	r0, r8
   144ca:	00c1      	lsls	r1, r0, #3
   144cc:	480f      	ldr	r0, [pc, #60]	; (1450c <rint+0x14c>)
   144ce:	1841      	adds	r1, r0, r1
   144d0:	680c      	ldr	r4, [r1, #0]
   144d2:	684d      	ldr	r5, [r1, #4]
   144d4:	1c29      	adds	r1, r5, #0
   144d6:	1c20      	adds	r0, r4, #0
   144d8:	f000 fa34 	bl	14944 <__aeabi_dadd>
   144dc:	9000      	str	r0, [sp, #0]
   144de:	9101      	str	r1, [sp, #4]
   144e0:	9800      	ldr	r0, [sp, #0]
   144e2:	9901      	ldr	r1, [sp, #4]
   144e4:	1c2b      	adds	r3, r5, #0
   144e6:	1c22      	adds	r2, r4, #0
   144e8:	f001 fc48 	bl	15d7c <__aeabi_dsub>
   144ec:	1c0d      	adds	r5, r1, #0
   144ee:	4641      	mov	r1, r8
   144f0:	1c02      	adds	r2, r0, #0
   144f2:	07c8      	lsls	r0, r1, #31
   144f4:	0069      	lsls	r1, r5, #1
   144f6:	0849      	lsrs	r1, r1, #1
   144f8:	1c03      	adds	r3, r0, #0
   144fa:	430b      	orrs	r3, r1
   144fc:	e7a6      	b.n	1444c <rint+0x8c>
   144fe:	2780      	movs	r7, #128	; 0x80
   14500:	063f      	lsls	r7, r7, #24
   14502:	e785      	b.n	14410 <rint+0x50>
   14504:	fffffc01 	.word	0xfffffc01
   14508:	000fffff 	.word	0x000fffff
   1450c:	00017498 	.word	0x00017498
   14510:	fffffbed 	.word	0xfffffbed
   14514:	00000000 	.word	0x00000000

00014518 <scalbn>:
   14518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1451a:	4e3d      	ldr	r6, [pc, #244]	; (14610 <scalbn+0xf8>)
   1451c:	1c17      	adds	r7, r2, #0
   1451e:	1c33      	adds	r3, r6, #0
   14520:	400b      	ands	r3, r1
   14522:	1c04      	adds	r4, r0, #0
   14524:	1c0d      	adds	r5, r1, #0
   14526:	1c0a      	adds	r2, r1, #0
   14528:	151b      	asrs	r3, r3, #20
   1452a:	d125      	bne.n	14578 <scalbn+0x60>
   1452c:	004b      	lsls	r3, r1, #1
   1452e:	085b      	lsrs	r3, r3, #1
   14530:	4318      	orrs	r0, r3
   14532:	d01e      	beq.n	14572 <scalbn+0x5a>
   14534:	1c20      	adds	r0, r4, #0
   14536:	1c29      	adds	r1, r5, #0
   14538:	4b2e      	ldr	r3, [pc, #184]	; (145f4 <scalbn+0xdc>)
   1453a:	4a2d      	ldr	r2, [pc, #180]	; (145f0 <scalbn+0xd8>)
   1453c:	f001 f98e 	bl	1585c <__aeabi_dmul>
   14540:	4b34      	ldr	r3, [pc, #208]	; (14614 <scalbn+0xfc>)
   14542:	1c04      	adds	r4, r0, #0
   14544:	1c0d      	adds	r5, r1, #0
   14546:	429f      	cmp	r7, r3
   14548:	db31      	blt.n	145ae <scalbn+0x96>
   1454a:	400e      	ands	r6, r1
   1454c:	1533      	asrs	r3, r6, #20
   1454e:	1c0a      	adds	r2, r1, #0
   14550:	3b36      	subs	r3, #54	; 0x36
   14552:	4931      	ldr	r1, [pc, #196]	; (14618 <scalbn+0x100>)
   14554:	19db      	adds	r3, r3, r7
   14556:	428b      	cmp	r3, r1
   14558:	dd15      	ble.n	14586 <scalbn+0x6e>
   1455a:	1c22      	adds	r2, r4, #0
   1455c:	1c2b      	adds	r3, r5, #0
   1455e:	4826      	ldr	r0, [pc, #152]	; (145f8 <scalbn+0xe0>)
   14560:	4926      	ldr	r1, [pc, #152]	; (145fc <scalbn+0xe4>)
   14562:	f000 f861 	bl	14628 <copysign>
   14566:	4a24      	ldr	r2, [pc, #144]	; (145f8 <scalbn+0xe0>)
   14568:	4b24      	ldr	r3, [pc, #144]	; (145fc <scalbn+0xe4>)
   1456a:	f001 f977 	bl	1585c <__aeabi_dmul>
   1456e:	1c04      	adds	r4, r0, #0
   14570:	1c0d      	adds	r5, r1, #0
   14572:	1c29      	adds	r1, r5, #0
   14574:	1c20      	adds	r0, r4, #0
   14576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14578:	4928      	ldr	r1, [pc, #160]	; (1461c <scalbn+0x104>)
   1457a:	428b      	cmp	r3, r1
   1457c:	d01e      	beq.n	145bc <scalbn+0xa4>
   1457e:	4926      	ldr	r1, [pc, #152]	; (14618 <scalbn+0x100>)
   14580:	19db      	adds	r3, r3, r7
   14582:	428b      	cmp	r3, r1
   14584:	dce9      	bgt.n	1455a <scalbn+0x42>
   14586:	2b00      	cmp	r3, #0
   14588:	dd05      	ble.n	14596 <scalbn+0x7e>
   1458a:	4925      	ldr	r1, [pc, #148]	; (14620 <scalbn+0x108>)
   1458c:	051b      	lsls	r3, r3, #20
   1458e:	400a      	ands	r2, r1
   14590:	1c1d      	adds	r5, r3, #0
   14592:	4315      	orrs	r5, r2
   14594:	e7ed      	b.n	14572 <scalbn+0x5a>
   14596:	1c19      	adds	r1, r3, #0
   14598:	3135      	adds	r1, #53	; 0x35
   1459a:	da18      	bge.n	145ce <scalbn+0xb6>
   1459c:	4b21      	ldr	r3, [pc, #132]	; (14624 <scalbn+0x10c>)
   1459e:	429f      	cmp	r7, r3
   145a0:	dcdb      	bgt.n	1455a <scalbn+0x42>
   145a2:	4817      	ldr	r0, [pc, #92]	; (14600 <scalbn+0xe8>)
   145a4:	4917      	ldr	r1, [pc, #92]	; (14604 <scalbn+0xec>)
   145a6:	1c22      	adds	r2, r4, #0
   145a8:	1c2b      	adds	r3, r5, #0
   145aa:	f000 f83d 	bl	14628 <copysign>
   145ae:	4a14      	ldr	r2, [pc, #80]	; (14600 <scalbn+0xe8>)
   145b0:	4b14      	ldr	r3, [pc, #80]	; (14604 <scalbn+0xec>)
   145b2:	f001 f953 	bl	1585c <__aeabi_dmul>
   145b6:	1c04      	adds	r4, r0, #0
   145b8:	1c0d      	adds	r5, r1, #0
   145ba:	e7da      	b.n	14572 <scalbn+0x5a>
   145bc:	1c20      	adds	r0, r4, #0
   145be:	1c29      	adds	r1, r5, #0
   145c0:	1c22      	adds	r2, r4, #0
   145c2:	1c2b      	adds	r3, r5, #0
   145c4:	f000 f9be 	bl	14944 <__aeabi_dadd>
   145c8:	1c04      	adds	r4, r0, #0
   145ca:	1c0d      	adds	r5, r1, #0
   145cc:	e7d1      	b.n	14572 <scalbn+0x5a>
   145ce:	4914      	ldr	r1, [pc, #80]	; (14620 <scalbn+0x108>)
   145d0:	3336      	adds	r3, #54	; 0x36
   145d2:	051b      	lsls	r3, r3, #20
   145d4:	400a      	ands	r2, r1
   145d6:	1c1d      	adds	r5, r3, #0
   145d8:	4315      	orrs	r5, r2
   145da:	1c20      	adds	r0, r4, #0
   145dc:	1c29      	adds	r1, r5, #0
   145de:	4a0a      	ldr	r2, [pc, #40]	; (14608 <scalbn+0xf0>)
   145e0:	4b0a      	ldr	r3, [pc, #40]	; (1460c <scalbn+0xf4>)
   145e2:	f001 f93b 	bl	1585c <__aeabi_dmul>
   145e6:	1c04      	adds	r4, r0, #0
   145e8:	1c0d      	adds	r5, r1, #0
   145ea:	e7c2      	b.n	14572 <scalbn+0x5a>
   145ec:	46c0      	nop			; (mov r8, r8)
   145ee:	46c0      	nop			; (mov r8, r8)
   145f0:	00000000 	.word	0x00000000
   145f4:	43500000 	.word	0x43500000
   145f8:	8800759c 	.word	0x8800759c
   145fc:	7e37e43c 	.word	0x7e37e43c
   14600:	c2f8f359 	.word	0xc2f8f359
   14604:	01a56e1f 	.word	0x01a56e1f
   14608:	00000000 	.word	0x00000000
   1460c:	3c900000 	.word	0x3c900000
   14610:	7ff00000 	.word	0x7ff00000
   14614:	ffff3cb0 	.word	0xffff3cb0
   14618:	000007fe 	.word	0x000007fe
   1461c:	000007ff 	.word	0x000007ff
   14620:	800fffff 	.word	0x800fffff
   14624:	0000c350 	.word	0x0000c350

00014628 <copysign>:
   14628:	b530      	push	{r4, r5, lr}
   1462a:	0fda      	lsrs	r2, r3, #31
   1462c:	07d2      	lsls	r2, r2, #31
   1462e:	004b      	lsls	r3, r1, #1
   14630:	085b      	lsrs	r3, r3, #1
   14632:	1c11      	adds	r1, r2, #0
   14634:	4319      	orrs	r1, r3
   14636:	bd30      	pop	{r4, r5, pc}

00014638 <__aeabi_uidiv>:
   14638:	2900      	cmp	r1, #0
   1463a:	d034      	beq.n	146a6 <.udivsi3_skip_div0_test+0x6a>

0001463c <.udivsi3_skip_div0_test>:
   1463c:	2301      	movs	r3, #1
   1463e:	2200      	movs	r2, #0
   14640:	b410      	push	{r4}
   14642:	4288      	cmp	r0, r1
   14644:	d32c      	bcc.n	146a0 <.udivsi3_skip_div0_test+0x64>
   14646:	2401      	movs	r4, #1
   14648:	0724      	lsls	r4, r4, #28
   1464a:	42a1      	cmp	r1, r4
   1464c:	d204      	bcs.n	14658 <.udivsi3_skip_div0_test+0x1c>
   1464e:	4281      	cmp	r1, r0
   14650:	d202      	bcs.n	14658 <.udivsi3_skip_div0_test+0x1c>
   14652:	0109      	lsls	r1, r1, #4
   14654:	011b      	lsls	r3, r3, #4
   14656:	e7f8      	b.n	1464a <.udivsi3_skip_div0_test+0xe>
   14658:	00e4      	lsls	r4, r4, #3
   1465a:	42a1      	cmp	r1, r4
   1465c:	d204      	bcs.n	14668 <.udivsi3_skip_div0_test+0x2c>
   1465e:	4281      	cmp	r1, r0
   14660:	d202      	bcs.n	14668 <.udivsi3_skip_div0_test+0x2c>
   14662:	0049      	lsls	r1, r1, #1
   14664:	005b      	lsls	r3, r3, #1
   14666:	e7f8      	b.n	1465a <.udivsi3_skip_div0_test+0x1e>
   14668:	4288      	cmp	r0, r1
   1466a:	d301      	bcc.n	14670 <.udivsi3_skip_div0_test+0x34>
   1466c:	1a40      	subs	r0, r0, r1
   1466e:	431a      	orrs	r2, r3
   14670:	084c      	lsrs	r4, r1, #1
   14672:	42a0      	cmp	r0, r4
   14674:	d302      	bcc.n	1467c <.udivsi3_skip_div0_test+0x40>
   14676:	1b00      	subs	r0, r0, r4
   14678:	085c      	lsrs	r4, r3, #1
   1467a:	4322      	orrs	r2, r4
   1467c:	088c      	lsrs	r4, r1, #2
   1467e:	42a0      	cmp	r0, r4
   14680:	d302      	bcc.n	14688 <.udivsi3_skip_div0_test+0x4c>
   14682:	1b00      	subs	r0, r0, r4
   14684:	089c      	lsrs	r4, r3, #2
   14686:	4322      	orrs	r2, r4
   14688:	08cc      	lsrs	r4, r1, #3
   1468a:	42a0      	cmp	r0, r4
   1468c:	d302      	bcc.n	14694 <.udivsi3_skip_div0_test+0x58>
   1468e:	1b00      	subs	r0, r0, r4
   14690:	08dc      	lsrs	r4, r3, #3
   14692:	4322      	orrs	r2, r4
   14694:	2800      	cmp	r0, #0
   14696:	d003      	beq.n	146a0 <.udivsi3_skip_div0_test+0x64>
   14698:	091b      	lsrs	r3, r3, #4
   1469a:	d001      	beq.n	146a0 <.udivsi3_skip_div0_test+0x64>
   1469c:	0909      	lsrs	r1, r1, #4
   1469e:	e7e3      	b.n	14668 <.udivsi3_skip_div0_test+0x2c>
   146a0:	1c10      	adds	r0, r2, #0
   146a2:	bc10      	pop	{r4}
   146a4:	4770      	bx	lr
   146a6:	2800      	cmp	r0, #0
   146a8:	d001      	beq.n	146ae <.udivsi3_skip_div0_test+0x72>
   146aa:	2000      	movs	r0, #0
   146ac:	43c0      	mvns	r0, r0
   146ae:	b407      	push	{r0, r1, r2}
   146b0:	4802      	ldr	r0, [pc, #8]	; (146bc <.udivsi3_skip_div0_test+0x80>)
   146b2:	a102      	add	r1, pc, #8	; (adr r1, 146bc <.udivsi3_skip_div0_test+0x80>)
   146b4:	1840      	adds	r0, r0, r1
   146b6:	9002      	str	r0, [sp, #8]
   146b8:	bd03      	pop	{r0, r1, pc}
   146ba:	46c0      	nop			; (mov r8, r8)
   146bc:	000000d9 	.word	0x000000d9

000146c0 <__aeabi_uidivmod>:
   146c0:	2900      	cmp	r1, #0
   146c2:	d0f0      	beq.n	146a6 <.udivsi3_skip_div0_test+0x6a>
   146c4:	b503      	push	{r0, r1, lr}
   146c6:	f7ff ffb9 	bl	1463c <.udivsi3_skip_div0_test>
   146ca:	bc0e      	pop	{r1, r2, r3}
   146cc:	4342      	muls	r2, r0
   146ce:	1a89      	subs	r1, r1, r2
   146d0:	4718      	bx	r3
   146d2:	46c0      	nop			; (mov r8, r8)

000146d4 <__aeabi_idiv>:
   146d4:	2900      	cmp	r1, #0
   146d6:	d041      	beq.n	1475c <.divsi3_skip_div0_test+0x84>

000146d8 <.divsi3_skip_div0_test>:
   146d8:	b410      	push	{r4}
   146da:	1c04      	adds	r4, r0, #0
   146dc:	404c      	eors	r4, r1
   146de:	46a4      	mov	ip, r4
   146e0:	2301      	movs	r3, #1
   146e2:	2200      	movs	r2, #0
   146e4:	2900      	cmp	r1, #0
   146e6:	d500      	bpl.n	146ea <.divsi3_skip_div0_test+0x12>
   146e8:	4249      	negs	r1, r1
   146ea:	2800      	cmp	r0, #0
   146ec:	d500      	bpl.n	146f0 <.divsi3_skip_div0_test+0x18>
   146ee:	4240      	negs	r0, r0
   146f0:	4288      	cmp	r0, r1
   146f2:	d32c      	bcc.n	1474e <.divsi3_skip_div0_test+0x76>
   146f4:	2401      	movs	r4, #1
   146f6:	0724      	lsls	r4, r4, #28
   146f8:	42a1      	cmp	r1, r4
   146fa:	d204      	bcs.n	14706 <.divsi3_skip_div0_test+0x2e>
   146fc:	4281      	cmp	r1, r0
   146fe:	d202      	bcs.n	14706 <.divsi3_skip_div0_test+0x2e>
   14700:	0109      	lsls	r1, r1, #4
   14702:	011b      	lsls	r3, r3, #4
   14704:	e7f8      	b.n	146f8 <.divsi3_skip_div0_test+0x20>
   14706:	00e4      	lsls	r4, r4, #3
   14708:	42a1      	cmp	r1, r4
   1470a:	d204      	bcs.n	14716 <.divsi3_skip_div0_test+0x3e>
   1470c:	4281      	cmp	r1, r0
   1470e:	d202      	bcs.n	14716 <.divsi3_skip_div0_test+0x3e>
   14710:	0049      	lsls	r1, r1, #1
   14712:	005b      	lsls	r3, r3, #1
   14714:	e7f8      	b.n	14708 <.divsi3_skip_div0_test+0x30>
   14716:	4288      	cmp	r0, r1
   14718:	d301      	bcc.n	1471e <.divsi3_skip_div0_test+0x46>
   1471a:	1a40      	subs	r0, r0, r1
   1471c:	431a      	orrs	r2, r3
   1471e:	084c      	lsrs	r4, r1, #1
   14720:	42a0      	cmp	r0, r4
   14722:	d302      	bcc.n	1472a <.divsi3_skip_div0_test+0x52>
   14724:	1b00      	subs	r0, r0, r4
   14726:	085c      	lsrs	r4, r3, #1
   14728:	4322      	orrs	r2, r4
   1472a:	088c      	lsrs	r4, r1, #2
   1472c:	42a0      	cmp	r0, r4
   1472e:	d302      	bcc.n	14736 <.divsi3_skip_div0_test+0x5e>
   14730:	1b00      	subs	r0, r0, r4
   14732:	089c      	lsrs	r4, r3, #2
   14734:	4322      	orrs	r2, r4
   14736:	08cc      	lsrs	r4, r1, #3
   14738:	42a0      	cmp	r0, r4
   1473a:	d302      	bcc.n	14742 <.divsi3_skip_div0_test+0x6a>
   1473c:	1b00      	subs	r0, r0, r4
   1473e:	08dc      	lsrs	r4, r3, #3
   14740:	4322      	orrs	r2, r4
   14742:	2800      	cmp	r0, #0
   14744:	d003      	beq.n	1474e <.divsi3_skip_div0_test+0x76>
   14746:	091b      	lsrs	r3, r3, #4
   14748:	d001      	beq.n	1474e <.divsi3_skip_div0_test+0x76>
   1474a:	0909      	lsrs	r1, r1, #4
   1474c:	e7e3      	b.n	14716 <.divsi3_skip_div0_test+0x3e>
   1474e:	1c10      	adds	r0, r2, #0
   14750:	4664      	mov	r4, ip
   14752:	2c00      	cmp	r4, #0
   14754:	d500      	bpl.n	14758 <.divsi3_skip_div0_test+0x80>
   14756:	4240      	negs	r0, r0
   14758:	bc10      	pop	{r4}
   1475a:	4770      	bx	lr
   1475c:	2800      	cmp	r0, #0
   1475e:	d006      	beq.n	1476e <.divsi3_skip_div0_test+0x96>
   14760:	db03      	blt.n	1476a <.divsi3_skip_div0_test+0x92>
   14762:	2000      	movs	r0, #0
   14764:	43c0      	mvns	r0, r0
   14766:	0840      	lsrs	r0, r0, #1
   14768:	e001      	b.n	1476e <.divsi3_skip_div0_test+0x96>
   1476a:	2080      	movs	r0, #128	; 0x80
   1476c:	0600      	lsls	r0, r0, #24
   1476e:	b407      	push	{r0, r1, r2}
   14770:	4802      	ldr	r0, [pc, #8]	; (1477c <.divsi3_skip_div0_test+0xa4>)
   14772:	a102      	add	r1, pc, #8	; (adr r1, 1477c <.divsi3_skip_div0_test+0xa4>)
   14774:	1840      	adds	r0, r0, r1
   14776:	9002      	str	r0, [sp, #8]
   14778:	bd03      	pop	{r0, r1, pc}
   1477a:	46c0      	nop			; (mov r8, r8)
   1477c:	00000019 	.word	0x00000019

00014780 <__aeabi_idivmod>:
   14780:	2900      	cmp	r1, #0
   14782:	d0eb      	beq.n	1475c <.divsi3_skip_div0_test+0x84>
   14784:	b503      	push	{r0, r1, lr}
   14786:	f7ff ffa7 	bl	146d8 <.divsi3_skip_div0_test>
   1478a:	bc0e      	pop	{r1, r2, r3}
   1478c:	4342      	muls	r2, r0
   1478e:	1a89      	subs	r1, r1, r2
   14790:	4718      	bx	r3
   14792:	46c0      	nop			; (mov r8, r8)

00014794 <__aeabi_idiv0>:
   14794:	4770      	bx	lr
   14796:	46c0      	nop			; (mov r8, r8)

00014798 <__aeabi_cdrcmple>:
   14798:	4684      	mov	ip, r0
   1479a:	1c10      	adds	r0, r2, #0
   1479c:	4662      	mov	r2, ip
   1479e:	468c      	mov	ip, r1
   147a0:	1c19      	adds	r1, r3, #0
   147a2:	4663      	mov	r3, ip
   147a4:	e000      	b.n	147a8 <__aeabi_cdcmpeq>
   147a6:	46c0      	nop			; (mov r8, r8)

000147a8 <__aeabi_cdcmpeq>:
   147a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   147aa:	f000 ffd9 	bl	15760 <__ledf2>
   147ae:	2800      	cmp	r0, #0
   147b0:	d401      	bmi.n	147b6 <__aeabi_cdcmpeq+0xe>
   147b2:	2100      	movs	r1, #0
   147b4:	42c8      	cmn	r0, r1
   147b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000147b8 <__aeabi_dcmpeq>:
   147b8:	b510      	push	{r4, lr}
   147ba:	f000 ff09 	bl	155d0 <__eqdf2>
   147be:	4240      	negs	r0, r0
   147c0:	3001      	adds	r0, #1
   147c2:	bd10      	pop	{r4, pc}

000147c4 <__aeabi_dcmplt>:
   147c4:	b510      	push	{r4, lr}
   147c6:	f000 ffcb 	bl	15760 <__ledf2>
   147ca:	2800      	cmp	r0, #0
   147cc:	db01      	blt.n	147d2 <__aeabi_dcmplt+0xe>
   147ce:	2000      	movs	r0, #0
   147d0:	bd10      	pop	{r4, pc}
   147d2:	2001      	movs	r0, #1
   147d4:	bd10      	pop	{r4, pc}
   147d6:	46c0      	nop			; (mov r8, r8)

000147d8 <__aeabi_dcmple>:
   147d8:	b510      	push	{r4, lr}
   147da:	f000 ffc1 	bl	15760 <__ledf2>
   147de:	2800      	cmp	r0, #0
   147e0:	dd01      	ble.n	147e6 <__aeabi_dcmple+0xe>
   147e2:	2000      	movs	r0, #0
   147e4:	bd10      	pop	{r4, pc}
   147e6:	2001      	movs	r0, #1
   147e8:	bd10      	pop	{r4, pc}
   147ea:	46c0      	nop			; (mov r8, r8)

000147ec <__aeabi_dcmpgt>:
   147ec:	b510      	push	{r4, lr}
   147ee:	f000 ff39 	bl	15664 <__gedf2>
   147f2:	2800      	cmp	r0, #0
   147f4:	dc01      	bgt.n	147fa <__aeabi_dcmpgt+0xe>
   147f6:	2000      	movs	r0, #0
   147f8:	bd10      	pop	{r4, pc}
   147fa:	2001      	movs	r0, #1
   147fc:	bd10      	pop	{r4, pc}
   147fe:	46c0      	nop			; (mov r8, r8)

00014800 <__aeabi_dcmpge>:
   14800:	b510      	push	{r4, lr}
   14802:	f000 ff2f 	bl	15664 <__gedf2>
   14806:	2800      	cmp	r0, #0
   14808:	da01      	bge.n	1480e <__aeabi_dcmpge+0xe>
   1480a:	2000      	movs	r0, #0
   1480c:	bd10      	pop	{r4, pc}
   1480e:	2001      	movs	r0, #1
   14810:	bd10      	pop	{r4, pc}
   14812:	46c0      	nop			; (mov r8, r8)

00014814 <__aeabi_uldivmod>:
   14814:	2b00      	cmp	r3, #0
   14816:	d111      	bne.n	1483c <__aeabi_uldivmod+0x28>
   14818:	2a00      	cmp	r2, #0
   1481a:	d10f      	bne.n	1483c <__aeabi_uldivmod+0x28>
   1481c:	2900      	cmp	r1, #0
   1481e:	d100      	bne.n	14822 <__aeabi_uldivmod+0xe>
   14820:	2800      	cmp	r0, #0
   14822:	d002      	beq.n	1482a <__aeabi_uldivmod+0x16>
   14824:	2100      	movs	r1, #0
   14826:	43c9      	mvns	r1, r1
   14828:	1c08      	adds	r0, r1, #0
   1482a:	b407      	push	{r0, r1, r2}
   1482c:	4802      	ldr	r0, [pc, #8]	; (14838 <__aeabi_uldivmod+0x24>)
   1482e:	a102      	add	r1, pc, #8	; (adr r1, 14838 <__aeabi_uldivmod+0x24>)
   14830:	1840      	adds	r0, r0, r1
   14832:	9002      	str	r0, [sp, #8]
   14834:	bd03      	pop	{r0, r1, pc}
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	ffffff5d 	.word	0xffffff5d
   1483c:	b403      	push	{r0, r1}
   1483e:	4668      	mov	r0, sp
   14840:	b501      	push	{r0, lr}
   14842:	9802      	ldr	r0, [sp, #8]
   14844:	f000 f864 	bl	14910 <__gnu_uldivmod_helper>
   14848:	9b01      	ldr	r3, [sp, #4]
   1484a:	469e      	mov	lr, r3
   1484c:	b002      	add	sp, #8
   1484e:	bc0c      	pop	{r2, r3}
   14850:	4770      	bx	lr
   14852:	46c0      	nop			; (mov r8, r8)

00014854 <__aeabi_lmul>:
   14854:	469c      	mov	ip, r3
   14856:	0403      	lsls	r3, r0, #16
   14858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1485a:	0c1b      	lsrs	r3, r3, #16
   1485c:	0417      	lsls	r7, r2, #16
   1485e:	0c3f      	lsrs	r7, r7, #16
   14860:	0c15      	lsrs	r5, r2, #16
   14862:	1c1e      	adds	r6, r3, #0
   14864:	1c04      	adds	r4, r0, #0
   14866:	0c00      	lsrs	r0, r0, #16
   14868:	437e      	muls	r6, r7
   1486a:	436b      	muls	r3, r5
   1486c:	4347      	muls	r7, r0
   1486e:	4345      	muls	r5, r0
   14870:	18fb      	adds	r3, r7, r3
   14872:	0c30      	lsrs	r0, r6, #16
   14874:	1818      	adds	r0, r3, r0
   14876:	4287      	cmp	r7, r0
   14878:	d902      	bls.n	14880 <__aeabi_lmul+0x2c>
   1487a:	2380      	movs	r3, #128	; 0x80
   1487c:	025b      	lsls	r3, r3, #9
   1487e:	18ed      	adds	r5, r5, r3
   14880:	0c03      	lsrs	r3, r0, #16
   14882:	18ed      	adds	r5, r5, r3
   14884:	4663      	mov	r3, ip
   14886:	435c      	muls	r4, r3
   14888:	434a      	muls	r2, r1
   1488a:	0436      	lsls	r6, r6, #16
   1488c:	0c36      	lsrs	r6, r6, #16
   1488e:	18a1      	adds	r1, r4, r2
   14890:	0400      	lsls	r0, r0, #16
   14892:	1980      	adds	r0, r0, r6
   14894:	1949      	adds	r1, r1, r5
   14896:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014898 <__aeabi_d2uiz>:
   14898:	b538      	push	{r3, r4, r5, lr}
   1489a:	4b0e      	ldr	r3, [pc, #56]	; (148d4 <__aeabi_d2uiz+0x3c>)
   1489c:	4a0c      	ldr	r2, [pc, #48]	; (148d0 <__aeabi_d2uiz+0x38>)
   1489e:	1c04      	adds	r4, r0, #0
   148a0:	1c0d      	adds	r5, r1, #0
   148a2:	f7ff ffad 	bl	14800 <__aeabi_dcmpge>
   148a6:	2800      	cmp	r0, #0
   148a8:	d104      	bne.n	148b4 <__aeabi_d2uiz+0x1c>
   148aa:	1c20      	adds	r0, r4, #0
   148ac:	1c29      	adds	r1, r5, #0
   148ae:	f001 fd99 	bl	163e4 <__aeabi_d2iz>
   148b2:	bd38      	pop	{r3, r4, r5, pc}
   148b4:	4b07      	ldr	r3, [pc, #28]	; (148d4 <__aeabi_d2uiz+0x3c>)
   148b6:	4a06      	ldr	r2, [pc, #24]	; (148d0 <__aeabi_d2uiz+0x38>)
   148b8:	1c20      	adds	r0, r4, #0
   148ba:	1c29      	adds	r1, r5, #0
   148bc:	f001 fa5e 	bl	15d7c <__aeabi_dsub>
   148c0:	f001 fd90 	bl	163e4 <__aeabi_d2iz>
   148c4:	2380      	movs	r3, #128	; 0x80
   148c6:	061b      	lsls	r3, r3, #24
   148c8:	18c0      	adds	r0, r0, r3
   148ca:	e7f2      	b.n	148b2 <__aeabi_d2uiz+0x1a>
   148cc:	46c0      	nop			; (mov r8, r8)
   148ce:	46c0      	nop			; (mov r8, r8)
   148d0:	00000000 	.word	0x00000000
   148d4:	41e00000 	.word	0x41e00000

000148d8 <__gnu_ldivmod_helper>:
   148d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   148da:	b083      	sub	sp, #12
   148dc:	1c16      	adds	r6, r2, #0
   148de:	1c1f      	adds	r7, r3, #0
   148e0:	9000      	str	r0, [sp, #0]
   148e2:	9101      	str	r1, [sp, #4]
   148e4:	f001 fe42 	bl	1656c <__divdi3>
   148e8:	1c04      	adds	r4, r0, #0
   148ea:	1c0d      	adds	r5, r1, #0
   148ec:	1c22      	adds	r2, r4, #0
   148ee:	1c2b      	adds	r3, r5, #0
   148f0:	1c30      	adds	r0, r6, #0
   148f2:	1c39      	adds	r1, r7, #0
   148f4:	f7ff ffae 	bl	14854 <__aeabi_lmul>
   148f8:	9a00      	ldr	r2, [sp, #0]
   148fa:	9b01      	ldr	r3, [sp, #4]
   148fc:	1a12      	subs	r2, r2, r0
   148fe:	418b      	sbcs	r3, r1
   14900:	9908      	ldr	r1, [sp, #32]
   14902:	1c20      	adds	r0, r4, #0
   14904:	600a      	str	r2, [r1, #0]
   14906:	604b      	str	r3, [r1, #4]
   14908:	1c29      	adds	r1, r5, #0
   1490a:	b003      	add	sp, #12
   1490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1490e:	46c0      	nop			; (mov r8, r8)

00014910 <__gnu_uldivmod_helper>:
   14910:	b5f0      	push	{r4, r5, r6, r7, lr}
   14912:	b083      	sub	sp, #12
   14914:	1c14      	adds	r4, r2, #0
   14916:	1c1d      	adds	r5, r3, #0
   14918:	9000      	str	r0, [sp, #0]
   1491a:	9101      	str	r1, [sp, #4]
   1491c:	f002 f802 	bl	16924 <__udivdi3>
   14920:	1c22      	adds	r2, r4, #0
   14922:	1c2b      	adds	r3, r5, #0
   14924:	1c06      	adds	r6, r0, #0
   14926:	1c0f      	adds	r7, r1, #0
   14928:	f7ff ff94 	bl	14854 <__aeabi_lmul>
   1492c:	9a00      	ldr	r2, [sp, #0]
   1492e:	9b01      	ldr	r3, [sp, #4]
   14930:	1a12      	subs	r2, r2, r0
   14932:	418b      	sbcs	r3, r1
   14934:	9908      	ldr	r1, [sp, #32]
   14936:	1c30      	adds	r0, r6, #0
   14938:	600a      	str	r2, [r1, #0]
   1493a:	604b      	str	r3, [r1, #4]
   1493c:	1c39      	adds	r1, r7, #0
   1493e:	b003      	add	sp, #12
   14940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14942:	46c0      	nop			; (mov r8, r8)

00014944 <__aeabi_dadd>:
   14944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14946:	465f      	mov	r7, fp
   14948:	4656      	mov	r6, sl
   1494a:	4644      	mov	r4, r8
   1494c:	464d      	mov	r5, r9
   1494e:	b4f0      	push	{r4, r5, r6, r7}
   14950:	030c      	lsls	r4, r1, #12
   14952:	004d      	lsls	r5, r1, #1
   14954:	0fce      	lsrs	r6, r1, #31
   14956:	0a61      	lsrs	r1, r4, #9
   14958:	0f44      	lsrs	r4, r0, #29
   1495a:	4321      	orrs	r1, r4
   1495c:	00c4      	lsls	r4, r0, #3
   1495e:	0318      	lsls	r0, r3, #12
   14960:	4680      	mov	r8, r0
   14962:	0058      	lsls	r0, r3, #1
   14964:	0d40      	lsrs	r0, r0, #21
   14966:	4682      	mov	sl, r0
   14968:	0fd8      	lsrs	r0, r3, #31
   1496a:	4684      	mov	ip, r0
   1496c:	4640      	mov	r0, r8
   1496e:	0a40      	lsrs	r0, r0, #9
   14970:	0f53      	lsrs	r3, r2, #29
   14972:	4303      	orrs	r3, r0
   14974:	00d0      	lsls	r0, r2, #3
   14976:	0d6d      	lsrs	r5, r5, #21
   14978:	1c37      	adds	r7, r6, #0
   1497a:	4683      	mov	fp, r0
   1497c:	4652      	mov	r2, sl
   1497e:	4566      	cmp	r6, ip
   14980:	d100      	bne.n	14984 <__aeabi_dadd+0x40>
   14982:	e0a4      	b.n	14ace <__aeabi_dadd+0x18a>
   14984:	1aaf      	subs	r7, r5, r2
   14986:	2f00      	cmp	r7, #0
   14988:	dc00      	bgt.n	1498c <__aeabi_dadd+0x48>
   1498a:	e109      	b.n	14ba0 <__aeabi_dadd+0x25c>
   1498c:	2a00      	cmp	r2, #0
   1498e:	d13b      	bne.n	14a08 <__aeabi_dadd+0xc4>
   14990:	4318      	orrs	r0, r3
   14992:	d000      	beq.n	14996 <__aeabi_dadd+0x52>
   14994:	e0ea      	b.n	14b6c <__aeabi_dadd+0x228>
   14996:	0763      	lsls	r3, r4, #29
   14998:	d100      	bne.n	1499c <__aeabi_dadd+0x58>
   1499a:	e087      	b.n	14aac <__aeabi_dadd+0x168>
   1499c:	230f      	movs	r3, #15
   1499e:	4023      	ands	r3, r4
   149a0:	2b04      	cmp	r3, #4
   149a2:	d100      	bne.n	149a6 <__aeabi_dadd+0x62>
   149a4:	e082      	b.n	14aac <__aeabi_dadd+0x168>
   149a6:	1d22      	adds	r2, r4, #4
   149a8:	42a2      	cmp	r2, r4
   149aa:	41a4      	sbcs	r4, r4
   149ac:	4264      	negs	r4, r4
   149ae:	2380      	movs	r3, #128	; 0x80
   149b0:	1909      	adds	r1, r1, r4
   149b2:	041b      	lsls	r3, r3, #16
   149b4:	400b      	ands	r3, r1
   149b6:	1c37      	adds	r7, r6, #0
   149b8:	1c14      	adds	r4, r2, #0
   149ba:	2b00      	cmp	r3, #0
   149bc:	d100      	bne.n	149c0 <__aeabi_dadd+0x7c>
   149be:	e07c      	b.n	14aba <__aeabi_dadd+0x176>
   149c0:	4bce      	ldr	r3, [pc, #824]	; (14cfc <__aeabi_dadd+0x3b8>)
   149c2:	3501      	adds	r5, #1
   149c4:	429d      	cmp	r5, r3
   149c6:	d100      	bne.n	149ca <__aeabi_dadd+0x86>
   149c8:	e105      	b.n	14bd6 <__aeabi_dadd+0x292>
   149ca:	4bcd      	ldr	r3, [pc, #820]	; (14d00 <__aeabi_dadd+0x3bc>)
   149cc:	08e4      	lsrs	r4, r4, #3
   149ce:	4019      	ands	r1, r3
   149d0:	0748      	lsls	r0, r1, #29
   149d2:	0249      	lsls	r1, r1, #9
   149d4:	4304      	orrs	r4, r0
   149d6:	0b0b      	lsrs	r3, r1, #12
   149d8:	2000      	movs	r0, #0
   149da:	2100      	movs	r1, #0
   149dc:	031b      	lsls	r3, r3, #12
   149de:	0b1a      	lsrs	r2, r3, #12
   149e0:	0d0b      	lsrs	r3, r1, #20
   149e2:	056d      	lsls	r5, r5, #21
   149e4:	051b      	lsls	r3, r3, #20
   149e6:	4313      	orrs	r3, r2
   149e8:	086a      	lsrs	r2, r5, #1
   149ea:	4dc6      	ldr	r5, [pc, #792]	; (14d04 <__aeabi_dadd+0x3c0>)
   149ec:	07ff      	lsls	r7, r7, #31
   149ee:	401d      	ands	r5, r3
   149f0:	4315      	orrs	r5, r2
   149f2:	006d      	lsls	r5, r5, #1
   149f4:	086d      	lsrs	r5, r5, #1
   149f6:	1c29      	adds	r1, r5, #0
   149f8:	4339      	orrs	r1, r7
   149fa:	1c20      	adds	r0, r4, #0
   149fc:	bc3c      	pop	{r2, r3, r4, r5}
   149fe:	4690      	mov	r8, r2
   14a00:	4699      	mov	r9, r3
   14a02:	46a2      	mov	sl, r4
   14a04:	46ab      	mov	fp, r5
   14a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a08:	48bc      	ldr	r0, [pc, #752]	; (14cfc <__aeabi_dadd+0x3b8>)
   14a0a:	4285      	cmp	r5, r0
   14a0c:	d0c3      	beq.n	14996 <__aeabi_dadd+0x52>
   14a0e:	2080      	movs	r0, #128	; 0x80
   14a10:	0400      	lsls	r0, r0, #16
   14a12:	4303      	orrs	r3, r0
   14a14:	2f38      	cmp	r7, #56	; 0x38
   14a16:	dd00      	ble.n	14a1a <__aeabi_dadd+0xd6>
   14a18:	e0f0      	b.n	14bfc <__aeabi_dadd+0x2b8>
   14a1a:	2f1f      	cmp	r7, #31
   14a1c:	dd00      	ble.n	14a20 <__aeabi_dadd+0xdc>
   14a1e:	e124      	b.n	14c6a <__aeabi_dadd+0x326>
   14a20:	2020      	movs	r0, #32
   14a22:	1bc0      	subs	r0, r0, r7
   14a24:	1c1a      	adds	r2, r3, #0
   14a26:	4681      	mov	r9, r0
   14a28:	4082      	lsls	r2, r0
   14a2a:	4658      	mov	r0, fp
   14a2c:	40f8      	lsrs	r0, r7
   14a2e:	4302      	orrs	r2, r0
   14a30:	4694      	mov	ip, r2
   14a32:	4658      	mov	r0, fp
   14a34:	464a      	mov	r2, r9
   14a36:	4090      	lsls	r0, r2
   14a38:	1e42      	subs	r2, r0, #1
   14a3a:	4190      	sbcs	r0, r2
   14a3c:	40fb      	lsrs	r3, r7
   14a3e:	4662      	mov	r2, ip
   14a40:	4302      	orrs	r2, r0
   14a42:	1c1f      	adds	r7, r3, #0
   14a44:	1aa2      	subs	r2, r4, r2
   14a46:	4294      	cmp	r4, r2
   14a48:	41a4      	sbcs	r4, r4
   14a4a:	4264      	negs	r4, r4
   14a4c:	1bc9      	subs	r1, r1, r7
   14a4e:	1b09      	subs	r1, r1, r4
   14a50:	1c14      	adds	r4, r2, #0
   14a52:	020b      	lsls	r3, r1, #8
   14a54:	d59f      	bpl.n	14996 <__aeabi_dadd+0x52>
   14a56:	0249      	lsls	r1, r1, #9
   14a58:	0a4f      	lsrs	r7, r1, #9
   14a5a:	2f00      	cmp	r7, #0
   14a5c:	d100      	bne.n	14a60 <__aeabi_dadd+0x11c>
   14a5e:	e0c8      	b.n	14bf2 <__aeabi_dadd+0x2ae>
   14a60:	1c38      	adds	r0, r7, #0
   14a62:	f001 fd65 	bl	16530 <__clzsi2>
   14a66:	1c02      	adds	r2, r0, #0
   14a68:	3a08      	subs	r2, #8
   14a6a:	2a1f      	cmp	r2, #31
   14a6c:	dd00      	ble.n	14a70 <__aeabi_dadd+0x12c>
   14a6e:	e0b5      	b.n	14bdc <__aeabi_dadd+0x298>
   14a70:	2128      	movs	r1, #40	; 0x28
   14a72:	1a09      	subs	r1, r1, r0
   14a74:	1c20      	adds	r0, r4, #0
   14a76:	4097      	lsls	r7, r2
   14a78:	40c8      	lsrs	r0, r1
   14a7a:	4307      	orrs	r7, r0
   14a7c:	4094      	lsls	r4, r2
   14a7e:	4295      	cmp	r5, r2
   14a80:	dd00      	ble.n	14a84 <__aeabi_dadd+0x140>
   14a82:	e0b2      	b.n	14bea <__aeabi_dadd+0x2a6>
   14a84:	1b55      	subs	r5, r2, r5
   14a86:	1c69      	adds	r1, r5, #1
   14a88:	291f      	cmp	r1, #31
   14a8a:	dd00      	ble.n	14a8e <__aeabi_dadd+0x14a>
   14a8c:	e0dc      	b.n	14c48 <__aeabi_dadd+0x304>
   14a8e:	221f      	movs	r2, #31
   14a90:	1b55      	subs	r5, r2, r5
   14a92:	1c3b      	adds	r3, r7, #0
   14a94:	1c22      	adds	r2, r4, #0
   14a96:	40ab      	lsls	r3, r5
   14a98:	40ca      	lsrs	r2, r1
   14a9a:	40ac      	lsls	r4, r5
   14a9c:	1e65      	subs	r5, r4, #1
   14a9e:	41ac      	sbcs	r4, r5
   14aa0:	4313      	orrs	r3, r2
   14aa2:	40cf      	lsrs	r7, r1
   14aa4:	431c      	orrs	r4, r3
   14aa6:	1c39      	adds	r1, r7, #0
   14aa8:	2500      	movs	r5, #0
   14aaa:	e774      	b.n	14996 <__aeabi_dadd+0x52>
   14aac:	2380      	movs	r3, #128	; 0x80
   14aae:	041b      	lsls	r3, r3, #16
   14ab0:	400b      	ands	r3, r1
   14ab2:	1c37      	adds	r7, r6, #0
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	d000      	beq.n	14aba <__aeabi_dadd+0x176>
   14ab8:	e782      	b.n	149c0 <__aeabi_dadd+0x7c>
   14aba:	4b90      	ldr	r3, [pc, #576]	; (14cfc <__aeabi_dadd+0x3b8>)
   14abc:	0748      	lsls	r0, r1, #29
   14abe:	08e4      	lsrs	r4, r4, #3
   14ac0:	4304      	orrs	r4, r0
   14ac2:	08c9      	lsrs	r1, r1, #3
   14ac4:	429d      	cmp	r5, r3
   14ac6:	d048      	beq.n	14b5a <__aeabi_dadd+0x216>
   14ac8:	0309      	lsls	r1, r1, #12
   14aca:	0b0b      	lsrs	r3, r1, #12
   14acc:	e784      	b.n	149d8 <__aeabi_dadd+0x94>
   14ace:	1aaa      	subs	r2, r5, r2
   14ad0:	4694      	mov	ip, r2
   14ad2:	2a00      	cmp	r2, #0
   14ad4:	dc00      	bgt.n	14ad8 <__aeabi_dadd+0x194>
   14ad6:	e098      	b.n	14c0a <__aeabi_dadd+0x2c6>
   14ad8:	4650      	mov	r0, sl
   14ada:	2800      	cmp	r0, #0
   14adc:	d052      	beq.n	14b84 <__aeabi_dadd+0x240>
   14ade:	4887      	ldr	r0, [pc, #540]	; (14cfc <__aeabi_dadd+0x3b8>)
   14ae0:	4285      	cmp	r5, r0
   14ae2:	d100      	bne.n	14ae6 <__aeabi_dadd+0x1a2>
   14ae4:	e757      	b.n	14996 <__aeabi_dadd+0x52>
   14ae6:	2080      	movs	r0, #128	; 0x80
   14ae8:	0400      	lsls	r0, r0, #16
   14aea:	4303      	orrs	r3, r0
   14aec:	4662      	mov	r2, ip
   14aee:	2a38      	cmp	r2, #56	; 0x38
   14af0:	dd00      	ble.n	14af4 <__aeabi_dadd+0x1b0>
   14af2:	e0fc      	b.n	14cee <__aeabi_dadd+0x3aa>
   14af4:	2a1f      	cmp	r2, #31
   14af6:	dd00      	ble.n	14afa <__aeabi_dadd+0x1b6>
   14af8:	e14a      	b.n	14d90 <__aeabi_dadd+0x44c>
   14afa:	2220      	movs	r2, #32
   14afc:	4660      	mov	r0, ip
   14afe:	1a10      	subs	r0, r2, r0
   14b00:	1c1a      	adds	r2, r3, #0
   14b02:	4082      	lsls	r2, r0
   14b04:	4682      	mov	sl, r0
   14b06:	4691      	mov	r9, r2
   14b08:	4658      	mov	r0, fp
   14b0a:	4662      	mov	r2, ip
   14b0c:	40d0      	lsrs	r0, r2
   14b0e:	464a      	mov	r2, r9
   14b10:	4302      	orrs	r2, r0
   14b12:	4690      	mov	r8, r2
   14b14:	4658      	mov	r0, fp
   14b16:	4652      	mov	r2, sl
   14b18:	4090      	lsls	r0, r2
   14b1a:	1e42      	subs	r2, r0, #1
   14b1c:	4190      	sbcs	r0, r2
   14b1e:	4642      	mov	r2, r8
   14b20:	4302      	orrs	r2, r0
   14b22:	4660      	mov	r0, ip
   14b24:	40c3      	lsrs	r3, r0
   14b26:	1912      	adds	r2, r2, r4
   14b28:	42a2      	cmp	r2, r4
   14b2a:	41a4      	sbcs	r4, r4
   14b2c:	4264      	negs	r4, r4
   14b2e:	1859      	adds	r1, r3, r1
   14b30:	1909      	adds	r1, r1, r4
   14b32:	1c14      	adds	r4, r2, #0
   14b34:	0208      	lsls	r0, r1, #8
   14b36:	d400      	bmi.n	14b3a <__aeabi_dadd+0x1f6>
   14b38:	e72d      	b.n	14996 <__aeabi_dadd+0x52>
   14b3a:	4b70      	ldr	r3, [pc, #448]	; (14cfc <__aeabi_dadd+0x3b8>)
   14b3c:	3501      	adds	r5, #1
   14b3e:	429d      	cmp	r5, r3
   14b40:	d100      	bne.n	14b44 <__aeabi_dadd+0x200>
   14b42:	e122      	b.n	14d8a <__aeabi_dadd+0x446>
   14b44:	4b6e      	ldr	r3, [pc, #440]	; (14d00 <__aeabi_dadd+0x3bc>)
   14b46:	0860      	lsrs	r0, r4, #1
   14b48:	4019      	ands	r1, r3
   14b4a:	2301      	movs	r3, #1
   14b4c:	4023      	ands	r3, r4
   14b4e:	1c1c      	adds	r4, r3, #0
   14b50:	4304      	orrs	r4, r0
   14b52:	07cb      	lsls	r3, r1, #31
   14b54:	431c      	orrs	r4, r3
   14b56:	0849      	lsrs	r1, r1, #1
   14b58:	e71d      	b.n	14996 <__aeabi_dadd+0x52>
   14b5a:	1c23      	adds	r3, r4, #0
   14b5c:	430b      	orrs	r3, r1
   14b5e:	d03a      	beq.n	14bd6 <__aeabi_dadd+0x292>
   14b60:	2380      	movs	r3, #128	; 0x80
   14b62:	031b      	lsls	r3, r3, #12
   14b64:	430b      	orrs	r3, r1
   14b66:	031b      	lsls	r3, r3, #12
   14b68:	0b1b      	lsrs	r3, r3, #12
   14b6a:	e735      	b.n	149d8 <__aeabi_dadd+0x94>
   14b6c:	3f01      	subs	r7, #1
   14b6e:	2f00      	cmp	r7, #0
   14b70:	d165      	bne.n	14c3e <__aeabi_dadd+0x2fa>
   14b72:	4658      	mov	r0, fp
   14b74:	1a22      	subs	r2, r4, r0
   14b76:	4294      	cmp	r4, r2
   14b78:	41a4      	sbcs	r4, r4
   14b7a:	4264      	negs	r4, r4
   14b7c:	1ac9      	subs	r1, r1, r3
   14b7e:	1b09      	subs	r1, r1, r4
   14b80:	1c14      	adds	r4, r2, #0
   14b82:	e766      	b.n	14a52 <__aeabi_dadd+0x10e>
   14b84:	4658      	mov	r0, fp
   14b86:	4318      	orrs	r0, r3
   14b88:	d100      	bne.n	14b8c <__aeabi_dadd+0x248>
   14b8a:	e704      	b.n	14996 <__aeabi_dadd+0x52>
   14b8c:	2201      	movs	r2, #1
   14b8e:	4252      	negs	r2, r2
   14b90:	4494      	add	ip, r2
   14b92:	4660      	mov	r0, ip
   14b94:	2800      	cmp	r0, #0
   14b96:	d000      	beq.n	14b9a <__aeabi_dadd+0x256>
   14b98:	e0c5      	b.n	14d26 <__aeabi_dadd+0x3e2>
   14b9a:	4658      	mov	r0, fp
   14b9c:	1902      	adds	r2, r0, r4
   14b9e:	e7c3      	b.n	14b28 <__aeabi_dadd+0x1e4>
   14ba0:	2f00      	cmp	r7, #0
   14ba2:	d173      	bne.n	14c8c <__aeabi_dadd+0x348>
   14ba4:	1c68      	adds	r0, r5, #1
   14ba6:	0540      	lsls	r0, r0, #21
   14ba8:	0d40      	lsrs	r0, r0, #21
   14baa:	2801      	cmp	r0, #1
   14bac:	dc00      	bgt.n	14bb0 <__aeabi_dadd+0x26c>
   14bae:	e0de      	b.n	14d6e <__aeabi_dadd+0x42a>
   14bb0:	465a      	mov	r2, fp
   14bb2:	1aa2      	subs	r2, r4, r2
   14bb4:	4294      	cmp	r4, r2
   14bb6:	41bf      	sbcs	r7, r7
   14bb8:	1ac8      	subs	r0, r1, r3
   14bba:	427f      	negs	r7, r7
   14bbc:	1bc7      	subs	r7, r0, r7
   14bbe:	0238      	lsls	r0, r7, #8
   14bc0:	d400      	bmi.n	14bc4 <__aeabi_dadd+0x280>
   14bc2:	e089      	b.n	14cd8 <__aeabi_dadd+0x394>
   14bc4:	465a      	mov	r2, fp
   14bc6:	1b14      	subs	r4, r2, r4
   14bc8:	45a3      	cmp	fp, r4
   14bca:	4192      	sbcs	r2, r2
   14bcc:	1a59      	subs	r1, r3, r1
   14bce:	4252      	negs	r2, r2
   14bd0:	1a8f      	subs	r7, r1, r2
   14bd2:	4666      	mov	r6, ip
   14bd4:	e741      	b.n	14a5a <__aeabi_dadd+0x116>
   14bd6:	2300      	movs	r3, #0
   14bd8:	2400      	movs	r4, #0
   14bda:	e6fd      	b.n	149d8 <__aeabi_dadd+0x94>
   14bdc:	1c27      	adds	r7, r4, #0
   14bde:	3828      	subs	r0, #40	; 0x28
   14be0:	4087      	lsls	r7, r0
   14be2:	2400      	movs	r4, #0
   14be4:	4295      	cmp	r5, r2
   14be6:	dc00      	bgt.n	14bea <__aeabi_dadd+0x2a6>
   14be8:	e74c      	b.n	14a84 <__aeabi_dadd+0x140>
   14bea:	4945      	ldr	r1, [pc, #276]	; (14d00 <__aeabi_dadd+0x3bc>)
   14bec:	1aad      	subs	r5, r5, r2
   14bee:	4039      	ands	r1, r7
   14bf0:	e6d1      	b.n	14996 <__aeabi_dadd+0x52>
   14bf2:	1c20      	adds	r0, r4, #0
   14bf4:	f001 fc9c 	bl	16530 <__clzsi2>
   14bf8:	3020      	adds	r0, #32
   14bfa:	e734      	b.n	14a66 <__aeabi_dadd+0x122>
   14bfc:	465a      	mov	r2, fp
   14bfe:	431a      	orrs	r2, r3
   14c00:	1e53      	subs	r3, r2, #1
   14c02:	419a      	sbcs	r2, r3
   14c04:	b2d2      	uxtb	r2, r2
   14c06:	2700      	movs	r7, #0
   14c08:	e71c      	b.n	14a44 <__aeabi_dadd+0x100>
   14c0a:	2a00      	cmp	r2, #0
   14c0c:	d000      	beq.n	14c10 <__aeabi_dadd+0x2cc>
   14c0e:	e0dc      	b.n	14dca <__aeabi_dadd+0x486>
   14c10:	1c68      	adds	r0, r5, #1
   14c12:	0542      	lsls	r2, r0, #21
   14c14:	0d52      	lsrs	r2, r2, #21
   14c16:	2a01      	cmp	r2, #1
   14c18:	dc00      	bgt.n	14c1c <__aeabi_dadd+0x2d8>
   14c1a:	e08d      	b.n	14d38 <__aeabi_dadd+0x3f4>
   14c1c:	4d37      	ldr	r5, [pc, #220]	; (14cfc <__aeabi_dadd+0x3b8>)
   14c1e:	42a8      	cmp	r0, r5
   14c20:	d100      	bne.n	14c24 <__aeabi_dadd+0x2e0>
   14c22:	e0f3      	b.n	14e0c <__aeabi_dadd+0x4c8>
   14c24:	465d      	mov	r5, fp
   14c26:	192a      	adds	r2, r5, r4
   14c28:	42a2      	cmp	r2, r4
   14c2a:	41a4      	sbcs	r4, r4
   14c2c:	4264      	negs	r4, r4
   14c2e:	1859      	adds	r1, r3, r1
   14c30:	1909      	adds	r1, r1, r4
   14c32:	07cc      	lsls	r4, r1, #31
   14c34:	0852      	lsrs	r2, r2, #1
   14c36:	4314      	orrs	r4, r2
   14c38:	0849      	lsrs	r1, r1, #1
   14c3a:	1c05      	adds	r5, r0, #0
   14c3c:	e6ab      	b.n	14996 <__aeabi_dadd+0x52>
   14c3e:	482f      	ldr	r0, [pc, #188]	; (14cfc <__aeabi_dadd+0x3b8>)
   14c40:	4285      	cmp	r5, r0
   14c42:	d000      	beq.n	14c46 <__aeabi_dadd+0x302>
   14c44:	e6e6      	b.n	14a14 <__aeabi_dadd+0xd0>
   14c46:	e6a6      	b.n	14996 <__aeabi_dadd+0x52>
   14c48:	1c2b      	adds	r3, r5, #0
   14c4a:	3b1f      	subs	r3, #31
   14c4c:	1c3a      	adds	r2, r7, #0
   14c4e:	40da      	lsrs	r2, r3
   14c50:	1c13      	adds	r3, r2, #0
   14c52:	2920      	cmp	r1, #32
   14c54:	d06c      	beq.n	14d30 <__aeabi_dadd+0x3ec>
   14c56:	223f      	movs	r2, #63	; 0x3f
   14c58:	1b55      	subs	r5, r2, r5
   14c5a:	40af      	lsls	r7, r5
   14c5c:	433c      	orrs	r4, r7
   14c5e:	1e60      	subs	r0, r4, #1
   14c60:	4184      	sbcs	r4, r0
   14c62:	431c      	orrs	r4, r3
   14c64:	2100      	movs	r1, #0
   14c66:	2500      	movs	r5, #0
   14c68:	e695      	b.n	14996 <__aeabi_dadd+0x52>
   14c6a:	1c38      	adds	r0, r7, #0
   14c6c:	3820      	subs	r0, #32
   14c6e:	1c1a      	adds	r2, r3, #0
   14c70:	40c2      	lsrs	r2, r0
   14c72:	1c10      	adds	r0, r2, #0
   14c74:	2f20      	cmp	r7, #32
   14c76:	d05d      	beq.n	14d34 <__aeabi_dadd+0x3f0>
   14c78:	2240      	movs	r2, #64	; 0x40
   14c7a:	1bd7      	subs	r7, r2, r7
   14c7c:	40bb      	lsls	r3, r7
   14c7e:	465a      	mov	r2, fp
   14c80:	431a      	orrs	r2, r3
   14c82:	1e53      	subs	r3, r2, #1
   14c84:	419a      	sbcs	r2, r3
   14c86:	4302      	orrs	r2, r0
   14c88:	2700      	movs	r7, #0
   14c8a:	e6db      	b.n	14a44 <__aeabi_dadd+0x100>
   14c8c:	2d00      	cmp	r5, #0
   14c8e:	d03b      	beq.n	14d08 <__aeabi_dadd+0x3c4>
   14c90:	4d1a      	ldr	r5, [pc, #104]	; (14cfc <__aeabi_dadd+0x3b8>)
   14c92:	45aa      	cmp	sl, r5
   14c94:	d100      	bne.n	14c98 <__aeabi_dadd+0x354>
   14c96:	e093      	b.n	14dc0 <__aeabi_dadd+0x47c>
   14c98:	2580      	movs	r5, #128	; 0x80
   14c9a:	042d      	lsls	r5, r5, #16
   14c9c:	427f      	negs	r7, r7
   14c9e:	4329      	orrs	r1, r5
   14ca0:	2f38      	cmp	r7, #56	; 0x38
   14ca2:	dd00      	ble.n	14ca6 <__aeabi_dadd+0x362>
   14ca4:	e0ac      	b.n	14e00 <__aeabi_dadd+0x4bc>
   14ca6:	2f1f      	cmp	r7, #31
   14ca8:	dd00      	ble.n	14cac <__aeabi_dadd+0x368>
   14caa:	e129      	b.n	14f00 <__aeabi_dadd+0x5bc>
   14cac:	2520      	movs	r5, #32
   14cae:	1bed      	subs	r5, r5, r7
   14cb0:	1c08      	adds	r0, r1, #0
   14cb2:	1c26      	adds	r6, r4, #0
   14cb4:	40a8      	lsls	r0, r5
   14cb6:	40fe      	lsrs	r6, r7
   14cb8:	40ac      	lsls	r4, r5
   14cba:	4306      	orrs	r6, r0
   14cbc:	1e65      	subs	r5, r4, #1
   14cbe:	41ac      	sbcs	r4, r5
   14cc0:	4334      	orrs	r4, r6
   14cc2:	40f9      	lsrs	r1, r7
   14cc4:	465d      	mov	r5, fp
   14cc6:	1b2c      	subs	r4, r5, r4
   14cc8:	45a3      	cmp	fp, r4
   14cca:	4192      	sbcs	r2, r2
   14ccc:	1a5b      	subs	r3, r3, r1
   14cce:	4252      	negs	r2, r2
   14cd0:	1a99      	subs	r1, r3, r2
   14cd2:	4655      	mov	r5, sl
   14cd4:	4666      	mov	r6, ip
   14cd6:	e6bc      	b.n	14a52 <__aeabi_dadd+0x10e>
   14cd8:	1c13      	adds	r3, r2, #0
   14cda:	433b      	orrs	r3, r7
   14cdc:	1c14      	adds	r4, r2, #0
   14cde:	2b00      	cmp	r3, #0
   14ce0:	d000      	beq.n	14ce4 <__aeabi_dadd+0x3a0>
   14ce2:	e6ba      	b.n	14a5a <__aeabi_dadd+0x116>
   14ce4:	2700      	movs	r7, #0
   14ce6:	2100      	movs	r1, #0
   14ce8:	2500      	movs	r5, #0
   14cea:	2400      	movs	r4, #0
   14cec:	e6e5      	b.n	14aba <__aeabi_dadd+0x176>
   14cee:	465a      	mov	r2, fp
   14cf0:	431a      	orrs	r2, r3
   14cf2:	1e53      	subs	r3, r2, #1
   14cf4:	419a      	sbcs	r2, r3
   14cf6:	b2d2      	uxtb	r2, r2
   14cf8:	2300      	movs	r3, #0
   14cfa:	e714      	b.n	14b26 <__aeabi_dadd+0x1e2>
   14cfc:	000007ff 	.word	0x000007ff
   14d00:	ff7fffff 	.word	0xff7fffff
   14d04:	800fffff 	.word	0x800fffff
   14d08:	1c0d      	adds	r5, r1, #0
   14d0a:	4325      	orrs	r5, r4
   14d0c:	d058      	beq.n	14dc0 <__aeabi_dadd+0x47c>
   14d0e:	43ff      	mvns	r7, r7
   14d10:	2f00      	cmp	r7, #0
   14d12:	d151      	bne.n	14db8 <__aeabi_dadd+0x474>
   14d14:	1b04      	subs	r4, r0, r4
   14d16:	45a3      	cmp	fp, r4
   14d18:	4192      	sbcs	r2, r2
   14d1a:	1a59      	subs	r1, r3, r1
   14d1c:	4252      	negs	r2, r2
   14d1e:	1a89      	subs	r1, r1, r2
   14d20:	4655      	mov	r5, sl
   14d22:	4666      	mov	r6, ip
   14d24:	e695      	b.n	14a52 <__aeabi_dadd+0x10e>
   14d26:	4896      	ldr	r0, [pc, #600]	; (14f80 <__aeabi_dadd+0x63c>)
   14d28:	4285      	cmp	r5, r0
   14d2a:	d000      	beq.n	14d2e <__aeabi_dadd+0x3ea>
   14d2c:	e6de      	b.n	14aec <__aeabi_dadd+0x1a8>
   14d2e:	e632      	b.n	14996 <__aeabi_dadd+0x52>
   14d30:	2700      	movs	r7, #0
   14d32:	e793      	b.n	14c5c <__aeabi_dadd+0x318>
   14d34:	2300      	movs	r3, #0
   14d36:	e7a2      	b.n	14c7e <__aeabi_dadd+0x33a>
   14d38:	1c08      	adds	r0, r1, #0
   14d3a:	4320      	orrs	r0, r4
   14d3c:	2d00      	cmp	r5, #0
   14d3e:	d000      	beq.n	14d42 <__aeabi_dadd+0x3fe>
   14d40:	e0c4      	b.n	14ecc <__aeabi_dadd+0x588>
   14d42:	2800      	cmp	r0, #0
   14d44:	d100      	bne.n	14d48 <__aeabi_dadd+0x404>
   14d46:	e0f7      	b.n	14f38 <__aeabi_dadd+0x5f4>
   14d48:	4658      	mov	r0, fp
   14d4a:	4318      	orrs	r0, r3
   14d4c:	d100      	bne.n	14d50 <__aeabi_dadd+0x40c>
   14d4e:	e622      	b.n	14996 <__aeabi_dadd+0x52>
   14d50:	4658      	mov	r0, fp
   14d52:	1902      	adds	r2, r0, r4
   14d54:	42a2      	cmp	r2, r4
   14d56:	41a4      	sbcs	r4, r4
   14d58:	4264      	negs	r4, r4
   14d5a:	1859      	adds	r1, r3, r1
   14d5c:	1909      	adds	r1, r1, r4
   14d5e:	1c14      	adds	r4, r2, #0
   14d60:	020a      	lsls	r2, r1, #8
   14d62:	d400      	bmi.n	14d66 <__aeabi_dadd+0x422>
   14d64:	e617      	b.n	14996 <__aeabi_dadd+0x52>
   14d66:	4b87      	ldr	r3, [pc, #540]	; (14f84 <__aeabi_dadd+0x640>)
   14d68:	2501      	movs	r5, #1
   14d6a:	4019      	ands	r1, r3
   14d6c:	e613      	b.n	14996 <__aeabi_dadd+0x52>
   14d6e:	1c08      	adds	r0, r1, #0
   14d70:	4320      	orrs	r0, r4
   14d72:	2d00      	cmp	r5, #0
   14d74:	d139      	bne.n	14dea <__aeabi_dadd+0x4a6>
   14d76:	2800      	cmp	r0, #0
   14d78:	d171      	bne.n	14e5e <__aeabi_dadd+0x51a>
   14d7a:	4659      	mov	r1, fp
   14d7c:	4319      	orrs	r1, r3
   14d7e:	d003      	beq.n	14d88 <__aeabi_dadd+0x444>
   14d80:	1c19      	adds	r1, r3, #0
   14d82:	465c      	mov	r4, fp
   14d84:	4666      	mov	r6, ip
   14d86:	e606      	b.n	14996 <__aeabi_dadd+0x52>
   14d88:	2700      	movs	r7, #0
   14d8a:	2100      	movs	r1, #0
   14d8c:	2400      	movs	r4, #0
   14d8e:	e694      	b.n	14aba <__aeabi_dadd+0x176>
   14d90:	4660      	mov	r0, ip
   14d92:	3820      	subs	r0, #32
   14d94:	1c1a      	adds	r2, r3, #0
   14d96:	40c2      	lsrs	r2, r0
   14d98:	4660      	mov	r0, ip
   14d9a:	4691      	mov	r9, r2
   14d9c:	2820      	cmp	r0, #32
   14d9e:	d100      	bne.n	14da2 <__aeabi_dadd+0x45e>
   14da0:	e0ac      	b.n	14efc <__aeabi_dadd+0x5b8>
   14da2:	2240      	movs	r2, #64	; 0x40
   14da4:	1a12      	subs	r2, r2, r0
   14da6:	4093      	lsls	r3, r2
   14da8:	465a      	mov	r2, fp
   14daa:	431a      	orrs	r2, r3
   14dac:	1e53      	subs	r3, r2, #1
   14dae:	419a      	sbcs	r2, r3
   14db0:	464b      	mov	r3, r9
   14db2:	431a      	orrs	r2, r3
   14db4:	2300      	movs	r3, #0
   14db6:	e6b6      	b.n	14b26 <__aeabi_dadd+0x1e2>
   14db8:	4d71      	ldr	r5, [pc, #452]	; (14f80 <__aeabi_dadd+0x63c>)
   14dba:	45aa      	cmp	sl, r5
   14dbc:	d000      	beq.n	14dc0 <__aeabi_dadd+0x47c>
   14dbe:	e76f      	b.n	14ca0 <__aeabi_dadd+0x35c>
   14dc0:	1c19      	adds	r1, r3, #0
   14dc2:	465c      	mov	r4, fp
   14dc4:	4655      	mov	r5, sl
   14dc6:	4666      	mov	r6, ip
   14dc8:	e5e5      	b.n	14996 <__aeabi_dadd+0x52>
   14dca:	2d00      	cmp	r5, #0
   14dcc:	d122      	bne.n	14e14 <__aeabi_dadd+0x4d0>
   14dce:	1c0d      	adds	r5, r1, #0
   14dd0:	4325      	orrs	r5, r4
   14dd2:	d077      	beq.n	14ec4 <__aeabi_dadd+0x580>
   14dd4:	43d5      	mvns	r5, r2
   14dd6:	2d00      	cmp	r5, #0
   14dd8:	d171      	bne.n	14ebe <__aeabi_dadd+0x57a>
   14dda:	445c      	add	r4, fp
   14ddc:	455c      	cmp	r4, fp
   14dde:	4192      	sbcs	r2, r2
   14de0:	1859      	adds	r1, r3, r1
   14de2:	4252      	negs	r2, r2
   14de4:	1889      	adds	r1, r1, r2
   14de6:	4655      	mov	r5, sl
   14de8:	e6a4      	b.n	14b34 <__aeabi_dadd+0x1f0>
   14dea:	2800      	cmp	r0, #0
   14dec:	d14d      	bne.n	14e8a <__aeabi_dadd+0x546>
   14dee:	4659      	mov	r1, fp
   14df0:	4319      	orrs	r1, r3
   14df2:	d100      	bne.n	14df6 <__aeabi_dadd+0x4b2>
   14df4:	e094      	b.n	14f20 <__aeabi_dadd+0x5dc>
   14df6:	1c19      	adds	r1, r3, #0
   14df8:	465c      	mov	r4, fp
   14dfa:	4666      	mov	r6, ip
   14dfc:	4d60      	ldr	r5, [pc, #384]	; (14f80 <__aeabi_dadd+0x63c>)
   14dfe:	e5ca      	b.n	14996 <__aeabi_dadd+0x52>
   14e00:	430c      	orrs	r4, r1
   14e02:	1e61      	subs	r1, r4, #1
   14e04:	418c      	sbcs	r4, r1
   14e06:	b2e4      	uxtb	r4, r4
   14e08:	2100      	movs	r1, #0
   14e0a:	e75b      	b.n	14cc4 <__aeabi_dadd+0x380>
   14e0c:	1c05      	adds	r5, r0, #0
   14e0e:	2100      	movs	r1, #0
   14e10:	2400      	movs	r4, #0
   14e12:	e652      	b.n	14aba <__aeabi_dadd+0x176>
   14e14:	4d5a      	ldr	r5, [pc, #360]	; (14f80 <__aeabi_dadd+0x63c>)
   14e16:	45aa      	cmp	sl, r5
   14e18:	d054      	beq.n	14ec4 <__aeabi_dadd+0x580>
   14e1a:	4255      	negs	r5, r2
   14e1c:	2280      	movs	r2, #128	; 0x80
   14e1e:	0410      	lsls	r0, r2, #16
   14e20:	4301      	orrs	r1, r0
   14e22:	2d38      	cmp	r5, #56	; 0x38
   14e24:	dd00      	ble.n	14e28 <__aeabi_dadd+0x4e4>
   14e26:	e081      	b.n	14f2c <__aeabi_dadd+0x5e8>
   14e28:	2d1f      	cmp	r5, #31
   14e2a:	dd00      	ble.n	14e2e <__aeabi_dadd+0x4ea>
   14e2c:	e092      	b.n	14f54 <__aeabi_dadd+0x610>
   14e2e:	2220      	movs	r2, #32
   14e30:	1b50      	subs	r0, r2, r5
   14e32:	1c0a      	adds	r2, r1, #0
   14e34:	4684      	mov	ip, r0
   14e36:	4082      	lsls	r2, r0
   14e38:	1c20      	adds	r0, r4, #0
   14e3a:	40e8      	lsrs	r0, r5
   14e3c:	4302      	orrs	r2, r0
   14e3e:	4690      	mov	r8, r2
   14e40:	4662      	mov	r2, ip
   14e42:	4094      	lsls	r4, r2
   14e44:	1e60      	subs	r0, r4, #1
   14e46:	4184      	sbcs	r4, r0
   14e48:	4642      	mov	r2, r8
   14e4a:	4314      	orrs	r4, r2
   14e4c:	40e9      	lsrs	r1, r5
   14e4e:	445c      	add	r4, fp
   14e50:	455c      	cmp	r4, fp
   14e52:	4192      	sbcs	r2, r2
   14e54:	18cb      	adds	r3, r1, r3
   14e56:	4252      	negs	r2, r2
   14e58:	1899      	adds	r1, r3, r2
   14e5a:	4655      	mov	r5, sl
   14e5c:	e66a      	b.n	14b34 <__aeabi_dadd+0x1f0>
   14e5e:	4658      	mov	r0, fp
   14e60:	4318      	orrs	r0, r3
   14e62:	d100      	bne.n	14e66 <__aeabi_dadd+0x522>
   14e64:	e597      	b.n	14996 <__aeabi_dadd+0x52>
   14e66:	4658      	mov	r0, fp
   14e68:	1a27      	subs	r7, r4, r0
   14e6a:	42bc      	cmp	r4, r7
   14e6c:	4192      	sbcs	r2, r2
   14e6e:	1ac8      	subs	r0, r1, r3
   14e70:	4252      	negs	r2, r2
   14e72:	1a80      	subs	r0, r0, r2
   14e74:	0202      	lsls	r2, r0, #8
   14e76:	d566      	bpl.n	14f46 <__aeabi_dadd+0x602>
   14e78:	4658      	mov	r0, fp
   14e7a:	1b04      	subs	r4, r0, r4
   14e7c:	45a3      	cmp	fp, r4
   14e7e:	4192      	sbcs	r2, r2
   14e80:	1a59      	subs	r1, r3, r1
   14e82:	4252      	negs	r2, r2
   14e84:	1a89      	subs	r1, r1, r2
   14e86:	4666      	mov	r6, ip
   14e88:	e585      	b.n	14996 <__aeabi_dadd+0x52>
   14e8a:	4658      	mov	r0, fp
   14e8c:	4318      	orrs	r0, r3
   14e8e:	d033      	beq.n	14ef8 <__aeabi_dadd+0x5b4>
   14e90:	0748      	lsls	r0, r1, #29
   14e92:	08e4      	lsrs	r4, r4, #3
   14e94:	4304      	orrs	r4, r0
   14e96:	2080      	movs	r0, #128	; 0x80
   14e98:	08c9      	lsrs	r1, r1, #3
   14e9a:	0300      	lsls	r0, r0, #12
   14e9c:	4201      	tst	r1, r0
   14e9e:	d008      	beq.n	14eb2 <__aeabi_dadd+0x56e>
   14ea0:	08dd      	lsrs	r5, r3, #3
   14ea2:	4205      	tst	r5, r0
   14ea4:	d105      	bne.n	14eb2 <__aeabi_dadd+0x56e>
   14ea6:	4659      	mov	r1, fp
   14ea8:	08ca      	lsrs	r2, r1, #3
   14eaa:	075c      	lsls	r4, r3, #29
   14eac:	4314      	orrs	r4, r2
   14eae:	1c29      	adds	r1, r5, #0
   14eb0:	4666      	mov	r6, ip
   14eb2:	0f63      	lsrs	r3, r4, #29
   14eb4:	00c9      	lsls	r1, r1, #3
   14eb6:	4319      	orrs	r1, r3
   14eb8:	00e4      	lsls	r4, r4, #3
   14eba:	4d31      	ldr	r5, [pc, #196]	; (14f80 <__aeabi_dadd+0x63c>)
   14ebc:	e56b      	b.n	14996 <__aeabi_dadd+0x52>
   14ebe:	4a30      	ldr	r2, [pc, #192]	; (14f80 <__aeabi_dadd+0x63c>)
   14ec0:	4592      	cmp	sl, r2
   14ec2:	d1ae      	bne.n	14e22 <__aeabi_dadd+0x4de>
   14ec4:	1c19      	adds	r1, r3, #0
   14ec6:	465c      	mov	r4, fp
   14ec8:	4655      	mov	r5, sl
   14eca:	e564      	b.n	14996 <__aeabi_dadd+0x52>
   14ecc:	2800      	cmp	r0, #0
   14ece:	d036      	beq.n	14f3e <__aeabi_dadd+0x5fa>
   14ed0:	4658      	mov	r0, fp
   14ed2:	4318      	orrs	r0, r3
   14ed4:	d010      	beq.n	14ef8 <__aeabi_dadd+0x5b4>
   14ed6:	2580      	movs	r5, #128	; 0x80
   14ed8:	0748      	lsls	r0, r1, #29
   14eda:	08e4      	lsrs	r4, r4, #3
   14edc:	08c9      	lsrs	r1, r1, #3
   14ede:	032d      	lsls	r5, r5, #12
   14ee0:	4304      	orrs	r4, r0
   14ee2:	4229      	tst	r1, r5
   14ee4:	d0e5      	beq.n	14eb2 <__aeabi_dadd+0x56e>
   14ee6:	08d8      	lsrs	r0, r3, #3
   14ee8:	4228      	tst	r0, r5
   14eea:	d1e2      	bne.n	14eb2 <__aeabi_dadd+0x56e>
   14eec:	465d      	mov	r5, fp
   14eee:	08ea      	lsrs	r2, r5, #3
   14ef0:	075c      	lsls	r4, r3, #29
   14ef2:	4314      	orrs	r4, r2
   14ef4:	1c01      	adds	r1, r0, #0
   14ef6:	e7dc      	b.n	14eb2 <__aeabi_dadd+0x56e>
   14ef8:	4d21      	ldr	r5, [pc, #132]	; (14f80 <__aeabi_dadd+0x63c>)
   14efa:	e54c      	b.n	14996 <__aeabi_dadd+0x52>
   14efc:	2300      	movs	r3, #0
   14efe:	e753      	b.n	14da8 <__aeabi_dadd+0x464>
   14f00:	1c3d      	adds	r5, r7, #0
   14f02:	3d20      	subs	r5, #32
   14f04:	1c0a      	adds	r2, r1, #0
   14f06:	40ea      	lsrs	r2, r5
   14f08:	1c15      	adds	r5, r2, #0
   14f0a:	2f20      	cmp	r7, #32
   14f0c:	d034      	beq.n	14f78 <__aeabi_dadd+0x634>
   14f0e:	2640      	movs	r6, #64	; 0x40
   14f10:	1bf7      	subs	r7, r6, r7
   14f12:	40b9      	lsls	r1, r7
   14f14:	430c      	orrs	r4, r1
   14f16:	1e61      	subs	r1, r4, #1
   14f18:	418c      	sbcs	r4, r1
   14f1a:	432c      	orrs	r4, r5
   14f1c:	2100      	movs	r1, #0
   14f1e:	e6d1      	b.n	14cc4 <__aeabi_dadd+0x380>
   14f20:	2180      	movs	r1, #128	; 0x80
   14f22:	2700      	movs	r7, #0
   14f24:	03c9      	lsls	r1, r1, #15
   14f26:	4d16      	ldr	r5, [pc, #88]	; (14f80 <__aeabi_dadd+0x63c>)
   14f28:	2400      	movs	r4, #0
   14f2a:	e5c6      	b.n	14aba <__aeabi_dadd+0x176>
   14f2c:	430c      	orrs	r4, r1
   14f2e:	1e61      	subs	r1, r4, #1
   14f30:	418c      	sbcs	r4, r1
   14f32:	b2e4      	uxtb	r4, r4
   14f34:	2100      	movs	r1, #0
   14f36:	e78a      	b.n	14e4e <__aeabi_dadd+0x50a>
   14f38:	1c19      	adds	r1, r3, #0
   14f3a:	465c      	mov	r4, fp
   14f3c:	e52b      	b.n	14996 <__aeabi_dadd+0x52>
   14f3e:	1c19      	adds	r1, r3, #0
   14f40:	465c      	mov	r4, fp
   14f42:	4d0f      	ldr	r5, [pc, #60]	; (14f80 <__aeabi_dadd+0x63c>)
   14f44:	e527      	b.n	14996 <__aeabi_dadd+0x52>
   14f46:	1c03      	adds	r3, r0, #0
   14f48:	433b      	orrs	r3, r7
   14f4a:	d100      	bne.n	14f4e <__aeabi_dadd+0x60a>
   14f4c:	e71c      	b.n	14d88 <__aeabi_dadd+0x444>
   14f4e:	1c01      	adds	r1, r0, #0
   14f50:	1c3c      	adds	r4, r7, #0
   14f52:	e520      	b.n	14996 <__aeabi_dadd+0x52>
   14f54:	2020      	movs	r0, #32
   14f56:	4240      	negs	r0, r0
   14f58:	1940      	adds	r0, r0, r5
   14f5a:	1c0a      	adds	r2, r1, #0
   14f5c:	40c2      	lsrs	r2, r0
   14f5e:	4690      	mov	r8, r2
   14f60:	2d20      	cmp	r5, #32
   14f62:	d00b      	beq.n	14f7c <__aeabi_dadd+0x638>
   14f64:	2040      	movs	r0, #64	; 0x40
   14f66:	1b45      	subs	r5, r0, r5
   14f68:	40a9      	lsls	r1, r5
   14f6a:	430c      	orrs	r4, r1
   14f6c:	1e61      	subs	r1, r4, #1
   14f6e:	418c      	sbcs	r4, r1
   14f70:	4645      	mov	r5, r8
   14f72:	432c      	orrs	r4, r5
   14f74:	2100      	movs	r1, #0
   14f76:	e76a      	b.n	14e4e <__aeabi_dadd+0x50a>
   14f78:	2100      	movs	r1, #0
   14f7a:	e7cb      	b.n	14f14 <__aeabi_dadd+0x5d0>
   14f7c:	2100      	movs	r1, #0
   14f7e:	e7f4      	b.n	14f6a <__aeabi_dadd+0x626>
   14f80:	000007ff 	.word	0x000007ff
   14f84:	ff7fffff 	.word	0xff7fffff

00014f88 <__aeabi_ddiv>:
   14f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f8a:	4656      	mov	r6, sl
   14f8c:	4644      	mov	r4, r8
   14f8e:	465f      	mov	r7, fp
   14f90:	464d      	mov	r5, r9
   14f92:	b4f0      	push	{r4, r5, r6, r7}
   14f94:	1c1f      	adds	r7, r3, #0
   14f96:	030b      	lsls	r3, r1, #12
   14f98:	0b1b      	lsrs	r3, r3, #12
   14f9a:	4698      	mov	r8, r3
   14f9c:	004b      	lsls	r3, r1, #1
   14f9e:	b087      	sub	sp, #28
   14fa0:	1c04      	adds	r4, r0, #0
   14fa2:	4681      	mov	r9, r0
   14fa4:	0d5b      	lsrs	r3, r3, #21
   14fa6:	0fc8      	lsrs	r0, r1, #31
   14fa8:	1c16      	adds	r6, r2, #0
   14faa:	469a      	mov	sl, r3
   14fac:	9000      	str	r0, [sp, #0]
   14fae:	2b00      	cmp	r3, #0
   14fb0:	d051      	beq.n	15056 <__aeabi_ddiv+0xce>
   14fb2:	4b6a      	ldr	r3, [pc, #424]	; (1515c <__aeabi_ddiv+0x1d4>)
   14fb4:	459a      	cmp	sl, r3
   14fb6:	d031      	beq.n	1501c <__aeabi_ddiv+0x94>
   14fb8:	2280      	movs	r2, #128	; 0x80
   14fba:	4641      	mov	r1, r8
   14fbc:	0352      	lsls	r2, r2, #13
   14fbe:	430a      	orrs	r2, r1
   14fc0:	0f63      	lsrs	r3, r4, #29
   14fc2:	00d2      	lsls	r2, r2, #3
   14fc4:	431a      	orrs	r2, r3
   14fc6:	4b66      	ldr	r3, [pc, #408]	; (15160 <__aeabi_ddiv+0x1d8>)
   14fc8:	4690      	mov	r8, r2
   14fca:	2500      	movs	r5, #0
   14fcc:	00e2      	lsls	r2, r4, #3
   14fce:	4691      	mov	r9, r2
   14fd0:	449a      	add	sl, r3
   14fd2:	2400      	movs	r4, #0
   14fd4:	9502      	str	r5, [sp, #8]
   14fd6:	033b      	lsls	r3, r7, #12
   14fd8:	0b1b      	lsrs	r3, r3, #12
   14fda:	469b      	mov	fp, r3
   14fdc:	0ffd      	lsrs	r5, r7, #31
   14fde:	007b      	lsls	r3, r7, #1
   14fe0:	1c31      	adds	r1, r6, #0
   14fe2:	0d5b      	lsrs	r3, r3, #21
   14fe4:	9501      	str	r5, [sp, #4]
   14fe6:	d060      	beq.n	150aa <__aeabi_ddiv+0x122>
   14fe8:	4a5c      	ldr	r2, [pc, #368]	; (1515c <__aeabi_ddiv+0x1d4>)
   14fea:	4293      	cmp	r3, r2
   14fec:	d054      	beq.n	15098 <__aeabi_ddiv+0x110>
   14fee:	2180      	movs	r1, #128	; 0x80
   14ff0:	4658      	mov	r0, fp
   14ff2:	0349      	lsls	r1, r1, #13
   14ff4:	4301      	orrs	r1, r0
   14ff6:	0f72      	lsrs	r2, r6, #29
   14ff8:	00c9      	lsls	r1, r1, #3
   14ffa:	4311      	orrs	r1, r2
   14ffc:	4a58      	ldr	r2, [pc, #352]	; (15160 <__aeabi_ddiv+0x1d8>)
   14ffe:	468b      	mov	fp, r1
   15000:	189b      	adds	r3, r3, r2
   15002:	00f1      	lsls	r1, r6, #3
   15004:	2000      	movs	r0, #0
   15006:	9a00      	ldr	r2, [sp, #0]
   15008:	4304      	orrs	r4, r0
   1500a:	406a      	eors	r2, r5
   1500c:	9203      	str	r2, [sp, #12]
   1500e:	2c0f      	cmp	r4, #15
   15010:	d900      	bls.n	15014 <__aeabi_ddiv+0x8c>
   15012:	e0ad      	b.n	15170 <__aeabi_ddiv+0x1e8>
   15014:	4e53      	ldr	r6, [pc, #332]	; (15164 <__aeabi_ddiv+0x1dc>)
   15016:	00a4      	lsls	r4, r4, #2
   15018:	5934      	ldr	r4, [r6, r4]
   1501a:	46a7      	mov	pc, r4
   1501c:	4640      	mov	r0, r8
   1501e:	4304      	orrs	r4, r0
   15020:	d16e      	bne.n	15100 <__aeabi_ddiv+0x178>
   15022:	2100      	movs	r1, #0
   15024:	2502      	movs	r5, #2
   15026:	2408      	movs	r4, #8
   15028:	4688      	mov	r8, r1
   1502a:	4689      	mov	r9, r1
   1502c:	9502      	str	r5, [sp, #8]
   1502e:	e7d2      	b.n	14fd6 <__aeabi_ddiv+0x4e>
   15030:	9c00      	ldr	r4, [sp, #0]
   15032:	9802      	ldr	r0, [sp, #8]
   15034:	46c3      	mov	fp, r8
   15036:	4649      	mov	r1, r9
   15038:	9401      	str	r4, [sp, #4]
   1503a:	2802      	cmp	r0, #2
   1503c:	d064      	beq.n	15108 <__aeabi_ddiv+0x180>
   1503e:	2803      	cmp	r0, #3
   15040:	d100      	bne.n	15044 <__aeabi_ddiv+0xbc>
   15042:	e2ab      	b.n	1559c <__aeabi_ddiv+0x614>
   15044:	2801      	cmp	r0, #1
   15046:	d000      	beq.n	1504a <__aeabi_ddiv+0xc2>
   15048:	e238      	b.n	154bc <__aeabi_ddiv+0x534>
   1504a:	9a01      	ldr	r2, [sp, #4]
   1504c:	2400      	movs	r4, #0
   1504e:	4002      	ands	r2, r0
   15050:	2500      	movs	r5, #0
   15052:	46a1      	mov	r9, r4
   15054:	e060      	b.n	15118 <__aeabi_ddiv+0x190>
   15056:	4643      	mov	r3, r8
   15058:	4323      	orrs	r3, r4
   1505a:	d04a      	beq.n	150f2 <__aeabi_ddiv+0x16a>
   1505c:	4640      	mov	r0, r8
   1505e:	2800      	cmp	r0, #0
   15060:	d100      	bne.n	15064 <__aeabi_ddiv+0xdc>
   15062:	e1c0      	b.n	153e6 <__aeabi_ddiv+0x45e>
   15064:	f001 fa64 	bl	16530 <__clzsi2>
   15068:	1e03      	subs	r3, r0, #0
   1506a:	2b27      	cmp	r3, #39	; 0x27
   1506c:	dd00      	ble.n	15070 <__aeabi_ddiv+0xe8>
   1506e:	e1b3      	b.n	153d8 <__aeabi_ddiv+0x450>
   15070:	2128      	movs	r1, #40	; 0x28
   15072:	1a0d      	subs	r5, r1, r0
   15074:	1c21      	adds	r1, r4, #0
   15076:	3b08      	subs	r3, #8
   15078:	4642      	mov	r2, r8
   1507a:	40e9      	lsrs	r1, r5
   1507c:	409a      	lsls	r2, r3
   1507e:	1c0d      	adds	r5, r1, #0
   15080:	4315      	orrs	r5, r2
   15082:	1c22      	adds	r2, r4, #0
   15084:	409a      	lsls	r2, r3
   15086:	46a8      	mov	r8, r5
   15088:	4691      	mov	r9, r2
   1508a:	4b37      	ldr	r3, [pc, #220]	; (15168 <__aeabi_ddiv+0x1e0>)
   1508c:	2500      	movs	r5, #0
   1508e:	1a1b      	subs	r3, r3, r0
   15090:	469a      	mov	sl, r3
   15092:	2400      	movs	r4, #0
   15094:	9502      	str	r5, [sp, #8]
   15096:	e79e      	b.n	14fd6 <__aeabi_ddiv+0x4e>
   15098:	465a      	mov	r2, fp
   1509a:	4316      	orrs	r6, r2
   1509c:	2003      	movs	r0, #3
   1509e:	2e00      	cmp	r6, #0
   150a0:	d1b1      	bne.n	15006 <__aeabi_ddiv+0x7e>
   150a2:	46b3      	mov	fp, r6
   150a4:	2100      	movs	r1, #0
   150a6:	2002      	movs	r0, #2
   150a8:	e7ad      	b.n	15006 <__aeabi_ddiv+0x7e>
   150aa:	465a      	mov	r2, fp
   150ac:	4332      	orrs	r2, r6
   150ae:	d01b      	beq.n	150e8 <__aeabi_ddiv+0x160>
   150b0:	465b      	mov	r3, fp
   150b2:	2b00      	cmp	r3, #0
   150b4:	d100      	bne.n	150b8 <__aeabi_ddiv+0x130>
   150b6:	e18a      	b.n	153ce <__aeabi_ddiv+0x446>
   150b8:	4658      	mov	r0, fp
   150ba:	f001 fa39 	bl	16530 <__clzsi2>
   150be:	2827      	cmp	r0, #39	; 0x27
   150c0:	dd00      	ble.n	150c4 <__aeabi_ddiv+0x13c>
   150c2:	e17d      	b.n	153c0 <__aeabi_ddiv+0x438>
   150c4:	2228      	movs	r2, #40	; 0x28
   150c6:	1a17      	subs	r7, r2, r0
   150c8:	1c01      	adds	r1, r0, #0
   150ca:	1c32      	adds	r2, r6, #0
   150cc:	3908      	subs	r1, #8
   150ce:	465b      	mov	r3, fp
   150d0:	40fa      	lsrs	r2, r7
   150d2:	408b      	lsls	r3, r1
   150d4:	1c17      	adds	r7, r2, #0
   150d6:	431f      	orrs	r7, r3
   150d8:	1c33      	adds	r3, r6, #0
   150da:	408b      	lsls	r3, r1
   150dc:	46bb      	mov	fp, r7
   150de:	1c19      	adds	r1, r3, #0
   150e0:	4b21      	ldr	r3, [pc, #132]	; (15168 <__aeabi_ddiv+0x1e0>)
   150e2:	1a1b      	subs	r3, r3, r0
   150e4:	2000      	movs	r0, #0
   150e6:	e78e      	b.n	15006 <__aeabi_ddiv+0x7e>
   150e8:	2700      	movs	r7, #0
   150ea:	46bb      	mov	fp, r7
   150ec:	2100      	movs	r1, #0
   150ee:	2001      	movs	r0, #1
   150f0:	e789      	b.n	15006 <__aeabi_ddiv+0x7e>
   150f2:	2000      	movs	r0, #0
   150f4:	2501      	movs	r5, #1
   150f6:	2404      	movs	r4, #4
   150f8:	4680      	mov	r8, r0
   150fa:	4681      	mov	r9, r0
   150fc:	9502      	str	r5, [sp, #8]
   150fe:	e76a      	b.n	14fd6 <__aeabi_ddiv+0x4e>
   15100:	2503      	movs	r5, #3
   15102:	240c      	movs	r4, #12
   15104:	9502      	str	r5, [sp, #8]
   15106:	e766      	b.n	14fd6 <__aeabi_ddiv+0x4e>
   15108:	9c01      	ldr	r4, [sp, #4]
   1510a:	9403      	str	r4, [sp, #12]
   1510c:	9d03      	ldr	r5, [sp, #12]
   1510e:	2201      	movs	r2, #1
   15110:	402a      	ands	r2, r5
   15112:	2400      	movs	r4, #0
   15114:	4d11      	ldr	r5, [pc, #68]	; (1515c <__aeabi_ddiv+0x1d4>)
   15116:	46a1      	mov	r9, r4
   15118:	2000      	movs	r0, #0
   1511a:	2100      	movs	r1, #0
   1511c:	0324      	lsls	r4, r4, #12
   1511e:	0b26      	lsrs	r6, r4, #12
   15120:	0d0c      	lsrs	r4, r1, #20
   15122:	0524      	lsls	r4, r4, #20
   15124:	4b11      	ldr	r3, [pc, #68]	; (1516c <__aeabi_ddiv+0x1e4>)
   15126:	4334      	orrs	r4, r6
   15128:	052d      	lsls	r5, r5, #20
   1512a:	4023      	ands	r3, r4
   1512c:	432b      	orrs	r3, r5
   1512e:	005b      	lsls	r3, r3, #1
   15130:	085b      	lsrs	r3, r3, #1
   15132:	07d2      	lsls	r2, r2, #31
   15134:	1c19      	adds	r1, r3, #0
   15136:	4648      	mov	r0, r9
   15138:	4311      	orrs	r1, r2
   1513a:	b007      	add	sp, #28
   1513c:	bc3c      	pop	{r2, r3, r4, r5}
   1513e:	4690      	mov	r8, r2
   15140:	4699      	mov	r9, r3
   15142:	46a2      	mov	sl, r4
   15144:	46ab      	mov	fp, r5
   15146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15148:	2200      	movs	r2, #0
   1514a:	2480      	movs	r4, #128	; 0x80
   1514c:	0324      	lsls	r4, r4, #12
   1514e:	4691      	mov	r9, r2
   15150:	4d02      	ldr	r5, [pc, #8]	; (1515c <__aeabi_ddiv+0x1d4>)
   15152:	e7e1      	b.n	15118 <__aeabi_ddiv+0x190>
   15154:	2400      	movs	r4, #0
   15156:	2500      	movs	r5, #0
   15158:	46a1      	mov	r9, r4
   1515a:	e7dd      	b.n	15118 <__aeabi_ddiv+0x190>
   1515c:	000007ff 	.word	0x000007ff
   15160:	fffffc01 	.word	0xfffffc01
   15164:	000174a8 	.word	0x000174a8
   15168:	fffffc0d 	.word	0xfffffc0d
   1516c:	800fffff 	.word	0x800fffff
   15170:	4655      	mov	r5, sl
   15172:	1aed      	subs	r5, r5, r3
   15174:	9504      	str	r5, [sp, #16]
   15176:	45d8      	cmp	r8, fp
   15178:	d900      	bls.n	1517c <__aeabi_ddiv+0x1f4>
   1517a:	e153      	b.n	15424 <__aeabi_ddiv+0x49c>
   1517c:	d100      	bne.n	15180 <__aeabi_ddiv+0x1f8>
   1517e:	e14e      	b.n	1541e <__aeabi_ddiv+0x496>
   15180:	9c04      	ldr	r4, [sp, #16]
   15182:	2500      	movs	r5, #0
   15184:	3c01      	subs	r4, #1
   15186:	464e      	mov	r6, r9
   15188:	9404      	str	r4, [sp, #16]
   1518a:	4647      	mov	r7, r8
   1518c:	46a9      	mov	r9, r5
   1518e:	4658      	mov	r0, fp
   15190:	0203      	lsls	r3, r0, #8
   15192:	0e0c      	lsrs	r4, r1, #24
   15194:	431c      	orrs	r4, r3
   15196:	0209      	lsls	r1, r1, #8
   15198:	0c25      	lsrs	r5, r4, #16
   1519a:	0423      	lsls	r3, r4, #16
   1519c:	0c1b      	lsrs	r3, r3, #16
   1519e:	9100      	str	r1, [sp, #0]
   151a0:	1c38      	adds	r0, r7, #0
   151a2:	1c29      	adds	r1, r5, #0
   151a4:	9301      	str	r3, [sp, #4]
   151a6:	f7ff fa47 	bl	14638 <__aeabi_uidiv>
   151aa:	9901      	ldr	r1, [sp, #4]
   151ac:	4683      	mov	fp, r0
   151ae:	4341      	muls	r1, r0
   151b0:	1c38      	adds	r0, r7, #0
   151b2:	468a      	mov	sl, r1
   151b4:	1c29      	adds	r1, r5, #0
   151b6:	f7ff fa83 	bl	146c0 <__aeabi_uidivmod>
   151ba:	0c33      	lsrs	r3, r6, #16
   151bc:	0409      	lsls	r1, r1, #16
   151be:	4319      	orrs	r1, r3
   151c0:	458a      	cmp	sl, r1
   151c2:	d90c      	bls.n	151de <__aeabi_ddiv+0x256>
   151c4:	465b      	mov	r3, fp
   151c6:	1909      	adds	r1, r1, r4
   151c8:	3b01      	subs	r3, #1
   151ca:	428c      	cmp	r4, r1
   151cc:	d900      	bls.n	151d0 <__aeabi_ddiv+0x248>
   151ce:	e147      	b.n	15460 <__aeabi_ddiv+0x4d8>
   151d0:	458a      	cmp	sl, r1
   151d2:	d800      	bhi.n	151d6 <__aeabi_ddiv+0x24e>
   151d4:	e144      	b.n	15460 <__aeabi_ddiv+0x4d8>
   151d6:	2202      	movs	r2, #2
   151d8:	4252      	negs	r2, r2
   151da:	4493      	add	fp, r2
   151dc:	1909      	adds	r1, r1, r4
   151de:	4653      	mov	r3, sl
   151e0:	1acb      	subs	r3, r1, r3
   151e2:	1c18      	adds	r0, r3, #0
   151e4:	1c29      	adds	r1, r5, #0
   151e6:	4698      	mov	r8, r3
   151e8:	f7ff fa26 	bl	14638 <__aeabi_uidiv>
   151ec:	1c07      	adds	r7, r0, #0
   151ee:	9801      	ldr	r0, [sp, #4]
   151f0:	1c29      	adds	r1, r5, #0
   151f2:	4378      	muls	r0, r7
   151f4:	4682      	mov	sl, r0
   151f6:	4640      	mov	r0, r8
   151f8:	f7ff fa62 	bl	146c0 <__aeabi_uidivmod>
   151fc:	0436      	lsls	r6, r6, #16
   151fe:	040b      	lsls	r3, r1, #16
   15200:	0c36      	lsrs	r6, r6, #16
   15202:	4333      	orrs	r3, r6
   15204:	459a      	cmp	sl, r3
   15206:	d909      	bls.n	1521c <__aeabi_ddiv+0x294>
   15208:	191b      	adds	r3, r3, r4
   1520a:	1e7a      	subs	r2, r7, #1
   1520c:	429c      	cmp	r4, r3
   1520e:	d900      	bls.n	15212 <__aeabi_ddiv+0x28a>
   15210:	e124      	b.n	1545c <__aeabi_ddiv+0x4d4>
   15212:	459a      	cmp	sl, r3
   15214:	d800      	bhi.n	15218 <__aeabi_ddiv+0x290>
   15216:	e121      	b.n	1545c <__aeabi_ddiv+0x4d4>
   15218:	3f02      	subs	r7, #2
   1521a:	191b      	adds	r3, r3, r4
   1521c:	465e      	mov	r6, fp
   1521e:	0432      	lsls	r2, r6, #16
   15220:	4317      	orrs	r7, r2
   15222:	0c38      	lsrs	r0, r7, #16
   15224:	46bb      	mov	fp, r7
   15226:	9e00      	ldr	r6, [sp, #0]
   15228:	9f00      	ldr	r7, [sp, #0]
   1522a:	4651      	mov	r1, sl
   1522c:	0c3f      	lsrs	r7, r7, #16
   1522e:	0432      	lsls	r2, r6, #16
   15230:	1a5b      	subs	r3, r3, r1
   15232:	4659      	mov	r1, fp
   15234:	46ba      	mov	sl, r7
   15236:	0c12      	lsrs	r2, r2, #16
   15238:	040f      	lsls	r7, r1, #16
   1523a:	0c3f      	lsrs	r7, r7, #16
   1523c:	4690      	mov	r8, r2
   1523e:	4651      	mov	r1, sl
   15240:	437a      	muls	r2, r7
   15242:	434f      	muls	r7, r1
   15244:	4641      	mov	r1, r8
   15246:	4341      	muls	r1, r0
   15248:	4656      	mov	r6, sl
   1524a:	4370      	muls	r0, r6
   1524c:	19cf      	adds	r7, r1, r7
   1524e:	0c16      	lsrs	r6, r2, #16
   15250:	19be      	adds	r6, r7, r6
   15252:	42b1      	cmp	r1, r6
   15254:	d902      	bls.n	1525c <__aeabi_ddiv+0x2d4>
   15256:	2780      	movs	r7, #128	; 0x80
   15258:	027f      	lsls	r7, r7, #9
   1525a:	19c0      	adds	r0, r0, r7
   1525c:	0c31      	lsrs	r1, r6, #16
   1525e:	0412      	lsls	r2, r2, #16
   15260:	0436      	lsls	r6, r6, #16
   15262:	0c12      	lsrs	r2, r2, #16
   15264:	1840      	adds	r0, r0, r1
   15266:	18b6      	adds	r6, r6, r2
   15268:	4283      	cmp	r3, r0
   1526a:	d200      	bcs.n	1526e <__aeabi_ddiv+0x2e6>
   1526c:	e0c4      	b.n	153f8 <__aeabi_ddiv+0x470>
   1526e:	d100      	bne.n	15272 <__aeabi_ddiv+0x2ea>
   15270:	e0be      	b.n	153f0 <__aeabi_ddiv+0x468>
   15272:	1a19      	subs	r1, r3, r0
   15274:	4648      	mov	r0, r9
   15276:	1b86      	subs	r6, r0, r6
   15278:	45b1      	cmp	r9, r6
   1527a:	41bf      	sbcs	r7, r7
   1527c:	427f      	negs	r7, r7
   1527e:	1bcf      	subs	r7, r1, r7
   15280:	42a7      	cmp	r7, r4
   15282:	d100      	bne.n	15286 <__aeabi_ddiv+0x2fe>
   15284:	e113      	b.n	154ae <__aeabi_ddiv+0x526>
   15286:	1c29      	adds	r1, r5, #0
   15288:	1c38      	adds	r0, r7, #0
   1528a:	f7ff f9d5 	bl	14638 <__aeabi_uidiv>
   1528e:	9901      	ldr	r1, [sp, #4]
   15290:	9002      	str	r0, [sp, #8]
   15292:	4341      	muls	r1, r0
   15294:	1c38      	adds	r0, r7, #0
   15296:	4689      	mov	r9, r1
   15298:	1c29      	adds	r1, r5, #0
   1529a:	f7ff fa11 	bl	146c0 <__aeabi_uidivmod>
   1529e:	0c33      	lsrs	r3, r6, #16
   152a0:	0409      	lsls	r1, r1, #16
   152a2:	4319      	orrs	r1, r3
   152a4:	4589      	cmp	r9, r1
   152a6:	d90c      	bls.n	152c2 <__aeabi_ddiv+0x33a>
   152a8:	9b02      	ldr	r3, [sp, #8]
   152aa:	1909      	adds	r1, r1, r4
   152ac:	3b01      	subs	r3, #1
   152ae:	428c      	cmp	r4, r1
   152b0:	d900      	bls.n	152b4 <__aeabi_ddiv+0x32c>
   152b2:	e0ff      	b.n	154b4 <__aeabi_ddiv+0x52c>
   152b4:	4589      	cmp	r9, r1
   152b6:	d800      	bhi.n	152ba <__aeabi_ddiv+0x332>
   152b8:	e0fc      	b.n	154b4 <__aeabi_ddiv+0x52c>
   152ba:	9f02      	ldr	r7, [sp, #8]
   152bc:	1909      	adds	r1, r1, r4
   152be:	3f02      	subs	r7, #2
   152c0:	9702      	str	r7, [sp, #8]
   152c2:	464f      	mov	r7, r9
   152c4:	1bcf      	subs	r7, r1, r7
   152c6:	1c38      	adds	r0, r7, #0
   152c8:	1c29      	adds	r1, r5, #0
   152ca:	9705      	str	r7, [sp, #20]
   152cc:	f7ff f9b4 	bl	14638 <__aeabi_uidiv>
   152d0:	1c07      	adds	r7, r0, #0
   152d2:	9801      	ldr	r0, [sp, #4]
   152d4:	1c29      	adds	r1, r5, #0
   152d6:	4378      	muls	r0, r7
   152d8:	4681      	mov	r9, r0
   152da:	9805      	ldr	r0, [sp, #20]
   152dc:	f7ff f9f0 	bl	146c0 <__aeabi_uidivmod>
   152e0:	0436      	lsls	r6, r6, #16
   152e2:	0409      	lsls	r1, r1, #16
   152e4:	0c36      	lsrs	r6, r6, #16
   152e6:	430e      	orrs	r6, r1
   152e8:	45b1      	cmp	r9, r6
   152ea:	d909      	bls.n	15300 <__aeabi_ddiv+0x378>
   152ec:	1936      	adds	r6, r6, r4
   152ee:	1e7b      	subs	r3, r7, #1
   152f0:	42b4      	cmp	r4, r6
   152f2:	d900      	bls.n	152f6 <__aeabi_ddiv+0x36e>
   152f4:	e0e0      	b.n	154b8 <__aeabi_ddiv+0x530>
   152f6:	45b1      	cmp	r9, r6
   152f8:	d800      	bhi.n	152fc <__aeabi_ddiv+0x374>
   152fa:	e0dd      	b.n	154b8 <__aeabi_ddiv+0x530>
   152fc:	3f02      	subs	r7, #2
   152fe:	1936      	adds	r6, r6, r4
   15300:	9d02      	ldr	r5, [sp, #8]
   15302:	4649      	mov	r1, r9
   15304:	1a76      	subs	r6, r6, r1
   15306:	0429      	lsls	r1, r5, #16
   15308:	4339      	orrs	r1, r7
   1530a:	040b      	lsls	r3, r1, #16
   1530c:	4657      	mov	r7, sl
   1530e:	0c0a      	lsrs	r2, r1, #16
   15310:	0c1b      	lsrs	r3, r3, #16
   15312:	4640      	mov	r0, r8
   15314:	4645      	mov	r5, r8
   15316:	4358      	muls	r0, r3
   15318:	4355      	muls	r5, r2
   1531a:	437b      	muls	r3, r7
   1531c:	437a      	muls	r2, r7
   1531e:	18eb      	adds	r3, r5, r3
   15320:	0c07      	lsrs	r7, r0, #16
   15322:	19db      	adds	r3, r3, r7
   15324:	429d      	cmp	r5, r3
   15326:	d902      	bls.n	1532e <__aeabi_ddiv+0x3a6>
   15328:	2580      	movs	r5, #128	; 0x80
   1532a:	026d      	lsls	r5, r5, #9
   1532c:	1952      	adds	r2, r2, r5
   1532e:	0c1d      	lsrs	r5, r3, #16
   15330:	0400      	lsls	r0, r0, #16
   15332:	041b      	lsls	r3, r3, #16
   15334:	0c00      	lsrs	r0, r0, #16
   15336:	1952      	adds	r2, r2, r5
   15338:	181b      	adds	r3, r3, r0
   1533a:	4296      	cmp	r6, r2
   1533c:	d335      	bcc.n	153aa <__aeabi_ddiv+0x422>
   1533e:	d100      	bne.n	15342 <__aeabi_ddiv+0x3ba>
   15340:	e0fc      	b.n	1553c <__aeabi_ddiv+0x5b4>
   15342:	2301      	movs	r3, #1
   15344:	4319      	orrs	r1, r3
   15346:	9e04      	ldr	r6, [sp, #16]
   15348:	4f99      	ldr	r7, [pc, #612]	; (155b0 <__aeabi_ddiv+0x628>)
   1534a:	19f5      	adds	r5, r6, r7
   1534c:	2d00      	cmp	r5, #0
   1534e:	dc00      	bgt.n	15352 <__aeabi_ddiv+0x3ca>
   15350:	e0a1      	b.n	15496 <__aeabi_ddiv+0x50e>
   15352:	0748      	lsls	r0, r1, #29
   15354:	d009      	beq.n	1536a <__aeabi_ddiv+0x3e2>
   15356:	230f      	movs	r3, #15
   15358:	400b      	ands	r3, r1
   1535a:	2b04      	cmp	r3, #4
   1535c:	d005      	beq.n	1536a <__aeabi_ddiv+0x3e2>
   1535e:	1d0b      	adds	r3, r1, #4
   15360:	428b      	cmp	r3, r1
   15362:	4189      	sbcs	r1, r1
   15364:	4249      	negs	r1, r1
   15366:	448b      	add	fp, r1
   15368:	1c19      	adds	r1, r3, #0
   1536a:	465a      	mov	r2, fp
   1536c:	01d2      	lsls	r2, r2, #7
   1536e:	d507      	bpl.n	15380 <__aeabi_ddiv+0x3f8>
   15370:	4b90      	ldr	r3, [pc, #576]	; (155b4 <__aeabi_ddiv+0x62c>)
   15372:	465c      	mov	r4, fp
   15374:	9e04      	ldr	r6, [sp, #16]
   15376:	2780      	movs	r7, #128	; 0x80
   15378:	401c      	ands	r4, r3
   1537a:	00ff      	lsls	r7, r7, #3
   1537c:	46a3      	mov	fp, r4
   1537e:	19f5      	adds	r5, r6, r7
   15380:	4b8d      	ldr	r3, [pc, #564]	; (155b8 <__aeabi_ddiv+0x630>)
   15382:	429d      	cmp	r5, r3
   15384:	dd7a      	ble.n	1547c <__aeabi_ddiv+0x4f4>
   15386:	9c03      	ldr	r4, [sp, #12]
   15388:	2201      	movs	r2, #1
   1538a:	4022      	ands	r2, r4
   1538c:	2400      	movs	r4, #0
   1538e:	4d8b      	ldr	r5, [pc, #556]	; (155bc <__aeabi_ddiv+0x634>)
   15390:	46a1      	mov	r9, r4
   15392:	e6c1      	b.n	15118 <__aeabi_ddiv+0x190>
   15394:	2480      	movs	r4, #128	; 0x80
   15396:	0324      	lsls	r4, r4, #12
   15398:	4647      	mov	r7, r8
   1539a:	4227      	tst	r7, r4
   1539c:	d14c      	bne.n	15438 <__aeabi_ddiv+0x4b0>
   1539e:	433c      	orrs	r4, r7
   153a0:	0324      	lsls	r4, r4, #12
   153a2:	0b24      	lsrs	r4, r4, #12
   153a4:	9a00      	ldr	r2, [sp, #0]
   153a6:	4d85      	ldr	r5, [pc, #532]	; (155bc <__aeabi_ddiv+0x634>)
   153a8:	e6b6      	b.n	15118 <__aeabi_ddiv+0x190>
   153aa:	1936      	adds	r6, r6, r4
   153ac:	1e48      	subs	r0, r1, #1
   153ae:	42b4      	cmp	r4, r6
   153b0:	d95e      	bls.n	15470 <__aeabi_ddiv+0x4e8>
   153b2:	1c01      	adds	r1, r0, #0
   153b4:	4296      	cmp	r6, r2
   153b6:	d1c4      	bne.n	15342 <__aeabi_ddiv+0x3ba>
   153b8:	9e00      	ldr	r6, [sp, #0]
   153ba:	429e      	cmp	r6, r3
   153bc:	d1c1      	bne.n	15342 <__aeabi_ddiv+0x3ba>
   153be:	e7c2      	b.n	15346 <__aeabi_ddiv+0x3be>
   153c0:	1c03      	adds	r3, r0, #0
   153c2:	3b28      	subs	r3, #40	; 0x28
   153c4:	1c31      	adds	r1, r6, #0
   153c6:	4099      	lsls	r1, r3
   153c8:	468b      	mov	fp, r1
   153ca:	2100      	movs	r1, #0
   153cc:	e688      	b.n	150e0 <__aeabi_ddiv+0x158>
   153ce:	1c30      	adds	r0, r6, #0
   153d0:	f001 f8ae 	bl	16530 <__clzsi2>
   153d4:	3020      	adds	r0, #32
   153d6:	e672      	b.n	150be <__aeabi_ddiv+0x136>
   153d8:	3b28      	subs	r3, #40	; 0x28
   153da:	1c21      	adds	r1, r4, #0
   153dc:	4099      	lsls	r1, r3
   153de:	2200      	movs	r2, #0
   153e0:	4688      	mov	r8, r1
   153e2:	4691      	mov	r9, r2
   153e4:	e651      	b.n	1508a <__aeabi_ddiv+0x102>
   153e6:	1c20      	adds	r0, r4, #0
   153e8:	f001 f8a2 	bl	16530 <__clzsi2>
   153ec:	3020      	adds	r0, #32
   153ee:	e63b      	b.n	15068 <__aeabi_ddiv+0xe0>
   153f0:	2100      	movs	r1, #0
   153f2:	45b1      	cmp	r9, r6
   153f4:	d300      	bcc.n	153f8 <__aeabi_ddiv+0x470>
   153f6:	e73d      	b.n	15274 <__aeabi_ddiv+0x2ec>
   153f8:	9f00      	ldr	r7, [sp, #0]
   153fa:	465a      	mov	r2, fp
   153fc:	44b9      	add	r9, r7
   153fe:	45b9      	cmp	r9, r7
   15400:	41bf      	sbcs	r7, r7
   15402:	427f      	negs	r7, r7
   15404:	193f      	adds	r7, r7, r4
   15406:	18fb      	adds	r3, r7, r3
   15408:	3a01      	subs	r2, #1
   1540a:	429c      	cmp	r4, r3
   1540c:	d21e      	bcs.n	1544c <__aeabi_ddiv+0x4c4>
   1540e:	4298      	cmp	r0, r3
   15410:	d900      	bls.n	15414 <__aeabi_ddiv+0x48c>
   15412:	e07e      	b.n	15512 <__aeabi_ddiv+0x58a>
   15414:	d100      	bne.n	15418 <__aeabi_ddiv+0x490>
   15416:	e0b5      	b.n	15584 <__aeabi_ddiv+0x5fc>
   15418:	1a19      	subs	r1, r3, r0
   1541a:	4693      	mov	fp, r2
   1541c:	e72a      	b.n	15274 <__aeabi_ddiv+0x2ec>
   1541e:	4589      	cmp	r9, r1
   15420:	d800      	bhi.n	15424 <__aeabi_ddiv+0x49c>
   15422:	e6ad      	b.n	15180 <__aeabi_ddiv+0x1f8>
   15424:	4648      	mov	r0, r9
   15426:	4646      	mov	r6, r8
   15428:	4642      	mov	r2, r8
   1542a:	0877      	lsrs	r7, r6, #1
   1542c:	07d3      	lsls	r3, r2, #31
   1542e:	0846      	lsrs	r6, r0, #1
   15430:	07c0      	lsls	r0, r0, #31
   15432:	431e      	orrs	r6, r3
   15434:	4681      	mov	r9, r0
   15436:	e6aa      	b.n	1518e <__aeabi_ddiv+0x206>
   15438:	4658      	mov	r0, fp
   1543a:	4220      	tst	r0, r4
   1543c:	d112      	bne.n	15464 <__aeabi_ddiv+0x4dc>
   1543e:	4304      	orrs	r4, r0
   15440:	0324      	lsls	r4, r4, #12
   15442:	1c2a      	adds	r2, r5, #0
   15444:	0b24      	lsrs	r4, r4, #12
   15446:	4689      	mov	r9, r1
   15448:	4d5c      	ldr	r5, [pc, #368]	; (155bc <__aeabi_ddiv+0x634>)
   1544a:	e665      	b.n	15118 <__aeabi_ddiv+0x190>
   1544c:	42a3      	cmp	r3, r4
   1544e:	d1e3      	bne.n	15418 <__aeabi_ddiv+0x490>
   15450:	9f00      	ldr	r7, [sp, #0]
   15452:	454f      	cmp	r7, r9
   15454:	d9db      	bls.n	1540e <__aeabi_ddiv+0x486>
   15456:	1a21      	subs	r1, r4, r0
   15458:	4693      	mov	fp, r2
   1545a:	e70b      	b.n	15274 <__aeabi_ddiv+0x2ec>
   1545c:	1c17      	adds	r7, r2, #0
   1545e:	e6dd      	b.n	1521c <__aeabi_ddiv+0x294>
   15460:	469b      	mov	fp, r3
   15462:	e6bc      	b.n	151de <__aeabi_ddiv+0x256>
   15464:	433c      	orrs	r4, r7
   15466:	0324      	lsls	r4, r4, #12
   15468:	0b24      	lsrs	r4, r4, #12
   1546a:	9a00      	ldr	r2, [sp, #0]
   1546c:	4d53      	ldr	r5, [pc, #332]	; (155bc <__aeabi_ddiv+0x634>)
   1546e:	e653      	b.n	15118 <__aeabi_ddiv+0x190>
   15470:	42b2      	cmp	r2, r6
   15472:	d859      	bhi.n	15528 <__aeabi_ddiv+0x5a0>
   15474:	d100      	bne.n	15478 <__aeabi_ddiv+0x4f0>
   15476:	e08a      	b.n	1558e <__aeabi_ddiv+0x606>
   15478:	1c01      	adds	r1, r0, #0
   1547a:	e762      	b.n	15342 <__aeabi_ddiv+0x3ba>
   1547c:	465f      	mov	r7, fp
   1547e:	08c9      	lsrs	r1, r1, #3
   15480:	077b      	lsls	r3, r7, #29
   15482:	9e03      	ldr	r6, [sp, #12]
   15484:	430b      	orrs	r3, r1
   15486:	027c      	lsls	r4, r7, #9
   15488:	056d      	lsls	r5, r5, #21
   1548a:	2201      	movs	r2, #1
   1548c:	4699      	mov	r9, r3
   1548e:	0b24      	lsrs	r4, r4, #12
   15490:	0d6d      	lsrs	r5, r5, #21
   15492:	4032      	ands	r2, r6
   15494:	e640      	b.n	15118 <__aeabi_ddiv+0x190>
   15496:	4b4a      	ldr	r3, [pc, #296]	; (155c0 <__aeabi_ddiv+0x638>)
   15498:	9f04      	ldr	r7, [sp, #16]
   1549a:	1bdb      	subs	r3, r3, r7
   1549c:	2b38      	cmp	r3, #56	; 0x38
   1549e:	dd10      	ble.n	154c2 <__aeabi_ddiv+0x53a>
   154a0:	9c03      	ldr	r4, [sp, #12]
   154a2:	2201      	movs	r2, #1
   154a4:	4022      	ands	r2, r4
   154a6:	2400      	movs	r4, #0
   154a8:	2500      	movs	r5, #0
   154aa:	46a1      	mov	r9, r4
   154ac:	e634      	b.n	15118 <__aeabi_ddiv+0x190>
   154ae:	2101      	movs	r1, #1
   154b0:	4249      	negs	r1, r1
   154b2:	e748      	b.n	15346 <__aeabi_ddiv+0x3be>
   154b4:	9302      	str	r3, [sp, #8]
   154b6:	e704      	b.n	152c2 <__aeabi_ddiv+0x33a>
   154b8:	1c1f      	adds	r7, r3, #0
   154ba:	e721      	b.n	15300 <__aeabi_ddiv+0x378>
   154bc:	9c01      	ldr	r4, [sp, #4]
   154be:	9403      	str	r4, [sp, #12]
   154c0:	e741      	b.n	15346 <__aeabi_ddiv+0x3be>
   154c2:	2b1f      	cmp	r3, #31
   154c4:	dc40      	bgt.n	15548 <__aeabi_ddiv+0x5c0>
   154c6:	483f      	ldr	r0, [pc, #252]	; (155c4 <__aeabi_ddiv+0x63c>)
   154c8:	9f04      	ldr	r7, [sp, #16]
   154ca:	1c0c      	adds	r4, r1, #0
   154cc:	183a      	adds	r2, r7, r0
   154ce:	4658      	mov	r0, fp
   154d0:	4091      	lsls	r1, r2
   154d2:	40dc      	lsrs	r4, r3
   154d4:	4090      	lsls	r0, r2
   154d6:	4320      	orrs	r0, r4
   154d8:	1c0a      	adds	r2, r1, #0
   154da:	1e51      	subs	r1, r2, #1
   154dc:	418a      	sbcs	r2, r1
   154de:	1c01      	adds	r1, r0, #0
   154e0:	4311      	orrs	r1, r2
   154e2:	465a      	mov	r2, fp
   154e4:	40da      	lsrs	r2, r3
   154e6:	1c13      	adds	r3, r2, #0
   154e8:	0748      	lsls	r0, r1, #29
   154ea:	d009      	beq.n	15500 <__aeabi_ddiv+0x578>
   154ec:	220f      	movs	r2, #15
   154ee:	400a      	ands	r2, r1
   154f0:	2a04      	cmp	r2, #4
   154f2:	d005      	beq.n	15500 <__aeabi_ddiv+0x578>
   154f4:	1d0a      	adds	r2, r1, #4
   154f6:	428a      	cmp	r2, r1
   154f8:	4189      	sbcs	r1, r1
   154fa:	4249      	negs	r1, r1
   154fc:	185b      	adds	r3, r3, r1
   154fe:	1c11      	adds	r1, r2, #0
   15500:	021a      	lsls	r2, r3, #8
   15502:	d534      	bpl.n	1556e <__aeabi_ddiv+0x5e6>
   15504:	9c03      	ldr	r4, [sp, #12]
   15506:	2201      	movs	r2, #1
   15508:	4022      	ands	r2, r4
   1550a:	2400      	movs	r4, #0
   1550c:	2501      	movs	r5, #1
   1550e:	46a1      	mov	r9, r4
   15510:	e602      	b.n	15118 <__aeabi_ddiv+0x190>
   15512:	9f00      	ldr	r7, [sp, #0]
   15514:	2102      	movs	r1, #2
   15516:	4249      	negs	r1, r1
   15518:	44b9      	add	r9, r7
   1551a:	448b      	add	fp, r1
   1551c:	45b9      	cmp	r9, r7
   1551e:	4189      	sbcs	r1, r1
   15520:	4249      	negs	r1, r1
   15522:	1909      	adds	r1, r1, r4
   15524:	18cb      	adds	r3, r1, r3
   15526:	e6a4      	b.n	15272 <__aeabi_ddiv+0x2ea>
   15528:	9d00      	ldr	r5, [sp, #0]
   1552a:	1e88      	subs	r0, r1, #2
   1552c:	0069      	lsls	r1, r5, #1
   1552e:	42a9      	cmp	r1, r5
   15530:	41ad      	sbcs	r5, r5
   15532:	426d      	negs	r5, r5
   15534:	192c      	adds	r4, r5, r4
   15536:	1936      	adds	r6, r6, r4
   15538:	9100      	str	r1, [sp, #0]
   1553a:	e73a      	b.n	153b2 <__aeabi_ddiv+0x42a>
   1553c:	2b00      	cmp	r3, #0
   1553e:	d000      	beq.n	15542 <__aeabi_ddiv+0x5ba>
   15540:	e733      	b.n	153aa <__aeabi_ddiv+0x422>
   15542:	2400      	movs	r4, #0
   15544:	9400      	str	r4, [sp, #0]
   15546:	e737      	b.n	153b8 <__aeabi_ddiv+0x430>
   15548:	4a1f      	ldr	r2, [pc, #124]	; (155c8 <__aeabi_ddiv+0x640>)
   1554a:	9c04      	ldr	r4, [sp, #16]
   1554c:	465d      	mov	r5, fp
   1554e:	1b12      	subs	r2, r2, r4
   15550:	40d5      	lsrs	r5, r2
   15552:	1c2a      	adds	r2, r5, #0
   15554:	2b20      	cmp	r3, #32
   15556:	d01f      	beq.n	15598 <__aeabi_ddiv+0x610>
   15558:	4e1c      	ldr	r6, [pc, #112]	; (155cc <__aeabi_ddiv+0x644>)
   1555a:	465f      	mov	r7, fp
   1555c:	19a3      	adds	r3, r4, r6
   1555e:	409f      	lsls	r7, r3
   15560:	1c3b      	adds	r3, r7, #0
   15562:	4319      	orrs	r1, r3
   15564:	1e4b      	subs	r3, r1, #1
   15566:	4199      	sbcs	r1, r3
   15568:	4311      	orrs	r1, r2
   1556a:	2300      	movs	r3, #0
   1556c:	e7bc      	b.n	154e8 <__aeabi_ddiv+0x560>
   1556e:	075a      	lsls	r2, r3, #29
   15570:	08c9      	lsrs	r1, r1, #3
   15572:	430a      	orrs	r2, r1
   15574:	9f03      	ldr	r7, [sp, #12]
   15576:	4691      	mov	r9, r2
   15578:	025b      	lsls	r3, r3, #9
   1557a:	2201      	movs	r2, #1
   1557c:	0b1c      	lsrs	r4, r3, #12
   1557e:	403a      	ands	r2, r7
   15580:	2500      	movs	r5, #0
   15582:	e5c9      	b.n	15118 <__aeabi_ddiv+0x190>
   15584:	454e      	cmp	r6, r9
   15586:	d8c4      	bhi.n	15512 <__aeabi_ddiv+0x58a>
   15588:	4693      	mov	fp, r2
   1558a:	2100      	movs	r1, #0
   1558c:	e672      	b.n	15274 <__aeabi_ddiv+0x2ec>
   1558e:	9f00      	ldr	r7, [sp, #0]
   15590:	429f      	cmp	r7, r3
   15592:	d3c9      	bcc.n	15528 <__aeabi_ddiv+0x5a0>
   15594:	1c01      	adds	r1, r0, #0
   15596:	e70f      	b.n	153b8 <__aeabi_ddiv+0x430>
   15598:	2300      	movs	r3, #0
   1559a:	e7e2      	b.n	15562 <__aeabi_ddiv+0x5da>
   1559c:	2480      	movs	r4, #128	; 0x80
   1559e:	0324      	lsls	r4, r4, #12
   155a0:	465f      	mov	r7, fp
   155a2:	433c      	orrs	r4, r7
   155a4:	0324      	lsls	r4, r4, #12
   155a6:	0b24      	lsrs	r4, r4, #12
   155a8:	9a01      	ldr	r2, [sp, #4]
   155aa:	4689      	mov	r9, r1
   155ac:	4d03      	ldr	r5, [pc, #12]	; (155bc <__aeabi_ddiv+0x634>)
   155ae:	e5b3      	b.n	15118 <__aeabi_ddiv+0x190>
   155b0:	000003ff 	.word	0x000003ff
   155b4:	feffffff 	.word	0xfeffffff
   155b8:	000007fe 	.word	0x000007fe
   155bc:	000007ff 	.word	0x000007ff
   155c0:	fffffc02 	.word	0xfffffc02
   155c4:	0000041e 	.word	0x0000041e
   155c8:	fffffbe2 	.word	0xfffffbe2
   155cc:	0000043e 	.word	0x0000043e

000155d0 <__eqdf2>:
   155d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155d2:	465f      	mov	r7, fp
   155d4:	4656      	mov	r6, sl
   155d6:	464d      	mov	r5, r9
   155d8:	4644      	mov	r4, r8
   155da:	b4f0      	push	{r4, r5, r6, r7}
   155dc:	1c0d      	adds	r5, r1, #0
   155de:	1c04      	adds	r4, r0, #0
   155e0:	4680      	mov	r8, r0
   155e2:	0fe8      	lsrs	r0, r5, #31
   155e4:	4681      	mov	r9, r0
   155e6:	0318      	lsls	r0, r3, #12
   155e8:	030f      	lsls	r7, r1, #12
   155ea:	0b00      	lsrs	r0, r0, #12
   155ec:	0b3f      	lsrs	r7, r7, #12
   155ee:	b083      	sub	sp, #12
   155f0:	4684      	mov	ip, r0
   155f2:	481b      	ldr	r0, [pc, #108]	; (15660 <__eqdf2+0x90>)
   155f4:	9700      	str	r7, [sp, #0]
   155f6:	0049      	lsls	r1, r1, #1
   155f8:	005e      	lsls	r6, r3, #1
   155fa:	0fdf      	lsrs	r7, r3, #31
   155fc:	0d49      	lsrs	r1, r1, #21
   155fe:	4692      	mov	sl, r2
   15600:	0d76      	lsrs	r6, r6, #21
   15602:	46bb      	mov	fp, r7
   15604:	4281      	cmp	r1, r0
   15606:	d00c      	beq.n	15622 <__eqdf2+0x52>
   15608:	4815      	ldr	r0, [pc, #84]	; (15660 <__eqdf2+0x90>)
   1560a:	4286      	cmp	r6, r0
   1560c:	d010      	beq.n	15630 <__eqdf2+0x60>
   1560e:	2001      	movs	r0, #1
   15610:	42b1      	cmp	r1, r6
   15612:	d015      	beq.n	15640 <__eqdf2+0x70>
   15614:	b003      	add	sp, #12
   15616:	bc3c      	pop	{r2, r3, r4, r5}
   15618:	4690      	mov	r8, r2
   1561a:	4699      	mov	r9, r3
   1561c:	46a2      	mov	sl, r4
   1561e:	46ab      	mov	fp, r5
   15620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15622:	9f00      	ldr	r7, [sp, #0]
   15624:	2001      	movs	r0, #1
   15626:	4327      	orrs	r7, r4
   15628:	d1f4      	bne.n	15614 <__eqdf2+0x44>
   1562a:	480d      	ldr	r0, [pc, #52]	; (15660 <__eqdf2+0x90>)
   1562c:	4286      	cmp	r6, r0
   1562e:	d1ee      	bne.n	1560e <__eqdf2+0x3e>
   15630:	4660      	mov	r0, ip
   15632:	4302      	orrs	r2, r0
   15634:	2001      	movs	r0, #1
   15636:	2a00      	cmp	r2, #0
   15638:	d1ec      	bne.n	15614 <__eqdf2+0x44>
   1563a:	2001      	movs	r0, #1
   1563c:	42b1      	cmp	r1, r6
   1563e:	d1e9      	bne.n	15614 <__eqdf2+0x44>
   15640:	9b00      	ldr	r3, [sp, #0]
   15642:	4563      	cmp	r3, ip
   15644:	d1e6      	bne.n	15614 <__eqdf2+0x44>
   15646:	45d0      	cmp	r8, sl
   15648:	d1e4      	bne.n	15614 <__eqdf2+0x44>
   1564a:	45d9      	cmp	r9, fp
   1564c:	d006      	beq.n	1565c <__eqdf2+0x8c>
   1564e:	2900      	cmp	r1, #0
   15650:	d1e0      	bne.n	15614 <__eqdf2+0x44>
   15652:	431c      	orrs	r4, r3
   15654:	1c20      	adds	r0, r4, #0
   15656:	1e44      	subs	r4, r0, #1
   15658:	41a0      	sbcs	r0, r4
   1565a:	e7db      	b.n	15614 <__eqdf2+0x44>
   1565c:	2000      	movs	r0, #0
   1565e:	e7d9      	b.n	15614 <__eqdf2+0x44>
   15660:	000007ff 	.word	0x000007ff

00015664 <__gedf2>:
   15664:	b5f0      	push	{r4, r5, r6, r7, lr}
   15666:	465f      	mov	r7, fp
   15668:	4656      	mov	r6, sl
   1566a:	464d      	mov	r5, r9
   1566c:	4644      	mov	r4, r8
   1566e:	b4f0      	push	{r4, r5, r6, r7}
   15670:	0fcd      	lsrs	r5, r1, #31
   15672:	0fde      	lsrs	r6, r3, #31
   15674:	46ac      	mov	ip, r5
   15676:	031d      	lsls	r5, r3, #12
   15678:	0b2d      	lsrs	r5, r5, #12
   1567a:	46b1      	mov	r9, r6
   1567c:	4e37      	ldr	r6, [pc, #220]	; (1575c <__gedf2+0xf8>)
   1567e:	030f      	lsls	r7, r1, #12
   15680:	004c      	lsls	r4, r1, #1
   15682:	46ab      	mov	fp, r5
   15684:	005d      	lsls	r5, r3, #1
   15686:	4680      	mov	r8, r0
   15688:	0b3f      	lsrs	r7, r7, #12
   1568a:	0d64      	lsrs	r4, r4, #21
   1568c:	4692      	mov	sl, r2
   1568e:	0d6d      	lsrs	r5, r5, #21
   15690:	42b4      	cmp	r4, r6
   15692:	d032      	beq.n	156fa <__gedf2+0x96>
   15694:	4e31      	ldr	r6, [pc, #196]	; (1575c <__gedf2+0xf8>)
   15696:	42b5      	cmp	r5, r6
   15698:	d035      	beq.n	15706 <__gedf2+0xa2>
   1569a:	2c00      	cmp	r4, #0
   1569c:	d10e      	bne.n	156bc <__gedf2+0x58>
   1569e:	4338      	orrs	r0, r7
   156a0:	4241      	negs	r1, r0
   156a2:	4141      	adcs	r1, r0
   156a4:	1c08      	adds	r0, r1, #0
   156a6:	2d00      	cmp	r5, #0
   156a8:	d00b      	beq.n	156c2 <__gedf2+0x5e>
   156aa:	2900      	cmp	r1, #0
   156ac:	d119      	bne.n	156e2 <__gedf2+0x7e>
   156ae:	45cc      	cmp	ip, r9
   156b0:	d02d      	beq.n	1570e <__gedf2+0xaa>
   156b2:	4665      	mov	r5, ip
   156b4:	4268      	negs	r0, r5
   156b6:	2301      	movs	r3, #1
   156b8:	4318      	orrs	r0, r3
   156ba:	e018      	b.n	156ee <__gedf2+0x8a>
   156bc:	2d00      	cmp	r5, #0
   156be:	d1f6      	bne.n	156ae <__gedf2+0x4a>
   156c0:	1c28      	adds	r0, r5, #0
   156c2:	4659      	mov	r1, fp
   156c4:	430a      	orrs	r2, r1
   156c6:	4253      	negs	r3, r2
   156c8:	4153      	adcs	r3, r2
   156ca:	2800      	cmp	r0, #0
   156cc:	d106      	bne.n	156dc <__gedf2+0x78>
   156ce:	2b00      	cmp	r3, #0
   156d0:	d0ed      	beq.n	156ae <__gedf2+0x4a>
   156d2:	4663      	mov	r3, ip
   156d4:	4258      	negs	r0, r3
   156d6:	2301      	movs	r3, #1
   156d8:	4318      	orrs	r0, r3
   156da:	e008      	b.n	156ee <__gedf2+0x8a>
   156dc:	2000      	movs	r0, #0
   156de:	2b00      	cmp	r3, #0
   156e0:	d105      	bne.n	156ee <__gedf2+0x8a>
   156e2:	464a      	mov	r2, r9
   156e4:	4250      	negs	r0, r2
   156e6:	4150      	adcs	r0, r2
   156e8:	4240      	negs	r0, r0
   156ea:	2301      	movs	r3, #1
   156ec:	4318      	orrs	r0, r3
   156ee:	bc3c      	pop	{r2, r3, r4, r5}
   156f0:	4690      	mov	r8, r2
   156f2:	4699      	mov	r9, r3
   156f4:	46a2      	mov	sl, r4
   156f6:	46ab      	mov	fp, r5
   156f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   156fa:	1c3e      	adds	r6, r7, #0
   156fc:	4306      	orrs	r6, r0
   156fe:	d0c9      	beq.n	15694 <__gedf2+0x30>
   15700:	2002      	movs	r0, #2
   15702:	4240      	negs	r0, r0
   15704:	e7f3      	b.n	156ee <__gedf2+0x8a>
   15706:	465e      	mov	r6, fp
   15708:	4316      	orrs	r6, r2
   1570a:	d0c6      	beq.n	1569a <__gedf2+0x36>
   1570c:	e7f8      	b.n	15700 <__gedf2+0x9c>
   1570e:	42ac      	cmp	r4, r5
   15710:	dc07      	bgt.n	15722 <__gedf2+0xbe>
   15712:	da0b      	bge.n	1572c <__gedf2+0xc8>
   15714:	4661      	mov	r1, ip
   15716:	4248      	negs	r0, r1
   15718:	4148      	adcs	r0, r1
   1571a:	4240      	negs	r0, r0
   1571c:	2301      	movs	r3, #1
   1571e:	4318      	orrs	r0, r3
   15720:	e7e5      	b.n	156ee <__gedf2+0x8a>
   15722:	4666      	mov	r6, ip
   15724:	4270      	negs	r0, r6
   15726:	2301      	movs	r3, #1
   15728:	4318      	orrs	r0, r3
   1572a:	e7e0      	b.n	156ee <__gedf2+0x8a>
   1572c:	455f      	cmp	r7, fp
   1572e:	d80a      	bhi.n	15746 <__gedf2+0xe2>
   15730:	d00e      	beq.n	15750 <__gedf2+0xec>
   15732:	2000      	movs	r0, #0
   15734:	455f      	cmp	r7, fp
   15736:	d2da      	bcs.n	156ee <__gedf2+0x8a>
   15738:	4665      	mov	r5, ip
   1573a:	4268      	negs	r0, r5
   1573c:	4168      	adcs	r0, r5
   1573e:	4240      	negs	r0, r0
   15740:	2301      	movs	r3, #1
   15742:	4318      	orrs	r0, r3
   15744:	e7d3      	b.n	156ee <__gedf2+0x8a>
   15746:	4662      	mov	r2, ip
   15748:	4250      	negs	r0, r2
   1574a:	2301      	movs	r3, #1
   1574c:	4318      	orrs	r0, r3
   1574e:	e7ce      	b.n	156ee <__gedf2+0x8a>
   15750:	45d0      	cmp	r8, sl
   15752:	d8f8      	bhi.n	15746 <__gedf2+0xe2>
   15754:	2000      	movs	r0, #0
   15756:	45d0      	cmp	r8, sl
   15758:	d3ee      	bcc.n	15738 <__gedf2+0xd4>
   1575a:	e7c8      	b.n	156ee <__gedf2+0x8a>
   1575c:	000007ff 	.word	0x000007ff

00015760 <__ledf2>:
   15760:	b5f0      	push	{r4, r5, r6, r7, lr}
   15762:	4656      	mov	r6, sl
   15764:	464d      	mov	r5, r9
   15766:	4644      	mov	r4, r8
   15768:	465f      	mov	r7, fp
   1576a:	b4f0      	push	{r4, r5, r6, r7}
   1576c:	1c0d      	adds	r5, r1, #0
   1576e:	b083      	sub	sp, #12
   15770:	1c04      	adds	r4, r0, #0
   15772:	9001      	str	r0, [sp, #4]
   15774:	0fe8      	lsrs	r0, r5, #31
   15776:	4681      	mov	r9, r0
   15778:	0318      	lsls	r0, r3, #12
   1577a:	030f      	lsls	r7, r1, #12
   1577c:	0b00      	lsrs	r0, r0, #12
   1577e:	0b3f      	lsrs	r7, r7, #12
   15780:	4684      	mov	ip, r0
   15782:	4835      	ldr	r0, [pc, #212]	; (15858 <__ledf2+0xf8>)
   15784:	9700      	str	r7, [sp, #0]
   15786:	0049      	lsls	r1, r1, #1
   15788:	005e      	lsls	r6, r3, #1
   1578a:	0fdf      	lsrs	r7, r3, #31
   1578c:	0d49      	lsrs	r1, r1, #21
   1578e:	4692      	mov	sl, r2
   15790:	0d76      	lsrs	r6, r6, #21
   15792:	46b8      	mov	r8, r7
   15794:	4281      	cmp	r1, r0
   15796:	d034      	beq.n	15802 <__ledf2+0xa2>
   15798:	482f      	ldr	r0, [pc, #188]	; (15858 <__ledf2+0xf8>)
   1579a:	4286      	cmp	r6, r0
   1579c:	d036      	beq.n	1580c <__ledf2+0xac>
   1579e:	2900      	cmp	r1, #0
   157a0:	d018      	beq.n	157d4 <__ledf2+0x74>
   157a2:	2e00      	cmp	r6, #0
   157a4:	d11f      	bne.n	157e6 <__ledf2+0x86>
   157a6:	1c34      	adds	r4, r6, #0
   157a8:	4667      	mov	r7, ip
   157aa:	433a      	orrs	r2, r7
   157ac:	4253      	negs	r3, r2
   157ae:	4153      	adcs	r3, r2
   157b0:	2c00      	cmp	r4, #0
   157b2:	d01f      	beq.n	157f4 <__ledf2+0x94>
   157b4:	2000      	movs	r0, #0
   157b6:	2b00      	cmp	r3, #0
   157b8:	d105      	bne.n	157c6 <__ledf2+0x66>
   157ba:	4642      	mov	r2, r8
   157bc:	4250      	negs	r0, r2
   157be:	4150      	adcs	r0, r2
   157c0:	4240      	negs	r0, r0
   157c2:	2301      	movs	r3, #1
   157c4:	4318      	orrs	r0, r3
   157c6:	b003      	add	sp, #12
   157c8:	bc3c      	pop	{r2, r3, r4, r5}
   157ca:	4690      	mov	r8, r2
   157cc:	4699      	mov	r9, r3
   157ce:	46a2      	mov	sl, r4
   157d0:	46ab      	mov	fp, r5
   157d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157d4:	9800      	ldr	r0, [sp, #0]
   157d6:	4304      	orrs	r4, r0
   157d8:	4260      	negs	r0, r4
   157da:	4160      	adcs	r0, r4
   157dc:	1c04      	adds	r4, r0, #0
   157de:	2e00      	cmp	r6, #0
   157e0:	d0e2      	beq.n	157a8 <__ledf2+0x48>
   157e2:	2800      	cmp	r0, #0
   157e4:	d1e9      	bne.n	157ba <__ledf2+0x5a>
   157e6:	45c1      	cmp	r9, r8
   157e8:	d015      	beq.n	15816 <__ledf2+0xb6>
   157ea:	464f      	mov	r7, r9
   157ec:	4278      	negs	r0, r7
   157ee:	2301      	movs	r3, #1
   157f0:	4318      	orrs	r0, r3
   157f2:	e7e8      	b.n	157c6 <__ledf2+0x66>
   157f4:	2b00      	cmp	r3, #0
   157f6:	d0f6      	beq.n	157e6 <__ledf2+0x86>
   157f8:	464b      	mov	r3, r9
   157fa:	4258      	negs	r0, r3
   157fc:	2301      	movs	r3, #1
   157fe:	4318      	orrs	r0, r3
   15800:	e7e1      	b.n	157c6 <__ledf2+0x66>
   15802:	9f00      	ldr	r7, [sp, #0]
   15804:	2002      	movs	r0, #2
   15806:	4327      	orrs	r7, r4
   15808:	d1dd      	bne.n	157c6 <__ledf2+0x66>
   1580a:	e7c5      	b.n	15798 <__ledf2+0x38>
   1580c:	4667      	mov	r7, ip
   1580e:	2002      	movs	r0, #2
   15810:	4317      	orrs	r7, r2
   15812:	d1d8      	bne.n	157c6 <__ledf2+0x66>
   15814:	e7c3      	b.n	1579e <__ledf2+0x3e>
   15816:	42b1      	cmp	r1, r6
   15818:	dd04      	ble.n	15824 <__ledf2+0xc4>
   1581a:	464a      	mov	r2, r9
   1581c:	4250      	negs	r0, r2
   1581e:	2301      	movs	r3, #1
   15820:	4318      	orrs	r0, r3
   15822:	e7d0      	b.n	157c6 <__ledf2+0x66>
   15824:	42b1      	cmp	r1, r6
   15826:	db07      	blt.n	15838 <__ledf2+0xd8>
   15828:	9800      	ldr	r0, [sp, #0]
   1582a:	4560      	cmp	r0, ip
   1582c:	d8e4      	bhi.n	157f8 <__ledf2+0x98>
   1582e:	d00a      	beq.n	15846 <__ledf2+0xe6>
   15830:	9f00      	ldr	r7, [sp, #0]
   15832:	2000      	movs	r0, #0
   15834:	4567      	cmp	r7, ip
   15836:	d2c6      	bcs.n	157c6 <__ledf2+0x66>
   15838:	464f      	mov	r7, r9
   1583a:	4278      	negs	r0, r7
   1583c:	4178      	adcs	r0, r7
   1583e:	4240      	negs	r0, r0
   15840:	2301      	movs	r3, #1
   15842:	4318      	orrs	r0, r3
   15844:	e7bf      	b.n	157c6 <__ledf2+0x66>
   15846:	9a01      	ldr	r2, [sp, #4]
   15848:	4552      	cmp	r2, sl
   1584a:	d8d5      	bhi.n	157f8 <__ledf2+0x98>
   1584c:	9a01      	ldr	r2, [sp, #4]
   1584e:	2000      	movs	r0, #0
   15850:	4552      	cmp	r2, sl
   15852:	d3f1      	bcc.n	15838 <__ledf2+0xd8>
   15854:	e7b7      	b.n	157c6 <__ledf2+0x66>
   15856:	46c0      	nop			; (mov r8, r8)
   15858:	000007ff 	.word	0x000007ff

0001585c <__aeabi_dmul>:
   1585c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1585e:	4656      	mov	r6, sl
   15860:	4644      	mov	r4, r8
   15862:	465f      	mov	r7, fp
   15864:	464d      	mov	r5, r9
   15866:	b4f0      	push	{r4, r5, r6, r7}
   15868:	1c1f      	adds	r7, r3, #0
   1586a:	030b      	lsls	r3, r1, #12
   1586c:	0b1b      	lsrs	r3, r3, #12
   1586e:	469a      	mov	sl, r3
   15870:	004b      	lsls	r3, r1, #1
   15872:	b087      	sub	sp, #28
   15874:	1c04      	adds	r4, r0, #0
   15876:	4680      	mov	r8, r0
   15878:	0d5b      	lsrs	r3, r3, #21
   1587a:	0fc8      	lsrs	r0, r1, #31
   1587c:	1c16      	adds	r6, r2, #0
   1587e:	9302      	str	r3, [sp, #8]
   15880:	4681      	mov	r9, r0
   15882:	2b00      	cmp	r3, #0
   15884:	d068      	beq.n	15958 <__aeabi_dmul+0xfc>
   15886:	4b69      	ldr	r3, [pc, #420]	; (15a2c <__aeabi_dmul+0x1d0>)
   15888:	9902      	ldr	r1, [sp, #8]
   1588a:	4299      	cmp	r1, r3
   1588c:	d032      	beq.n	158f4 <__aeabi_dmul+0x98>
   1588e:	2280      	movs	r2, #128	; 0x80
   15890:	4653      	mov	r3, sl
   15892:	0352      	lsls	r2, r2, #13
   15894:	431a      	orrs	r2, r3
   15896:	00d2      	lsls	r2, r2, #3
   15898:	0f63      	lsrs	r3, r4, #29
   1589a:	431a      	orrs	r2, r3
   1589c:	4692      	mov	sl, r2
   1589e:	4a64      	ldr	r2, [pc, #400]	; (15a30 <__aeabi_dmul+0x1d4>)
   158a0:	00e0      	lsls	r0, r4, #3
   158a2:	1889      	adds	r1, r1, r2
   158a4:	4680      	mov	r8, r0
   158a6:	9102      	str	r1, [sp, #8]
   158a8:	2400      	movs	r4, #0
   158aa:	2500      	movs	r5, #0
   158ac:	033b      	lsls	r3, r7, #12
   158ae:	0b1b      	lsrs	r3, r3, #12
   158b0:	469b      	mov	fp, r3
   158b2:	0078      	lsls	r0, r7, #1
   158b4:	0ffb      	lsrs	r3, r7, #31
   158b6:	1c32      	adds	r2, r6, #0
   158b8:	0d40      	lsrs	r0, r0, #21
   158ba:	9303      	str	r3, [sp, #12]
   158bc:	d100      	bne.n	158c0 <__aeabi_dmul+0x64>
   158be:	e075      	b.n	159ac <__aeabi_dmul+0x150>
   158c0:	4b5a      	ldr	r3, [pc, #360]	; (15a2c <__aeabi_dmul+0x1d0>)
   158c2:	4298      	cmp	r0, r3
   158c4:	d069      	beq.n	1599a <__aeabi_dmul+0x13e>
   158c6:	2280      	movs	r2, #128	; 0x80
   158c8:	4659      	mov	r1, fp
   158ca:	0352      	lsls	r2, r2, #13
   158cc:	430a      	orrs	r2, r1
   158ce:	0f73      	lsrs	r3, r6, #29
   158d0:	00d2      	lsls	r2, r2, #3
   158d2:	431a      	orrs	r2, r3
   158d4:	4b56      	ldr	r3, [pc, #344]	; (15a30 <__aeabi_dmul+0x1d4>)
   158d6:	4693      	mov	fp, r2
   158d8:	18c0      	adds	r0, r0, r3
   158da:	00f2      	lsls	r2, r6, #3
   158dc:	2300      	movs	r3, #0
   158de:	9903      	ldr	r1, [sp, #12]
   158e0:	464e      	mov	r6, r9
   158e2:	4071      	eors	r1, r6
   158e4:	431c      	orrs	r4, r3
   158e6:	2c0f      	cmp	r4, #15
   158e8:	d900      	bls.n	158ec <__aeabi_dmul+0x90>
   158ea:	e0a9      	b.n	15a40 <__aeabi_dmul+0x1e4>
   158ec:	4e51      	ldr	r6, [pc, #324]	; (15a34 <__aeabi_dmul+0x1d8>)
   158ee:	00a4      	lsls	r4, r4, #2
   158f0:	5934      	ldr	r4, [r6, r4]
   158f2:	46a7      	mov	pc, r4
   158f4:	4653      	mov	r3, sl
   158f6:	431c      	orrs	r4, r3
   158f8:	d000      	beq.n	158fc <__aeabi_dmul+0xa0>
   158fa:	e087      	b.n	15a0c <__aeabi_dmul+0x1b0>
   158fc:	2500      	movs	r5, #0
   158fe:	46aa      	mov	sl, r5
   15900:	46a8      	mov	r8, r5
   15902:	2408      	movs	r4, #8
   15904:	2502      	movs	r5, #2
   15906:	e7d1      	b.n	158ac <__aeabi_dmul+0x50>
   15908:	4649      	mov	r1, r9
   1590a:	2d02      	cmp	r5, #2
   1590c:	d06c      	beq.n	159e8 <__aeabi_dmul+0x18c>
   1590e:	2d03      	cmp	r5, #3
   15910:	d100      	bne.n	15914 <__aeabi_dmul+0xb8>
   15912:	e217      	b.n	15d44 <__aeabi_dmul+0x4e8>
   15914:	2d01      	cmp	r5, #1
   15916:	d000      	beq.n	1591a <__aeabi_dmul+0xbe>
   15918:	e158      	b.n	15bcc <__aeabi_dmul+0x370>
   1591a:	400d      	ands	r5, r1
   1591c:	b2ed      	uxtb	r5, r5
   1591e:	2400      	movs	r4, #0
   15920:	46a9      	mov	r9, r5
   15922:	2300      	movs	r3, #0
   15924:	46a0      	mov	r8, r4
   15926:	2000      	movs	r0, #0
   15928:	2100      	movs	r1, #0
   1592a:	0325      	lsls	r5, r4, #12
   1592c:	0d0a      	lsrs	r2, r1, #20
   1592e:	051c      	lsls	r4, r3, #20
   15930:	0b2d      	lsrs	r5, r5, #12
   15932:	0512      	lsls	r2, r2, #20
   15934:	4b40      	ldr	r3, [pc, #256]	; (15a38 <__aeabi_dmul+0x1dc>)
   15936:	432a      	orrs	r2, r5
   15938:	4013      	ands	r3, r2
   1593a:	4323      	orrs	r3, r4
   1593c:	005b      	lsls	r3, r3, #1
   1593e:	464c      	mov	r4, r9
   15940:	085b      	lsrs	r3, r3, #1
   15942:	07e2      	lsls	r2, r4, #31
   15944:	1c19      	adds	r1, r3, #0
   15946:	4640      	mov	r0, r8
   15948:	4311      	orrs	r1, r2
   1594a:	b007      	add	sp, #28
   1594c:	bc3c      	pop	{r2, r3, r4, r5}
   1594e:	4690      	mov	r8, r2
   15950:	4699      	mov	r9, r3
   15952:	46a2      	mov	sl, r4
   15954:	46ab      	mov	fp, r5
   15956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15958:	4653      	mov	r3, sl
   1595a:	4323      	orrs	r3, r4
   1595c:	d050      	beq.n	15a00 <__aeabi_dmul+0x1a4>
   1595e:	4653      	mov	r3, sl
   15960:	2b00      	cmp	r3, #0
   15962:	d100      	bne.n	15966 <__aeabi_dmul+0x10a>
   15964:	e184      	b.n	15c70 <__aeabi_dmul+0x414>
   15966:	4650      	mov	r0, sl
   15968:	f000 fde2 	bl	16530 <__clzsi2>
   1596c:	1e03      	subs	r3, r0, #0
   1596e:	2b27      	cmp	r3, #39	; 0x27
   15970:	dd00      	ble.n	15974 <__aeabi_dmul+0x118>
   15972:	e176      	b.n	15c62 <__aeabi_dmul+0x406>
   15974:	2128      	movs	r1, #40	; 0x28
   15976:	1a0d      	subs	r5, r1, r0
   15978:	1c21      	adds	r1, r4, #0
   1597a:	3b08      	subs	r3, #8
   1597c:	4652      	mov	r2, sl
   1597e:	40e9      	lsrs	r1, r5
   15980:	409a      	lsls	r2, r3
   15982:	1c0d      	adds	r5, r1, #0
   15984:	4315      	orrs	r5, r2
   15986:	1c22      	adds	r2, r4, #0
   15988:	409a      	lsls	r2, r3
   1598a:	46aa      	mov	sl, r5
   1598c:	4690      	mov	r8, r2
   1598e:	4b2b      	ldr	r3, [pc, #172]	; (15a3c <__aeabi_dmul+0x1e0>)
   15990:	2400      	movs	r4, #0
   15992:	1a1b      	subs	r3, r3, r0
   15994:	9302      	str	r3, [sp, #8]
   15996:	2500      	movs	r5, #0
   15998:	e788      	b.n	158ac <__aeabi_dmul+0x50>
   1599a:	465b      	mov	r3, fp
   1599c:	431e      	orrs	r6, r3
   1599e:	2303      	movs	r3, #3
   159a0:	2e00      	cmp	r6, #0
   159a2:	d19c      	bne.n	158de <__aeabi_dmul+0x82>
   159a4:	46b3      	mov	fp, r6
   159a6:	2200      	movs	r2, #0
   159a8:	2302      	movs	r3, #2
   159aa:	e798      	b.n	158de <__aeabi_dmul+0x82>
   159ac:	465b      	mov	r3, fp
   159ae:	4333      	orrs	r3, r6
   159b0:	d021      	beq.n	159f6 <__aeabi_dmul+0x19a>
   159b2:	4658      	mov	r0, fp
   159b4:	2800      	cmp	r0, #0
   159b6:	d100      	bne.n	159ba <__aeabi_dmul+0x15e>
   159b8:	e14e      	b.n	15c58 <__aeabi_dmul+0x3fc>
   159ba:	f000 fdb9 	bl	16530 <__clzsi2>
   159be:	2827      	cmp	r0, #39	; 0x27
   159c0:	dd00      	ble.n	159c4 <__aeabi_dmul+0x168>
   159c2:	e142      	b.n	15c4a <__aeabi_dmul+0x3ee>
   159c4:	2128      	movs	r1, #40	; 0x28
   159c6:	1a0f      	subs	r7, r1, r0
   159c8:	1c02      	adds	r2, r0, #0
   159ca:	1c31      	adds	r1, r6, #0
   159cc:	3a08      	subs	r2, #8
   159ce:	465b      	mov	r3, fp
   159d0:	40f9      	lsrs	r1, r7
   159d2:	4093      	lsls	r3, r2
   159d4:	1c0f      	adds	r7, r1, #0
   159d6:	431f      	orrs	r7, r3
   159d8:	1c33      	adds	r3, r6, #0
   159da:	4093      	lsls	r3, r2
   159dc:	46bb      	mov	fp, r7
   159de:	1c1a      	adds	r2, r3, #0
   159e0:	4b16      	ldr	r3, [pc, #88]	; (15a3c <__aeabi_dmul+0x1e0>)
   159e2:	1a18      	subs	r0, r3, r0
   159e4:	2300      	movs	r3, #0
   159e6:	e77a      	b.n	158de <__aeabi_dmul+0x82>
   159e8:	2301      	movs	r3, #1
   159ea:	400b      	ands	r3, r1
   159ec:	2400      	movs	r4, #0
   159ee:	4699      	mov	r9, r3
   159f0:	46a0      	mov	r8, r4
   159f2:	4b0e      	ldr	r3, [pc, #56]	; (15a2c <__aeabi_dmul+0x1d0>)
   159f4:	e797      	b.n	15926 <__aeabi_dmul+0xca>
   159f6:	2700      	movs	r7, #0
   159f8:	46bb      	mov	fp, r7
   159fa:	2200      	movs	r2, #0
   159fc:	2301      	movs	r3, #1
   159fe:	e76e      	b.n	158de <__aeabi_dmul+0x82>
   15a00:	2100      	movs	r1, #0
   15a02:	2404      	movs	r4, #4
   15a04:	468a      	mov	sl, r1
   15a06:	4688      	mov	r8, r1
   15a08:	2501      	movs	r5, #1
   15a0a:	e74f      	b.n	158ac <__aeabi_dmul+0x50>
   15a0c:	240c      	movs	r4, #12
   15a0e:	2503      	movs	r5, #3
   15a10:	e74c      	b.n	158ac <__aeabi_dmul+0x50>
   15a12:	2500      	movs	r5, #0
   15a14:	2480      	movs	r4, #128	; 0x80
   15a16:	46a9      	mov	r9, r5
   15a18:	0324      	lsls	r4, r4, #12
   15a1a:	46a8      	mov	r8, r5
   15a1c:	4b03      	ldr	r3, [pc, #12]	; (15a2c <__aeabi_dmul+0x1d0>)
   15a1e:	e782      	b.n	15926 <__aeabi_dmul+0xca>
   15a20:	46da      	mov	sl, fp
   15a22:	4690      	mov	r8, r2
   15a24:	9903      	ldr	r1, [sp, #12]
   15a26:	1c1d      	adds	r5, r3, #0
   15a28:	e76f      	b.n	1590a <__aeabi_dmul+0xae>
   15a2a:	46c0      	nop			; (mov r8, r8)
   15a2c:	000007ff 	.word	0x000007ff
   15a30:	fffffc01 	.word	0xfffffc01
   15a34:	000174e8 	.word	0x000174e8
   15a38:	800fffff 	.word	0x800fffff
   15a3c:	fffffc0d 	.word	0xfffffc0d
   15a40:	9f02      	ldr	r7, [sp, #8]
   15a42:	0c16      	lsrs	r6, r2, #16
   15a44:	1838      	adds	r0, r7, r0
   15a46:	9004      	str	r0, [sp, #16]
   15a48:	4640      	mov	r0, r8
   15a4a:	0c07      	lsrs	r7, r0, #16
   15a4c:	0400      	lsls	r0, r0, #16
   15a4e:	0c00      	lsrs	r0, r0, #16
   15a50:	0412      	lsls	r2, r2, #16
   15a52:	0c12      	lsrs	r2, r2, #16
   15a54:	1c03      	adds	r3, r0, #0
   15a56:	4353      	muls	r3, r2
   15a58:	1c04      	adds	r4, r0, #0
   15a5a:	1c3d      	adds	r5, r7, #0
   15a5c:	4374      	muls	r4, r6
   15a5e:	4355      	muls	r5, r2
   15a60:	4698      	mov	r8, r3
   15a62:	1c3b      	adds	r3, r7, #0
   15a64:	4373      	muls	r3, r6
   15a66:	1964      	adds	r4, r4, r5
   15a68:	46a4      	mov	ip, r4
   15a6a:	4644      	mov	r4, r8
   15a6c:	9302      	str	r3, [sp, #8]
   15a6e:	0c23      	lsrs	r3, r4, #16
   15a70:	4463      	add	r3, ip
   15a72:	429d      	cmp	r5, r3
   15a74:	d904      	bls.n	15a80 <__aeabi_dmul+0x224>
   15a76:	9d02      	ldr	r5, [sp, #8]
   15a78:	2480      	movs	r4, #128	; 0x80
   15a7a:	0264      	lsls	r4, r4, #9
   15a7c:	192d      	adds	r5, r5, r4
   15a7e:	9502      	str	r5, [sp, #8]
   15a80:	0c1d      	lsrs	r5, r3, #16
   15a82:	9503      	str	r5, [sp, #12]
   15a84:	4645      	mov	r5, r8
   15a86:	042c      	lsls	r4, r5, #16
   15a88:	041b      	lsls	r3, r3, #16
   15a8a:	0c24      	lsrs	r4, r4, #16
   15a8c:	191c      	adds	r4, r3, r4
   15a8e:	9405      	str	r4, [sp, #20]
   15a90:	465c      	mov	r4, fp
   15a92:	0c23      	lsrs	r3, r4, #16
   15a94:	1c05      	adds	r5, r0, #0
   15a96:	4358      	muls	r0, r3
   15a98:	0424      	lsls	r4, r4, #16
   15a9a:	0c24      	lsrs	r4, r4, #16
   15a9c:	4684      	mov	ip, r0
   15a9e:	1c38      	adds	r0, r7, #0
   15aa0:	4360      	muls	r0, r4
   15aa2:	4365      	muls	r5, r4
   15aa4:	435f      	muls	r7, r3
   15aa6:	4681      	mov	r9, r0
   15aa8:	44cc      	add	ip, r9
   15aaa:	0c28      	lsrs	r0, r5, #16
   15aac:	4460      	add	r0, ip
   15aae:	46bb      	mov	fp, r7
   15ab0:	4581      	cmp	r9, r0
   15ab2:	d902      	bls.n	15aba <__aeabi_dmul+0x25e>
   15ab4:	2780      	movs	r7, #128	; 0x80
   15ab6:	027f      	lsls	r7, r7, #9
   15ab8:	44bb      	add	fp, r7
   15aba:	042d      	lsls	r5, r5, #16
   15abc:	0c07      	lsrs	r7, r0, #16
   15abe:	0c2d      	lsrs	r5, r5, #16
   15ac0:	0400      	lsls	r0, r0, #16
   15ac2:	1940      	adds	r0, r0, r5
   15ac4:	4655      	mov	r5, sl
   15ac6:	46bc      	mov	ip, r7
   15ac8:	042f      	lsls	r7, r5, #16
   15aca:	44e3      	add	fp, ip
   15acc:	4684      	mov	ip, r0
   15ace:	0c28      	lsrs	r0, r5, #16
   15ad0:	0c3d      	lsrs	r5, r7, #16
   15ad2:	1c2f      	adds	r7, r5, #0
   15ad4:	4357      	muls	r7, r2
   15ad6:	46b8      	mov	r8, r7
   15ad8:	1c2f      	adds	r7, r5, #0
   15ada:	4377      	muls	r7, r6
   15adc:	4342      	muls	r2, r0
   15ade:	46b9      	mov	r9, r7
   15ae0:	4647      	mov	r7, r8
   15ae2:	0c3f      	lsrs	r7, r7, #16
   15ae4:	4491      	add	r9, r2
   15ae6:	46ba      	mov	sl, r7
   15ae8:	44d1      	add	r9, sl
   15aea:	4346      	muls	r6, r0
   15aec:	454a      	cmp	r2, r9
   15aee:	d902      	bls.n	15af6 <__aeabi_dmul+0x29a>
   15af0:	2280      	movs	r2, #128	; 0x80
   15af2:	0252      	lsls	r2, r2, #9
   15af4:	18b6      	adds	r6, r6, r2
   15af6:	464f      	mov	r7, r9
   15af8:	0c3a      	lsrs	r2, r7, #16
   15afa:	18b6      	adds	r6, r6, r2
   15afc:	043a      	lsls	r2, r7, #16
   15afe:	4647      	mov	r7, r8
   15b00:	043f      	lsls	r7, r7, #16
   15b02:	0c3f      	lsrs	r7, r7, #16
   15b04:	46b8      	mov	r8, r7
   15b06:	1c2f      	adds	r7, r5, #0
   15b08:	4367      	muls	r7, r4
   15b0a:	435d      	muls	r5, r3
   15b0c:	4344      	muls	r4, r0
   15b0e:	4358      	muls	r0, r3
   15b10:	1965      	adds	r5, r4, r5
   15b12:	9001      	str	r0, [sp, #4]
   15b14:	0c38      	lsrs	r0, r7, #16
   15b16:	182d      	adds	r5, r5, r0
   15b18:	4442      	add	r2, r8
   15b1a:	46b8      	mov	r8, r7
   15b1c:	42ac      	cmp	r4, r5
   15b1e:	d904      	bls.n	15b2a <__aeabi_dmul+0x2ce>
   15b20:	9801      	ldr	r0, [sp, #4]
   15b22:	2380      	movs	r3, #128	; 0x80
   15b24:	025b      	lsls	r3, r3, #9
   15b26:	18c0      	adds	r0, r0, r3
   15b28:	9001      	str	r0, [sp, #4]
   15b2a:	9c03      	ldr	r4, [sp, #12]
   15b2c:	9f02      	ldr	r7, [sp, #8]
   15b2e:	1c20      	adds	r0, r4, #0
   15b30:	4460      	add	r0, ip
   15b32:	19c0      	adds	r0, r0, r7
   15b34:	4560      	cmp	r0, ip
   15b36:	41a4      	sbcs	r4, r4
   15b38:	4647      	mov	r7, r8
   15b3a:	4264      	negs	r4, r4
   15b3c:	46a4      	mov	ip, r4
   15b3e:	042b      	lsls	r3, r5, #16
   15b40:	043c      	lsls	r4, r7, #16
   15b42:	4699      	mov	r9, r3
   15b44:	0c24      	lsrs	r4, r4, #16
   15b46:	444c      	add	r4, r9
   15b48:	46a0      	mov	r8, r4
   15b4a:	44d8      	add	r8, fp
   15b4c:	1880      	adds	r0, r0, r2
   15b4e:	46c2      	mov	sl, r8
   15b50:	44e2      	add	sl, ip
   15b52:	4290      	cmp	r0, r2
   15b54:	4192      	sbcs	r2, r2
   15b56:	4657      	mov	r7, sl
   15b58:	4252      	negs	r2, r2
   15b5a:	4691      	mov	r9, r2
   15b5c:	19f2      	adds	r2, r6, r7
   15b5e:	45e2      	cmp	sl, ip
   15b60:	41bf      	sbcs	r7, r7
   15b62:	427f      	negs	r7, r7
   15b64:	464b      	mov	r3, r9
   15b66:	46bc      	mov	ip, r7
   15b68:	45d8      	cmp	r8, fp
   15b6a:	41bf      	sbcs	r7, r7
   15b6c:	18d4      	adds	r4, r2, r3
   15b6e:	427f      	negs	r7, r7
   15b70:	4663      	mov	r3, ip
   15b72:	431f      	orrs	r7, r3
   15b74:	0c2d      	lsrs	r5, r5, #16
   15b76:	197f      	adds	r7, r7, r5
   15b78:	42b2      	cmp	r2, r6
   15b7a:	4192      	sbcs	r2, r2
   15b7c:	454c      	cmp	r4, r9
   15b7e:	41ad      	sbcs	r5, r5
   15b80:	4252      	negs	r2, r2
   15b82:	426d      	negs	r5, r5
   15b84:	4315      	orrs	r5, r2
   15b86:	9e01      	ldr	r6, [sp, #4]
   15b88:	197d      	adds	r5, r7, r5
   15b8a:	19ab      	adds	r3, r5, r6
   15b8c:	0de2      	lsrs	r2, r4, #23
   15b8e:	025b      	lsls	r3, r3, #9
   15b90:	9f05      	ldr	r7, [sp, #20]
   15b92:	4313      	orrs	r3, r2
   15b94:	0242      	lsls	r2, r0, #9
   15b96:	433a      	orrs	r2, r7
   15b98:	469a      	mov	sl, r3
   15b9a:	1e53      	subs	r3, r2, #1
   15b9c:	419a      	sbcs	r2, r3
   15b9e:	0dc3      	lsrs	r3, r0, #23
   15ba0:	1c10      	adds	r0, r2, #0
   15ba2:	4318      	orrs	r0, r3
   15ba4:	0264      	lsls	r4, r4, #9
   15ba6:	4320      	orrs	r0, r4
   15ba8:	4680      	mov	r8, r0
   15baa:	4650      	mov	r0, sl
   15bac:	01c0      	lsls	r0, r0, #7
   15bae:	d50d      	bpl.n	15bcc <__aeabi_dmul+0x370>
   15bb0:	4645      	mov	r5, r8
   15bb2:	2201      	movs	r2, #1
   15bb4:	4656      	mov	r6, sl
   15bb6:	9c04      	ldr	r4, [sp, #16]
   15bb8:	086b      	lsrs	r3, r5, #1
   15bba:	402a      	ands	r2, r5
   15bbc:	431a      	orrs	r2, r3
   15bbe:	07f3      	lsls	r3, r6, #31
   15bc0:	3401      	adds	r4, #1
   15bc2:	431a      	orrs	r2, r3
   15bc4:	0876      	lsrs	r6, r6, #1
   15bc6:	9404      	str	r4, [sp, #16]
   15bc8:	4690      	mov	r8, r2
   15bca:	46b2      	mov	sl, r6
   15bcc:	9e04      	ldr	r6, [sp, #16]
   15bce:	4f63      	ldr	r7, [pc, #396]	; (15d5c <__aeabi_dmul+0x500>)
   15bd0:	19f3      	adds	r3, r6, r7
   15bd2:	2b00      	cmp	r3, #0
   15bd4:	dd61      	ble.n	15c9a <__aeabi_dmul+0x43e>
   15bd6:	4640      	mov	r0, r8
   15bd8:	0740      	lsls	r0, r0, #29
   15bda:	d00b      	beq.n	15bf4 <__aeabi_dmul+0x398>
   15bdc:	220f      	movs	r2, #15
   15bde:	4644      	mov	r4, r8
   15be0:	4022      	ands	r2, r4
   15be2:	2a04      	cmp	r2, #4
   15be4:	d006      	beq.n	15bf4 <__aeabi_dmul+0x398>
   15be6:	4642      	mov	r2, r8
   15be8:	3204      	adds	r2, #4
   15bea:	4542      	cmp	r2, r8
   15bec:	4180      	sbcs	r0, r0
   15bee:	4240      	negs	r0, r0
   15bf0:	4482      	add	sl, r0
   15bf2:	4690      	mov	r8, r2
   15bf4:	4655      	mov	r5, sl
   15bf6:	01ed      	lsls	r5, r5, #7
   15bf8:	d507      	bpl.n	15c0a <__aeabi_dmul+0x3ae>
   15bfa:	4b59      	ldr	r3, [pc, #356]	; (15d60 <__aeabi_dmul+0x504>)
   15bfc:	4656      	mov	r6, sl
   15bfe:	9f04      	ldr	r7, [sp, #16]
   15c00:	2080      	movs	r0, #128	; 0x80
   15c02:	401e      	ands	r6, r3
   15c04:	00c0      	lsls	r0, r0, #3
   15c06:	46b2      	mov	sl, r6
   15c08:	183b      	adds	r3, r7, r0
   15c0a:	4a56      	ldr	r2, [pc, #344]	; (15d64 <__aeabi_dmul+0x508>)
   15c0c:	4293      	cmp	r3, r2
   15c0e:	dd00      	ble.n	15c12 <__aeabi_dmul+0x3b6>
   15c10:	e6ea      	b.n	159e8 <__aeabi_dmul+0x18c>
   15c12:	4644      	mov	r4, r8
   15c14:	4655      	mov	r5, sl
   15c16:	08e2      	lsrs	r2, r4, #3
   15c18:	0768      	lsls	r0, r5, #29
   15c1a:	4310      	orrs	r0, r2
   15c1c:	2201      	movs	r2, #1
   15c1e:	026c      	lsls	r4, r5, #9
   15c20:	055b      	lsls	r3, r3, #21
   15c22:	400a      	ands	r2, r1
   15c24:	4680      	mov	r8, r0
   15c26:	0b24      	lsrs	r4, r4, #12
   15c28:	0d5b      	lsrs	r3, r3, #21
   15c2a:	4691      	mov	r9, r2
   15c2c:	e67b      	b.n	15926 <__aeabi_dmul+0xca>
   15c2e:	46da      	mov	sl, fp
   15c30:	4690      	mov	r8, r2
   15c32:	1c1d      	adds	r5, r3, #0
   15c34:	e669      	b.n	1590a <__aeabi_dmul+0xae>
   15c36:	2480      	movs	r4, #128	; 0x80
   15c38:	0324      	lsls	r4, r4, #12
   15c3a:	4657      	mov	r7, sl
   15c3c:	4227      	tst	r7, r4
   15c3e:	d11c      	bne.n	15c7a <__aeabi_dmul+0x41e>
   15c40:	433c      	orrs	r4, r7
   15c42:	0324      	lsls	r4, r4, #12
   15c44:	0b24      	lsrs	r4, r4, #12
   15c46:	4b48      	ldr	r3, [pc, #288]	; (15d68 <__aeabi_dmul+0x50c>)
   15c48:	e66d      	b.n	15926 <__aeabi_dmul+0xca>
   15c4a:	1c03      	adds	r3, r0, #0
   15c4c:	3b28      	subs	r3, #40	; 0x28
   15c4e:	1c31      	adds	r1, r6, #0
   15c50:	4099      	lsls	r1, r3
   15c52:	468b      	mov	fp, r1
   15c54:	2200      	movs	r2, #0
   15c56:	e6c3      	b.n	159e0 <__aeabi_dmul+0x184>
   15c58:	1c30      	adds	r0, r6, #0
   15c5a:	f000 fc69 	bl	16530 <__clzsi2>
   15c5e:	3020      	adds	r0, #32
   15c60:	e6ad      	b.n	159be <__aeabi_dmul+0x162>
   15c62:	3b28      	subs	r3, #40	; 0x28
   15c64:	1c21      	adds	r1, r4, #0
   15c66:	4099      	lsls	r1, r3
   15c68:	2200      	movs	r2, #0
   15c6a:	468a      	mov	sl, r1
   15c6c:	4690      	mov	r8, r2
   15c6e:	e68e      	b.n	1598e <__aeabi_dmul+0x132>
   15c70:	1c20      	adds	r0, r4, #0
   15c72:	f000 fc5d 	bl	16530 <__clzsi2>
   15c76:	3020      	adds	r0, #32
   15c78:	e678      	b.n	1596c <__aeabi_dmul+0x110>
   15c7a:	4658      	mov	r0, fp
   15c7c:	4220      	tst	r0, r4
   15c7e:	d107      	bne.n	15c90 <__aeabi_dmul+0x434>
   15c80:	4304      	orrs	r4, r0
   15c82:	9903      	ldr	r1, [sp, #12]
   15c84:	0324      	lsls	r4, r4, #12
   15c86:	0b24      	lsrs	r4, r4, #12
   15c88:	4689      	mov	r9, r1
   15c8a:	4690      	mov	r8, r2
   15c8c:	4b36      	ldr	r3, [pc, #216]	; (15d68 <__aeabi_dmul+0x50c>)
   15c8e:	e64a      	b.n	15926 <__aeabi_dmul+0xca>
   15c90:	433c      	orrs	r4, r7
   15c92:	0324      	lsls	r4, r4, #12
   15c94:	0b24      	lsrs	r4, r4, #12
   15c96:	4b34      	ldr	r3, [pc, #208]	; (15d68 <__aeabi_dmul+0x50c>)
   15c98:	e645      	b.n	15926 <__aeabi_dmul+0xca>
   15c9a:	4b34      	ldr	r3, [pc, #208]	; (15d6c <__aeabi_dmul+0x510>)
   15c9c:	9e04      	ldr	r6, [sp, #16]
   15c9e:	1b9b      	subs	r3, r3, r6
   15ca0:	2b38      	cmp	r3, #56	; 0x38
   15ca2:	dd06      	ble.n	15cb2 <__aeabi_dmul+0x456>
   15ca4:	2301      	movs	r3, #1
   15ca6:	400b      	ands	r3, r1
   15ca8:	2400      	movs	r4, #0
   15caa:	4699      	mov	r9, r3
   15cac:	46a0      	mov	r8, r4
   15cae:	2300      	movs	r3, #0
   15cb0:	e639      	b.n	15926 <__aeabi_dmul+0xca>
   15cb2:	2b1f      	cmp	r3, #31
   15cb4:	dc25      	bgt.n	15d02 <__aeabi_dmul+0x4a6>
   15cb6:	9c04      	ldr	r4, [sp, #16]
   15cb8:	4d2d      	ldr	r5, [pc, #180]	; (15d70 <__aeabi_dmul+0x514>)
   15cba:	4646      	mov	r6, r8
   15cbc:	1960      	adds	r0, r4, r5
   15cbe:	4652      	mov	r2, sl
   15cc0:	4644      	mov	r4, r8
   15cc2:	4086      	lsls	r6, r0
   15cc4:	40dc      	lsrs	r4, r3
   15cc6:	4082      	lsls	r2, r0
   15cc8:	4657      	mov	r7, sl
   15cca:	1c30      	adds	r0, r6, #0
   15ccc:	4322      	orrs	r2, r4
   15cce:	40df      	lsrs	r7, r3
   15cd0:	1e44      	subs	r4, r0, #1
   15cd2:	41a0      	sbcs	r0, r4
   15cd4:	4302      	orrs	r2, r0
   15cd6:	1c3b      	adds	r3, r7, #0
   15cd8:	0754      	lsls	r4, r2, #29
   15cda:	d009      	beq.n	15cf0 <__aeabi_dmul+0x494>
   15cdc:	200f      	movs	r0, #15
   15cde:	4010      	ands	r0, r2
   15ce0:	2804      	cmp	r0, #4
   15ce2:	d005      	beq.n	15cf0 <__aeabi_dmul+0x494>
   15ce4:	1d10      	adds	r0, r2, #4
   15ce6:	4290      	cmp	r0, r2
   15ce8:	4192      	sbcs	r2, r2
   15cea:	4252      	negs	r2, r2
   15cec:	189b      	adds	r3, r3, r2
   15cee:	1c02      	adds	r2, r0, #0
   15cf0:	021d      	lsls	r5, r3, #8
   15cf2:	d51a      	bpl.n	15d2a <__aeabi_dmul+0x4ce>
   15cf4:	2301      	movs	r3, #1
   15cf6:	400b      	ands	r3, r1
   15cf8:	2400      	movs	r4, #0
   15cfa:	4699      	mov	r9, r3
   15cfc:	46a0      	mov	r8, r4
   15cfe:	2301      	movs	r3, #1
   15d00:	e611      	b.n	15926 <__aeabi_dmul+0xca>
   15d02:	481c      	ldr	r0, [pc, #112]	; (15d74 <__aeabi_dmul+0x518>)
   15d04:	9c04      	ldr	r4, [sp, #16]
   15d06:	4655      	mov	r5, sl
   15d08:	1b00      	subs	r0, r0, r4
   15d0a:	40c5      	lsrs	r5, r0
   15d0c:	1c28      	adds	r0, r5, #0
   15d0e:	2b20      	cmp	r3, #32
   15d10:	d016      	beq.n	15d40 <__aeabi_dmul+0x4e4>
   15d12:	4e19      	ldr	r6, [pc, #100]	; (15d78 <__aeabi_dmul+0x51c>)
   15d14:	4657      	mov	r7, sl
   15d16:	19a2      	adds	r2, r4, r6
   15d18:	4097      	lsls	r7, r2
   15d1a:	1c3a      	adds	r2, r7, #0
   15d1c:	4643      	mov	r3, r8
   15d1e:	431a      	orrs	r2, r3
   15d20:	1e53      	subs	r3, r2, #1
   15d22:	419a      	sbcs	r2, r3
   15d24:	4302      	orrs	r2, r0
   15d26:	2300      	movs	r3, #0
   15d28:	e7d6      	b.n	15cd8 <__aeabi_dmul+0x47c>
   15d2a:	0758      	lsls	r0, r3, #29
   15d2c:	025b      	lsls	r3, r3, #9
   15d2e:	08d2      	lsrs	r2, r2, #3
   15d30:	0b1c      	lsrs	r4, r3, #12
   15d32:	2301      	movs	r3, #1
   15d34:	400b      	ands	r3, r1
   15d36:	4310      	orrs	r0, r2
   15d38:	4699      	mov	r9, r3
   15d3a:	4680      	mov	r8, r0
   15d3c:	2300      	movs	r3, #0
   15d3e:	e5f2      	b.n	15926 <__aeabi_dmul+0xca>
   15d40:	2200      	movs	r2, #0
   15d42:	e7eb      	b.n	15d1c <__aeabi_dmul+0x4c0>
   15d44:	2480      	movs	r4, #128	; 0x80
   15d46:	0324      	lsls	r4, r4, #12
   15d48:	4650      	mov	r0, sl
   15d4a:	2301      	movs	r3, #1
   15d4c:	4304      	orrs	r4, r0
   15d4e:	4019      	ands	r1, r3
   15d50:	0324      	lsls	r4, r4, #12
   15d52:	0b24      	lsrs	r4, r4, #12
   15d54:	4689      	mov	r9, r1
   15d56:	4b04      	ldr	r3, [pc, #16]	; (15d68 <__aeabi_dmul+0x50c>)
   15d58:	e5e5      	b.n	15926 <__aeabi_dmul+0xca>
   15d5a:	46c0      	nop			; (mov r8, r8)
   15d5c:	000003ff 	.word	0x000003ff
   15d60:	feffffff 	.word	0xfeffffff
   15d64:	000007fe 	.word	0x000007fe
   15d68:	000007ff 	.word	0x000007ff
   15d6c:	fffffc02 	.word	0xfffffc02
   15d70:	0000041e 	.word	0x0000041e
   15d74:	fffffbe2 	.word	0xfffffbe2
   15d78:	0000043e 	.word	0x0000043e

00015d7c <__aeabi_dsub>:
   15d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d7e:	465f      	mov	r7, fp
   15d80:	4656      	mov	r6, sl
   15d82:	4644      	mov	r4, r8
   15d84:	464d      	mov	r5, r9
   15d86:	b4f0      	push	{r4, r5, r6, r7}
   15d88:	030c      	lsls	r4, r1, #12
   15d8a:	004d      	lsls	r5, r1, #1
   15d8c:	0fcf      	lsrs	r7, r1, #31
   15d8e:	0a61      	lsrs	r1, r4, #9
   15d90:	0f44      	lsrs	r4, r0, #29
   15d92:	4321      	orrs	r1, r4
   15d94:	00c4      	lsls	r4, r0, #3
   15d96:	0318      	lsls	r0, r3, #12
   15d98:	0fde      	lsrs	r6, r3, #31
   15d9a:	4680      	mov	r8, r0
   15d9c:	46b4      	mov	ip, r6
   15d9e:	4646      	mov	r6, r8
   15da0:	0058      	lsls	r0, r3, #1
   15da2:	0a76      	lsrs	r6, r6, #9
   15da4:	0f53      	lsrs	r3, r2, #29
   15da6:	4333      	orrs	r3, r6
   15da8:	00d6      	lsls	r6, r2, #3
   15daa:	4ad1      	ldr	r2, [pc, #836]	; (160f0 <__aeabi_dsub+0x374>)
   15dac:	0d6d      	lsrs	r5, r5, #21
   15dae:	46ba      	mov	sl, r7
   15db0:	0d40      	lsrs	r0, r0, #21
   15db2:	46b3      	mov	fp, r6
   15db4:	4290      	cmp	r0, r2
   15db6:	d100      	bne.n	15dba <__aeabi_dsub+0x3e>
   15db8:	e0f5      	b.n	15fa6 <__aeabi_dsub+0x22a>
   15dba:	4662      	mov	r2, ip
   15dbc:	2601      	movs	r6, #1
   15dbe:	4072      	eors	r2, r6
   15dc0:	4694      	mov	ip, r2
   15dc2:	4567      	cmp	r7, ip
   15dc4:	d100      	bne.n	15dc8 <__aeabi_dsub+0x4c>
   15dc6:	e0ab      	b.n	15f20 <__aeabi_dsub+0x1a4>
   15dc8:	1a2f      	subs	r7, r5, r0
   15dca:	2f00      	cmp	r7, #0
   15dcc:	dc00      	bgt.n	15dd0 <__aeabi_dsub+0x54>
   15dce:	e111      	b.n	15ff4 <__aeabi_dsub+0x278>
   15dd0:	2800      	cmp	r0, #0
   15dd2:	d13e      	bne.n	15e52 <__aeabi_dsub+0xd6>
   15dd4:	4658      	mov	r0, fp
   15dd6:	4318      	orrs	r0, r3
   15dd8:	d000      	beq.n	15ddc <__aeabi_dsub+0x60>
   15dda:	e0f1      	b.n	15fc0 <__aeabi_dsub+0x244>
   15ddc:	0760      	lsls	r0, r4, #29
   15dde:	d100      	bne.n	15de2 <__aeabi_dsub+0x66>
   15de0:	e097      	b.n	15f12 <__aeabi_dsub+0x196>
   15de2:	230f      	movs	r3, #15
   15de4:	4023      	ands	r3, r4
   15de6:	2b04      	cmp	r3, #4
   15de8:	d100      	bne.n	15dec <__aeabi_dsub+0x70>
   15dea:	e122      	b.n	16032 <__aeabi_dsub+0x2b6>
   15dec:	1d22      	adds	r2, r4, #4
   15dee:	42a2      	cmp	r2, r4
   15df0:	41a4      	sbcs	r4, r4
   15df2:	4264      	negs	r4, r4
   15df4:	2380      	movs	r3, #128	; 0x80
   15df6:	1909      	adds	r1, r1, r4
   15df8:	041b      	lsls	r3, r3, #16
   15dfa:	2701      	movs	r7, #1
   15dfc:	4650      	mov	r0, sl
   15dfe:	400b      	ands	r3, r1
   15e00:	4007      	ands	r7, r0
   15e02:	1c14      	adds	r4, r2, #0
   15e04:	2b00      	cmp	r3, #0
   15e06:	d100      	bne.n	15e0a <__aeabi_dsub+0x8e>
   15e08:	e079      	b.n	15efe <__aeabi_dsub+0x182>
   15e0a:	4bb9      	ldr	r3, [pc, #740]	; (160f0 <__aeabi_dsub+0x374>)
   15e0c:	3501      	adds	r5, #1
   15e0e:	429d      	cmp	r5, r3
   15e10:	d100      	bne.n	15e14 <__aeabi_dsub+0x98>
   15e12:	e10b      	b.n	1602c <__aeabi_dsub+0x2b0>
   15e14:	4bb7      	ldr	r3, [pc, #732]	; (160f4 <__aeabi_dsub+0x378>)
   15e16:	08e4      	lsrs	r4, r4, #3
   15e18:	4019      	ands	r1, r3
   15e1a:	0748      	lsls	r0, r1, #29
   15e1c:	0249      	lsls	r1, r1, #9
   15e1e:	4304      	orrs	r4, r0
   15e20:	0b0b      	lsrs	r3, r1, #12
   15e22:	2000      	movs	r0, #0
   15e24:	2100      	movs	r1, #0
   15e26:	031b      	lsls	r3, r3, #12
   15e28:	0b1a      	lsrs	r2, r3, #12
   15e2a:	0d0b      	lsrs	r3, r1, #20
   15e2c:	056d      	lsls	r5, r5, #21
   15e2e:	051b      	lsls	r3, r3, #20
   15e30:	4313      	orrs	r3, r2
   15e32:	086a      	lsrs	r2, r5, #1
   15e34:	4db0      	ldr	r5, [pc, #704]	; (160f8 <__aeabi_dsub+0x37c>)
   15e36:	07ff      	lsls	r7, r7, #31
   15e38:	401d      	ands	r5, r3
   15e3a:	4315      	orrs	r5, r2
   15e3c:	006d      	lsls	r5, r5, #1
   15e3e:	086d      	lsrs	r5, r5, #1
   15e40:	1c29      	adds	r1, r5, #0
   15e42:	4339      	orrs	r1, r7
   15e44:	1c20      	adds	r0, r4, #0
   15e46:	bc3c      	pop	{r2, r3, r4, r5}
   15e48:	4690      	mov	r8, r2
   15e4a:	4699      	mov	r9, r3
   15e4c:	46a2      	mov	sl, r4
   15e4e:	46ab      	mov	fp, r5
   15e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e52:	48a7      	ldr	r0, [pc, #668]	; (160f0 <__aeabi_dsub+0x374>)
   15e54:	4285      	cmp	r5, r0
   15e56:	d0c1      	beq.n	15ddc <__aeabi_dsub+0x60>
   15e58:	2080      	movs	r0, #128	; 0x80
   15e5a:	0400      	lsls	r0, r0, #16
   15e5c:	4303      	orrs	r3, r0
   15e5e:	2f38      	cmp	r7, #56	; 0x38
   15e60:	dd00      	ble.n	15e64 <__aeabi_dsub+0xe8>
   15e62:	e0fd      	b.n	16060 <__aeabi_dsub+0x2e4>
   15e64:	2f1f      	cmp	r7, #31
   15e66:	dd00      	ble.n	15e6a <__aeabi_dsub+0xee>
   15e68:	e131      	b.n	160ce <__aeabi_dsub+0x352>
   15e6a:	2020      	movs	r0, #32
   15e6c:	1bc0      	subs	r0, r0, r7
   15e6e:	1c1a      	adds	r2, r3, #0
   15e70:	465e      	mov	r6, fp
   15e72:	4082      	lsls	r2, r0
   15e74:	40fe      	lsrs	r6, r7
   15e76:	4332      	orrs	r2, r6
   15e78:	4694      	mov	ip, r2
   15e7a:	465a      	mov	r2, fp
   15e7c:	4082      	lsls	r2, r0
   15e7e:	1c10      	adds	r0, r2, #0
   15e80:	1e42      	subs	r2, r0, #1
   15e82:	4190      	sbcs	r0, r2
   15e84:	40fb      	lsrs	r3, r7
   15e86:	4662      	mov	r2, ip
   15e88:	4302      	orrs	r2, r0
   15e8a:	1c1f      	adds	r7, r3, #0
   15e8c:	1aa2      	subs	r2, r4, r2
   15e8e:	4294      	cmp	r4, r2
   15e90:	41a4      	sbcs	r4, r4
   15e92:	4264      	negs	r4, r4
   15e94:	1bc9      	subs	r1, r1, r7
   15e96:	1b09      	subs	r1, r1, r4
   15e98:	1c14      	adds	r4, r2, #0
   15e9a:	020a      	lsls	r2, r1, #8
   15e9c:	d59e      	bpl.n	15ddc <__aeabi_dsub+0x60>
   15e9e:	0249      	lsls	r1, r1, #9
   15ea0:	0a4f      	lsrs	r7, r1, #9
   15ea2:	2f00      	cmp	r7, #0
   15ea4:	d100      	bne.n	15ea8 <__aeabi_dsub+0x12c>
   15ea6:	e0d6      	b.n	16056 <__aeabi_dsub+0x2da>
   15ea8:	1c38      	adds	r0, r7, #0
   15eaa:	f000 fb41 	bl	16530 <__clzsi2>
   15eae:	1c02      	adds	r2, r0, #0
   15eb0:	3a08      	subs	r2, #8
   15eb2:	2a1f      	cmp	r2, #31
   15eb4:	dd00      	ble.n	15eb8 <__aeabi_dsub+0x13c>
   15eb6:	e0c3      	b.n	16040 <__aeabi_dsub+0x2c4>
   15eb8:	2128      	movs	r1, #40	; 0x28
   15eba:	1c23      	adds	r3, r4, #0
   15ebc:	1a09      	subs	r1, r1, r0
   15ebe:	4097      	lsls	r7, r2
   15ec0:	40cb      	lsrs	r3, r1
   15ec2:	431f      	orrs	r7, r3
   15ec4:	4094      	lsls	r4, r2
   15ec6:	4295      	cmp	r5, r2
   15ec8:	dd00      	ble.n	15ecc <__aeabi_dsub+0x150>
   15eca:	e0c0      	b.n	1604e <__aeabi_dsub+0x2d2>
   15ecc:	1b55      	subs	r5, r2, r5
   15ece:	1c69      	adds	r1, r5, #1
   15ed0:	291f      	cmp	r1, #31
   15ed2:	dd00      	ble.n	15ed6 <__aeabi_dsub+0x15a>
   15ed4:	e0ea      	b.n	160ac <__aeabi_dsub+0x330>
   15ed6:	221f      	movs	r2, #31
   15ed8:	1b55      	subs	r5, r2, r5
   15eda:	1c3b      	adds	r3, r7, #0
   15edc:	1c22      	adds	r2, r4, #0
   15ede:	40ab      	lsls	r3, r5
   15ee0:	40ca      	lsrs	r2, r1
   15ee2:	40ac      	lsls	r4, r5
   15ee4:	1e65      	subs	r5, r4, #1
   15ee6:	41ac      	sbcs	r4, r5
   15ee8:	4313      	orrs	r3, r2
   15eea:	40cf      	lsrs	r7, r1
   15eec:	431c      	orrs	r4, r3
   15eee:	1c39      	adds	r1, r7, #0
   15ef0:	2500      	movs	r5, #0
   15ef2:	e773      	b.n	15ddc <__aeabi_dsub+0x60>
   15ef4:	2180      	movs	r1, #128	; 0x80
   15ef6:	4d7e      	ldr	r5, [pc, #504]	; (160f0 <__aeabi_dsub+0x374>)
   15ef8:	2700      	movs	r7, #0
   15efa:	03c9      	lsls	r1, r1, #15
   15efc:	2400      	movs	r4, #0
   15efe:	4b7c      	ldr	r3, [pc, #496]	; (160f0 <__aeabi_dsub+0x374>)
   15f00:	0748      	lsls	r0, r1, #29
   15f02:	08e4      	lsrs	r4, r4, #3
   15f04:	4304      	orrs	r4, r0
   15f06:	08c9      	lsrs	r1, r1, #3
   15f08:	429d      	cmp	r5, r3
   15f0a:	d050      	beq.n	15fae <__aeabi_dsub+0x232>
   15f0c:	0309      	lsls	r1, r1, #12
   15f0e:	0b0b      	lsrs	r3, r1, #12
   15f10:	e787      	b.n	15e22 <__aeabi_dsub+0xa6>
   15f12:	2380      	movs	r3, #128	; 0x80
   15f14:	041b      	lsls	r3, r3, #16
   15f16:	2701      	movs	r7, #1
   15f18:	4652      	mov	r2, sl
   15f1a:	400b      	ands	r3, r1
   15f1c:	4017      	ands	r7, r2
   15f1e:	e771      	b.n	15e04 <__aeabi_dsub+0x88>
   15f20:	1a2a      	subs	r2, r5, r0
   15f22:	4694      	mov	ip, r2
   15f24:	2a00      	cmp	r2, #0
   15f26:	dc00      	bgt.n	15f2a <__aeabi_dsub+0x1ae>
   15f28:	e0a1      	b.n	1606e <__aeabi_dsub+0x2f2>
   15f2a:	2800      	cmp	r0, #0
   15f2c:	d054      	beq.n	15fd8 <__aeabi_dsub+0x25c>
   15f2e:	4870      	ldr	r0, [pc, #448]	; (160f0 <__aeabi_dsub+0x374>)
   15f30:	4285      	cmp	r5, r0
   15f32:	d100      	bne.n	15f36 <__aeabi_dsub+0x1ba>
   15f34:	e752      	b.n	15ddc <__aeabi_dsub+0x60>
   15f36:	2080      	movs	r0, #128	; 0x80
   15f38:	0400      	lsls	r0, r0, #16
   15f3a:	4303      	orrs	r3, r0
   15f3c:	4660      	mov	r0, ip
   15f3e:	2838      	cmp	r0, #56	; 0x38
   15f40:	dd00      	ble.n	15f44 <__aeabi_dsub+0x1c8>
   15f42:	e10e      	b.n	16162 <__aeabi_dsub+0x3e6>
   15f44:	281f      	cmp	r0, #31
   15f46:	dd00      	ble.n	15f4a <__aeabi_dsub+0x1ce>
   15f48:	e157      	b.n	161fa <__aeabi_dsub+0x47e>
   15f4a:	4662      	mov	r2, ip
   15f4c:	2020      	movs	r0, #32
   15f4e:	1a80      	subs	r0, r0, r2
   15f50:	1c1e      	adds	r6, r3, #0
   15f52:	4086      	lsls	r6, r0
   15f54:	46b1      	mov	r9, r6
   15f56:	465e      	mov	r6, fp
   15f58:	40d6      	lsrs	r6, r2
   15f5a:	464a      	mov	r2, r9
   15f5c:	4332      	orrs	r2, r6
   15f5e:	465e      	mov	r6, fp
   15f60:	4086      	lsls	r6, r0
   15f62:	4690      	mov	r8, r2
   15f64:	1c30      	adds	r0, r6, #0
   15f66:	1e42      	subs	r2, r0, #1
   15f68:	4190      	sbcs	r0, r2
   15f6a:	4642      	mov	r2, r8
   15f6c:	4302      	orrs	r2, r0
   15f6e:	4660      	mov	r0, ip
   15f70:	40c3      	lsrs	r3, r0
   15f72:	1912      	adds	r2, r2, r4
   15f74:	42a2      	cmp	r2, r4
   15f76:	41a4      	sbcs	r4, r4
   15f78:	4264      	negs	r4, r4
   15f7a:	1859      	adds	r1, r3, r1
   15f7c:	1909      	adds	r1, r1, r4
   15f7e:	1c14      	adds	r4, r2, #0
   15f80:	0208      	lsls	r0, r1, #8
   15f82:	d400      	bmi.n	15f86 <__aeabi_dsub+0x20a>
   15f84:	e72a      	b.n	15ddc <__aeabi_dsub+0x60>
   15f86:	4b5a      	ldr	r3, [pc, #360]	; (160f0 <__aeabi_dsub+0x374>)
   15f88:	3501      	adds	r5, #1
   15f8a:	429d      	cmp	r5, r3
   15f8c:	d100      	bne.n	15f90 <__aeabi_dsub+0x214>
   15f8e:	e131      	b.n	161f4 <__aeabi_dsub+0x478>
   15f90:	4b58      	ldr	r3, [pc, #352]	; (160f4 <__aeabi_dsub+0x378>)
   15f92:	0860      	lsrs	r0, r4, #1
   15f94:	4019      	ands	r1, r3
   15f96:	2301      	movs	r3, #1
   15f98:	4023      	ands	r3, r4
   15f9a:	1c1c      	adds	r4, r3, #0
   15f9c:	4304      	orrs	r4, r0
   15f9e:	07cb      	lsls	r3, r1, #31
   15fa0:	431c      	orrs	r4, r3
   15fa2:	0849      	lsrs	r1, r1, #1
   15fa4:	e71a      	b.n	15ddc <__aeabi_dsub+0x60>
   15fa6:	431e      	orrs	r6, r3
   15fa8:	d000      	beq.n	15fac <__aeabi_dsub+0x230>
   15faa:	e70a      	b.n	15dc2 <__aeabi_dsub+0x46>
   15fac:	e705      	b.n	15dba <__aeabi_dsub+0x3e>
   15fae:	1c23      	adds	r3, r4, #0
   15fb0:	430b      	orrs	r3, r1
   15fb2:	d03b      	beq.n	1602c <__aeabi_dsub+0x2b0>
   15fb4:	2380      	movs	r3, #128	; 0x80
   15fb6:	031b      	lsls	r3, r3, #12
   15fb8:	430b      	orrs	r3, r1
   15fba:	031b      	lsls	r3, r3, #12
   15fbc:	0b1b      	lsrs	r3, r3, #12
   15fbe:	e730      	b.n	15e22 <__aeabi_dsub+0xa6>
   15fc0:	3f01      	subs	r7, #1
   15fc2:	2f00      	cmp	r7, #0
   15fc4:	d16d      	bne.n	160a2 <__aeabi_dsub+0x326>
   15fc6:	465e      	mov	r6, fp
   15fc8:	1ba2      	subs	r2, r4, r6
   15fca:	4294      	cmp	r4, r2
   15fcc:	41a4      	sbcs	r4, r4
   15fce:	4264      	negs	r4, r4
   15fd0:	1ac9      	subs	r1, r1, r3
   15fd2:	1b09      	subs	r1, r1, r4
   15fd4:	1c14      	adds	r4, r2, #0
   15fd6:	e760      	b.n	15e9a <__aeabi_dsub+0x11e>
   15fd8:	4658      	mov	r0, fp
   15fda:	4318      	orrs	r0, r3
   15fdc:	d100      	bne.n	15fe0 <__aeabi_dsub+0x264>
   15fde:	e6fd      	b.n	15ddc <__aeabi_dsub+0x60>
   15fe0:	2601      	movs	r6, #1
   15fe2:	4276      	negs	r6, r6
   15fe4:	44b4      	add	ip, r6
   15fe6:	4660      	mov	r0, ip
   15fe8:	2800      	cmp	r0, #0
   15fea:	d000      	beq.n	15fee <__aeabi_dsub+0x272>
   15fec:	e0d0      	b.n	16190 <__aeabi_dsub+0x414>
   15fee:	465e      	mov	r6, fp
   15ff0:	1932      	adds	r2, r6, r4
   15ff2:	e7bf      	b.n	15f74 <__aeabi_dsub+0x1f8>
   15ff4:	2f00      	cmp	r7, #0
   15ff6:	d000      	beq.n	15ffa <__aeabi_dsub+0x27e>
   15ff8:	e080      	b.n	160fc <__aeabi_dsub+0x380>
   15ffa:	1c68      	adds	r0, r5, #1
   15ffc:	0540      	lsls	r0, r0, #21
   15ffe:	0d40      	lsrs	r0, r0, #21
   16000:	2801      	cmp	r0, #1
   16002:	dc00      	bgt.n	16006 <__aeabi_dsub+0x28a>
   16004:	e0e8      	b.n	161d8 <__aeabi_dsub+0x45c>
   16006:	465a      	mov	r2, fp
   16008:	1aa2      	subs	r2, r4, r2
   1600a:	4294      	cmp	r4, r2
   1600c:	41bf      	sbcs	r7, r7
   1600e:	1ac8      	subs	r0, r1, r3
   16010:	427f      	negs	r7, r7
   16012:	1bc7      	subs	r7, r0, r7
   16014:	023e      	lsls	r6, r7, #8
   16016:	d400      	bmi.n	1601a <__aeabi_dsub+0x29e>
   16018:	e098      	b.n	1614c <__aeabi_dsub+0x3d0>
   1601a:	4658      	mov	r0, fp
   1601c:	1b04      	subs	r4, r0, r4
   1601e:	45a3      	cmp	fp, r4
   16020:	4192      	sbcs	r2, r2
   16022:	1a59      	subs	r1, r3, r1
   16024:	4252      	negs	r2, r2
   16026:	1a8f      	subs	r7, r1, r2
   16028:	46e2      	mov	sl, ip
   1602a:	e73a      	b.n	15ea2 <__aeabi_dsub+0x126>
   1602c:	2300      	movs	r3, #0
   1602e:	2400      	movs	r4, #0
   16030:	e6f7      	b.n	15e22 <__aeabi_dsub+0xa6>
   16032:	2380      	movs	r3, #128	; 0x80
   16034:	041b      	lsls	r3, r3, #16
   16036:	2701      	movs	r7, #1
   16038:	4656      	mov	r6, sl
   1603a:	400b      	ands	r3, r1
   1603c:	4037      	ands	r7, r6
   1603e:	e6e1      	b.n	15e04 <__aeabi_dsub+0x88>
   16040:	1c27      	adds	r7, r4, #0
   16042:	3828      	subs	r0, #40	; 0x28
   16044:	4087      	lsls	r7, r0
   16046:	2400      	movs	r4, #0
   16048:	4295      	cmp	r5, r2
   1604a:	dc00      	bgt.n	1604e <__aeabi_dsub+0x2d2>
   1604c:	e73e      	b.n	15ecc <__aeabi_dsub+0x150>
   1604e:	4929      	ldr	r1, [pc, #164]	; (160f4 <__aeabi_dsub+0x378>)
   16050:	1aad      	subs	r5, r5, r2
   16052:	4039      	ands	r1, r7
   16054:	e6c2      	b.n	15ddc <__aeabi_dsub+0x60>
   16056:	1c20      	adds	r0, r4, #0
   16058:	f000 fa6a 	bl	16530 <__clzsi2>
   1605c:	3020      	adds	r0, #32
   1605e:	e726      	b.n	15eae <__aeabi_dsub+0x132>
   16060:	465a      	mov	r2, fp
   16062:	431a      	orrs	r2, r3
   16064:	1e53      	subs	r3, r2, #1
   16066:	419a      	sbcs	r2, r3
   16068:	b2d2      	uxtb	r2, r2
   1606a:	2700      	movs	r7, #0
   1606c:	e70e      	b.n	15e8c <__aeabi_dsub+0x110>
   1606e:	2a00      	cmp	r2, #0
   16070:	d000      	beq.n	16074 <__aeabi_dsub+0x2f8>
   16072:	e0de      	b.n	16232 <__aeabi_dsub+0x4b6>
   16074:	1c68      	adds	r0, r5, #1
   16076:	0546      	lsls	r6, r0, #21
   16078:	0d76      	lsrs	r6, r6, #21
   1607a:	2e01      	cmp	r6, #1
   1607c:	dc00      	bgt.n	16080 <__aeabi_dsub+0x304>
   1607e:	e090      	b.n	161a2 <__aeabi_dsub+0x426>
   16080:	4d1b      	ldr	r5, [pc, #108]	; (160f0 <__aeabi_dsub+0x374>)
   16082:	42a8      	cmp	r0, r5
   16084:	d100      	bne.n	16088 <__aeabi_dsub+0x30c>
   16086:	e0f5      	b.n	16274 <__aeabi_dsub+0x4f8>
   16088:	465e      	mov	r6, fp
   1608a:	1932      	adds	r2, r6, r4
   1608c:	42a2      	cmp	r2, r4
   1608e:	41a4      	sbcs	r4, r4
   16090:	4264      	negs	r4, r4
   16092:	1859      	adds	r1, r3, r1
   16094:	1909      	adds	r1, r1, r4
   16096:	07cc      	lsls	r4, r1, #31
   16098:	0852      	lsrs	r2, r2, #1
   1609a:	4314      	orrs	r4, r2
   1609c:	0849      	lsrs	r1, r1, #1
   1609e:	1c05      	adds	r5, r0, #0
   160a0:	e69c      	b.n	15ddc <__aeabi_dsub+0x60>
   160a2:	4813      	ldr	r0, [pc, #76]	; (160f0 <__aeabi_dsub+0x374>)
   160a4:	4285      	cmp	r5, r0
   160a6:	d000      	beq.n	160aa <__aeabi_dsub+0x32e>
   160a8:	e6d9      	b.n	15e5e <__aeabi_dsub+0xe2>
   160aa:	e697      	b.n	15ddc <__aeabi_dsub+0x60>
   160ac:	1c2b      	adds	r3, r5, #0
   160ae:	3b1f      	subs	r3, #31
   160b0:	1c3e      	adds	r6, r7, #0
   160b2:	40de      	lsrs	r6, r3
   160b4:	1c33      	adds	r3, r6, #0
   160b6:	2920      	cmp	r1, #32
   160b8:	d06f      	beq.n	1619a <__aeabi_dsub+0x41e>
   160ba:	223f      	movs	r2, #63	; 0x3f
   160bc:	1b55      	subs	r5, r2, r5
   160be:	40af      	lsls	r7, r5
   160c0:	433c      	orrs	r4, r7
   160c2:	1e60      	subs	r0, r4, #1
   160c4:	4184      	sbcs	r4, r0
   160c6:	431c      	orrs	r4, r3
   160c8:	2100      	movs	r1, #0
   160ca:	2500      	movs	r5, #0
   160cc:	e686      	b.n	15ddc <__aeabi_dsub+0x60>
   160ce:	1c38      	adds	r0, r7, #0
   160d0:	3820      	subs	r0, #32
   160d2:	1c1e      	adds	r6, r3, #0
   160d4:	40c6      	lsrs	r6, r0
   160d6:	1c30      	adds	r0, r6, #0
   160d8:	2f20      	cmp	r7, #32
   160da:	d060      	beq.n	1619e <__aeabi_dsub+0x422>
   160dc:	2240      	movs	r2, #64	; 0x40
   160de:	1bd7      	subs	r7, r2, r7
   160e0:	40bb      	lsls	r3, r7
   160e2:	465a      	mov	r2, fp
   160e4:	431a      	orrs	r2, r3
   160e6:	1e53      	subs	r3, r2, #1
   160e8:	419a      	sbcs	r2, r3
   160ea:	4302      	orrs	r2, r0
   160ec:	2700      	movs	r7, #0
   160ee:	e6cd      	b.n	15e8c <__aeabi_dsub+0x110>
   160f0:	000007ff 	.word	0x000007ff
   160f4:	ff7fffff 	.word	0xff7fffff
   160f8:	800fffff 	.word	0x800fffff
   160fc:	2d00      	cmp	r5, #0
   160fe:	d037      	beq.n	16170 <__aeabi_dsub+0x3f4>
   16100:	4db6      	ldr	r5, [pc, #728]	; (163dc <__aeabi_dsub+0x660>)
   16102:	42a8      	cmp	r0, r5
   16104:	d100      	bne.n	16108 <__aeabi_dsub+0x38c>
   16106:	e08f      	b.n	16228 <__aeabi_dsub+0x4ac>
   16108:	2580      	movs	r5, #128	; 0x80
   1610a:	042d      	lsls	r5, r5, #16
   1610c:	427f      	negs	r7, r7
   1610e:	4329      	orrs	r1, r5
   16110:	2f38      	cmp	r7, #56	; 0x38
   16112:	dd00      	ble.n	16116 <__aeabi_dsub+0x39a>
   16114:	e0a8      	b.n	16268 <__aeabi_dsub+0x4ec>
   16116:	2f1f      	cmp	r7, #31
   16118:	dd00      	ble.n	1611c <__aeabi_dsub+0x3a0>
   1611a:	e124      	b.n	16366 <__aeabi_dsub+0x5ea>
   1611c:	2520      	movs	r5, #32
   1611e:	1bed      	subs	r5, r5, r7
   16120:	1c0e      	adds	r6, r1, #0
   16122:	40ae      	lsls	r6, r5
   16124:	46b0      	mov	r8, r6
   16126:	1c26      	adds	r6, r4, #0
   16128:	40fe      	lsrs	r6, r7
   1612a:	4642      	mov	r2, r8
   1612c:	40ac      	lsls	r4, r5
   1612e:	4316      	orrs	r6, r2
   16130:	1e65      	subs	r5, r4, #1
   16132:	41ac      	sbcs	r4, r5
   16134:	4334      	orrs	r4, r6
   16136:	40f9      	lsrs	r1, r7
   16138:	465a      	mov	r2, fp
   1613a:	1b14      	subs	r4, r2, r4
   1613c:	45a3      	cmp	fp, r4
   1613e:	4192      	sbcs	r2, r2
   16140:	1a5b      	subs	r3, r3, r1
   16142:	4252      	negs	r2, r2
   16144:	1a99      	subs	r1, r3, r2
   16146:	1c05      	adds	r5, r0, #0
   16148:	46e2      	mov	sl, ip
   1614a:	e6a6      	b.n	15e9a <__aeabi_dsub+0x11e>
   1614c:	1c13      	adds	r3, r2, #0
   1614e:	433b      	orrs	r3, r7
   16150:	1c14      	adds	r4, r2, #0
   16152:	2b00      	cmp	r3, #0
   16154:	d000      	beq.n	16158 <__aeabi_dsub+0x3dc>
   16156:	e6a4      	b.n	15ea2 <__aeabi_dsub+0x126>
   16158:	2700      	movs	r7, #0
   1615a:	2100      	movs	r1, #0
   1615c:	2500      	movs	r5, #0
   1615e:	2400      	movs	r4, #0
   16160:	e6cd      	b.n	15efe <__aeabi_dsub+0x182>
   16162:	465a      	mov	r2, fp
   16164:	431a      	orrs	r2, r3
   16166:	1e53      	subs	r3, r2, #1
   16168:	419a      	sbcs	r2, r3
   1616a:	b2d2      	uxtb	r2, r2
   1616c:	2300      	movs	r3, #0
   1616e:	e700      	b.n	15f72 <__aeabi_dsub+0x1f6>
   16170:	1c0d      	adds	r5, r1, #0
   16172:	4325      	orrs	r5, r4
   16174:	d058      	beq.n	16228 <__aeabi_dsub+0x4ac>
   16176:	43ff      	mvns	r7, r7
   16178:	2f00      	cmp	r7, #0
   1617a:	d151      	bne.n	16220 <__aeabi_dsub+0x4a4>
   1617c:	465a      	mov	r2, fp
   1617e:	1b14      	subs	r4, r2, r4
   16180:	45a3      	cmp	fp, r4
   16182:	4192      	sbcs	r2, r2
   16184:	1a59      	subs	r1, r3, r1
   16186:	4252      	negs	r2, r2
   16188:	1a89      	subs	r1, r1, r2
   1618a:	1c05      	adds	r5, r0, #0
   1618c:	46e2      	mov	sl, ip
   1618e:	e684      	b.n	15e9a <__aeabi_dsub+0x11e>
   16190:	4892      	ldr	r0, [pc, #584]	; (163dc <__aeabi_dsub+0x660>)
   16192:	4285      	cmp	r5, r0
   16194:	d000      	beq.n	16198 <__aeabi_dsub+0x41c>
   16196:	e6d1      	b.n	15f3c <__aeabi_dsub+0x1c0>
   16198:	e620      	b.n	15ddc <__aeabi_dsub+0x60>
   1619a:	2700      	movs	r7, #0
   1619c:	e790      	b.n	160c0 <__aeabi_dsub+0x344>
   1619e:	2300      	movs	r3, #0
   161a0:	e79f      	b.n	160e2 <__aeabi_dsub+0x366>
   161a2:	1c08      	adds	r0, r1, #0
   161a4:	4320      	orrs	r0, r4
   161a6:	2d00      	cmp	r5, #0
   161a8:	d000      	beq.n	161ac <__aeabi_dsub+0x430>
   161aa:	e0c2      	b.n	16332 <__aeabi_dsub+0x5b6>
   161ac:	2800      	cmp	r0, #0
   161ae:	d100      	bne.n	161b2 <__aeabi_dsub+0x436>
   161b0:	e0ef      	b.n	16392 <__aeabi_dsub+0x616>
   161b2:	4658      	mov	r0, fp
   161b4:	4318      	orrs	r0, r3
   161b6:	d100      	bne.n	161ba <__aeabi_dsub+0x43e>
   161b8:	e610      	b.n	15ddc <__aeabi_dsub+0x60>
   161ba:	4658      	mov	r0, fp
   161bc:	1902      	adds	r2, r0, r4
   161be:	42a2      	cmp	r2, r4
   161c0:	41a4      	sbcs	r4, r4
   161c2:	4264      	negs	r4, r4
   161c4:	1859      	adds	r1, r3, r1
   161c6:	1909      	adds	r1, r1, r4
   161c8:	1c14      	adds	r4, r2, #0
   161ca:	020a      	lsls	r2, r1, #8
   161cc:	d400      	bmi.n	161d0 <__aeabi_dsub+0x454>
   161ce:	e605      	b.n	15ddc <__aeabi_dsub+0x60>
   161d0:	4b83      	ldr	r3, [pc, #524]	; (163e0 <__aeabi_dsub+0x664>)
   161d2:	2501      	movs	r5, #1
   161d4:	4019      	ands	r1, r3
   161d6:	e601      	b.n	15ddc <__aeabi_dsub+0x60>
   161d8:	1c08      	adds	r0, r1, #0
   161da:	4320      	orrs	r0, r4
   161dc:	2d00      	cmp	r5, #0
   161de:	d138      	bne.n	16252 <__aeabi_dsub+0x4d6>
   161e0:	2800      	cmp	r0, #0
   161e2:	d16f      	bne.n	162c4 <__aeabi_dsub+0x548>
   161e4:	4659      	mov	r1, fp
   161e6:	4319      	orrs	r1, r3
   161e8:	d003      	beq.n	161f2 <__aeabi_dsub+0x476>
   161ea:	1c19      	adds	r1, r3, #0
   161ec:	465c      	mov	r4, fp
   161ee:	46e2      	mov	sl, ip
   161f0:	e5f4      	b.n	15ddc <__aeabi_dsub+0x60>
   161f2:	2700      	movs	r7, #0
   161f4:	2100      	movs	r1, #0
   161f6:	2400      	movs	r4, #0
   161f8:	e681      	b.n	15efe <__aeabi_dsub+0x182>
   161fa:	4660      	mov	r0, ip
   161fc:	3820      	subs	r0, #32
   161fe:	1c1a      	adds	r2, r3, #0
   16200:	40c2      	lsrs	r2, r0
   16202:	4666      	mov	r6, ip
   16204:	1c10      	adds	r0, r2, #0
   16206:	2e20      	cmp	r6, #32
   16208:	d100      	bne.n	1620c <__aeabi_dsub+0x490>
   1620a:	e0aa      	b.n	16362 <__aeabi_dsub+0x5e6>
   1620c:	2240      	movs	r2, #64	; 0x40
   1620e:	1b92      	subs	r2, r2, r6
   16210:	4093      	lsls	r3, r2
   16212:	465a      	mov	r2, fp
   16214:	431a      	orrs	r2, r3
   16216:	1e53      	subs	r3, r2, #1
   16218:	419a      	sbcs	r2, r3
   1621a:	4302      	orrs	r2, r0
   1621c:	2300      	movs	r3, #0
   1621e:	e6a8      	b.n	15f72 <__aeabi_dsub+0x1f6>
   16220:	4d6e      	ldr	r5, [pc, #440]	; (163dc <__aeabi_dsub+0x660>)
   16222:	42a8      	cmp	r0, r5
   16224:	d000      	beq.n	16228 <__aeabi_dsub+0x4ac>
   16226:	e773      	b.n	16110 <__aeabi_dsub+0x394>
   16228:	1c19      	adds	r1, r3, #0
   1622a:	465c      	mov	r4, fp
   1622c:	1c05      	adds	r5, r0, #0
   1622e:	46e2      	mov	sl, ip
   16230:	e5d4      	b.n	15ddc <__aeabi_dsub+0x60>
   16232:	2d00      	cmp	r5, #0
   16234:	d122      	bne.n	1627c <__aeabi_dsub+0x500>
   16236:	1c0d      	adds	r5, r1, #0
   16238:	4325      	orrs	r5, r4
   1623a:	d076      	beq.n	1632a <__aeabi_dsub+0x5ae>
   1623c:	43d5      	mvns	r5, r2
   1623e:	2d00      	cmp	r5, #0
   16240:	d170      	bne.n	16324 <__aeabi_dsub+0x5a8>
   16242:	445c      	add	r4, fp
   16244:	455c      	cmp	r4, fp
   16246:	4192      	sbcs	r2, r2
   16248:	1859      	adds	r1, r3, r1
   1624a:	4252      	negs	r2, r2
   1624c:	1889      	adds	r1, r1, r2
   1624e:	1c05      	adds	r5, r0, #0
   16250:	e696      	b.n	15f80 <__aeabi_dsub+0x204>
   16252:	2800      	cmp	r0, #0
   16254:	d14c      	bne.n	162f0 <__aeabi_dsub+0x574>
   16256:	4659      	mov	r1, fp
   16258:	4319      	orrs	r1, r3
   1625a:	d100      	bne.n	1625e <__aeabi_dsub+0x4e2>
   1625c:	e64a      	b.n	15ef4 <__aeabi_dsub+0x178>
   1625e:	1c19      	adds	r1, r3, #0
   16260:	465c      	mov	r4, fp
   16262:	46e2      	mov	sl, ip
   16264:	4d5d      	ldr	r5, [pc, #372]	; (163dc <__aeabi_dsub+0x660>)
   16266:	e5b9      	b.n	15ddc <__aeabi_dsub+0x60>
   16268:	430c      	orrs	r4, r1
   1626a:	1e61      	subs	r1, r4, #1
   1626c:	418c      	sbcs	r4, r1
   1626e:	b2e4      	uxtb	r4, r4
   16270:	2100      	movs	r1, #0
   16272:	e761      	b.n	16138 <__aeabi_dsub+0x3bc>
   16274:	1c05      	adds	r5, r0, #0
   16276:	2100      	movs	r1, #0
   16278:	2400      	movs	r4, #0
   1627a:	e640      	b.n	15efe <__aeabi_dsub+0x182>
   1627c:	4d57      	ldr	r5, [pc, #348]	; (163dc <__aeabi_dsub+0x660>)
   1627e:	42a8      	cmp	r0, r5
   16280:	d053      	beq.n	1632a <__aeabi_dsub+0x5ae>
   16282:	4255      	negs	r5, r2
   16284:	2280      	movs	r2, #128	; 0x80
   16286:	0416      	lsls	r6, r2, #16
   16288:	4331      	orrs	r1, r6
   1628a:	2d38      	cmp	r5, #56	; 0x38
   1628c:	dc7b      	bgt.n	16386 <__aeabi_dsub+0x60a>
   1628e:	2d1f      	cmp	r5, #31
   16290:	dd00      	ble.n	16294 <__aeabi_dsub+0x518>
   16292:	e08c      	b.n	163ae <__aeabi_dsub+0x632>
   16294:	2220      	movs	r2, #32
   16296:	1b56      	subs	r6, r2, r5
   16298:	1c0a      	adds	r2, r1, #0
   1629a:	46b4      	mov	ip, r6
   1629c:	40b2      	lsls	r2, r6
   1629e:	1c26      	adds	r6, r4, #0
   162a0:	40ee      	lsrs	r6, r5
   162a2:	4332      	orrs	r2, r6
   162a4:	4690      	mov	r8, r2
   162a6:	4662      	mov	r2, ip
   162a8:	4094      	lsls	r4, r2
   162aa:	1e66      	subs	r6, r4, #1
   162ac:	41b4      	sbcs	r4, r6
   162ae:	4642      	mov	r2, r8
   162b0:	4314      	orrs	r4, r2
   162b2:	40e9      	lsrs	r1, r5
   162b4:	445c      	add	r4, fp
   162b6:	455c      	cmp	r4, fp
   162b8:	4192      	sbcs	r2, r2
   162ba:	18cb      	adds	r3, r1, r3
   162bc:	4252      	negs	r2, r2
   162be:	1899      	adds	r1, r3, r2
   162c0:	1c05      	adds	r5, r0, #0
   162c2:	e65d      	b.n	15f80 <__aeabi_dsub+0x204>
   162c4:	4658      	mov	r0, fp
   162c6:	4318      	orrs	r0, r3
   162c8:	d100      	bne.n	162cc <__aeabi_dsub+0x550>
   162ca:	e587      	b.n	15ddc <__aeabi_dsub+0x60>
   162cc:	465e      	mov	r6, fp
   162ce:	1ba7      	subs	r7, r4, r6
   162d0:	42bc      	cmp	r4, r7
   162d2:	4192      	sbcs	r2, r2
   162d4:	1ac8      	subs	r0, r1, r3
   162d6:	4252      	negs	r2, r2
   162d8:	1a80      	subs	r0, r0, r2
   162da:	0206      	lsls	r6, r0, #8
   162dc:	d560      	bpl.n	163a0 <__aeabi_dsub+0x624>
   162de:	4658      	mov	r0, fp
   162e0:	1b04      	subs	r4, r0, r4
   162e2:	45a3      	cmp	fp, r4
   162e4:	4192      	sbcs	r2, r2
   162e6:	1a59      	subs	r1, r3, r1
   162e8:	4252      	negs	r2, r2
   162ea:	1a89      	subs	r1, r1, r2
   162ec:	46e2      	mov	sl, ip
   162ee:	e575      	b.n	15ddc <__aeabi_dsub+0x60>
   162f0:	4658      	mov	r0, fp
   162f2:	4318      	orrs	r0, r3
   162f4:	d033      	beq.n	1635e <__aeabi_dsub+0x5e2>
   162f6:	0748      	lsls	r0, r1, #29
   162f8:	08e4      	lsrs	r4, r4, #3
   162fa:	4304      	orrs	r4, r0
   162fc:	2080      	movs	r0, #128	; 0x80
   162fe:	08c9      	lsrs	r1, r1, #3
   16300:	0300      	lsls	r0, r0, #12
   16302:	4201      	tst	r1, r0
   16304:	d008      	beq.n	16318 <__aeabi_dsub+0x59c>
   16306:	08dd      	lsrs	r5, r3, #3
   16308:	4205      	tst	r5, r0
   1630a:	d105      	bne.n	16318 <__aeabi_dsub+0x59c>
   1630c:	4659      	mov	r1, fp
   1630e:	08ca      	lsrs	r2, r1, #3
   16310:	075c      	lsls	r4, r3, #29
   16312:	4314      	orrs	r4, r2
   16314:	1c29      	adds	r1, r5, #0
   16316:	46e2      	mov	sl, ip
   16318:	0f63      	lsrs	r3, r4, #29
   1631a:	00c9      	lsls	r1, r1, #3
   1631c:	4319      	orrs	r1, r3
   1631e:	00e4      	lsls	r4, r4, #3
   16320:	4d2e      	ldr	r5, [pc, #184]	; (163dc <__aeabi_dsub+0x660>)
   16322:	e55b      	b.n	15ddc <__aeabi_dsub+0x60>
   16324:	4a2d      	ldr	r2, [pc, #180]	; (163dc <__aeabi_dsub+0x660>)
   16326:	4290      	cmp	r0, r2
   16328:	d1af      	bne.n	1628a <__aeabi_dsub+0x50e>
   1632a:	1c19      	adds	r1, r3, #0
   1632c:	465c      	mov	r4, fp
   1632e:	1c05      	adds	r5, r0, #0
   16330:	e554      	b.n	15ddc <__aeabi_dsub+0x60>
   16332:	2800      	cmp	r0, #0
   16334:	d030      	beq.n	16398 <__aeabi_dsub+0x61c>
   16336:	4658      	mov	r0, fp
   16338:	4318      	orrs	r0, r3
   1633a:	d010      	beq.n	1635e <__aeabi_dsub+0x5e2>
   1633c:	2580      	movs	r5, #128	; 0x80
   1633e:	0748      	lsls	r0, r1, #29
   16340:	08e4      	lsrs	r4, r4, #3
   16342:	08c9      	lsrs	r1, r1, #3
   16344:	032d      	lsls	r5, r5, #12
   16346:	4304      	orrs	r4, r0
   16348:	4229      	tst	r1, r5
   1634a:	d0e5      	beq.n	16318 <__aeabi_dsub+0x59c>
   1634c:	08d8      	lsrs	r0, r3, #3
   1634e:	4228      	tst	r0, r5
   16350:	d1e2      	bne.n	16318 <__aeabi_dsub+0x59c>
   16352:	465d      	mov	r5, fp
   16354:	08ea      	lsrs	r2, r5, #3
   16356:	075c      	lsls	r4, r3, #29
   16358:	4314      	orrs	r4, r2
   1635a:	1c01      	adds	r1, r0, #0
   1635c:	e7dc      	b.n	16318 <__aeabi_dsub+0x59c>
   1635e:	4d1f      	ldr	r5, [pc, #124]	; (163dc <__aeabi_dsub+0x660>)
   16360:	e53c      	b.n	15ddc <__aeabi_dsub+0x60>
   16362:	2300      	movs	r3, #0
   16364:	e755      	b.n	16212 <__aeabi_dsub+0x496>
   16366:	1c3d      	adds	r5, r7, #0
   16368:	3d20      	subs	r5, #32
   1636a:	1c0e      	adds	r6, r1, #0
   1636c:	40ee      	lsrs	r6, r5
   1636e:	1c35      	adds	r5, r6, #0
   16370:	2f20      	cmp	r7, #32
   16372:	d02e      	beq.n	163d2 <__aeabi_dsub+0x656>
   16374:	2640      	movs	r6, #64	; 0x40
   16376:	1bf7      	subs	r7, r6, r7
   16378:	40b9      	lsls	r1, r7
   1637a:	430c      	orrs	r4, r1
   1637c:	1e61      	subs	r1, r4, #1
   1637e:	418c      	sbcs	r4, r1
   16380:	432c      	orrs	r4, r5
   16382:	2100      	movs	r1, #0
   16384:	e6d8      	b.n	16138 <__aeabi_dsub+0x3bc>
   16386:	430c      	orrs	r4, r1
   16388:	1e61      	subs	r1, r4, #1
   1638a:	418c      	sbcs	r4, r1
   1638c:	b2e4      	uxtb	r4, r4
   1638e:	2100      	movs	r1, #0
   16390:	e790      	b.n	162b4 <__aeabi_dsub+0x538>
   16392:	1c19      	adds	r1, r3, #0
   16394:	465c      	mov	r4, fp
   16396:	e521      	b.n	15ddc <__aeabi_dsub+0x60>
   16398:	1c19      	adds	r1, r3, #0
   1639a:	465c      	mov	r4, fp
   1639c:	4d0f      	ldr	r5, [pc, #60]	; (163dc <__aeabi_dsub+0x660>)
   1639e:	e51d      	b.n	15ddc <__aeabi_dsub+0x60>
   163a0:	1c03      	adds	r3, r0, #0
   163a2:	433b      	orrs	r3, r7
   163a4:	d100      	bne.n	163a8 <__aeabi_dsub+0x62c>
   163a6:	e724      	b.n	161f2 <__aeabi_dsub+0x476>
   163a8:	1c01      	adds	r1, r0, #0
   163aa:	1c3c      	adds	r4, r7, #0
   163ac:	e516      	b.n	15ddc <__aeabi_dsub+0x60>
   163ae:	2620      	movs	r6, #32
   163b0:	4276      	negs	r6, r6
   163b2:	1976      	adds	r6, r6, r5
   163b4:	1c0a      	adds	r2, r1, #0
   163b6:	40f2      	lsrs	r2, r6
   163b8:	4690      	mov	r8, r2
   163ba:	2d20      	cmp	r5, #32
   163bc:	d00b      	beq.n	163d6 <__aeabi_dsub+0x65a>
   163be:	2640      	movs	r6, #64	; 0x40
   163c0:	1b75      	subs	r5, r6, r5
   163c2:	40a9      	lsls	r1, r5
   163c4:	430c      	orrs	r4, r1
   163c6:	1e61      	subs	r1, r4, #1
   163c8:	418c      	sbcs	r4, r1
   163ca:	4645      	mov	r5, r8
   163cc:	432c      	orrs	r4, r5
   163ce:	2100      	movs	r1, #0
   163d0:	e770      	b.n	162b4 <__aeabi_dsub+0x538>
   163d2:	2100      	movs	r1, #0
   163d4:	e7d1      	b.n	1637a <__aeabi_dsub+0x5fe>
   163d6:	2100      	movs	r1, #0
   163d8:	e7f4      	b.n	163c4 <__aeabi_dsub+0x648>
   163da:	46c0      	nop			; (mov r8, r8)
   163dc:	000007ff 	.word	0x000007ff
   163e0:	ff7fffff 	.word	0xff7fffff

000163e4 <__aeabi_d2iz>:
   163e4:	b570      	push	{r4, r5, r6, lr}
   163e6:	1c0b      	adds	r3, r1, #0
   163e8:	4c12      	ldr	r4, [pc, #72]	; (16434 <__aeabi_d2iz+0x50>)
   163ea:	0309      	lsls	r1, r1, #12
   163ec:	0b0e      	lsrs	r6, r1, #12
   163ee:	0059      	lsls	r1, r3, #1
   163f0:	1c02      	adds	r2, r0, #0
   163f2:	0d49      	lsrs	r1, r1, #21
   163f4:	0fdd      	lsrs	r5, r3, #31
   163f6:	2000      	movs	r0, #0
   163f8:	42a1      	cmp	r1, r4
   163fa:	dd11      	ble.n	16420 <__aeabi_d2iz+0x3c>
   163fc:	480e      	ldr	r0, [pc, #56]	; (16438 <__aeabi_d2iz+0x54>)
   163fe:	4281      	cmp	r1, r0
   16400:	dc0f      	bgt.n	16422 <__aeabi_d2iz+0x3e>
   16402:	2080      	movs	r0, #128	; 0x80
   16404:	0340      	lsls	r0, r0, #13
   16406:	4306      	orrs	r6, r0
   16408:	480c      	ldr	r0, [pc, #48]	; (1643c <__aeabi_d2iz+0x58>)
   1640a:	1a40      	subs	r0, r0, r1
   1640c:	281f      	cmp	r0, #31
   1640e:	dd0b      	ble.n	16428 <__aeabi_d2iz+0x44>
   16410:	4a0b      	ldr	r2, [pc, #44]	; (16440 <__aeabi_d2iz+0x5c>)
   16412:	1a52      	subs	r2, r2, r1
   16414:	40d6      	lsrs	r6, r2
   16416:	1c32      	adds	r2, r6, #0
   16418:	4250      	negs	r0, r2
   1641a:	2d00      	cmp	r5, #0
   1641c:	d100      	bne.n	16420 <__aeabi_d2iz+0x3c>
   1641e:	1c10      	adds	r0, r2, #0
   16420:	bd70      	pop	{r4, r5, r6, pc}
   16422:	4b08      	ldr	r3, [pc, #32]	; (16444 <__aeabi_d2iz+0x60>)
   16424:	18e8      	adds	r0, r5, r3
   16426:	e7fb      	b.n	16420 <__aeabi_d2iz+0x3c>
   16428:	4b07      	ldr	r3, [pc, #28]	; (16448 <__aeabi_d2iz+0x64>)
   1642a:	40c2      	lsrs	r2, r0
   1642c:	18c9      	adds	r1, r1, r3
   1642e:	408e      	lsls	r6, r1
   16430:	4332      	orrs	r2, r6
   16432:	e7f1      	b.n	16418 <__aeabi_d2iz+0x34>
   16434:	000003fe 	.word	0x000003fe
   16438:	0000041d 	.word	0x0000041d
   1643c:	00000433 	.word	0x00000433
   16440:	00000413 	.word	0x00000413
   16444:	7fffffff 	.word	0x7fffffff
   16448:	fffffbed 	.word	0xfffffbed

0001644c <__aeabi_i2d>:
   1644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1644e:	1e04      	subs	r4, r0, #0
   16450:	d031      	beq.n	164b6 <__aeabi_i2d+0x6a>
   16452:	0fc7      	lsrs	r7, r0, #31
   16454:	d000      	beq.n	16458 <__aeabi_i2d+0xc>
   16456:	4244      	negs	r4, r0
   16458:	1c20      	adds	r0, r4, #0
   1645a:	f000 f869 	bl	16530 <__clzsi2>
   1645e:	4d18      	ldr	r5, [pc, #96]	; (164c0 <__aeabi_i2d+0x74>)
   16460:	1a2d      	subs	r5, r5, r0
   16462:	280a      	cmp	r0, #10
   16464:	dd19      	ble.n	1649a <__aeabi_i2d+0x4e>
   16466:	380b      	subs	r0, #11
   16468:	4084      	lsls	r4, r0
   1646a:	0324      	lsls	r4, r4, #12
   1646c:	056d      	lsls	r5, r5, #21
   1646e:	0b24      	lsrs	r4, r4, #12
   16470:	0d6d      	lsrs	r5, r5, #21
   16472:	1c3a      	adds	r2, r7, #0
   16474:	2600      	movs	r6, #0
   16476:	2000      	movs	r0, #0
   16478:	2100      	movs	r1, #0
   1647a:	0d0b      	lsrs	r3, r1, #20
   1647c:	0324      	lsls	r4, r4, #12
   1647e:	0b24      	lsrs	r4, r4, #12
   16480:	051b      	lsls	r3, r3, #20
   16482:	4323      	orrs	r3, r4
   16484:	4c0f      	ldr	r4, [pc, #60]	; (164c4 <__aeabi_i2d+0x78>)
   16486:	052d      	lsls	r5, r5, #20
   16488:	401c      	ands	r4, r3
   1648a:	432c      	orrs	r4, r5
   1648c:	0064      	lsls	r4, r4, #1
   1648e:	0864      	lsrs	r4, r4, #1
   16490:	07d3      	lsls	r3, r2, #31
   16492:	1c21      	adds	r1, r4, #0
   16494:	1c30      	adds	r0, r6, #0
   16496:	4319      	orrs	r1, r3
   16498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1649a:	1c06      	adds	r6, r0, #0
   1649c:	3615      	adds	r6, #21
   1649e:	1c23      	adds	r3, r4, #0
   164a0:	40b3      	lsls	r3, r6
   164a2:	1c1e      	adds	r6, r3, #0
   164a4:	230b      	movs	r3, #11
   164a6:	1a18      	subs	r0, r3, r0
   164a8:	40c4      	lsrs	r4, r0
   164aa:	0324      	lsls	r4, r4, #12
   164ac:	056d      	lsls	r5, r5, #21
   164ae:	0b24      	lsrs	r4, r4, #12
   164b0:	0d6d      	lsrs	r5, r5, #21
   164b2:	1c3a      	adds	r2, r7, #0
   164b4:	e7df      	b.n	16476 <__aeabi_i2d+0x2a>
   164b6:	2200      	movs	r2, #0
   164b8:	2500      	movs	r5, #0
   164ba:	2400      	movs	r4, #0
   164bc:	2600      	movs	r6, #0
   164be:	e7da      	b.n	16476 <__aeabi_i2d+0x2a>
   164c0:	0000041e 	.word	0x0000041e
   164c4:	800fffff 	.word	0x800fffff

000164c8 <__aeabi_ui2d>:
   164c8:	b510      	push	{r4, lr}
   164ca:	1e04      	subs	r4, r0, #0
   164cc:	d028      	beq.n	16520 <__aeabi_ui2d+0x58>
   164ce:	f000 f82f 	bl	16530 <__clzsi2>
   164d2:	4a15      	ldr	r2, [pc, #84]	; (16528 <__aeabi_ui2d+0x60>)
   164d4:	1a12      	subs	r2, r2, r0
   164d6:	280a      	cmp	r0, #10
   164d8:	dd15      	ble.n	16506 <__aeabi_ui2d+0x3e>
   164da:	380b      	subs	r0, #11
   164dc:	4084      	lsls	r4, r0
   164de:	0324      	lsls	r4, r4, #12
   164e0:	0552      	lsls	r2, r2, #21
   164e2:	0b24      	lsrs	r4, r4, #12
   164e4:	0d52      	lsrs	r2, r2, #21
   164e6:	2300      	movs	r3, #0
   164e8:	2000      	movs	r0, #0
   164ea:	2100      	movs	r1, #0
   164ec:	0324      	lsls	r4, r4, #12
   164ee:	1c18      	adds	r0, r3, #0
   164f0:	0d0b      	lsrs	r3, r1, #20
   164f2:	0b24      	lsrs	r4, r4, #12
   164f4:	051b      	lsls	r3, r3, #20
   164f6:	4323      	orrs	r3, r4
   164f8:	4c0c      	ldr	r4, [pc, #48]	; (1652c <__aeabi_ui2d+0x64>)
   164fa:	0512      	lsls	r2, r2, #20
   164fc:	401c      	ands	r4, r3
   164fe:	4314      	orrs	r4, r2
   16500:	0064      	lsls	r4, r4, #1
   16502:	0861      	lsrs	r1, r4, #1
   16504:	bd10      	pop	{r4, pc}
   16506:	1c03      	adds	r3, r0, #0
   16508:	3315      	adds	r3, #21
   1650a:	1c21      	adds	r1, r4, #0
   1650c:	4099      	lsls	r1, r3
   1650e:	1c0b      	adds	r3, r1, #0
   16510:	210b      	movs	r1, #11
   16512:	1a08      	subs	r0, r1, r0
   16514:	40c4      	lsrs	r4, r0
   16516:	0324      	lsls	r4, r4, #12
   16518:	0552      	lsls	r2, r2, #21
   1651a:	0b24      	lsrs	r4, r4, #12
   1651c:	0d52      	lsrs	r2, r2, #21
   1651e:	e7e3      	b.n	164e8 <__aeabi_ui2d+0x20>
   16520:	2200      	movs	r2, #0
   16522:	2400      	movs	r4, #0
   16524:	2300      	movs	r3, #0
   16526:	e7df      	b.n	164e8 <__aeabi_ui2d+0x20>
   16528:	0000041e 	.word	0x0000041e
   1652c:	800fffff 	.word	0x800fffff

00016530 <__clzsi2>:
   16530:	211c      	movs	r1, #28
   16532:	2301      	movs	r3, #1
   16534:	041b      	lsls	r3, r3, #16
   16536:	4298      	cmp	r0, r3
   16538:	d301      	bcc.n	1653e <__clzsi2+0xe>
   1653a:	0c00      	lsrs	r0, r0, #16
   1653c:	3910      	subs	r1, #16
   1653e:	0a1b      	lsrs	r3, r3, #8
   16540:	4298      	cmp	r0, r3
   16542:	d301      	bcc.n	16548 <__clzsi2+0x18>
   16544:	0a00      	lsrs	r0, r0, #8
   16546:	3908      	subs	r1, #8
   16548:	091b      	lsrs	r3, r3, #4
   1654a:	4298      	cmp	r0, r3
   1654c:	d301      	bcc.n	16552 <__clzsi2+0x22>
   1654e:	0900      	lsrs	r0, r0, #4
   16550:	3904      	subs	r1, #4
   16552:	a202      	add	r2, pc, #8	; (adr r2, 1655c <__clzsi2+0x2c>)
   16554:	5c10      	ldrb	r0, [r2, r0]
   16556:	1840      	adds	r0, r0, r1
   16558:	4770      	bx	lr
   1655a:	46c0      	nop			; (mov r8, r8)
   1655c:	02020304 	.word	0x02020304
   16560:	01010101 	.word	0x01010101
	...

0001656c <__divdi3>:
   1656c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1656e:	4644      	mov	r4, r8
   16570:	465f      	mov	r7, fp
   16572:	4656      	mov	r6, sl
   16574:	464d      	mov	r5, r9
   16576:	b4f0      	push	{r4, r5, r6, r7}
   16578:	1c1c      	adds	r4, r3, #0
   1657a:	b085      	sub	sp, #20
   1657c:	2900      	cmp	r1, #0
   1657e:	da00      	bge.n	16582 <__divdi3+0x16>
   16580:	e0db      	b.n	1673a <__divdi3+0x1ce>
   16582:	1c0f      	adds	r7, r1, #0
   16584:	2100      	movs	r1, #0
   16586:	1c06      	adds	r6, r0, #0
   16588:	468a      	mov	sl, r1
   1658a:	1c10      	adds	r0, r2, #0
   1658c:	1c19      	adds	r1, r3, #0
   1658e:	2c00      	cmp	r4, #0
   16590:	da00      	bge.n	16594 <__divdi3+0x28>
   16592:	e0c9      	b.n	16728 <__divdi3+0x1bc>
   16594:	9601      	str	r6, [sp, #4]
   16596:	9000      	str	r0, [sp, #0]
   16598:	4689      	mov	r9, r1
   1659a:	4680      	mov	r8, r0
   1659c:	2900      	cmp	r1, #0
   1659e:	d151      	bne.n	16644 <__divdi3+0xd8>
   165a0:	42b8      	cmp	r0, r7
   165a2:	d800      	bhi.n	165a6 <__divdi3+0x3a>
   165a4:	e071      	b.n	1668a <__divdi3+0x11e>
   165a6:	f7ff ffc3 	bl	16530 <__clzsi2>
   165aa:	2800      	cmp	r0, #0
   165ac:	d009      	beq.n	165c2 <__divdi3+0x56>
   165ae:	2320      	movs	r3, #32
   165b0:	4645      	mov	r5, r8
   165b2:	1c31      	adds	r1, r6, #0
   165b4:	1a1b      	subs	r3, r3, r0
   165b6:	4085      	lsls	r5, r0
   165b8:	4087      	lsls	r7, r0
   165ba:	40d9      	lsrs	r1, r3
   165bc:	46a8      	mov	r8, r5
   165be:	430f      	orrs	r7, r1
   165c0:	4086      	lsls	r6, r0
   165c2:	4642      	mov	r2, r8
   165c4:	0c15      	lsrs	r5, r2, #16
   165c6:	0413      	lsls	r3, r2, #16
   165c8:	0c1b      	lsrs	r3, r3, #16
   165ca:	1c29      	adds	r1, r5, #0
   165cc:	1c38      	adds	r0, r7, #0
   165ce:	469b      	mov	fp, r3
   165d0:	f7fe f832 	bl	14638 <__aeabi_uidiv>
   165d4:	465b      	mov	r3, fp
   165d6:	4343      	muls	r3, r0
   165d8:	1c04      	adds	r4, r0, #0
   165da:	1c29      	adds	r1, r5, #0
   165dc:	1c38      	adds	r0, r7, #0
   165de:	4699      	mov	r9, r3
   165e0:	f7fe f86e 	bl	146c0 <__aeabi_uidivmod>
   165e4:	0c33      	lsrs	r3, r6, #16
   165e6:	0408      	lsls	r0, r1, #16
   165e8:	4318      	orrs	r0, r3
   165ea:	4581      	cmp	r9, r0
   165ec:	d909      	bls.n	16602 <__divdi3+0x96>
   165ee:	4440      	add	r0, r8
   165f0:	1e63      	subs	r3, r4, #1
   165f2:	4580      	cmp	r8, r0
   165f4:	d900      	bls.n	165f8 <__divdi3+0x8c>
   165f6:	e178      	b.n	168ea <__divdi3+0x37e>
   165f8:	4581      	cmp	r9, r0
   165fa:	d800      	bhi.n	165fe <__divdi3+0x92>
   165fc:	e175      	b.n	168ea <__divdi3+0x37e>
   165fe:	3c02      	subs	r4, #2
   16600:	4440      	add	r0, r8
   16602:	4649      	mov	r1, r9
   16604:	1a41      	subs	r1, r0, r1
   16606:	4689      	mov	r9, r1
   16608:	1c08      	adds	r0, r1, #0
   1660a:	1c29      	adds	r1, r5, #0
   1660c:	f7fe f814 	bl	14638 <__aeabi_uidiv>
   16610:	465a      	mov	r2, fp
   16612:	4342      	muls	r2, r0
   16614:	1c07      	adds	r7, r0, #0
   16616:	1c29      	adds	r1, r5, #0
   16618:	4648      	mov	r0, r9
   1661a:	4693      	mov	fp, r2
   1661c:	f7fe f850 	bl	146c0 <__aeabi_uidivmod>
   16620:	0436      	lsls	r6, r6, #16
   16622:	0409      	lsls	r1, r1, #16
   16624:	0c36      	lsrs	r6, r6, #16
   16626:	430e      	orrs	r6, r1
   16628:	45b3      	cmp	fp, r6
   1662a:	d907      	bls.n	1663c <__divdi3+0xd0>
   1662c:	4446      	add	r6, r8
   1662e:	1e7b      	subs	r3, r7, #1
   16630:	45b0      	cmp	r8, r6
   16632:	d802      	bhi.n	1663a <__divdi3+0xce>
   16634:	3f02      	subs	r7, #2
   16636:	45b3      	cmp	fp, r6
   16638:	d800      	bhi.n	1663c <__divdi3+0xd0>
   1663a:	1c1f      	adds	r7, r3, #0
   1663c:	0424      	lsls	r4, r4, #16
   1663e:	4327      	orrs	r7, r4
   16640:	2400      	movs	r4, #0
   16642:	e003      	b.n	1664c <__divdi3+0xe0>
   16644:	42b9      	cmp	r1, r7
   16646:	d911      	bls.n	1666c <__divdi3+0x100>
   16648:	2400      	movs	r4, #0
   1664a:	2700      	movs	r7, #0
   1664c:	4652      	mov	r2, sl
   1664e:	1c38      	adds	r0, r7, #0
   16650:	1c21      	adds	r1, r4, #0
   16652:	2a00      	cmp	r2, #0
   16654:	d003      	beq.n	1665e <__divdi3+0xf2>
   16656:	1c3b      	adds	r3, r7, #0
   16658:	2100      	movs	r1, #0
   1665a:	4258      	negs	r0, r3
   1665c:	41a1      	sbcs	r1, r4
   1665e:	b005      	add	sp, #20
   16660:	bc3c      	pop	{r2, r3, r4, r5}
   16662:	4690      	mov	r8, r2
   16664:	4699      	mov	r9, r3
   16666:	46a2      	mov	sl, r4
   16668:	46ab      	mov	fp, r5
   1666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1666c:	1c08      	adds	r0, r1, #0
   1666e:	f7ff ff5f 	bl	16530 <__clzsi2>
   16672:	1e04      	subs	r4, r0, #0
   16674:	d000      	beq.n	16678 <__divdi3+0x10c>
   16676:	e0bf      	b.n	167f8 <__divdi3+0x28c>
   16678:	45b9      	cmp	r9, r7
   1667a:	d200      	bcs.n	1667e <__divdi3+0x112>
   1667c:	e142      	b.n	16904 <__divdi3+0x398>
   1667e:	9d01      	ldr	r5, [sp, #4]
   16680:	9900      	ldr	r1, [sp, #0]
   16682:	1c07      	adds	r7, r0, #0
   16684:	428d      	cmp	r5, r1
   16686:	4147      	adcs	r7, r0
   16688:	e7e0      	b.n	1664c <__divdi3+0xe0>
   1668a:	2800      	cmp	r0, #0
   1668c:	d104      	bne.n	16698 <__divdi3+0x12c>
   1668e:	2001      	movs	r0, #1
   16690:	2100      	movs	r1, #0
   16692:	f7fd ffd1 	bl	14638 <__aeabi_uidiv>
   16696:	4680      	mov	r8, r0
   16698:	4640      	mov	r0, r8
   1669a:	f7ff ff49 	bl	16530 <__clzsi2>
   1669e:	2800      	cmp	r0, #0
   166a0:	d152      	bne.n	16748 <__divdi3+0x1dc>
   166a2:	4641      	mov	r1, r8
   166a4:	4644      	mov	r4, r8
   166a6:	040b      	lsls	r3, r1, #16
   166a8:	1b3c      	subs	r4, r7, r4
   166aa:	0c1b      	lsrs	r3, r3, #16
   166ac:	46a3      	mov	fp, r4
   166ae:	0c0d      	lsrs	r5, r1, #16
   166b0:	9300      	str	r3, [sp, #0]
   166b2:	2401      	movs	r4, #1
   166b4:	1c29      	adds	r1, r5, #0
   166b6:	4658      	mov	r0, fp
   166b8:	f7fd ffbe 	bl	14638 <__aeabi_uidiv>
   166bc:	9f00      	ldr	r7, [sp, #0]
   166be:	4681      	mov	r9, r0
   166c0:	4347      	muls	r7, r0
   166c2:	1c29      	adds	r1, r5, #0
   166c4:	4658      	mov	r0, fp
   166c6:	f7fd fffb 	bl	146c0 <__aeabi_uidivmod>
   166ca:	0c33      	lsrs	r3, r6, #16
   166cc:	0409      	lsls	r1, r1, #16
   166ce:	4319      	orrs	r1, r3
   166d0:	428f      	cmp	r7, r1
   166d2:	d908      	bls.n	166e6 <__divdi3+0x17a>
   166d4:	464b      	mov	r3, r9
   166d6:	4441      	add	r1, r8
   166d8:	3b01      	subs	r3, #1
   166da:	4588      	cmp	r8, r1
   166dc:	d802      	bhi.n	166e4 <__divdi3+0x178>
   166de:	428f      	cmp	r7, r1
   166e0:	d900      	bls.n	166e4 <__divdi3+0x178>
   166e2:	e11a      	b.n	1691a <__divdi3+0x3ae>
   166e4:	4699      	mov	r9, r3
   166e6:	1bc9      	subs	r1, r1, r7
   166e8:	468b      	mov	fp, r1
   166ea:	1c08      	adds	r0, r1, #0
   166ec:	1c29      	adds	r1, r5, #0
   166ee:	f7fd ffa3 	bl	14638 <__aeabi_uidiv>
   166f2:	9b00      	ldr	r3, [sp, #0]
   166f4:	1c29      	adds	r1, r5, #0
   166f6:	4343      	muls	r3, r0
   166f8:	1c07      	adds	r7, r0, #0
   166fa:	4658      	mov	r0, fp
   166fc:	9300      	str	r3, [sp, #0]
   166fe:	f7fd ffdf 	bl	146c0 <__aeabi_uidivmod>
   16702:	0436      	lsls	r6, r6, #16
   16704:	9d00      	ldr	r5, [sp, #0]
   16706:	0409      	lsls	r1, r1, #16
   16708:	0c36      	lsrs	r6, r6, #16
   1670a:	430e      	orrs	r6, r1
   1670c:	42b5      	cmp	r5, r6
   1670e:	d907      	bls.n	16720 <__divdi3+0x1b4>
   16710:	4446      	add	r6, r8
   16712:	1e7b      	subs	r3, r7, #1
   16714:	45b0      	cmp	r8, r6
   16716:	d802      	bhi.n	1671e <__divdi3+0x1b2>
   16718:	3f02      	subs	r7, #2
   1671a:	42b5      	cmp	r5, r6
   1671c:	d800      	bhi.n	16720 <__divdi3+0x1b4>
   1671e:	1c1f      	adds	r7, r3, #0
   16720:	4649      	mov	r1, r9
   16722:	040e      	lsls	r6, r1, #16
   16724:	4337      	orrs	r7, r6
   16726:	e791      	b.n	1664c <__divdi3+0xe0>
   16728:	4652      	mov	r2, sl
   1672a:	43d2      	mvns	r2, r2
   1672c:	1c03      	adds	r3, r0, #0
   1672e:	1c0c      	adds	r4, r1, #0
   16730:	4692      	mov	sl, r2
   16732:	2100      	movs	r1, #0
   16734:	4258      	negs	r0, r3
   16736:	41a1      	sbcs	r1, r4
   16738:	e72c      	b.n	16594 <__divdi3+0x28>
   1673a:	2700      	movs	r7, #0
   1673c:	4246      	negs	r6, r0
   1673e:	418f      	sbcs	r7, r1
   16740:	2101      	movs	r1, #1
   16742:	4249      	negs	r1, r1
   16744:	468a      	mov	sl, r1
   16746:	e720      	b.n	1658a <__divdi3+0x1e>
   16748:	2320      	movs	r3, #32
   1674a:	1a1b      	subs	r3, r3, r0
   1674c:	4642      	mov	r2, r8
   1674e:	1c35      	adds	r5, r6, #0
   16750:	4082      	lsls	r2, r0
   16752:	1c3c      	adds	r4, r7, #0
   16754:	40dd      	lsrs	r5, r3
   16756:	40dc      	lsrs	r4, r3
   16758:	4087      	lsls	r7, r0
   1675a:	1c2b      	adds	r3, r5, #0
   1675c:	0c15      	lsrs	r5, r2, #16
   1675e:	433b      	orrs	r3, r7
   16760:	1c29      	adds	r1, r5, #0
   16762:	4086      	lsls	r6, r0
   16764:	1c20      	adds	r0, r4, #0
   16766:	9300      	str	r3, [sp, #0]
   16768:	0417      	lsls	r7, r2, #16
   1676a:	4690      	mov	r8, r2
   1676c:	f7fd ff64 	bl	14638 <__aeabi_uidiv>
   16770:	0c3f      	lsrs	r7, r7, #16
   16772:	1c01      	adds	r1, r0, #0
   16774:	4379      	muls	r1, r7
   16776:	4681      	mov	r9, r0
   16778:	468b      	mov	fp, r1
   1677a:	1c20      	adds	r0, r4, #0
   1677c:	1c29      	adds	r1, r5, #0
   1677e:	f7fd ff9f 	bl	146c0 <__aeabi_uidivmod>
   16782:	9c00      	ldr	r4, [sp, #0]
   16784:	0409      	lsls	r1, r1, #16
   16786:	0c23      	lsrs	r3, r4, #16
   16788:	4319      	orrs	r1, r3
   1678a:	458b      	cmp	fp, r1
   1678c:	d90c      	bls.n	167a8 <__divdi3+0x23c>
   1678e:	464b      	mov	r3, r9
   16790:	4441      	add	r1, r8
   16792:	3b01      	subs	r3, #1
   16794:	4588      	cmp	r8, r1
   16796:	d900      	bls.n	1679a <__divdi3+0x22e>
   16798:	e0bd      	b.n	16916 <__divdi3+0x3aa>
   1679a:	458b      	cmp	fp, r1
   1679c:	d800      	bhi.n	167a0 <__divdi3+0x234>
   1679e:	e0ba      	b.n	16916 <__divdi3+0x3aa>
   167a0:	2202      	movs	r2, #2
   167a2:	4252      	negs	r2, r2
   167a4:	4491      	add	r9, r2
   167a6:	4441      	add	r1, r8
   167a8:	465c      	mov	r4, fp
   167aa:	1b0c      	subs	r4, r1, r4
   167ac:	1c20      	adds	r0, r4, #0
   167ae:	1c29      	adds	r1, r5, #0
   167b0:	9401      	str	r4, [sp, #4]
   167b2:	f7fd ff41 	bl	14638 <__aeabi_uidiv>
   167b6:	1c39      	adds	r1, r7, #0
   167b8:	4341      	muls	r1, r0
   167ba:	1c04      	adds	r4, r0, #0
   167bc:	468b      	mov	fp, r1
   167be:	9801      	ldr	r0, [sp, #4]
   167c0:	1c29      	adds	r1, r5, #0
   167c2:	f7fd ff7d 	bl	146c0 <__aeabi_uidivmod>
   167c6:	9a00      	ldr	r2, [sp, #0]
   167c8:	0409      	lsls	r1, r1, #16
   167ca:	0413      	lsls	r3, r2, #16
   167cc:	0c1b      	lsrs	r3, r3, #16
   167ce:	4319      	orrs	r1, r3
   167d0:	458b      	cmp	fp, r1
   167d2:	d909      	bls.n	167e8 <__divdi3+0x27c>
   167d4:	4441      	add	r1, r8
   167d6:	1e63      	subs	r3, r4, #1
   167d8:	4588      	cmp	r8, r1
   167da:	d900      	bls.n	167de <__divdi3+0x272>
   167dc:	e097      	b.n	1690e <__divdi3+0x3a2>
   167de:	458b      	cmp	fp, r1
   167e0:	d800      	bhi.n	167e4 <__divdi3+0x278>
   167e2:	e094      	b.n	1690e <__divdi3+0x3a2>
   167e4:	3c02      	subs	r4, #2
   167e6:	4441      	add	r1, r8
   167e8:	465b      	mov	r3, fp
   167ea:	1acb      	subs	r3, r1, r3
   167ec:	4649      	mov	r1, r9
   167ee:	469b      	mov	fp, r3
   167f0:	040b      	lsls	r3, r1, #16
   167f2:	431c      	orrs	r4, r3
   167f4:	9700      	str	r7, [sp, #0]
   167f6:	e75d      	b.n	166b4 <__divdi3+0x148>
   167f8:	9d00      	ldr	r5, [sp, #0]
   167fa:	2320      	movs	r3, #32
   167fc:	1a1b      	subs	r3, r3, r0
   167fe:	464a      	mov	r2, r9
   16800:	4082      	lsls	r2, r0
   16802:	40dd      	lsrs	r5, r3
   16804:	4315      	orrs	r5, r2
   16806:	1c39      	adds	r1, r7, #0
   16808:	9a00      	ldr	r2, [sp, #0]
   1680a:	40d9      	lsrs	r1, r3
   1680c:	4082      	lsls	r2, r0
   1680e:	4688      	mov	r8, r1
   16810:	1c31      	adds	r1, r6, #0
   16812:	9200      	str	r2, [sp, #0]
   16814:	40d9      	lsrs	r1, r3
   16816:	1c3a      	adds	r2, r7, #0
   16818:	4082      	lsls	r2, r0
   1681a:	1c0b      	adds	r3, r1, #0
   1681c:	4313      	orrs	r3, r2
   1681e:	9301      	str	r3, [sp, #4]
   16820:	0c2f      	lsrs	r7, r5, #16
   16822:	042b      	lsls	r3, r5, #16
   16824:	0c1b      	lsrs	r3, r3, #16
   16826:	1c39      	adds	r1, r7, #0
   16828:	4640      	mov	r0, r8
   1682a:	9302      	str	r3, [sp, #8]
   1682c:	f7fd ff04 	bl	14638 <__aeabi_uidiv>
   16830:	9a02      	ldr	r2, [sp, #8]
   16832:	4681      	mov	r9, r0
   16834:	4342      	muls	r2, r0
   16836:	1c39      	adds	r1, r7, #0
   16838:	4640      	mov	r0, r8
   1683a:	4693      	mov	fp, r2
   1683c:	f7fd ff40 	bl	146c0 <__aeabi_uidivmod>
   16840:	9a01      	ldr	r2, [sp, #4]
   16842:	0409      	lsls	r1, r1, #16
   16844:	0c13      	lsrs	r3, r2, #16
   16846:	4319      	orrs	r1, r3
   16848:	458b      	cmp	fp, r1
   1684a:	d90a      	bls.n	16862 <__divdi3+0x2f6>
   1684c:	464b      	mov	r3, r9
   1684e:	1949      	adds	r1, r1, r5
   16850:	3b01      	subs	r3, #1
   16852:	428d      	cmp	r5, r1
   16854:	d85d      	bhi.n	16912 <__divdi3+0x3a6>
   16856:	458b      	cmp	fp, r1
   16858:	d95b      	bls.n	16912 <__divdi3+0x3a6>
   1685a:	2302      	movs	r3, #2
   1685c:	425b      	negs	r3, r3
   1685e:	4499      	add	r9, r3
   16860:	1949      	adds	r1, r1, r5
   16862:	465a      	mov	r2, fp
   16864:	1a8a      	subs	r2, r1, r2
   16866:	1c10      	adds	r0, r2, #0
   16868:	1c39      	adds	r1, r7, #0
   1686a:	9203      	str	r2, [sp, #12]
   1686c:	f7fd fee4 	bl	14638 <__aeabi_uidiv>
   16870:	9b02      	ldr	r3, [sp, #8]
   16872:	4680      	mov	r8, r0
   16874:	4343      	muls	r3, r0
   16876:	1c39      	adds	r1, r7, #0
   16878:	9803      	ldr	r0, [sp, #12]
   1687a:	469b      	mov	fp, r3
   1687c:	f7fd ff20 	bl	146c0 <__aeabi_uidivmod>
   16880:	9a01      	ldr	r2, [sp, #4]
   16882:	0409      	lsls	r1, r1, #16
   16884:	0413      	lsls	r3, r2, #16
   16886:	0c1b      	lsrs	r3, r3, #16
   16888:	4319      	orrs	r1, r3
   1688a:	458b      	cmp	fp, r1
   1688c:	d90a      	bls.n	168a4 <__divdi3+0x338>
   1688e:	4643      	mov	r3, r8
   16890:	1949      	adds	r1, r1, r5
   16892:	3b01      	subs	r3, #1
   16894:	428d      	cmp	r5, r1
   16896:	d838      	bhi.n	1690a <__divdi3+0x39e>
   16898:	458b      	cmp	fp, r1
   1689a:	d936      	bls.n	1690a <__divdi3+0x39e>
   1689c:	2302      	movs	r3, #2
   1689e:	425b      	negs	r3, r3
   168a0:	4498      	add	r8, r3
   168a2:	1949      	adds	r1, r1, r5
   168a4:	465d      	mov	r5, fp
   168a6:	1b4d      	subs	r5, r1, r5
   168a8:	46ab      	mov	fp, r5
   168aa:	4649      	mov	r1, r9
   168ac:	9d00      	ldr	r5, [sp, #0]
   168ae:	040f      	lsls	r7, r1, #16
   168b0:	4642      	mov	r2, r8
   168b2:	4317      	orrs	r7, r2
   168b4:	042a      	lsls	r2, r5, #16
   168b6:	0c12      	lsrs	r2, r2, #16
   168b8:	043b      	lsls	r3, r7, #16
   168ba:	0c2d      	lsrs	r5, r5, #16
   168bc:	0c1b      	lsrs	r3, r3, #16
   168be:	0c38      	lsrs	r0, r7, #16
   168c0:	1c11      	adds	r1, r2, #0
   168c2:	4359      	muls	r1, r3
   168c4:	4342      	muls	r2, r0
   168c6:	436b      	muls	r3, r5
   168c8:	4368      	muls	r0, r5
   168ca:	18d3      	adds	r3, r2, r3
   168cc:	0c0d      	lsrs	r5, r1, #16
   168ce:	195b      	adds	r3, r3, r5
   168d0:	468c      	mov	ip, r1
   168d2:	429a      	cmp	r2, r3
   168d4:	d902      	bls.n	168dc <__divdi3+0x370>
   168d6:	2280      	movs	r2, #128	; 0x80
   168d8:	0252      	lsls	r2, r2, #9
   168da:	1880      	adds	r0, r0, r2
   168dc:	0c1d      	lsrs	r5, r3, #16
   168de:	1940      	adds	r0, r0, r5
   168e0:	4583      	cmp	fp, r0
   168e2:	d30c      	bcc.n	168fe <__divdi3+0x392>
   168e4:	d003      	beq.n	168ee <__divdi3+0x382>
   168e6:	2400      	movs	r4, #0
   168e8:	e6b0      	b.n	1664c <__divdi3+0xe0>
   168ea:	1c1c      	adds	r4, r3, #0
   168ec:	e689      	b.n	16602 <__divdi3+0x96>
   168ee:	4665      	mov	r5, ip
   168f0:	042a      	lsls	r2, r5, #16
   168f2:	041b      	lsls	r3, r3, #16
   168f4:	0c12      	lsrs	r2, r2, #16
   168f6:	189b      	adds	r3, r3, r2
   168f8:	40a6      	lsls	r6, r4
   168fa:	429e      	cmp	r6, r3
   168fc:	d2f3      	bcs.n	168e6 <__divdi3+0x37a>
   168fe:	3f01      	subs	r7, #1
   16900:	2400      	movs	r4, #0
   16902:	e6a3      	b.n	1664c <__divdi3+0xe0>
   16904:	2400      	movs	r4, #0
   16906:	2701      	movs	r7, #1
   16908:	e6a0      	b.n	1664c <__divdi3+0xe0>
   1690a:	4698      	mov	r8, r3
   1690c:	e7ca      	b.n	168a4 <__divdi3+0x338>
   1690e:	1c1c      	adds	r4, r3, #0
   16910:	e76a      	b.n	167e8 <__divdi3+0x27c>
   16912:	4699      	mov	r9, r3
   16914:	e7a5      	b.n	16862 <__divdi3+0x2f6>
   16916:	4699      	mov	r9, r3
   16918:	e746      	b.n	167a8 <__divdi3+0x23c>
   1691a:	2202      	movs	r2, #2
   1691c:	4252      	negs	r2, r2
   1691e:	4491      	add	r9, r2
   16920:	4441      	add	r1, r8
   16922:	e6e0      	b.n	166e6 <__divdi3+0x17a>

00016924 <__udivdi3>:
   16924:	b5f0      	push	{r4, r5, r6, r7, lr}
   16926:	465f      	mov	r7, fp
   16928:	4656      	mov	r6, sl
   1692a:	464d      	mov	r5, r9
   1692c:	4644      	mov	r4, r8
   1692e:	b4f0      	push	{r4, r5, r6, r7}
   16930:	1c0d      	adds	r5, r1, #0
   16932:	b085      	sub	sp, #20
   16934:	1c06      	adds	r6, r0, #0
   16936:	4692      	mov	sl, r2
   16938:	4698      	mov	r8, r3
   1693a:	9002      	str	r0, [sp, #8]
   1693c:	9101      	str	r1, [sp, #4]
   1693e:	9203      	str	r2, [sp, #12]
   16940:	1c1f      	adds	r7, r3, #0
   16942:	1c14      	adds	r4, r2, #0
   16944:	4683      	mov	fp, r0
   16946:	46a9      	mov	r9, r5
   16948:	2b00      	cmp	r3, #0
   1694a:	d159      	bne.n	16a00 <__udivdi3+0xdc>
   1694c:	42aa      	cmp	r2, r5
   1694e:	d969      	bls.n	16a24 <__udivdi3+0x100>
   16950:	1c10      	adds	r0, r2, #0
   16952:	f7ff fded 	bl	16530 <__clzsi2>
   16956:	2800      	cmp	r0, #0
   16958:	d00a      	beq.n	16970 <__udivdi3+0x4c>
   1695a:	2320      	movs	r3, #32
   1695c:	1a1b      	subs	r3, r3, r0
   1695e:	1c31      	adds	r1, r6, #0
   16960:	40d9      	lsrs	r1, r3
   16962:	4085      	lsls	r5, r0
   16964:	1c0b      	adds	r3, r1, #0
   16966:	432b      	orrs	r3, r5
   16968:	4086      	lsls	r6, r0
   1696a:	4084      	lsls	r4, r0
   1696c:	4699      	mov	r9, r3
   1696e:	46b3      	mov	fp, r6
   16970:	0c25      	lsrs	r5, r4, #16
   16972:	0423      	lsls	r3, r4, #16
   16974:	0c1b      	lsrs	r3, r3, #16
   16976:	1c29      	adds	r1, r5, #0
   16978:	4648      	mov	r0, r9
   1697a:	4698      	mov	r8, r3
   1697c:	f7fd fe5c 	bl	14638 <__aeabi_uidiv>
   16980:	4646      	mov	r6, r8
   16982:	1c07      	adds	r7, r0, #0
   16984:	4346      	muls	r6, r0
   16986:	1c29      	adds	r1, r5, #0
   16988:	4648      	mov	r0, r9
   1698a:	f7fd fe99 	bl	146c0 <__aeabi_uidivmod>
   1698e:	465a      	mov	r2, fp
   16990:	0409      	lsls	r1, r1, #16
   16992:	0c13      	lsrs	r3, r2, #16
   16994:	4319      	orrs	r1, r3
   16996:	428e      	cmp	r6, r1
   16998:	d909      	bls.n	169ae <__udivdi3+0x8a>
   1699a:	1909      	adds	r1, r1, r4
   1699c:	1e7b      	subs	r3, r7, #1
   1699e:	428c      	cmp	r4, r1
   169a0:	d900      	bls.n	169a4 <__udivdi3+0x80>
   169a2:	e157      	b.n	16c54 <__udivdi3+0x330>
   169a4:	428e      	cmp	r6, r1
   169a6:	d800      	bhi.n	169aa <__udivdi3+0x86>
   169a8:	e154      	b.n	16c54 <__udivdi3+0x330>
   169aa:	3f02      	subs	r7, #2
   169ac:	1909      	adds	r1, r1, r4
   169ae:	1b89      	subs	r1, r1, r6
   169b0:	4689      	mov	r9, r1
   169b2:	1c08      	adds	r0, r1, #0
   169b4:	1c29      	adds	r1, r5, #0
   169b6:	f7fd fe3f 	bl	14638 <__aeabi_uidiv>
   169ba:	4643      	mov	r3, r8
   169bc:	4343      	muls	r3, r0
   169be:	1c06      	adds	r6, r0, #0
   169c0:	1c29      	adds	r1, r5, #0
   169c2:	4648      	mov	r0, r9
   169c4:	4698      	mov	r8, r3
   169c6:	f7fd fe7b 	bl	146c0 <__aeabi_uidivmod>
   169ca:	465a      	mov	r2, fp
   169cc:	0413      	lsls	r3, r2, #16
   169ce:	0409      	lsls	r1, r1, #16
   169d0:	0c1b      	lsrs	r3, r3, #16
   169d2:	4319      	orrs	r1, r3
   169d4:	4588      	cmp	r8, r1
   169d6:	d908      	bls.n	169ea <__udivdi3+0xc6>
   169d8:	1909      	adds	r1, r1, r4
   169da:	1e73      	subs	r3, r6, #1
   169dc:	428c      	cmp	r4, r1
   169de:	d900      	bls.n	169e2 <__udivdi3+0xbe>
   169e0:	e136      	b.n	16c50 <__udivdi3+0x32c>
   169e2:	3e02      	subs	r6, #2
   169e4:	4588      	cmp	r8, r1
   169e6:	d800      	bhi.n	169ea <__udivdi3+0xc6>
   169e8:	e132      	b.n	16c50 <__udivdi3+0x32c>
   169ea:	0438      	lsls	r0, r7, #16
   169ec:	4330      	orrs	r0, r6
   169ee:	2700      	movs	r7, #0
   169f0:	1c39      	adds	r1, r7, #0
   169f2:	b005      	add	sp, #20
   169f4:	bc3c      	pop	{r2, r3, r4, r5}
   169f6:	4690      	mov	r8, r2
   169f8:	4699      	mov	r9, r3
   169fa:	46a2      	mov	sl, r4
   169fc:	46ab      	mov	fp, r5
   169fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a00:	9a01      	ldr	r2, [sp, #4]
   16a02:	4293      	cmp	r3, r2
   16a04:	d862      	bhi.n	16acc <__udivdi3+0x1a8>
   16a06:	1c18      	adds	r0, r3, #0
   16a08:	f7ff fd92 	bl	16530 <__clzsi2>
   16a0c:	1e04      	subs	r4, r0, #0
   16a0e:	d160      	bne.n	16ad2 <__udivdi3+0x1ae>
   16a10:	9b01      	ldr	r3, [sp, #4]
   16a12:	429f      	cmp	r7, r3
   16a14:	d200      	bcs.n	16a18 <__udivdi3+0xf4>
   16a16:	e12c      	b.n	16c72 <__udivdi3+0x34e>
   16a18:	9f02      	ldr	r7, [sp, #8]
   16a1a:	9903      	ldr	r1, [sp, #12]
   16a1c:	428f      	cmp	r7, r1
   16a1e:	4160      	adcs	r0, r4
   16a20:	2700      	movs	r7, #0
   16a22:	e7e5      	b.n	169f0 <__udivdi3+0xcc>
   16a24:	2a00      	cmp	r2, #0
   16a26:	d104      	bne.n	16a32 <__udivdi3+0x10e>
   16a28:	2001      	movs	r0, #1
   16a2a:	2100      	movs	r1, #0
   16a2c:	f7fd fe04 	bl	14638 <__aeabi_uidiv>
   16a30:	1c04      	adds	r4, r0, #0
   16a32:	1c20      	adds	r0, r4, #0
   16a34:	f7ff fd7c 	bl	16530 <__clzsi2>
   16a38:	2800      	cmp	r0, #0
   16a3a:	d000      	beq.n	16a3e <__udivdi3+0x11a>
   16a3c:	e0b9      	b.n	16bb2 <__udivdi3+0x28e>
   16a3e:	0423      	lsls	r3, r4, #16
   16a40:	1b2d      	subs	r5, r5, r4
   16a42:	0c1b      	lsrs	r3, r3, #16
   16a44:	46a9      	mov	r9, r5
   16a46:	0c26      	lsrs	r6, r4, #16
   16a48:	4698      	mov	r8, r3
   16a4a:	2701      	movs	r7, #1
   16a4c:	1c31      	adds	r1, r6, #0
   16a4e:	4648      	mov	r0, r9
   16a50:	f7fd fdf2 	bl	14638 <__aeabi_uidiv>
   16a54:	4641      	mov	r1, r8
   16a56:	4341      	muls	r1, r0
   16a58:	1c05      	adds	r5, r0, #0
   16a5a:	468a      	mov	sl, r1
   16a5c:	4648      	mov	r0, r9
   16a5e:	1c31      	adds	r1, r6, #0
   16a60:	f7fd fe2e 	bl	146c0 <__aeabi_uidivmod>
   16a64:	465a      	mov	r2, fp
   16a66:	0408      	lsls	r0, r1, #16
   16a68:	0c13      	lsrs	r3, r2, #16
   16a6a:	4318      	orrs	r0, r3
   16a6c:	4582      	cmp	sl, r0
   16a6e:	d907      	bls.n	16a80 <__udivdi3+0x15c>
   16a70:	1900      	adds	r0, r0, r4
   16a72:	1e6b      	subs	r3, r5, #1
   16a74:	4284      	cmp	r4, r0
   16a76:	d802      	bhi.n	16a7e <__udivdi3+0x15a>
   16a78:	4582      	cmp	sl, r0
   16a7a:	d900      	bls.n	16a7e <__udivdi3+0x15a>
   16a7c:	e110      	b.n	16ca0 <__udivdi3+0x37c>
   16a7e:	1c1d      	adds	r5, r3, #0
   16a80:	4653      	mov	r3, sl
   16a82:	1ac3      	subs	r3, r0, r3
   16a84:	1c18      	adds	r0, r3, #0
   16a86:	1c31      	adds	r1, r6, #0
   16a88:	469a      	mov	sl, r3
   16a8a:	f7fd fdd5 	bl	14638 <__aeabi_uidiv>
   16a8e:	4641      	mov	r1, r8
   16a90:	4341      	muls	r1, r0
   16a92:	4681      	mov	r9, r0
   16a94:	4688      	mov	r8, r1
   16a96:	4650      	mov	r0, sl
   16a98:	1c31      	adds	r1, r6, #0
   16a9a:	f7fd fe11 	bl	146c0 <__aeabi_uidivmod>
   16a9e:	465a      	mov	r2, fp
   16aa0:	0413      	lsls	r3, r2, #16
   16aa2:	0409      	lsls	r1, r1, #16
   16aa4:	0c1b      	lsrs	r3, r3, #16
   16aa6:	4319      	orrs	r1, r3
   16aa8:	4588      	cmp	r8, r1
   16aaa:	d90b      	bls.n	16ac4 <__udivdi3+0x1a0>
   16aac:	464b      	mov	r3, r9
   16aae:	1909      	adds	r1, r1, r4
   16ab0:	3b01      	subs	r3, #1
   16ab2:	428c      	cmp	r4, r1
   16ab4:	d900      	bls.n	16ab8 <__udivdi3+0x194>
   16ab6:	e0cf      	b.n	16c58 <__udivdi3+0x334>
   16ab8:	4588      	cmp	r8, r1
   16aba:	d800      	bhi.n	16abe <__udivdi3+0x19a>
   16abc:	e0cc      	b.n	16c58 <__udivdi3+0x334>
   16abe:	2302      	movs	r3, #2
   16ac0:	425b      	negs	r3, r3
   16ac2:	4499      	add	r9, r3
   16ac4:	0428      	lsls	r0, r5, #16
   16ac6:	4649      	mov	r1, r9
   16ac8:	4308      	orrs	r0, r1
   16aca:	e791      	b.n	169f0 <__udivdi3+0xcc>
   16acc:	2700      	movs	r7, #0
   16ace:	2000      	movs	r0, #0
   16ad0:	e78e      	b.n	169f0 <__udivdi3+0xcc>
   16ad2:	2320      	movs	r3, #32
   16ad4:	1a1b      	subs	r3, r3, r0
   16ad6:	4642      	mov	r2, r8
   16ad8:	4657      	mov	r7, sl
   16ada:	4082      	lsls	r2, r0
   16adc:	40df      	lsrs	r7, r3
   16ade:	4317      	orrs	r7, r2
   16ae0:	4652      	mov	r2, sl
   16ae2:	4082      	lsls	r2, r0
   16ae4:	9201      	str	r2, [sp, #4]
   16ae6:	1c32      	adds	r2, r6, #0
   16ae8:	40da      	lsrs	r2, r3
   16aea:	1c29      	adds	r1, r5, #0
   16aec:	40d9      	lsrs	r1, r3
   16aee:	4085      	lsls	r5, r0
   16af0:	1c13      	adds	r3, r2, #0
   16af2:	432b      	orrs	r3, r5
   16af4:	9302      	str	r3, [sp, #8]
   16af6:	0c3d      	lsrs	r5, r7, #16
   16af8:	043b      	lsls	r3, r7, #16
   16afa:	0c1b      	lsrs	r3, r3, #16
   16afc:	4688      	mov	r8, r1
   16afe:	1c08      	adds	r0, r1, #0
   16b00:	1c29      	adds	r1, r5, #0
   16b02:	469a      	mov	sl, r3
   16b04:	f7fd fd98 	bl	14638 <__aeabi_uidiv>
   16b08:	4653      	mov	r3, sl
   16b0a:	4343      	muls	r3, r0
   16b0c:	4681      	mov	r9, r0
   16b0e:	1c29      	adds	r1, r5, #0
   16b10:	4640      	mov	r0, r8
   16b12:	469b      	mov	fp, r3
   16b14:	f7fd fdd4 	bl	146c0 <__aeabi_uidivmod>
   16b18:	9a02      	ldr	r2, [sp, #8]
   16b1a:	0409      	lsls	r1, r1, #16
   16b1c:	0c13      	lsrs	r3, r2, #16
   16b1e:	4319      	orrs	r1, r3
   16b20:	458b      	cmp	fp, r1
   16b22:	d906      	bls.n	16b32 <__udivdi3+0x20e>
   16b24:	464b      	mov	r3, r9
   16b26:	19c9      	adds	r1, r1, r7
   16b28:	3b01      	subs	r3, #1
   16b2a:	428f      	cmp	r7, r1
   16b2c:	d800      	bhi.n	16b30 <__udivdi3+0x20c>
   16b2e:	e0ab      	b.n	16c88 <__udivdi3+0x364>
   16b30:	4699      	mov	r9, r3
   16b32:	465a      	mov	r2, fp
   16b34:	1a8a      	subs	r2, r1, r2
   16b36:	1c10      	adds	r0, r2, #0
   16b38:	1c29      	adds	r1, r5, #0
   16b3a:	4693      	mov	fp, r2
   16b3c:	f7fd fd7c 	bl	14638 <__aeabi_uidiv>
   16b40:	4653      	mov	r3, sl
   16b42:	4343      	muls	r3, r0
   16b44:	1c29      	adds	r1, r5, #0
   16b46:	4680      	mov	r8, r0
   16b48:	4658      	mov	r0, fp
   16b4a:	469a      	mov	sl, r3
   16b4c:	f7fd fdb8 	bl	146c0 <__aeabi_uidivmod>
   16b50:	9a02      	ldr	r2, [sp, #8]
   16b52:	0409      	lsls	r1, r1, #16
   16b54:	0415      	lsls	r5, r2, #16
   16b56:	0c2d      	lsrs	r5, r5, #16
   16b58:	4329      	orrs	r1, r5
   16b5a:	458a      	cmp	sl, r1
   16b5c:	d906      	bls.n	16b6c <__udivdi3+0x248>
   16b5e:	4643      	mov	r3, r8
   16b60:	19c9      	adds	r1, r1, r7
   16b62:	3b01      	subs	r3, #1
   16b64:	428f      	cmp	r7, r1
   16b66:	d800      	bhi.n	16b6a <__udivdi3+0x246>
   16b68:	e086      	b.n	16c78 <__udivdi3+0x354>
   16b6a:	4698      	mov	r8, r3
   16b6c:	4657      	mov	r7, sl
   16b6e:	1bcf      	subs	r7, r1, r7
   16b70:	46ba      	mov	sl, r7
   16b72:	4649      	mov	r1, r9
   16b74:	9f01      	ldr	r7, [sp, #4]
   16b76:	0408      	lsls	r0, r1, #16
   16b78:	4642      	mov	r2, r8
   16b7a:	4310      	orrs	r0, r2
   16b7c:	043d      	lsls	r5, r7, #16
   16b7e:	0c2d      	lsrs	r5, r5, #16
   16b80:	0403      	lsls	r3, r0, #16
   16b82:	0c3f      	lsrs	r7, r7, #16
   16b84:	0c1b      	lsrs	r3, r3, #16
   16b86:	0c02      	lsrs	r2, r0, #16
   16b88:	1c29      	adds	r1, r5, #0
   16b8a:	4359      	muls	r1, r3
   16b8c:	4355      	muls	r5, r2
   16b8e:	437b      	muls	r3, r7
   16b90:	437a      	muls	r2, r7
   16b92:	18eb      	adds	r3, r5, r3
   16b94:	0c0f      	lsrs	r7, r1, #16
   16b96:	19db      	adds	r3, r3, r7
   16b98:	468c      	mov	ip, r1
   16b9a:	429d      	cmp	r5, r3
   16b9c:	d902      	bls.n	16ba4 <__udivdi3+0x280>
   16b9e:	2780      	movs	r7, #128	; 0x80
   16ba0:	027f      	lsls	r7, r7, #9
   16ba2:	19d2      	adds	r2, r2, r7
   16ba4:	0c1d      	lsrs	r5, r3, #16
   16ba6:	1952      	adds	r2, r2, r5
   16ba8:	4592      	cmp	sl, r2
   16baa:	d35f      	bcc.n	16c6c <__udivdi3+0x348>
   16bac:	d056      	beq.n	16c5c <__udivdi3+0x338>
   16bae:	2700      	movs	r7, #0
   16bb0:	e71e      	b.n	169f0 <__udivdi3+0xcc>
   16bb2:	2320      	movs	r3, #32
   16bb4:	1a1b      	subs	r3, r3, r0
   16bb6:	1c31      	adds	r1, r6, #0
   16bb8:	1c2f      	adds	r7, r5, #0
   16bba:	40d9      	lsrs	r1, r3
   16bbc:	40df      	lsrs	r7, r3
   16bbe:	4085      	lsls	r5, r0
   16bc0:	1c0b      	adds	r3, r1, #0
   16bc2:	4084      	lsls	r4, r0
   16bc4:	432b      	orrs	r3, r5
   16bc6:	4086      	lsls	r6, r0
   16bc8:	9301      	str	r3, [sp, #4]
   16bca:	46b3      	mov	fp, r6
   16bcc:	0423      	lsls	r3, r4, #16
   16bce:	0c26      	lsrs	r6, r4, #16
   16bd0:	0c1b      	lsrs	r3, r3, #16
   16bd2:	1c38      	adds	r0, r7, #0
   16bd4:	1c31      	adds	r1, r6, #0
   16bd6:	4698      	mov	r8, r3
   16bd8:	f7fd fd2e 	bl	14638 <__aeabi_uidiv>
   16bdc:	4642      	mov	r2, r8
   16bde:	4342      	muls	r2, r0
   16be0:	1c05      	adds	r5, r0, #0
   16be2:	1c31      	adds	r1, r6, #0
   16be4:	1c38      	adds	r0, r7, #0
   16be6:	4691      	mov	r9, r2
   16be8:	f7fd fd6a 	bl	146c0 <__aeabi_uidivmod>
   16bec:	9f01      	ldr	r7, [sp, #4]
   16bee:	0409      	lsls	r1, r1, #16
   16bf0:	0c3b      	lsrs	r3, r7, #16
   16bf2:	4319      	orrs	r1, r3
   16bf4:	4589      	cmp	r9, r1
   16bf6:	d907      	bls.n	16c08 <__udivdi3+0x2e4>
   16bf8:	1909      	adds	r1, r1, r4
   16bfa:	1e6b      	subs	r3, r5, #1
   16bfc:	428c      	cmp	r4, r1
   16bfe:	d84d      	bhi.n	16c9c <__udivdi3+0x378>
   16c00:	4589      	cmp	r9, r1
   16c02:	d94b      	bls.n	16c9c <__udivdi3+0x378>
   16c04:	3d02      	subs	r5, #2
   16c06:	1909      	adds	r1, r1, r4
   16c08:	464a      	mov	r2, r9
   16c0a:	1a8a      	subs	r2, r1, r2
   16c0c:	1c10      	adds	r0, r2, #0
   16c0e:	1c31      	adds	r1, r6, #0
   16c10:	4692      	mov	sl, r2
   16c12:	f7fd fd11 	bl	14638 <__aeabi_uidiv>
   16c16:	4643      	mov	r3, r8
   16c18:	4343      	muls	r3, r0
   16c1a:	1c07      	adds	r7, r0, #0
   16c1c:	1c31      	adds	r1, r6, #0
   16c1e:	4650      	mov	r0, sl
   16c20:	4699      	mov	r9, r3
   16c22:	f7fd fd4d 	bl	146c0 <__aeabi_uidivmod>
   16c26:	9a01      	ldr	r2, [sp, #4]
   16c28:	0409      	lsls	r1, r1, #16
   16c2a:	0413      	lsls	r3, r2, #16
   16c2c:	0c1b      	lsrs	r3, r3, #16
   16c2e:	4319      	orrs	r1, r3
   16c30:	4589      	cmp	r9, r1
   16c32:	d907      	bls.n	16c44 <__udivdi3+0x320>
   16c34:	1909      	adds	r1, r1, r4
   16c36:	1e7b      	subs	r3, r7, #1
   16c38:	428c      	cmp	r4, r1
   16c3a:	d82d      	bhi.n	16c98 <__udivdi3+0x374>
   16c3c:	4589      	cmp	r9, r1
   16c3e:	d92b      	bls.n	16c98 <__udivdi3+0x374>
   16c40:	3f02      	subs	r7, #2
   16c42:	1909      	adds	r1, r1, r4
   16c44:	464b      	mov	r3, r9
   16c46:	1acb      	subs	r3, r1, r3
   16c48:	042d      	lsls	r5, r5, #16
   16c4a:	4699      	mov	r9, r3
   16c4c:	432f      	orrs	r7, r5
   16c4e:	e6fd      	b.n	16a4c <__udivdi3+0x128>
   16c50:	1c1e      	adds	r6, r3, #0
   16c52:	e6ca      	b.n	169ea <__udivdi3+0xc6>
   16c54:	1c1f      	adds	r7, r3, #0
   16c56:	e6aa      	b.n	169ae <__udivdi3+0x8a>
   16c58:	4699      	mov	r9, r3
   16c5a:	e733      	b.n	16ac4 <__udivdi3+0x1a0>
   16c5c:	4661      	mov	r1, ip
   16c5e:	040a      	lsls	r2, r1, #16
   16c60:	041b      	lsls	r3, r3, #16
   16c62:	0c12      	lsrs	r2, r2, #16
   16c64:	189b      	adds	r3, r3, r2
   16c66:	40a6      	lsls	r6, r4
   16c68:	429e      	cmp	r6, r3
   16c6a:	d2a0      	bcs.n	16bae <__udivdi3+0x28a>
   16c6c:	3801      	subs	r0, #1
   16c6e:	2700      	movs	r7, #0
   16c70:	e6be      	b.n	169f0 <__udivdi3+0xcc>
   16c72:	2700      	movs	r7, #0
   16c74:	2001      	movs	r0, #1
   16c76:	e6bb      	b.n	169f0 <__udivdi3+0xcc>
   16c78:	458a      	cmp	sl, r1
   16c7a:	d800      	bhi.n	16c7e <__udivdi3+0x35a>
   16c7c:	e775      	b.n	16b6a <__udivdi3+0x246>
   16c7e:	2302      	movs	r3, #2
   16c80:	425b      	negs	r3, r3
   16c82:	4498      	add	r8, r3
   16c84:	19c9      	adds	r1, r1, r7
   16c86:	e771      	b.n	16b6c <__udivdi3+0x248>
   16c88:	458b      	cmp	fp, r1
   16c8a:	d800      	bhi.n	16c8e <__udivdi3+0x36a>
   16c8c:	e750      	b.n	16b30 <__udivdi3+0x20c>
   16c8e:	2302      	movs	r3, #2
   16c90:	425b      	negs	r3, r3
   16c92:	4499      	add	r9, r3
   16c94:	19c9      	adds	r1, r1, r7
   16c96:	e74c      	b.n	16b32 <__udivdi3+0x20e>
   16c98:	1c1f      	adds	r7, r3, #0
   16c9a:	e7d3      	b.n	16c44 <__udivdi3+0x320>
   16c9c:	1c1d      	adds	r5, r3, #0
   16c9e:	e7b3      	b.n	16c08 <__udivdi3+0x2e4>
   16ca0:	3d02      	subs	r5, #2
   16ca2:	1900      	adds	r0, r0, r4
   16ca4:	e6ec      	b.n	16a80 <__udivdi3+0x15c>
   16ca6:	46c0      	nop			; (mov r8, r8)

00016ca8 <__errno>:
   16ca8:	4b01      	ldr	r3, [pc, #4]	; (16cb0 <__errno+0x8>)
   16caa:	6818      	ldr	r0, [r3, #0]
   16cac:	4770      	bx	lr
   16cae:	46c0      	nop			; (mov r8, r8)
   16cb0:	20000470 	.word	0x20000470

00016cb4 <__libc_init_array>:
   16cb4:	b570      	push	{r4, r5, r6, lr}
   16cb6:	4e0d      	ldr	r6, [pc, #52]	; (16cec <__libc_init_array+0x38>)
   16cb8:	4d0d      	ldr	r5, [pc, #52]	; (16cf0 <__libc_init_array+0x3c>)
   16cba:	2400      	movs	r4, #0
   16cbc:	1bad      	subs	r5, r5, r6
   16cbe:	10ad      	asrs	r5, r5, #2
   16cc0:	d005      	beq.n	16cce <__libc_init_array+0x1a>
   16cc2:	00a3      	lsls	r3, r4, #2
   16cc4:	58f3      	ldr	r3, [r6, r3]
   16cc6:	3401      	adds	r4, #1
   16cc8:	4798      	blx	r3
   16cca:	42a5      	cmp	r5, r4
   16ccc:	d1f9      	bne.n	16cc2 <__libc_init_array+0xe>
   16cce:	f000 fc2f 	bl	17530 <_init>
   16cd2:	4e08      	ldr	r6, [pc, #32]	; (16cf4 <__libc_init_array+0x40>)
   16cd4:	4d08      	ldr	r5, [pc, #32]	; (16cf8 <__libc_init_array+0x44>)
   16cd6:	2400      	movs	r4, #0
   16cd8:	1bad      	subs	r5, r5, r6
   16cda:	10ad      	asrs	r5, r5, #2
   16cdc:	d005      	beq.n	16cea <__libc_init_array+0x36>
   16cde:	00a3      	lsls	r3, r4, #2
   16ce0:	58f3      	ldr	r3, [r6, r3]
   16ce2:	3401      	adds	r4, #1
   16ce4:	4798      	blx	r3
   16ce6:	42a5      	cmp	r5, r4
   16ce8:	d1f9      	bne.n	16cde <__libc_init_array+0x2a>
   16cea:	bd70      	pop	{r4, r5, r6, pc}
   16cec:	0001753c 	.word	0x0001753c
   16cf0:	0001753c 	.word	0x0001753c
   16cf4:	0001753c 	.word	0x0001753c
   16cf8:	00017544 	.word	0x00017544

00016cfc <memcpy>:
   16cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cfe:	2a0f      	cmp	r2, #15
   16d00:	d935      	bls.n	16d6e <memcpy+0x72>
   16d02:	1c03      	adds	r3, r0, #0
   16d04:	430b      	orrs	r3, r1
   16d06:	079c      	lsls	r4, r3, #30
   16d08:	d135      	bne.n	16d76 <memcpy+0x7a>
   16d0a:	1c16      	adds	r6, r2, #0
   16d0c:	3e10      	subs	r6, #16
   16d0e:	0936      	lsrs	r6, r6, #4
   16d10:	0135      	lsls	r5, r6, #4
   16d12:	1945      	adds	r5, r0, r5
   16d14:	3510      	adds	r5, #16
   16d16:	1c0c      	adds	r4, r1, #0
   16d18:	1c03      	adds	r3, r0, #0
   16d1a:	6827      	ldr	r7, [r4, #0]
   16d1c:	601f      	str	r7, [r3, #0]
   16d1e:	6867      	ldr	r7, [r4, #4]
   16d20:	605f      	str	r7, [r3, #4]
   16d22:	68a7      	ldr	r7, [r4, #8]
   16d24:	609f      	str	r7, [r3, #8]
   16d26:	68e7      	ldr	r7, [r4, #12]
   16d28:	3410      	adds	r4, #16
   16d2a:	60df      	str	r7, [r3, #12]
   16d2c:	3310      	adds	r3, #16
   16d2e:	42ab      	cmp	r3, r5
   16d30:	d1f3      	bne.n	16d1a <memcpy+0x1e>
   16d32:	1c73      	adds	r3, r6, #1
   16d34:	011b      	lsls	r3, r3, #4
   16d36:	18c5      	adds	r5, r0, r3
   16d38:	18c9      	adds	r1, r1, r3
   16d3a:	230f      	movs	r3, #15
   16d3c:	4013      	ands	r3, r2
   16d3e:	2b03      	cmp	r3, #3
   16d40:	d91b      	bls.n	16d7a <memcpy+0x7e>
   16d42:	1f1c      	subs	r4, r3, #4
   16d44:	08a4      	lsrs	r4, r4, #2
   16d46:	3401      	adds	r4, #1
   16d48:	00a4      	lsls	r4, r4, #2
   16d4a:	2300      	movs	r3, #0
   16d4c:	58ce      	ldr	r6, [r1, r3]
   16d4e:	50ee      	str	r6, [r5, r3]
   16d50:	3304      	adds	r3, #4
   16d52:	42a3      	cmp	r3, r4
   16d54:	d1fa      	bne.n	16d4c <memcpy+0x50>
   16d56:	18ed      	adds	r5, r5, r3
   16d58:	18c9      	adds	r1, r1, r3
   16d5a:	2303      	movs	r3, #3
   16d5c:	401a      	ands	r2, r3
   16d5e:	d005      	beq.n	16d6c <memcpy+0x70>
   16d60:	2300      	movs	r3, #0
   16d62:	5ccc      	ldrb	r4, [r1, r3]
   16d64:	54ec      	strb	r4, [r5, r3]
   16d66:	3301      	adds	r3, #1
   16d68:	4293      	cmp	r3, r2
   16d6a:	d1fa      	bne.n	16d62 <memcpy+0x66>
   16d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d6e:	1c05      	adds	r5, r0, #0
   16d70:	2a00      	cmp	r2, #0
   16d72:	d1f5      	bne.n	16d60 <memcpy+0x64>
   16d74:	e7fa      	b.n	16d6c <memcpy+0x70>
   16d76:	1c05      	adds	r5, r0, #0
   16d78:	e7f2      	b.n	16d60 <memcpy+0x64>
   16d7a:	1c1a      	adds	r2, r3, #0
   16d7c:	e7f8      	b.n	16d70 <memcpy+0x74>
   16d7e:	46c0      	nop			; (mov r8, r8)

00016d80 <memset>:
   16d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d82:	0783      	lsls	r3, r0, #30
   16d84:	d046      	beq.n	16e14 <memset+0x94>
   16d86:	1e54      	subs	r4, r2, #1
   16d88:	2a00      	cmp	r2, #0
   16d8a:	d042      	beq.n	16e12 <memset+0x92>
   16d8c:	b2ce      	uxtb	r6, r1
   16d8e:	1c03      	adds	r3, r0, #0
   16d90:	2503      	movs	r5, #3
   16d92:	e003      	b.n	16d9c <memset+0x1c>
   16d94:	1e62      	subs	r2, r4, #1
   16d96:	2c00      	cmp	r4, #0
   16d98:	d03b      	beq.n	16e12 <memset+0x92>
   16d9a:	1c14      	adds	r4, r2, #0
   16d9c:	3301      	adds	r3, #1
   16d9e:	1e5a      	subs	r2, r3, #1
   16da0:	7016      	strb	r6, [r2, #0]
   16da2:	422b      	tst	r3, r5
   16da4:	d1f6      	bne.n	16d94 <memset+0x14>
   16da6:	2c03      	cmp	r4, #3
   16da8:	d92b      	bls.n	16e02 <memset+0x82>
   16daa:	25ff      	movs	r5, #255	; 0xff
   16dac:	400d      	ands	r5, r1
   16dae:	022a      	lsls	r2, r5, #8
   16db0:	4315      	orrs	r5, r2
   16db2:	042a      	lsls	r2, r5, #16
   16db4:	4315      	orrs	r5, r2
   16db6:	2c0f      	cmp	r4, #15
   16db8:	d915      	bls.n	16de6 <memset+0x66>
   16dba:	1c27      	adds	r7, r4, #0
   16dbc:	3f10      	subs	r7, #16
   16dbe:	093f      	lsrs	r7, r7, #4
   16dc0:	1c1e      	adds	r6, r3, #0
   16dc2:	013a      	lsls	r2, r7, #4
   16dc4:	3610      	adds	r6, #16
   16dc6:	18b6      	adds	r6, r6, r2
   16dc8:	1c1a      	adds	r2, r3, #0
   16dca:	6015      	str	r5, [r2, #0]
   16dcc:	6055      	str	r5, [r2, #4]
   16dce:	6095      	str	r5, [r2, #8]
   16dd0:	60d5      	str	r5, [r2, #12]
   16dd2:	3210      	adds	r2, #16
   16dd4:	42b2      	cmp	r2, r6
   16dd6:	d1f8      	bne.n	16dca <memset+0x4a>
   16dd8:	3701      	adds	r7, #1
   16dda:	013f      	lsls	r7, r7, #4
   16ddc:	220f      	movs	r2, #15
   16dde:	19db      	adds	r3, r3, r7
   16de0:	4014      	ands	r4, r2
   16de2:	2c03      	cmp	r4, #3
   16de4:	d90d      	bls.n	16e02 <memset+0x82>
   16de6:	1f27      	subs	r7, r4, #4
   16de8:	08bf      	lsrs	r7, r7, #2
   16dea:	00ba      	lsls	r2, r7, #2
   16dec:	1d1e      	adds	r6, r3, #4
   16dee:	18b6      	adds	r6, r6, r2
   16df0:	1c1a      	adds	r2, r3, #0
   16df2:	c220      	stmia	r2!, {r5}
   16df4:	42b2      	cmp	r2, r6
   16df6:	d1fc      	bne.n	16df2 <memset+0x72>
   16df8:	3701      	adds	r7, #1
   16dfa:	00bf      	lsls	r7, r7, #2
   16dfc:	2203      	movs	r2, #3
   16dfe:	19db      	adds	r3, r3, r7
   16e00:	4014      	ands	r4, r2
   16e02:	2c00      	cmp	r4, #0
   16e04:	d005      	beq.n	16e12 <memset+0x92>
   16e06:	191c      	adds	r4, r3, r4
   16e08:	b2c9      	uxtb	r1, r1
   16e0a:	7019      	strb	r1, [r3, #0]
   16e0c:	3301      	adds	r3, #1
   16e0e:	42a3      	cmp	r3, r4
   16e10:	d1fb      	bne.n	16e0a <memset+0x8a>
   16e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e14:	1c14      	adds	r4, r2, #0
   16e16:	1c03      	adds	r3, r0, #0
   16e18:	e7c5      	b.n	16da6 <memset+0x26>
   16e1a:	46c0      	nop			; (mov r8, r8)

00016e1c <register_fini>:
   16e1c:	b508      	push	{r3, lr}
   16e1e:	4b03      	ldr	r3, [pc, #12]	; (16e2c <register_fini+0x10>)
   16e20:	2b00      	cmp	r3, #0
   16e22:	d002      	beq.n	16e2a <register_fini+0xe>
   16e24:	4802      	ldr	r0, [pc, #8]	; (16e30 <register_fini+0x14>)
   16e26:	f000 f805 	bl	16e34 <atexit>
   16e2a:	bd08      	pop	{r3, pc}
   16e2c:	00000000 	.word	0x00000000
   16e30:	00016e45 	.word	0x00016e45

00016e34 <atexit>:
   16e34:	b508      	push	{r3, lr}
   16e36:	1c01      	adds	r1, r0, #0
   16e38:	2200      	movs	r2, #0
   16e3a:	2000      	movs	r0, #0
   16e3c:	2300      	movs	r3, #0
   16e3e:	f000 f819 	bl	16e74 <__register_exitproc>
   16e42:	bd08      	pop	{r3, pc}

00016e44 <__libc_fini_array>:
   16e44:	b538      	push	{r3, r4, r5, lr}
   16e46:	4b09      	ldr	r3, [pc, #36]	; (16e6c <__libc_fini_array+0x28>)
   16e48:	4d09      	ldr	r5, [pc, #36]	; (16e70 <__libc_fini_array+0x2c>)
   16e4a:	1aed      	subs	r5, r5, r3
   16e4c:	10ad      	asrs	r5, r5, #2
   16e4e:	d009      	beq.n	16e64 <__libc_fini_array+0x20>
   16e50:	3d01      	subs	r5, #1
   16e52:	00ac      	lsls	r4, r5, #2
   16e54:	18e4      	adds	r4, r4, r3
   16e56:	e000      	b.n	16e5a <__libc_fini_array+0x16>
   16e58:	3d01      	subs	r5, #1
   16e5a:	6823      	ldr	r3, [r4, #0]
   16e5c:	4798      	blx	r3
   16e5e:	3c04      	subs	r4, #4
   16e60:	2d00      	cmp	r5, #0
   16e62:	d1f9      	bne.n	16e58 <__libc_fini_array+0x14>
   16e64:	f000 fb6e 	bl	17544 <_fini>
   16e68:	bd38      	pop	{r3, r4, r5, pc}
   16e6a:	46c0      	nop			; (mov r8, r8)
   16e6c:	00017550 	.word	0x00017550
   16e70:	00017554 	.word	0x00017554

00016e74 <__register_exitproc>:
   16e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e76:	464f      	mov	r7, r9
   16e78:	4646      	mov	r6, r8
   16e7a:	b4c0      	push	{r6, r7}
   16e7c:	4698      	mov	r8, r3
   16e7e:	4b2b      	ldr	r3, [pc, #172]	; (16f2c <__register_exitproc+0xb8>)
   16e80:	25a4      	movs	r5, #164	; 0xa4
   16e82:	681b      	ldr	r3, [r3, #0]
   16e84:	006d      	lsls	r5, r5, #1
   16e86:	595c      	ldr	r4, [r3, r5]
   16e88:	b083      	sub	sp, #12
   16e8a:	1c06      	adds	r6, r0, #0
   16e8c:	1c0f      	adds	r7, r1, #0
   16e8e:	4691      	mov	r9, r2
   16e90:	9301      	str	r3, [sp, #4]
   16e92:	2c00      	cmp	r4, #0
   16e94:	d044      	beq.n	16f20 <__register_exitproc+0xac>
   16e96:	6865      	ldr	r5, [r4, #4]
   16e98:	2d1f      	cmp	r5, #31
   16e9a:	dd1a      	ble.n	16ed2 <__register_exitproc+0x5e>
   16e9c:	4b24      	ldr	r3, [pc, #144]	; (16f30 <__register_exitproc+0xbc>)
   16e9e:	2b00      	cmp	r3, #0
   16ea0:	d102      	bne.n	16ea8 <__register_exitproc+0x34>
   16ea2:	2001      	movs	r0, #1
   16ea4:	4240      	negs	r0, r0
   16ea6:	e01c      	b.n	16ee2 <__register_exitproc+0x6e>
   16ea8:	20c8      	movs	r0, #200	; 0xc8
   16eaa:	0040      	lsls	r0, r0, #1
   16eac:	e000      	b.n	16eb0 <__register_exitproc+0x3c>
   16eae:	bf00      	nop
   16eb0:	1e04      	subs	r4, r0, #0
   16eb2:	d0f6      	beq.n	16ea2 <__register_exitproc+0x2e>
   16eb4:	2500      	movs	r5, #0
   16eb6:	6045      	str	r5, [r0, #4]
   16eb8:	23a4      	movs	r3, #164	; 0xa4
   16eba:	9801      	ldr	r0, [sp, #4]
   16ebc:	005b      	lsls	r3, r3, #1
   16ebe:	58c0      	ldr	r0, [r0, r3]
   16ec0:	9901      	ldr	r1, [sp, #4]
   16ec2:	6020      	str	r0, [r4, #0]
   16ec4:	50cc      	str	r4, [r1, r3]
   16ec6:	23c4      	movs	r3, #196	; 0xc4
   16ec8:	005b      	lsls	r3, r3, #1
   16eca:	50e5      	str	r5, [r4, r3]
   16ecc:	23c6      	movs	r3, #198	; 0xc6
   16ece:	005b      	lsls	r3, r3, #1
   16ed0:	50e5      	str	r5, [r4, r3]
   16ed2:	2e00      	cmp	r6, #0
   16ed4:	d10a      	bne.n	16eec <__register_exitproc+0x78>
   16ed6:	1c6b      	adds	r3, r5, #1
   16ed8:	3502      	adds	r5, #2
   16eda:	00ad      	lsls	r5, r5, #2
   16edc:	6063      	str	r3, [r4, #4]
   16ede:	2000      	movs	r0, #0
   16ee0:	512f      	str	r7, [r5, r4]
   16ee2:	b003      	add	sp, #12
   16ee4:	bc0c      	pop	{r2, r3}
   16ee6:	4690      	mov	r8, r2
   16ee8:	4699      	mov	r9, r3
   16eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16eec:	00ab      	lsls	r3, r5, #2
   16eee:	18e3      	adds	r3, r4, r3
   16ef0:	2288      	movs	r2, #136	; 0x88
   16ef2:	4648      	mov	r0, r9
   16ef4:	5098      	str	r0, [r3, r2]
   16ef6:	20c4      	movs	r0, #196	; 0xc4
   16ef8:	0040      	lsls	r0, r0, #1
   16efa:	1822      	adds	r2, r4, r0
   16efc:	6810      	ldr	r0, [r2, #0]
   16efe:	2101      	movs	r1, #1
   16f00:	40a9      	lsls	r1, r5
   16f02:	4308      	orrs	r0, r1
   16f04:	6010      	str	r0, [r2, #0]
   16f06:	2284      	movs	r2, #132	; 0x84
   16f08:	0052      	lsls	r2, r2, #1
   16f0a:	4640      	mov	r0, r8
   16f0c:	5098      	str	r0, [r3, r2]
   16f0e:	2e02      	cmp	r6, #2
   16f10:	d1e1      	bne.n	16ed6 <__register_exitproc+0x62>
   16f12:	22c6      	movs	r2, #198	; 0xc6
   16f14:	0052      	lsls	r2, r2, #1
   16f16:	18a3      	adds	r3, r4, r2
   16f18:	6818      	ldr	r0, [r3, #0]
   16f1a:	4301      	orrs	r1, r0
   16f1c:	6019      	str	r1, [r3, #0]
   16f1e:	e7da      	b.n	16ed6 <__register_exitproc+0x62>
   16f20:	1c1c      	adds	r4, r3, #0
   16f22:	344d      	adds	r4, #77	; 0x4d
   16f24:	34ff      	adds	r4, #255	; 0xff
   16f26:	515c      	str	r4, [r3, r5]
   16f28:	e7b5      	b.n	16e96 <__register_exitproc+0x22>
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	0001752c 	.word	0x0001752c
   16f30:	00000000 	.word	0x00000000
   16f34:	00000002 	.word	0x00000002
   16f38:	00000003 	.word	0x00000003
   16f3c:	00000028 	.word	0x00000028
   16f40:	00000029 	.word	0x00000029
   16f44:	00000004 	.word	0x00000004
   16f48:	00000005 	.word	0x00000005
   16f4c:	00000006 	.word	0x00000006
   16f50:	00000007 	.word	0x00000007
   16f54:	00000020 	.word	0x00000020
   16f58:	00000021 	.word	0x00000021
   16f5c:	00000022 	.word	0x00000022
   16f60:	00000023 	.word	0x00000023
   16f64:	00000024 	.word	0x00000024
   16f68:	00000025 	.word	0x00000025
   16f6c:	00000026 	.word	0x00000026
   16f70:	00000027 	.word	0x00000027
   16f74:	00000008 	.word	0x00000008
   16f78:	00000009 	.word	0x00000009
   16f7c:	0000000a 	.word	0x0000000a
   16f80:	0000000b 	.word	0x0000000b
   16f84:	00003600 	.word	0x00003600
   16f88:	00003606 	.word	0x00003606
   16f8c:	00003606 	.word	0x00003606
   16f90:	00003606 	.word	0x00003606
   16f94:	00003606 	.word	0x00003606
   16f98:	00003606 	.word	0x00003606
   16f9c:	00003606 	.word	0x00003606
   16fa0:	00003606 	.word	0x00003606
   16fa4:	00003606 	.word	0x00003606
   16fa8:	00003606 	.word	0x00003606
   16fac:	00003606 	.word	0x00003606
   16fb0:	00003606 	.word	0x00003606
   16fb4:	00003606 	.word	0x00003606
   16fb8:	00003606 	.word	0x00003606
   16fbc:	00003606 	.word	0x00003606
   16fc0:	00003606 	.word	0x00003606
   16fc4:	000035ca 	.word	0x000035ca
   16fc8:	00003606 	.word	0x00003606
   16fcc:	00003606 	.word	0x00003606
   16fd0:	00003606 	.word	0x00003606
   16fd4:	00003606 	.word	0x00003606
   16fd8:	00003606 	.word	0x00003606
   16fdc:	00003606 	.word	0x00003606
   16fe0:	00003606 	.word	0x00003606
   16fe4:	00003606 	.word	0x00003606
   16fe8:	00003606 	.word	0x00003606
   16fec:	00003606 	.word	0x00003606
   16ff0:	00003606 	.word	0x00003606
   16ff4:	00003606 	.word	0x00003606
   16ff8:	00003606 	.word	0x00003606
   16ffc:	00003606 	.word	0x00003606
   17000:	00003606 	.word	0x00003606
   17004:	000035fa 	.word	0x000035fa
   17008:	00003606 	.word	0x00003606
   1700c:	00003606 	.word	0x00003606
   17010:	00003606 	.word	0x00003606
   17014:	00003606 	.word	0x00003606
   17018:	00003606 	.word	0x00003606
   1701c:	00003606 	.word	0x00003606
   17020:	00003606 	.word	0x00003606
   17024:	00003606 	.word	0x00003606
   17028:	00003606 	.word	0x00003606
   1702c:	00003606 	.word	0x00003606
   17030:	00003606 	.word	0x00003606
   17034:	00003606 	.word	0x00003606
   17038:	00003606 	.word	0x00003606
   1703c:	00003606 	.word	0x00003606
   17040:	00003606 	.word	0x00003606
   17044:	000035f4 	.word	0x000035f4
   17048:	00003574 	.word	0x00003574
   1704c:	0000358a 	.word	0x0000358a
   17050:	000035a0 	.word	0x000035a0
   17054:	0000355a 	.word	0x0000355a
   17058:	00004556 	.word	0x00004556
   1705c:	00004556 	.word	0x00004556
   17060:	0000454a 	.word	0x0000454a
   17064:	00004556 	.word	0x00004556
   17068:	0000454a 	.word	0x0000454a
   1706c:	0000452a 	.word	0x0000452a
   17070:	0000452a 	.word	0x0000452a
   17074:	00004556 	.word	0x00004556
   17078:	00004556 	.word	0x00004556
   1707c:	00004556 	.word	0x00004556
   17080:	00004556 	.word	0x00004556
   17084:	00004556 	.word	0x00004556
   17088:	00004556 	.word	0x00004556
   1708c:	00004556 	.word	0x00004556
   17090:	00004556 	.word	0x00004556
   17094:	00004556 	.word	0x00004556
   17098:	00004556 	.word	0x00004556
   1709c:	00004556 	.word	0x00004556
   170a0:	00004556 	.word	0x00004556
   170a4:	00004556 	.word	0x00004556
   170a8:	00004556 	.word	0x00004556
   170ac:	00004556 	.word	0x00004556
   170b0:	00004556 	.word	0x00004556
   170b4:	00004556 	.word	0x00004556
   170b8:	00004556 	.word	0x00004556
   170bc:	00004556 	.word	0x00004556
   170c0:	00004556 	.word	0x00004556
   170c4:	00004556 	.word	0x00004556
   170c8:	00004556 	.word	0x00004556
   170cc:	00004556 	.word	0x00004556
   170d0:	00004556 	.word	0x00004556
   170d4:	00004556 	.word	0x00004556
   170d8:	00004556 	.word	0x00004556
   170dc:	00004556 	.word	0x00004556
   170e0:	00004556 	.word	0x00004556
   170e4:	00004556 	.word	0x00004556
   170e8:	00004556 	.word	0x00004556
   170ec:	00004556 	.word	0x00004556
   170f0:	00004556 	.word	0x00004556
   170f4:	00004556 	.word	0x00004556
   170f8:	00004556 	.word	0x00004556
   170fc:	00004556 	.word	0x00004556
   17100:	00004556 	.word	0x00004556
   17104:	00004556 	.word	0x00004556
   17108:	00004556 	.word	0x00004556
   1710c:	00004556 	.word	0x00004556
   17110:	00004556 	.word	0x00004556
   17114:	00004556 	.word	0x00004556
   17118:	00004556 	.word	0x00004556
   1711c:	00004556 	.word	0x00004556
   17120:	00004556 	.word	0x00004556
   17124:	00004556 	.word	0x00004556
   17128:	00004556 	.word	0x00004556
   1712c:	00004556 	.word	0x00004556
   17130:	00004556 	.word	0x00004556
   17134:	00004556 	.word	0x00004556
   17138:	00004556 	.word	0x00004556
   1713c:	00004556 	.word	0x00004556
   17140:	00004556 	.word	0x00004556
   17144:	00004556 	.word	0x00004556
   17148:	00004556 	.word	0x00004556
   1714c:	00004556 	.word	0x00004556
   17150:	00004556 	.word	0x00004556
   17154:	00004556 	.word	0x00004556
   17158:	0000454a 	.word	0x0000454a
   1715c:	0000454a 	.word	0x0000454a
   17160:	0000455a 	.word	0x0000455a
   17164:	0000455a 	.word	0x0000455a
   17168:	0000455a 	.word	0x0000455a
   1716c:	0000455a 	.word	0x0000455a
   17170:	42002000 	.word	0x42002000
   17174:	42002400 	.word	0x42002400
   17178:	42002800 	.word	0x42002800
   1717c:	42002c00 	.word	0x42002c00
   17180:	42003000 	.word	0x42003000
   17184:	42003400 	.word	0x42003400
   17188:	42003800 	.word	0x42003800
   1718c:	42003c00 	.word	0x42003c00
   17190:	14141313 	.word	0x14141313
   17194:	16161515 	.word	0x16161515
   17198:	02000100 	.word	0x02000100
   1719c:	08000400 	.word	0x08000400
   171a0:	20001000 	.word	0x20001000
   171a4:	80004000 	.word	0x80004000
   171a8:	00006a9c 	.word	0x00006a9c
   171ac:	00006a88 	.word	0x00006a88
   171b0:	00006a88 	.word	0x00006a88
   171b4:	00006a9c 	.word	0x00006a9c
   171b8:	00006ac4 	.word	0x00006ac4
   171bc:	00006ac4 	.word	0x00006ac4
   171c0:	00006a88 	.word	0x00006a88
   171c4:	00006b56 	.word	0x00006b56
   171c8:	00006ab0 	.word	0x00006ab0
   171cc:	00006ad8 	.word	0x00006ad8
   171d0:	00006b3a 	.word	0x00006b3a
   171d4:	00006ad8 	.word	0x00006ad8
   171d8:	00006b3a 	.word	0x00006b3a
   171dc:	00006b3a 	.word	0x00006b3a
   171e0:	00006b56 	.word	0x00006b56
   171e4:	00006b56 	.word	0x00006b56
   171e8:	00006b3a 	.word	0x00006b3a
   171ec:	00006b48 	.word	0x00006b48
   171f0:	00006b48 	.word	0x00006b48
   171f4:	00006d50 	.word	0x00006d50
   171f8:	00006d44 	.word	0x00006d44
   171fc:	00006ccc 	.word	0x00006ccc
   17200:	00006e9c 	.word	0x00006e9c
   17204:	00006f16 	.word	0x00006f16
   17208:	00007080 	.word	0x00007080
   1720c:	00006d00 	.word	0x00006d00
   17210:	0000740e 	.word	0x0000740e
   17214:	0000744e 	.word	0x0000744e
   17218:	00007670 	.word	0x00007670
   1721c:	00007880 	.word	0x00007880
   17220:	000075bc 	.word	0x000075bc
   17224:	00007bea 	.word	0x00007bea
   17228:	00007ace 	.word	0x00007ace
   1722c:	00006f5e 	.word	0x00006f5e
   17230:	0000703c 	.word	0x0000703c
   17234:	00007df4 	.word	0x00007df4
   17238:	00007ee2 	.word	0x00007ee2
   1723c:	000080c8 	.word	0x000080c8
   17240:	00007df4 	.word	0x00007df4
   17244:	000081c0 	.word	0x000081c0
   17248:	000083cc 	.word	0x000083cc
   1724c:	00007df4 	.word	0x00007df4
   17250:	00007df4 	.word	0x00007df4
   17254:	000074a6 	.word	0x000074a6
   17258:	000074ec 	.word	0x000074ec
   1725c:	000074cc 	.word	0x000074cc
   17260:	0000712a 	.word	0x0000712a
   17264:	00007236 	.word	0x00007236
   17268:	0000712a 	.word	0x0000712a
   1726c:	00007236 	.word	0x00007236
   17270:	0000712a 	.word	0x0000712a
   17274:	00007236 	.word	0x00007236
   17278:	0000712a 	.word	0x0000712a
   1727c:	00007236 	.word	0x00007236
   17280:	0000712a 	.word	0x0000712a
   17284:	00007236 	.word	0x00007236
   17288:	0000a718 	.word	0x0000a718
   1728c:	0000a722 	.word	0x0000a722
   17290:	0000a72c 	.word	0x0000a72c
   17294:	0000a736 	.word	0x0000a736
   17298:	0000a740 	.word	0x0000a740
   1729c:	0000a8fa 	.word	0x0000a8fa
   172a0:	0000a906 	.word	0x0000a906
   172a4:	0000a912 	.word	0x0000a912
   172a8:	0000a91e 	.word	0x0000a91e
   172ac:	0000a92a 	.word	0x0000a92a

000172b0 <SwTaskList>:
   172b0:	00005ed5 00008c69 00008c99 0000ac61     .^..i.......a...
   172c0:	0000bd21 0000a7b5 00006c75 0000dc11     !.......ul......
   172d0:	0000bb75 0000efe1 0000fd15 0000dc11     u...............
   172e0:	0000dc11 0000e399 0000af7d 0000dc11     ........}.......
   172f0:	0000eb0c 0000eb2a 0000eaee 0000ea5c     ....*.......\...
   17300:	0000eaaa 0000eb2a 0000ea8c              ....*.......

0001730c <HoppingFrequencies>:
   1730c:	36a0ae20 370b7de0 360817a0 36aff060      ..6.}.7...6`..6
   1731c:	36aff060 362e3d40 35d2afc0 36990d00     `..6@=.6...5...6
   1732c:	3663a520 3731a380 37226140 3635de60      .c6..17@a"7`.56
   1733c:	366b4640 36bf32a0 36bf32a0 35cb0ea0     @Fk6.2.6.2.6...5
   1734c:	365462e0 373944a0 35cb0ea0 36f49a80     .bT6.D97...5...6
   1735c:	37131f00 35da50e0 366b4640 36f49a80     ...7.P.5@Fk6...6
   1736c:	3731a380 363d7f80 36d61600 36fc3ba0     ..17..=6...6.;.6
   1737c:	364cc1c0 36f49a80 3635de60 3731a380     ..L6...6`.56..17
   1738c:	36f49a80 36b79180 372a0260 361efb00     ...6...6`.*7...6
   1739c:	36aff060 373944a0 36269c20 36990d00     `..6.D97 .&6...6
   173ac:	35f8d560 36990d00 35d2afc0 35f13440     `..5...6...5@4.5
   173bc:	3689cac0 366b4640 360fb8c0 363d7f80     ...6@Fk6...6..=6
   173cc:	373944a0 372a0260 364cc1c0 42000800     .D97`.*7..L6...B
   173dc:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   173ec:	42001c00 0a090807 00000c0b 0001264a     ...B........J&..
   173fc:	000126ae 000126ae 0001266e 00012668     .&...&..n&..h&..
   1740c:	00012674 00012650 0001267a 00012874     t&..P&..z&..t(..
   1741c:	000128ae 000128ae 000128aa 00012866     .(...(...(..f(..
   1742c:	00012886 00012856 00012898 000128fa     .(..V(...(...(..
   1743c:	00012910 00012910 0001290c 000128f4     .)...)...)...(..
   1744c:	00012900 000128ee 00012906 00776f70     .)...(...)..pow.
   1745c:	00000000                                ....

00017460 <dp_h>:
	...
   17468:	40000000 3fe2b803                       ...@...?

00017470 <dp_l>:
	...
   17478:	43cfd006 3e4cfdeb                       ...C..L>

00017480 <bp>:
   17480:	00000000 3ff00000 00000000 3ff80000     .......?.......?
	...

00017498 <TWO52>:
   17498:	00000000 43300000 00000000 c3300000     ......0C......0.
   174a8:	00015170 0001510c 00015154 0001503a     pQ...Q..TQ..:P..
   174b8:	00015154 00015148 00015154 0001503a     TQ..HQ..TQ..:P..
   174c8:	0001510c 0001510c 00015148 0001503a     .Q...Q..HQ..:P..
   174d8:	00015030 00015030 00015030 00015394     0P..0P..0P...S..
   174e8:	00015a40 00015c2e 00015c2e 00015a20     @Z...\...\.. Z..
   174f8:	0001590a 0001590a 00015a12 00015a20     .Y...Y...Z.. Z..
   17508:	0001590a 00015a12 0001590a 00015a20     .Y...Z...Y.. Z..
   17518:	00015908 00015908 00015908 00015c36     .Y...Y...Y..6\..
   17528:	00000043                                C...

0001752c <_global_impure_ptr>:
   1752c:	20000048                                H.. 

00017530 <_init>:
   17530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17532:	46c0      	nop			; (mov r8, r8)
   17534:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17536:	bc08      	pop	{r3}
   17538:	469e      	mov	lr, r3
   1753a:	4770      	bx	lr

0001753c <__init_array_start>:
   1753c:	00016e1d 	.word	0x00016e1d

00017540 <__frame_dummy_init_array_entry>:
   17540:	000031cd                                .1..

00017544 <_fini>:
   17544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17546:	46c0      	nop			; (mov r8, r8)
   17548:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1754a:	bc08      	pop	{r3}
   1754c:	469e      	mov	lr, r3
   1754e:	4770      	bx	lr

00017550 <__fini_array_start>:
   17550:	000031a5 	.word	0x000031a5
